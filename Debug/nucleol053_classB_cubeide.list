
nucleol053_classB_cubeide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e64  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c5c  08009f28  08009f28  00019f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ab84  0800ab84  0001ab84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ab8c  0800ab8c  0001ab8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ab90  0800ab90  0001ab90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000080  0800ab94  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .check_sum    00000014  0800ad70  0800ad70  0002ad70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000150  2000025c  2000025c  0003025c  2**2
                  ALLOC
  9 ._user_heap_stack 00000c14  200003ac  200003ac  0003025c  2**2
                  ALLOC
 10 ._user_classb 00000078  20000000  20000000  00030000  2**2
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002ad84  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb6e  00000000  00000000  0002adac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b6f  00000000  00000000  0003a91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  0003d490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  0003e280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ed4  00000000  00000000  0003eed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e09  00000000  00000000  00058da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098052  00000000  00000000  0006ebad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106bff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed8  00000000  00000000  00106c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000025c 	.word	0x2000025c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009f0c 	.word	0x08009f0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000260 	.word	0x20000260
 8000104:	08009f0c 	.word	0x08009f0c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f827 	bl	8001490 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff77 	bl	8001340 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f819 	bl	8001490 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f80f 	bl	8001490 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff9f 	bl	80013c4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff95 	bl	80013c4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f001 febe 	bl	80022e4 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f001 feb9 	bl	80022e4 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	469b      	mov	fp, r3
 800057a:	d433      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057c:	465a      	mov	r2, fp
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83a      	bhi.n	8000606 <__udivmoddi4+0xc2>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e078      	b.n	8000688 <__udivmoddi4+0x144>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e075      	b.n	800068e <__udivmoddi4+0x14a>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e028      	b.n	800060e <__udivmoddi4+0xca>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	4652      	mov	r2, sl
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	4641      	mov	r1, r8
 80005f0:	0013      	movs	r3, r2
 80005f2:	464a      	mov	r2, r9
 80005f4:	408a      	lsls	r2, r1
 80005f6:	0017      	movs	r7, r2
 80005f8:	4642      	mov	r2, r8
 80005fa:	431f      	orrs	r7, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	001e      	movs	r6, r3
 8000602:	42af      	cmp	r7, r5
 8000604:	d9c4      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000606:	2200      	movs	r2, #0
 8000608:	2300      	movs	r3, #0
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4643      	mov	r3, r8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0d9      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000614:	07fb      	lsls	r3, r7, #31
 8000616:	0872      	lsrs	r2, r6, #1
 8000618:	431a      	orrs	r2, r3
 800061a:	4646      	mov	r6, r8
 800061c:	087b      	lsrs	r3, r7, #1
 800061e:	e00e      	b.n	800063e <__udivmoddi4+0xfa>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d101      	bne.n	8000628 <__udivmoddi4+0xe4>
 8000624:	42a2      	cmp	r2, r4
 8000626:	d80c      	bhi.n	8000642 <__udivmoddi4+0xfe>
 8000628:	1aa4      	subs	r4, r4, r2
 800062a:	419d      	sbcs	r5, r3
 800062c:	2001      	movs	r0, #1
 800062e:	1924      	adds	r4, r4, r4
 8000630:	416d      	adcs	r5, r5
 8000632:	2100      	movs	r1, #0
 8000634:	3e01      	subs	r6, #1
 8000636:	1824      	adds	r4, r4, r0
 8000638:	414d      	adcs	r5, r1
 800063a:	2e00      	cmp	r6, #0
 800063c:	d006      	beq.n	800064c <__udivmoddi4+0x108>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d9ee      	bls.n	8000620 <__udivmoddi4+0xdc>
 8000642:	3e01      	subs	r6, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2e00      	cmp	r6, #0
 800064a:	d1f8      	bne.n	800063e <__udivmoddi4+0xfa>
 800064c:	9800      	ldr	r0, [sp, #0]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	465b      	mov	r3, fp
 8000652:	1900      	adds	r0, r0, r4
 8000654:	4169      	adcs	r1, r5
 8000656:	2b00      	cmp	r3, #0
 8000658:	db24      	blt.n	80006a4 <__udivmoddi4+0x160>
 800065a:	002b      	movs	r3, r5
 800065c:	465a      	mov	r2, fp
 800065e:	4644      	mov	r4, r8
 8000660:	40d3      	lsrs	r3, r2
 8000662:	002a      	movs	r2, r5
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	465b      	mov	r3, fp
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	db2a      	blt.n	80006c6 <__udivmoddi4+0x182>
 8000670:	0026      	movs	r6, r4
 8000672:	409e      	lsls	r6, r3
 8000674:	0033      	movs	r3, r6
 8000676:	0026      	movs	r6, r4
 8000678:	4647      	mov	r7, r8
 800067a:	40be      	lsls	r6, r7
 800067c:	0032      	movs	r2, r6
 800067e:	1a80      	subs	r0, r0, r2
 8000680:	4199      	sbcs	r1, r3
 8000682:	9000      	str	r0, [sp, #0]
 8000684:	9101      	str	r1, [sp, #4]
 8000686:	e79f      	b.n	80005c8 <__udivmoddi4+0x84>
 8000688:	42a3      	cmp	r3, r4
 800068a:	d8bc      	bhi.n	8000606 <__udivmoddi4+0xc2>
 800068c:	e783      	b.n	8000596 <__udivmoddi4+0x52>
 800068e:	4642      	mov	r2, r8
 8000690:	2320      	movs	r3, #32
 8000692:	2100      	movs	r1, #0
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	9100      	str	r1, [sp, #0]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	2201      	movs	r2, #1
 800069e:	40da      	lsrs	r2, r3
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	e786      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	4646      	mov	r6, r8
 80006ae:	409a      	lsls	r2, r3
 80006b0:	0023      	movs	r3, r4
 80006b2:	40f3      	lsrs	r3, r6
 80006b4:	4644      	mov	r4, r8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	002a      	movs	r2, r5
 80006ba:	40e2      	lsrs	r2, r4
 80006bc:	001c      	movs	r4, r3
 80006be:	465b      	mov	r3, fp
 80006c0:	0015      	movs	r5, r2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dad4      	bge.n	8000670 <__udivmoddi4+0x12c>
 80006c6:	4642      	mov	r2, r8
 80006c8:	002f      	movs	r7, r5
 80006ca:	2320      	movs	r3, #32
 80006cc:	0026      	movs	r6, r4
 80006ce:	4097      	lsls	r7, r2
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	40de      	lsrs	r6, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	4333      	orrs	r3, r6
 80006d8:	e7cd      	b.n	8000676 <__udivmoddi4+0x132>
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <__aeabi_dadd>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	4646      	mov	r6, r8
 80006e2:	46d6      	mov	lr, sl
 80006e4:	000d      	movs	r5, r1
 80006e6:	0004      	movs	r4, r0
 80006e8:	b5c0      	push	{r6, r7, lr}
 80006ea:	001f      	movs	r7, r3
 80006ec:	0011      	movs	r1, r2
 80006ee:	0328      	lsls	r0, r5, #12
 80006f0:	0f62      	lsrs	r2, r4, #29
 80006f2:	0a40      	lsrs	r0, r0, #9
 80006f4:	4310      	orrs	r0, r2
 80006f6:	007a      	lsls	r2, r7, #1
 80006f8:	0d52      	lsrs	r2, r2, #21
 80006fa:	00e3      	lsls	r3, r4, #3
 80006fc:	033c      	lsls	r4, r7, #12
 80006fe:	4691      	mov	r9, r2
 8000700:	0a64      	lsrs	r4, r4, #9
 8000702:	0ffa      	lsrs	r2, r7, #31
 8000704:	0f4f      	lsrs	r7, r1, #29
 8000706:	006e      	lsls	r6, r5, #1
 8000708:	4327      	orrs	r7, r4
 800070a:	4692      	mov	sl, r2
 800070c:	46b8      	mov	r8, r7
 800070e:	0d76      	lsrs	r6, r6, #21
 8000710:	0fed      	lsrs	r5, r5, #31
 8000712:	00c9      	lsls	r1, r1, #3
 8000714:	4295      	cmp	r5, r2
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x3e>
 8000718:	e099      	b.n	800084e <__aeabi_dadd+0x172>
 800071a:	464c      	mov	r4, r9
 800071c:	1b34      	subs	r4, r6, r4
 800071e:	46a4      	mov	ip, r4
 8000720:	2c00      	cmp	r4, #0
 8000722:	dc00      	bgt.n	8000726 <__aeabi_dadd+0x4a>
 8000724:	e07c      	b.n	8000820 <__aeabi_dadd+0x144>
 8000726:	464a      	mov	r2, r9
 8000728:	2a00      	cmp	r2, #0
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x52>
 800072c:	e0b8      	b.n	80008a0 <__aeabi_dadd+0x1c4>
 800072e:	4ac5      	ldr	r2, [pc, #788]	; (8000a44 <__aeabi_dadd+0x368>)
 8000730:	4296      	cmp	r6, r2
 8000732:	d100      	bne.n	8000736 <__aeabi_dadd+0x5a>
 8000734:	e11c      	b.n	8000970 <__aeabi_dadd+0x294>
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	003c      	movs	r4, r7
 800073a:	0412      	lsls	r2, r2, #16
 800073c:	4314      	orrs	r4, r2
 800073e:	46a0      	mov	r8, r4
 8000740:	4662      	mov	r2, ip
 8000742:	2a38      	cmp	r2, #56	; 0x38
 8000744:	dd00      	ble.n	8000748 <__aeabi_dadd+0x6c>
 8000746:	e161      	b.n	8000a0c <__aeabi_dadd+0x330>
 8000748:	2a1f      	cmp	r2, #31
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0x72>
 800074c:	e1cc      	b.n	8000ae8 <__aeabi_dadd+0x40c>
 800074e:	4664      	mov	r4, ip
 8000750:	2220      	movs	r2, #32
 8000752:	1b12      	subs	r2, r2, r4
 8000754:	4644      	mov	r4, r8
 8000756:	4094      	lsls	r4, r2
 8000758:	000f      	movs	r7, r1
 800075a:	46a1      	mov	r9, r4
 800075c:	4664      	mov	r4, ip
 800075e:	4091      	lsls	r1, r2
 8000760:	40e7      	lsrs	r7, r4
 8000762:	464c      	mov	r4, r9
 8000764:	1e4a      	subs	r2, r1, #1
 8000766:	4191      	sbcs	r1, r2
 8000768:	433c      	orrs	r4, r7
 800076a:	4642      	mov	r2, r8
 800076c:	4321      	orrs	r1, r4
 800076e:	4664      	mov	r4, ip
 8000770:	40e2      	lsrs	r2, r4
 8000772:	1a80      	subs	r0, r0, r2
 8000774:	1a5c      	subs	r4, r3, r1
 8000776:	42a3      	cmp	r3, r4
 8000778:	419b      	sbcs	r3, r3
 800077a:	425f      	negs	r7, r3
 800077c:	1bc7      	subs	r7, r0, r7
 800077e:	023b      	lsls	r3, r7, #8
 8000780:	d400      	bmi.n	8000784 <__aeabi_dadd+0xa8>
 8000782:	e0d0      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000784:	027f      	lsls	r7, r7, #9
 8000786:	0a7f      	lsrs	r7, r7, #9
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0xb2>
 800078c:	e0ff      	b.n	800098e <__aeabi_dadd+0x2b2>
 800078e:	0038      	movs	r0, r7
 8000790:	f001 fd8a 	bl	80022a8 <__clzsi2>
 8000794:	0001      	movs	r1, r0
 8000796:	3908      	subs	r1, #8
 8000798:	2320      	movs	r3, #32
 800079a:	0022      	movs	r2, r4
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	408f      	lsls	r7, r1
 80007a0:	40da      	lsrs	r2, r3
 80007a2:	408c      	lsls	r4, r1
 80007a4:	4317      	orrs	r7, r2
 80007a6:	42b1      	cmp	r1, r6
 80007a8:	da00      	bge.n	80007ac <__aeabi_dadd+0xd0>
 80007aa:	e0ff      	b.n	80009ac <__aeabi_dadd+0x2d0>
 80007ac:	1b89      	subs	r1, r1, r6
 80007ae:	1c4b      	adds	r3, r1, #1
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0xda>
 80007b4:	e0a8      	b.n	8000908 <__aeabi_dadd+0x22c>
 80007b6:	2220      	movs	r2, #32
 80007b8:	0039      	movs	r1, r7
 80007ba:	1ad2      	subs	r2, r2, r3
 80007bc:	0020      	movs	r0, r4
 80007be:	4094      	lsls	r4, r2
 80007c0:	4091      	lsls	r1, r2
 80007c2:	40d8      	lsrs	r0, r3
 80007c4:	1e62      	subs	r2, r4, #1
 80007c6:	4194      	sbcs	r4, r2
 80007c8:	40df      	lsrs	r7, r3
 80007ca:	2600      	movs	r6, #0
 80007cc:	4301      	orrs	r1, r0
 80007ce:	430c      	orrs	r4, r1
 80007d0:	0763      	lsls	r3, r4, #29
 80007d2:	d009      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007d4:	230f      	movs	r3, #15
 80007d6:	4023      	ands	r3, r4
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d005      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007dc:	1d23      	adds	r3, r4, #4
 80007de:	42a3      	cmp	r3, r4
 80007e0:	41a4      	sbcs	r4, r4
 80007e2:	4264      	negs	r4, r4
 80007e4:	193f      	adds	r7, r7, r4
 80007e6:	001c      	movs	r4, r3
 80007e8:	023b      	lsls	r3, r7, #8
 80007ea:	d400      	bmi.n	80007ee <__aeabi_dadd+0x112>
 80007ec:	e09e      	b.n	800092c <__aeabi_dadd+0x250>
 80007ee:	4b95      	ldr	r3, [pc, #596]	; (8000a44 <__aeabi_dadd+0x368>)
 80007f0:	3601      	adds	r6, #1
 80007f2:	429e      	cmp	r6, r3
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x11c>
 80007f6:	e0b7      	b.n	8000968 <__aeabi_dadd+0x28c>
 80007f8:	4a93      	ldr	r2, [pc, #588]	; (8000a48 <__aeabi_dadd+0x36c>)
 80007fa:	08e4      	lsrs	r4, r4, #3
 80007fc:	4017      	ands	r7, r2
 80007fe:	077b      	lsls	r3, r7, #29
 8000800:	0571      	lsls	r1, r6, #21
 8000802:	027f      	lsls	r7, r7, #9
 8000804:	4323      	orrs	r3, r4
 8000806:	0b3f      	lsrs	r7, r7, #12
 8000808:	0d4a      	lsrs	r2, r1, #21
 800080a:	0512      	lsls	r2, r2, #20
 800080c:	433a      	orrs	r2, r7
 800080e:	07ed      	lsls	r5, r5, #31
 8000810:	432a      	orrs	r2, r5
 8000812:	0018      	movs	r0, r3
 8000814:	0011      	movs	r1, r2
 8000816:	bce0      	pop	{r5, r6, r7}
 8000818:	46ba      	mov	sl, r7
 800081a:	46b1      	mov	r9, r6
 800081c:	46a8      	mov	r8, r5
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000820:	2c00      	cmp	r4, #0
 8000822:	d04b      	beq.n	80008bc <__aeabi_dadd+0x1e0>
 8000824:	464c      	mov	r4, r9
 8000826:	1ba4      	subs	r4, r4, r6
 8000828:	46a4      	mov	ip, r4
 800082a:	2e00      	cmp	r6, #0
 800082c:	d000      	beq.n	8000830 <__aeabi_dadd+0x154>
 800082e:	e123      	b.n	8000a78 <__aeabi_dadd+0x39c>
 8000830:	0004      	movs	r4, r0
 8000832:	431c      	orrs	r4, r3
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x15c>
 8000836:	e1af      	b.n	8000b98 <__aeabi_dadd+0x4bc>
 8000838:	4662      	mov	r2, ip
 800083a:	1e54      	subs	r4, r2, #1
 800083c:	2a01      	cmp	r2, #1
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x166>
 8000840:	e215      	b.n	8000c6e <__aeabi_dadd+0x592>
 8000842:	4d80      	ldr	r5, [pc, #512]	; (8000a44 <__aeabi_dadd+0x368>)
 8000844:	45ac      	cmp	ip, r5
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x16e>
 8000848:	e1c8      	b.n	8000bdc <__aeabi_dadd+0x500>
 800084a:	46a4      	mov	ip, r4
 800084c:	e11b      	b.n	8000a86 <__aeabi_dadd+0x3aa>
 800084e:	464a      	mov	r2, r9
 8000850:	1ab2      	subs	r2, r6, r2
 8000852:	4694      	mov	ip, r2
 8000854:	2a00      	cmp	r2, #0
 8000856:	dc00      	bgt.n	800085a <__aeabi_dadd+0x17e>
 8000858:	e0ac      	b.n	80009b4 <__aeabi_dadd+0x2d8>
 800085a:	464a      	mov	r2, r9
 800085c:	2a00      	cmp	r2, #0
 800085e:	d043      	beq.n	80008e8 <__aeabi_dadd+0x20c>
 8000860:	4a78      	ldr	r2, [pc, #480]	; (8000a44 <__aeabi_dadd+0x368>)
 8000862:	4296      	cmp	r6, r2
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x18c>
 8000866:	e1af      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	003c      	movs	r4, r7
 800086c:	0412      	lsls	r2, r2, #16
 800086e:	4314      	orrs	r4, r2
 8000870:	46a0      	mov	r8, r4
 8000872:	4662      	mov	r2, ip
 8000874:	2a38      	cmp	r2, #56	; 0x38
 8000876:	dc67      	bgt.n	8000948 <__aeabi_dadd+0x26c>
 8000878:	2a1f      	cmp	r2, #31
 800087a:	dc00      	bgt.n	800087e <__aeabi_dadd+0x1a2>
 800087c:	e15f      	b.n	8000b3e <__aeabi_dadd+0x462>
 800087e:	4647      	mov	r7, r8
 8000880:	3a20      	subs	r2, #32
 8000882:	40d7      	lsrs	r7, r2
 8000884:	4662      	mov	r2, ip
 8000886:	2a20      	cmp	r2, #32
 8000888:	d005      	beq.n	8000896 <__aeabi_dadd+0x1ba>
 800088a:	4664      	mov	r4, ip
 800088c:	2240      	movs	r2, #64	; 0x40
 800088e:	1b12      	subs	r2, r2, r4
 8000890:	4644      	mov	r4, r8
 8000892:	4094      	lsls	r4, r2
 8000894:	4321      	orrs	r1, r4
 8000896:	1e4a      	subs	r2, r1, #1
 8000898:	4191      	sbcs	r1, r2
 800089a:	000c      	movs	r4, r1
 800089c:	433c      	orrs	r4, r7
 800089e:	e057      	b.n	8000950 <__aeabi_dadd+0x274>
 80008a0:	003a      	movs	r2, r7
 80008a2:	430a      	orrs	r2, r1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x1cc>
 80008a6:	e105      	b.n	8000ab4 <__aeabi_dadd+0x3d8>
 80008a8:	0022      	movs	r2, r4
 80008aa:	3a01      	subs	r2, #1
 80008ac:	2c01      	cmp	r4, #1
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x1d6>
 80008b0:	e182      	b.n	8000bb8 <__aeabi_dadd+0x4dc>
 80008b2:	4c64      	ldr	r4, [pc, #400]	; (8000a44 <__aeabi_dadd+0x368>)
 80008b4:	45a4      	cmp	ip, r4
 80008b6:	d05b      	beq.n	8000970 <__aeabi_dadd+0x294>
 80008b8:	4694      	mov	ip, r2
 80008ba:	e741      	b.n	8000740 <__aeabi_dadd+0x64>
 80008bc:	4c63      	ldr	r4, [pc, #396]	; (8000a4c <__aeabi_dadd+0x370>)
 80008be:	1c77      	adds	r7, r6, #1
 80008c0:	4227      	tst	r7, r4
 80008c2:	d000      	beq.n	80008c6 <__aeabi_dadd+0x1ea>
 80008c4:	e0c4      	b.n	8000a50 <__aeabi_dadd+0x374>
 80008c6:	0004      	movs	r4, r0
 80008c8:	431c      	orrs	r4, r3
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x1f4>
 80008ce:	e169      	b.n	8000ba4 <__aeabi_dadd+0x4c8>
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x1fa>
 80008d4:	e1bf      	b.n	8000c56 <__aeabi_dadd+0x57a>
 80008d6:	4644      	mov	r4, r8
 80008d8:	430c      	orrs	r4, r1
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x202>
 80008dc:	e1d0      	b.n	8000c80 <__aeabi_dadd+0x5a4>
 80008de:	0742      	lsls	r2, r0, #29
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	08c0      	lsrs	r0, r0, #3
 80008e6:	e029      	b.n	800093c <__aeabi_dadd+0x260>
 80008e8:	003a      	movs	r2, r7
 80008ea:	430a      	orrs	r2, r1
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x214>
 80008ee:	e170      	b.n	8000bd2 <__aeabi_dadd+0x4f6>
 80008f0:	4662      	mov	r2, ip
 80008f2:	4664      	mov	r4, ip
 80008f4:	3a01      	subs	r2, #1
 80008f6:	2c01      	cmp	r4, #1
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x220>
 80008fa:	e0e0      	b.n	8000abe <__aeabi_dadd+0x3e2>
 80008fc:	4c51      	ldr	r4, [pc, #324]	; (8000a44 <__aeabi_dadd+0x368>)
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d100      	bne.n	8000904 <__aeabi_dadd+0x228>
 8000902:	e161      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000904:	4694      	mov	ip, r2
 8000906:	e7b4      	b.n	8000872 <__aeabi_dadd+0x196>
 8000908:	003a      	movs	r2, r7
 800090a:	391f      	subs	r1, #31
 800090c:	40ca      	lsrs	r2, r1
 800090e:	0011      	movs	r1, r2
 8000910:	2b20      	cmp	r3, #32
 8000912:	d003      	beq.n	800091c <__aeabi_dadd+0x240>
 8000914:	2240      	movs	r2, #64	; 0x40
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	409f      	lsls	r7, r3
 800091a:	433c      	orrs	r4, r7
 800091c:	1e63      	subs	r3, r4, #1
 800091e:	419c      	sbcs	r4, r3
 8000920:	2700      	movs	r7, #0
 8000922:	2600      	movs	r6, #0
 8000924:	430c      	orrs	r4, r1
 8000926:	0763      	lsls	r3, r4, #29
 8000928:	d000      	beq.n	800092c <__aeabi_dadd+0x250>
 800092a:	e753      	b.n	80007d4 <__aeabi_dadd+0xf8>
 800092c:	46b4      	mov	ip, r6
 800092e:	08e4      	lsrs	r4, r4, #3
 8000930:	077b      	lsls	r3, r7, #29
 8000932:	4323      	orrs	r3, r4
 8000934:	08f8      	lsrs	r0, r7, #3
 8000936:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <__aeabi_dadd+0x368>)
 8000938:	4594      	cmp	ip, r2
 800093a:	d01d      	beq.n	8000978 <__aeabi_dadd+0x29c>
 800093c:	4662      	mov	r2, ip
 800093e:	0307      	lsls	r7, r0, #12
 8000940:	0552      	lsls	r2, r2, #21
 8000942:	0b3f      	lsrs	r7, r7, #12
 8000944:	0d52      	lsrs	r2, r2, #21
 8000946:	e760      	b.n	800080a <__aeabi_dadd+0x12e>
 8000948:	4644      	mov	r4, r8
 800094a:	430c      	orrs	r4, r1
 800094c:	1e62      	subs	r2, r4, #1
 800094e:	4194      	sbcs	r4, r2
 8000950:	18e4      	adds	r4, r4, r3
 8000952:	429c      	cmp	r4, r3
 8000954:	419b      	sbcs	r3, r3
 8000956:	425f      	negs	r7, r3
 8000958:	183f      	adds	r7, r7, r0
 800095a:	023b      	lsls	r3, r7, #8
 800095c:	d5e3      	bpl.n	8000926 <__aeabi_dadd+0x24a>
 800095e:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <__aeabi_dadd+0x368>)
 8000960:	3601      	adds	r6, #1
 8000962:	429e      	cmp	r6, r3
 8000964:	d000      	beq.n	8000968 <__aeabi_dadd+0x28c>
 8000966:	e0b5      	b.n	8000ad4 <__aeabi_dadd+0x3f8>
 8000968:	0032      	movs	r2, r6
 800096a:	2700      	movs	r7, #0
 800096c:	2300      	movs	r3, #0
 800096e:	e74c      	b.n	800080a <__aeabi_dadd+0x12e>
 8000970:	0742      	lsls	r2, r0, #29
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	4313      	orrs	r3, r2
 8000976:	08c0      	lsrs	r0, r0, #3
 8000978:	001a      	movs	r2, r3
 800097a:	4302      	orrs	r2, r0
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2a4>
 800097e:	e1e1      	b.n	8000d44 <__aeabi_dadd+0x668>
 8000980:	2780      	movs	r7, #128	; 0x80
 8000982:	033f      	lsls	r7, r7, #12
 8000984:	4307      	orrs	r7, r0
 8000986:	033f      	lsls	r7, r7, #12
 8000988:	4a2e      	ldr	r2, [pc, #184]	; (8000a44 <__aeabi_dadd+0x368>)
 800098a:	0b3f      	lsrs	r7, r7, #12
 800098c:	e73d      	b.n	800080a <__aeabi_dadd+0x12e>
 800098e:	0020      	movs	r0, r4
 8000990:	f001 fc8a 	bl	80022a8 <__clzsi2>
 8000994:	0001      	movs	r1, r0
 8000996:	3118      	adds	r1, #24
 8000998:	291f      	cmp	r1, #31
 800099a:	dc00      	bgt.n	800099e <__aeabi_dadd+0x2c2>
 800099c:	e6fc      	b.n	8000798 <__aeabi_dadd+0xbc>
 800099e:	3808      	subs	r0, #8
 80009a0:	4084      	lsls	r4, r0
 80009a2:	0027      	movs	r7, r4
 80009a4:	2400      	movs	r4, #0
 80009a6:	42b1      	cmp	r1, r6
 80009a8:	db00      	blt.n	80009ac <__aeabi_dadd+0x2d0>
 80009aa:	e6ff      	b.n	80007ac <__aeabi_dadd+0xd0>
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <__aeabi_dadd+0x36c>)
 80009ae:	1a76      	subs	r6, r6, r1
 80009b0:	4017      	ands	r7, r2
 80009b2:	e70d      	b.n	80007d0 <__aeabi_dadd+0xf4>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d02f      	beq.n	8000a18 <__aeabi_dadd+0x33c>
 80009b8:	464a      	mov	r2, r9
 80009ba:	1b92      	subs	r2, r2, r6
 80009bc:	4694      	mov	ip, r2
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x2e8>
 80009c2:	e0ad      	b.n	8000b20 <__aeabi_dadd+0x444>
 80009c4:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <__aeabi_dadd+0x368>)
 80009c6:	4591      	cmp	r9, r2
 80009c8:	d100      	bne.n	80009cc <__aeabi_dadd+0x2f0>
 80009ca:	e10f      	b.n	8000bec <__aeabi_dadd+0x510>
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	0412      	lsls	r2, r2, #16
 80009d0:	4310      	orrs	r0, r2
 80009d2:	4662      	mov	r2, ip
 80009d4:	2a38      	cmp	r2, #56	; 0x38
 80009d6:	dd00      	ble.n	80009da <__aeabi_dadd+0x2fe>
 80009d8:	e10f      	b.n	8000bfa <__aeabi_dadd+0x51e>
 80009da:	2a1f      	cmp	r2, #31
 80009dc:	dd00      	ble.n	80009e0 <__aeabi_dadd+0x304>
 80009de:	e180      	b.n	8000ce2 <__aeabi_dadd+0x606>
 80009e0:	4664      	mov	r4, ip
 80009e2:	2220      	movs	r2, #32
 80009e4:	001e      	movs	r6, r3
 80009e6:	1b12      	subs	r2, r2, r4
 80009e8:	4667      	mov	r7, ip
 80009ea:	0004      	movs	r4, r0
 80009ec:	4093      	lsls	r3, r2
 80009ee:	4094      	lsls	r4, r2
 80009f0:	40fe      	lsrs	r6, r7
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	4193      	sbcs	r3, r2
 80009f6:	40f8      	lsrs	r0, r7
 80009f8:	4334      	orrs	r4, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	4480      	add	r8, r0
 80009fe:	1864      	adds	r4, r4, r1
 8000a00:	428c      	cmp	r4, r1
 8000a02:	41bf      	sbcs	r7, r7
 8000a04:	427f      	negs	r7, r7
 8000a06:	464e      	mov	r6, r9
 8000a08:	4447      	add	r7, r8
 8000a0a:	e7a6      	b.n	800095a <__aeabi_dadd+0x27e>
 8000a0c:	4642      	mov	r2, r8
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	0011      	movs	r1, r2
 8000a12:	1e4a      	subs	r2, r1, #1
 8000a14:	4191      	sbcs	r1, r2
 8000a16:	e6ad      	b.n	8000774 <__aeabi_dadd+0x98>
 8000a18:	4c0c      	ldr	r4, [pc, #48]	; (8000a4c <__aeabi_dadd+0x370>)
 8000a1a:	1c72      	adds	r2, r6, #1
 8000a1c:	4222      	tst	r2, r4
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_dadd+0x346>
 8000a20:	e0a1      	b.n	8000b66 <__aeabi_dadd+0x48a>
 8000a22:	0002      	movs	r2, r0
 8000a24:	431a      	orrs	r2, r3
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x350>
 8000a2a:	e0fa      	b.n	8000c22 <__aeabi_dadd+0x546>
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x356>
 8000a30:	e145      	b.n	8000cbe <__aeabi_dadd+0x5e2>
 8000a32:	003a      	movs	r2, r7
 8000a34:	430a      	orrs	r2, r1
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x35e>
 8000a38:	e146      	b.n	8000cc8 <__aeabi_dadd+0x5ec>
 8000a3a:	0742      	lsls	r2, r0, #29
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	e77b      	b.n	800093c <__aeabi_dadd+0x260>
 8000a44:	000007ff 	.word	0x000007ff
 8000a48:	ff7fffff 	.word	0xff7fffff
 8000a4c:	000007fe 	.word	0x000007fe
 8000a50:	4647      	mov	r7, r8
 8000a52:	1a5c      	subs	r4, r3, r1
 8000a54:	1bc2      	subs	r2, r0, r7
 8000a56:	42a3      	cmp	r3, r4
 8000a58:	41bf      	sbcs	r7, r7
 8000a5a:	427f      	negs	r7, r7
 8000a5c:	46b9      	mov	r9, r7
 8000a5e:	0017      	movs	r7, r2
 8000a60:	464a      	mov	r2, r9
 8000a62:	1abf      	subs	r7, r7, r2
 8000a64:	023a      	lsls	r2, r7, #8
 8000a66:	d500      	bpl.n	8000a6a <__aeabi_dadd+0x38e>
 8000a68:	e08d      	b.n	8000b86 <__aeabi_dadd+0x4aa>
 8000a6a:	0023      	movs	r3, r4
 8000a6c:	433b      	orrs	r3, r7
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_dadd+0x396>
 8000a70:	e68a      	b.n	8000788 <__aeabi_dadd+0xac>
 8000a72:	2000      	movs	r0, #0
 8000a74:	2500      	movs	r5, #0
 8000a76:	e761      	b.n	800093c <__aeabi_dadd+0x260>
 8000a78:	4cb4      	ldr	r4, [pc, #720]	; (8000d4c <__aeabi_dadd+0x670>)
 8000a7a:	45a1      	cmp	r9, r4
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_dadd+0x3a4>
 8000a7e:	e0ad      	b.n	8000bdc <__aeabi_dadd+0x500>
 8000a80:	2480      	movs	r4, #128	; 0x80
 8000a82:	0424      	lsls	r4, r4, #16
 8000a84:	4320      	orrs	r0, r4
 8000a86:	4664      	mov	r4, ip
 8000a88:	2c38      	cmp	r4, #56	; 0x38
 8000a8a:	dc3d      	bgt.n	8000b08 <__aeabi_dadd+0x42c>
 8000a8c:	4662      	mov	r2, ip
 8000a8e:	2c1f      	cmp	r4, #31
 8000a90:	dd00      	ble.n	8000a94 <__aeabi_dadd+0x3b8>
 8000a92:	e0b7      	b.n	8000c04 <__aeabi_dadd+0x528>
 8000a94:	2520      	movs	r5, #32
 8000a96:	001e      	movs	r6, r3
 8000a98:	1b2d      	subs	r5, r5, r4
 8000a9a:	0004      	movs	r4, r0
 8000a9c:	40ab      	lsls	r3, r5
 8000a9e:	40ac      	lsls	r4, r5
 8000aa0:	40d6      	lsrs	r6, r2
 8000aa2:	40d0      	lsrs	r0, r2
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	1e5d      	subs	r5, r3, #1
 8000aa8:	41ab      	sbcs	r3, r5
 8000aaa:	4334      	orrs	r4, r6
 8000aac:	1a12      	subs	r2, r2, r0
 8000aae:	4690      	mov	r8, r2
 8000ab0:	4323      	orrs	r3, r4
 8000ab2:	e02c      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000ab4:	0742      	lsls	r2, r0, #29
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	08c0      	lsrs	r0, r0, #3
 8000abc:	e73b      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000abe:	185c      	adds	r4, r3, r1
 8000ac0:	429c      	cmp	r4, r3
 8000ac2:	419b      	sbcs	r3, r3
 8000ac4:	4440      	add	r0, r8
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	18c7      	adds	r7, r0, r3
 8000aca:	2601      	movs	r6, #1
 8000acc:	023b      	lsls	r3, r7, #8
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_dadd+0x3f6>
 8000ad0:	e729      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ad2:	2602      	movs	r6, #2
 8000ad4:	4a9e      	ldr	r2, [pc, #632]	; (8000d50 <__aeabi_dadd+0x674>)
 8000ad6:	0863      	lsrs	r3, r4, #1
 8000ad8:	4017      	ands	r7, r2
 8000ada:	2201      	movs	r2, #1
 8000adc:	4014      	ands	r4, r2
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	07fb      	lsls	r3, r7, #31
 8000ae2:	431c      	orrs	r4, r3
 8000ae4:	087f      	lsrs	r7, r7, #1
 8000ae6:	e673      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ae8:	4644      	mov	r4, r8
 8000aea:	3a20      	subs	r2, #32
 8000aec:	40d4      	lsrs	r4, r2
 8000aee:	4662      	mov	r2, ip
 8000af0:	2a20      	cmp	r2, #32
 8000af2:	d005      	beq.n	8000b00 <__aeabi_dadd+0x424>
 8000af4:	4667      	mov	r7, ip
 8000af6:	2240      	movs	r2, #64	; 0x40
 8000af8:	1bd2      	subs	r2, r2, r7
 8000afa:	4647      	mov	r7, r8
 8000afc:	4097      	lsls	r7, r2
 8000afe:	4339      	orrs	r1, r7
 8000b00:	1e4a      	subs	r2, r1, #1
 8000b02:	4191      	sbcs	r1, r2
 8000b04:	4321      	orrs	r1, r4
 8000b06:	e635      	b.n	8000774 <__aeabi_dadd+0x98>
 8000b08:	4303      	orrs	r3, r0
 8000b0a:	1e58      	subs	r0, r3, #1
 8000b0c:	4183      	sbcs	r3, r0
 8000b0e:	1acc      	subs	r4, r1, r3
 8000b10:	42a1      	cmp	r1, r4
 8000b12:	41bf      	sbcs	r7, r7
 8000b14:	4643      	mov	r3, r8
 8000b16:	427f      	negs	r7, r7
 8000b18:	4655      	mov	r5, sl
 8000b1a:	464e      	mov	r6, r9
 8000b1c:	1bdf      	subs	r7, r3, r7
 8000b1e:	e62e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000b20:	0002      	movs	r2, r0
 8000b22:	431a      	orrs	r2, r3
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x44c>
 8000b26:	e0bd      	b.n	8000ca4 <__aeabi_dadd+0x5c8>
 8000b28:	4662      	mov	r2, ip
 8000b2a:	4664      	mov	r4, ip
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	2c01      	cmp	r4, #1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x458>
 8000b32:	e0e5      	b.n	8000d00 <__aeabi_dadd+0x624>
 8000b34:	4c85      	ldr	r4, [pc, #532]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b36:	45a4      	cmp	ip, r4
 8000b38:	d058      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000b3a:	4694      	mov	ip, r2
 8000b3c:	e749      	b.n	80009d2 <__aeabi_dadd+0x2f6>
 8000b3e:	4664      	mov	r4, ip
 8000b40:	2220      	movs	r2, #32
 8000b42:	1b12      	subs	r2, r2, r4
 8000b44:	4644      	mov	r4, r8
 8000b46:	4094      	lsls	r4, r2
 8000b48:	000f      	movs	r7, r1
 8000b4a:	46a1      	mov	r9, r4
 8000b4c:	4664      	mov	r4, ip
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	40e7      	lsrs	r7, r4
 8000b52:	464c      	mov	r4, r9
 8000b54:	1e4a      	subs	r2, r1, #1
 8000b56:	4191      	sbcs	r1, r2
 8000b58:	433c      	orrs	r4, r7
 8000b5a:	4642      	mov	r2, r8
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	4661      	mov	r1, ip
 8000b60:	40ca      	lsrs	r2, r1
 8000b62:	1880      	adds	r0, r0, r2
 8000b64:	e6f4      	b.n	8000950 <__aeabi_dadd+0x274>
 8000b66:	4c79      	ldr	r4, [pc, #484]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b68:	42a2      	cmp	r2, r4
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dadd+0x492>
 8000b6c:	e6fd      	b.n	800096a <__aeabi_dadd+0x28e>
 8000b6e:	1859      	adds	r1, r3, r1
 8000b70:	4299      	cmp	r1, r3
 8000b72:	419b      	sbcs	r3, r3
 8000b74:	4440      	add	r0, r8
 8000b76:	425f      	negs	r7, r3
 8000b78:	19c7      	adds	r7, r0, r7
 8000b7a:	07fc      	lsls	r4, r7, #31
 8000b7c:	0849      	lsrs	r1, r1, #1
 8000b7e:	0016      	movs	r6, r2
 8000b80:	430c      	orrs	r4, r1
 8000b82:	087f      	lsrs	r7, r7, #1
 8000b84:	e6cf      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000b86:	1acc      	subs	r4, r1, r3
 8000b88:	42a1      	cmp	r1, r4
 8000b8a:	41bf      	sbcs	r7, r7
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	427f      	negs	r7, r7
 8000b90:	1a18      	subs	r0, r3, r0
 8000b92:	4655      	mov	r5, sl
 8000b94:	1bc7      	subs	r7, r0, r7
 8000b96:	e5f7      	b.n	8000788 <__aeabi_dadd+0xac>
 8000b98:	08c9      	lsrs	r1, r1, #3
 8000b9a:	077b      	lsls	r3, r7, #29
 8000b9c:	4655      	mov	r5, sl
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	08f8      	lsrs	r0, r7, #3
 8000ba2:	e6c8      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dadd+0x4ce>
 8000ba8:	e081      	b.n	8000cae <__aeabi_dadd+0x5d2>
 8000baa:	4643      	mov	r3, r8
 8000bac:	430b      	orrs	r3, r1
 8000bae:	d115      	bne.n	8000bdc <__aeabi_dadd+0x500>
 8000bb0:	2080      	movs	r0, #128	; 0x80
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	0300      	lsls	r0, r0, #12
 8000bb6:	e6e3      	b.n	8000980 <__aeabi_dadd+0x2a4>
 8000bb8:	1a5c      	subs	r4, r3, r1
 8000bba:	42a3      	cmp	r3, r4
 8000bbc:	419b      	sbcs	r3, r3
 8000bbe:	1bc7      	subs	r7, r0, r7
 8000bc0:	425b      	negs	r3, r3
 8000bc2:	2601      	movs	r6, #1
 8000bc4:	1aff      	subs	r7, r7, r3
 8000bc6:	e5da      	b.n	800077e <__aeabi_dadd+0xa2>
 8000bc8:	0742      	lsls	r2, r0, #29
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	08c0      	lsrs	r0, r0, #3
 8000bd0:	e6d2      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bd2:	0742      	lsls	r2, r0, #29
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	08c0      	lsrs	r0, r0, #3
 8000bda:	e6ac      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000bdc:	4643      	mov	r3, r8
 8000bde:	4642      	mov	r2, r8
 8000be0:	08c9      	lsrs	r1, r1, #3
 8000be2:	075b      	lsls	r3, r3, #29
 8000be4:	4655      	mov	r5, sl
 8000be6:	430b      	orrs	r3, r1
 8000be8:	08d0      	lsrs	r0, r2, #3
 8000bea:	e6c5      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bec:	4643      	mov	r3, r8
 8000bee:	4642      	mov	r2, r8
 8000bf0:	075b      	lsls	r3, r3, #29
 8000bf2:	08c9      	lsrs	r1, r1, #3
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	08d0      	lsrs	r0, r2, #3
 8000bf8:	e6be      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bfa:	4303      	orrs	r3, r0
 8000bfc:	001c      	movs	r4, r3
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	e6fc      	b.n	80009fe <__aeabi_dadd+0x322>
 8000c04:	0002      	movs	r2, r0
 8000c06:	3c20      	subs	r4, #32
 8000c08:	40e2      	lsrs	r2, r4
 8000c0a:	0014      	movs	r4, r2
 8000c0c:	4662      	mov	r2, ip
 8000c0e:	2a20      	cmp	r2, #32
 8000c10:	d003      	beq.n	8000c1a <__aeabi_dadd+0x53e>
 8000c12:	2540      	movs	r5, #64	; 0x40
 8000c14:	1aad      	subs	r5, r5, r2
 8000c16:	40a8      	lsls	r0, r5
 8000c18:	4303      	orrs	r3, r0
 8000c1a:	1e58      	subs	r0, r3, #1
 8000c1c:	4183      	sbcs	r3, r0
 8000c1e:	4323      	orrs	r3, r4
 8000c20:	e775      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d0e2      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000c26:	003a      	movs	r2, r7
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	d0cd      	beq.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000c2c:	0742      	lsls	r2, r0, #29
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	08c0      	lsrs	r0, r0, #3
 8000c36:	0312      	lsls	r2, r2, #12
 8000c38:	4210      	tst	r0, r2
 8000c3a:	d006      	beq.n	8000c4a <__aeabi_dadd+0x56e>
 8000c3c:	08fc      	lsrs	r4, r7, #3
 8000c3e:	4214      	tst	r4, r2
 8000c40:	d103      	bne.n	8000c4a <__aeabi_dadd+0x56e>
 8000c42:	0020      	movs	r0, r4
 8000c44:	08cb      	lsrs	r3, r1, #3
 8000c46:	077a      	lsls	r2, r7, #29
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	0f5a      	lsrs	r2, r3, #29
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	0752      	lsls	r2, r2, #29
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	e690      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000c56:	4643      	mov	r3, r8
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x582>
 8000c5c:	e709      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	4642      	mov	r2, r8
 8000c62:	08c9      	lsrs	r1, r1, #3
 8000c64:	075b      	lsls	r3, r3, #29
 8000c66:	4655      	mov	r5, sl
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	08d0      	lsrs	r0, r2, #3
 8000c6c:	e666      	b.n	800093c <__aeabi_dadd+0x260>
 8000c6e:	1acc      	subs	r4, r1, r3
 8000c70:	42a1      	cmp	r1, r4
 8000c72:	4189      	sbcs	r1, r1
 8000c74:	1a3f      	subs	r7, r7, r0
 8000c76:	4249      	negs	r1, r1
 8000c78:	4655      	mov	r5, sl
 8000c7a:	2601      	movs	r6, #1
 8000c7c:	1a7f      	subs	r7, r7, r1
 8000c7e:	e57e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000c80:	4642      	mov	r2, r8
 8000c82:	1a5c      	subs	r4, r3, r1
 8000c84:	1a87      	subs	r7, r0, r2
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	4192      	sbcs	r2, r2
 8000c8a:	4252      	negs	r2, r2
 8000c8c:	1abf      	subs	r7, r7, r2
 8000c8e:	023a      	lsls	r2, r7, #8
 8000c90:	d53d      	bpl.n	8000d0e <__aeabi_dadd+0x632>
 8000c92:	1acc      	subs	r4, r1, r3
 8000c94:	42a1      	cmp	r1, r4
 8000c96:	4189      	sbcs	r1, r1
 8000c98:	4643      	mov	r3, r8
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	1a1f      	subs	r7, r3, r0
 8000c9e:	4655      	mov	r5, sl
 8000ca0:	1a7f      	subs	r7, r7, r1
 8000ca2:	e595      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ca4:	077b      	lsls	r3, r7, #29
 8000ca6:	08c9      	lsrs	r1, r1, #3
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	08f8      	lsrs	r0, r7, #3
 8000cac:	e643      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000cae:	4644      	mov	r4, r8
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	d130      	bne.n	8000d18 <__aeabi_dadd+0x63c>
 8000cb6:	0742      	lsls	r2, r0, #29
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	08c0      	lsrs	r0, r0, #3
 8000cbc:	e65c      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000cbe:	077b      	lsls	r3, r7, #29
 8000cc0:	08c9      	lsrs	r1, r1, #3
 8000cc2:	430b      	orrs	r3, r1
 8000cc4:	08f8      	lsrs	r0, r7, #3
 8000cc6:	e639      	b.n	800093c <__aeabi_dadd+0x260>
 8000cc8:	185c      	adds	r4, r3, r1
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	419b      	sbcs	r3, r3
 8000cce:	4440      	add	r0, r8
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	18c7      	adds	r7, r0, r3
 8000cd4:	023b      	lsls	r3, r7, #8
 8000cd6:	d400      	bmi.n	8000cda <__aeabi_dadd+0x5fe>
 8000cd8:	e625      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <__aeabi_dadd+0x674>)
 8000cdc:	2601      	movs	r6, #1
 8000cde:	401f      	ands	r7, r3
 8000ce0:	e621      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ce2:	0004      	movs	r4, r0
 8000ce4:	3a20      	subs	r2, #32
 8000ce6:	40d4      	lsrs	r4, r2
 8000ce8:	4662      	mov	r2, ip
 8000cea:	2a20      	cmp	r2, #32
 8000cec:	d004      	beq.n	8000cf8 <__aeabi_dadd+0x61c>
 8000cee:	2240      	movs	r2, #64	; 0x40
 8000cf0:	4666      	mov	r6, ip
 8000cf2:	1b92      	subs	r2, r2, r6
 8000cf4:	4090      	lsls	r0, r2
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	4193      	sbcs	r3, r2
 8000cfc:	431c      	orrs	r4, r3
 8000cfe:	e67e      	b.n	80009fe <__aeabi_dadd+0x322>
 8000d00:	185c      	adds	r4, r3, r1
 8000d02:	428c      	cmp	r4, r1
 8000d04:	4189      	sbcs	r1, r1
 8000d06:	4440      	add	r0, r8
 8000d08:	4249      	negs	r1, r1
 8000d0a:	1847      	adds	r7, r0, r1
 8000d0c:	e6dd      	b.n	8000aca <__aeabi_dadd+0x3ee>
 8000d0e:	0023      	movs	r3, r4
 8000d10:	433b      	orrs	r3, r7
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0x63a>
 8000d14:	e6ad      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000d16:	e606      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000d18:	0744      	lsls	r4, r0, #29
 8000d1a:	4323      	orrs	r3, r4
 8000d1c:	2480      	movs	r4, #128	; 0x80
 8000d1e:	08c0      	lsrs	r0, r0, #3
 8000d20:	0324      	lsls	r4, r4, #12
 8000d22:	4220      	tst	r0, r4
 8000d24:	d008      	beq.n	8000d38 <__aeabi_dadd+0x65c>
 8000d26:	4642      	mov	r2, r8
 8000d28:	08d6      	lsrs	r6, r2, #3
 8000d2a:	4226      	tst	r6, r4
 8000d2c:	d104      	bne.n	8000d38 <__aeabi_dadd+0x65c>
 8000d2e:	4655      	mov	r5, sl
 8000d30:	0030      	movs	r0, r6
 8000d32:	08cb      	lsrs	r3, r1, #3
 8000d34:	0751      	lsls	r1, r2, #29
 8000d36:	430b      	orrs	r3, r1
 8000d38:	0f5a      	lsrs	r2, r3, #29
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	08db      	lsrs	r3, r3, #3
 8000d3e:	0752      	lsls	r2, r2, #29
 8000d40:	4313      	orrs	r3, r2
 8000d42:	e619      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000d44:	2300      	movs	r3, #0
 8000d46:	4a01      	ldr	r2, [pc, #4]	; (8000d4c <__aeabi_dadd+0x670>)
 8000d48:	001f      	movs	r7, r3
 8000d4a:	e55e      	b.n	800080a <__aeabi_dadd+0x12e>
 8000d4c:	000007ff 	.word	0x000007ff
 8000d50:	ff7fffff 	.word	0xff7fffff

08000d54 <__aeabi_ddiv>:
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	4657      	mov	r7, sl
 8000d58:	464e      	mov	r6, r9
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	46de      	mov	lr, fp
 8000d5e:	b5e0      	push	{r5, r6, r7, lr}
 8000d60:	4681      	mov	r9, r0
 8000d62:	0005      	movs	r5, r0
 8000d64:	030c      	lsls	r4, r1, #12
 8000d66:	0048      	lsls	r0, r1, #1
 8000d68:	4692      	mov	sl, r2
 8000d6a:	001f      	movs	r7, r3
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	0b24      	lsrs	r4, r4, #12
 8000d70:	0d40      	lsrs	r0, r0, #21
 8000d72:	0fce      	lsrs	r6, r1, #31
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x26>
 8000d78:	e156      	b.n	8001028 <__aeabi_ddiv+0x2d4>
 8000d7a:	4bd4      	ldr	r3, [pc, #848]	; (80010cc <__aeabi_ddiv+0x378>)
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0x2e>
 8000d80:	e172      	b.n	8001068 <__aeabi_ddiv+0x314>
 8000d82:	0f6b      	lsrs	r3, r5, #29
 8000d84:	00e4      	lsls	r4, r4, #3
 8000d86:	431c      	orrs	r4, r3
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	4698      	mov	r8, r3
 8000d90:	4bcf      	ldr	r3, [pc, #828]	; (80010d0 <__aeabi_ddiv+0x37c>)
 8000d92:	00ed      	lsls	r5, r5, #3
 8000d94:	469b      	mov	fp, r3
 8000d96:	2300      	movs	r3, #0
 8000d98:	4699      	mov	r9, r3
 8000d9a:	4483      	add	fp, r0
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	033c      	lsls	r4, r7, #12
 8000da0:	007b      	lsls	r3, r7, #1
 8000da2:	4650      	mov	r0, sl
 8000da4:	0b24      	lsrs	r4, r4, #12
 8000da6:	0d5b      	lsrs	r3, r3, #21
 8000da8:	0fff      	lsrs	r7, r7, #31
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_ddiv+0x5c>
 8000dae:	e11f      	b.n	8000ff0 <__aeabi_ddiv+0x29c>
 8000db0:	4ac6      	ldr	r2, [pc, #792]	; (80010cc <__aeabi_ddiv+0x378>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x64>
 8000db6:	e162      	b.n	800107e <__aeabi_ddiv+0x32a>
 8000db8:	49c5      	ldr	r1, [pc, #788]	; (80010d0 <__aeabi_ddiv+0x37c>)
 8000dba:	0f42      	lsrs	r2, r0, #29
 8000dbc:	468c      	mov	ip, r1
 8000dbe:	00e4      	lsls	r4, r4, #3
 8000dc0:	4659      	mov	r1, fp
 8000dc2:	4314      	orrs	r4, r2
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	4463      	add	r3, ip
 8000dc8:	0412      	lsls	r2, r2, #16
 8000dca:	1acb      	subs	r3, r1, r3
 8000dcc:	4314      	orrs	r4, r2
 8000dce:	469b      	mov	fp, r3
 8000dd0:	00c2      	lsls	r2, r0, #3
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	0033      	movs	r3, r6
 8000dd6:	407b      	eors	r3, r7
 8000dd8:	469a      	mov	sl, r3
 8000dda:	464b      	mov	r3, r9
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d827      	bhi.n	8000e30 <__aeabi_ddiv+0xdc>
 8000de0:	49bc      	ldr	r1, [pc, #752]	; (80010d4 <__aeabi_ddiv+0x380>)
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	58cb      	ldr	r3, [r1, r3]
 8000de6:	469f      	mov	pc, r3
 8000de8:	46b2      	mov	sl, r6
 8000dea:	9b00      	ldr	r3, [sp, #0]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d016      	beq.n	8000e1e <__aeabi_ddiv+0xca>
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d100      	bne.n	8000df6 <__aeabi_ddiv+0xa2>
 8000df4:	e28e      	b.n	8001314 <__aeabi_ddiv+0x5c0>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d000      	beq.n	8000dfc <__aeabi_ddiv+0xa8>
 8000dfa:	e0d9      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	2400      	movs	r4, #0
 8000e00:	2500      	movs	r5, #0
 8000e02:	4652      	mov	r2, sl
 8000e04:	051b      	lsls	r3, r3, #20
 8000e06:	4323      	orrs	r3, r4
 8000e08:	07d2      	lsls	r2, r2, #31
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	0028      	movs	r0, r5
 8000e0e:	0019      	movs	r1, r3
 8000e10:	b005      	add	sp, #20
 8000e12:	bcf0      	pop	{r4, r5, r6, r7}
 8000e14:	46bb      	mov	fp, r7
 8000e16:	46b2      	mov	sl, r6
 8000e18:	46a9      	mov	r9, r5
 8000e1a:	46a0      	mov	r8, r4
 8000e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e1e:	2400      	movs	r4, #0
 8000e20:	2500      	movs	r5, #0
 8000e22:	4baa      	ldr	r3, [pc, #680]	; (80010cc <__aeabi_ddiv+0x378>)
 8000e24:	e7ed      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8000e26:	46ba      	mov	sl, r7
 8000e28:	46a0      	mov	r8, r4
 8000e2a:	0015      	movs	r5, r2
 8000e2c:	9000      	str	r0, [sp, #0]
 8000e2e:	e7dc      	b.n	8000dea <__aeabi_ddiv+0x96>
 8000e30:	4544      	cmp	r4, r8
 8000e32:	d200      	bcs.n	8000e36 <__aeabi_ddiv+0xe2>
 8000e34:	e1c7      	b.n	80011c6 <__aeabi_ddiv+0x472>
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0xe6>
 8000e38:	e1c2      	b.n	80011c0 <__aeabi_ddiv+0x46c>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	425b      	negs	r3, r3
 8000e3e:	469c      	mov	ip, r3
 8000e40:	002e      	movs	r6, r5
 8000e42:	4640      	mov	r0, r8
 8000e44:	2500      	movs	r5, #0
 8000e46:	44e3      	add	fp, ip
 8000e48:	0223      	lsls	r3, r4, #8
 8000e4a:	0e14      	lsrs	r4, r2, #24
 8000e4c:	431c      	orrs	r4, r3
 8000e4e:	0c1b      	lsrs	r3, r3, #16
 8000e50:	4699      	mov	r9, r3
 8000e52:	0423      	lsls	r3, r4, #16
 8000e54:	0c1f      	lsrs	r7, r3, #16
 8000e56:	0212      	lsls	r2, r2, #8
 8000e58:	4649      	mov	r1, r9
 8000e5a:	9200      	str	r2, [sp, #0]
 8000e5c:	9701      	str	r7, [sp, #4]
 8000e5e:	f7ff f9f5 	bl	800024c <__aeabi_uidivmod>
 8000e62:	0002      	movs	r2, r0
 8000e64:	437a      	muls	r2, r7
 8000e66:	040b      	lsls	r3, r1, #16
 8000e68:	0c31      	lsrs	r1, r6, #16
 8000e6a:	4680      	mov	r8, r0
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d907      	bls.n	8000e82 <__aeabi_ddiv+0x12e>
 8000e72:	2301      	movs	r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	469c      	mov	ip, r3
 8000e78:	1909      	adds	r1, r1, r4
 8000e7a:	44e0      	add	r8, ip
 8000e7c:	428c      	cmp	r4, r1
 8000e7e:	d800      	bhi.n	8000e82 <__aeabi_ddiv+0x12e>
 8000e80:	e207      	b.n	8001292 <__aeabi_ddiv+0x53e>
 8000e82:	1a88      	subs	r0, r1, r2
 8000e84:	4649      	mov	r1, r9
 8000e86:	f7ff f9e1 	bl	800024c <__aeabi_uidivmod>
 8000e8a:	0409      	lsls	r1, r1, #16
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	0431      	lsls	r1, r6, #16
 8000e90:	4666      	mov	r6, ip
 8000e92:	9a01      	ldr	r2, [sp, #4]
 8000e94:	0c09      	lsrs	r1, r1, #16
 8000e96:	4342      	muls	r2, r0
 8000e98:	0003      	movs	r3, r0
 8000e9a:	4331      	orrs	r1, r6
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d904      	bls.n	8000eaa <__aeabi_ddiv+0x156>
 8000ea0:	1909      	adds	r1, r1, r4
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	428c      	cmp	r4, r1
 8000ea6:	d800      	bhi.n	8000eaa <__aeabi_ddiv+0x156>
 8000ea8:	e1ed      	b.n	8001286 <__aeabi_ddiv+0x532>
 8000eaa:	1a88      	subs	r0, r1, r2
 8000eac:	4642      	mov	r2, r8
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4641      	mov	r1, r8
 8000eb6:	9b00      	ldr	r3, [sp, #0]
 8000eb8:	040e      	lsls	r6, r1, #16
 8000eba:	0c1b      	lsrs	r3, r3, #16
 8000ebc:	001f      	movs	r7, r3
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	9b00      	ldr	r3, [sp, #0]
 8000ec2:	0c36      	lsrs	r6, r6, #16
 8000ec4:	041b      	lsls	r3, r3, #16
 8000ec6:	0c19      	lsrs	r1, r3, #16
 8000ec8:	000b      	movs	r3, r1
 8000eca:	4373      	muls	r3, r6
 8000ecc:	0c12      	lsrs	r2, r2, #16
 8000ece:	437e      	muls	r6, r7
 8000ed0:	9103      	str	r1, [sp, #12]
 8000ed2:	4351      	muls	r1, r2
 8000ed4:	437a      	muls	r2, r7
 8000ed6:	0c1f      	lsrs	r7, r3, #16
 8000ed8:	46bc      	mov	ip, r7
 8000eda:	1876      	adds	r6, r6, r1
 8000edc:	4466      	add	r6, ip
 8000ede:	42b1      	cmp	r1, r6
 8000ee0:	d903      	bls.n	8000eea <__aeabi_ddiv+0x196>
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	0249      	lsls	r1, r1, #9
 8000ee6:	468c      	mov	ip, r1
 8000ee8:	4462      	add	r2, ip
 8000eea:	0c31      	lsrs	r1, r6, #16
 8000eec:	188a      	adds	r2, r1, r2
 8000eee:	0431      	lsls	r1, r6, #16
 8000ef0:	041e      	lsls	r6, r3, #16
 8000ef2:	0c36      	lsrs	r6, r6, #16
 8000ef4:	198e      	adds	r6, r1, r6
 8000ef6:	4290      	cmp	r0, r2
 8000ef8:	d302      	bcc.n	8000f00 <__aeabi_ddiv+0x1ac>
 8000efa:	d112      	bne.n	8000f22 <__aeabi_ddiv+0x1ce>
 8000efc:	42b5      	cmp	r5, r6
 8000efe:	d210      	bcs.n	8000f22 <__aeabi_ddiv+0x1ce>
 8000f00:	4643      	mov	r3, r8
 8000f02:	1e59      	subs	r1, r3, #1
 8000f04:	9b00      	ldr	r3, [sp, #0]
 8000f06:	469c      	mov	ip, r3
 8000f08:	4465      	add	r5, ip
 8000f0a:	001f      	movs	r7, r3
 8000f0c:	429d      	cmp	r5, r3
 8000f0e:	419b      	sbcs	r3, r3
 8000f10:	425b      	negs	r3, r3
 8000f12:	191b      	adds	r3, r3, r4
 8000f14:	18c0      	adds	r0, r0, r3
 8000f16:	4284      	cmp	r4, r0
 8000f18:	d200      	bcs.n	8000f1c <__aeabi_ddiv+0x1c8>
 8000f1a:	e1a0      	b.n	800125e <__aeabi_ddiv+0x50a>
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_ddiv+0x1cc>
 8000f1e:	e19b      	b.n	8001258 <__aeabi_ddiv+0x504>
 8000f20:	4688      	mov	r8, r1
 8000f22:	1bae      	subs	r6, r5, r6
 8000f24:	42b5      	cmp	r5, r6
 8000f26:	41ad      	sbcs	r5, r5
 8000f28:	1a80      	subs	r0, r0, r2
 8000f2a:	426d      	negs	r5, r5
 8000f2c:	1b40      	subs	r0, r0, r5
 8000f2e:	4284      	cmp	r4, r0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_ddiv+0x1e0>
 8000f32:	e1d5      	b.n	80012e0 <__aeabi_ddiv+0x58c>
 8000f34:	4649      	mov	r1, r9
 8000f36:	f7ff f989 	bl	800024c <__aeabi_uidivmod>
 8000f3a:	9a01      	ldr	r2, [sp, #4]
 8000f3c:	040b      	lsls	r3, r1, #16
 8000f3e:	4342      	muls	r2, r0
 8000f40:	0c31      	lsrs	r1, r6, #16
 8000f42:	0005      	movs	r5, r0
 8000f44:	4319      	orrs	r1, r3
 8000f46:	428a      	cmp	r2, r1
 8000f48:	d900      	bls.n	8000f4c <__aeabi_ddiv+0x1f8>
 8000f4a:	e16c      	b.n	8001226 <__aeabi_ddiv+0x4d2>
 8000f4c:	1a88      	subs	r0, r1, r2
 8000f4e:	4649      	mov	r1, r9
 8000f50:	f7ff f97c 	bl	800024c <__aeabi_uidivmod>
 8000f54:	9a01      	ldr	r2, [sp, #4]
 8000f56:	0436      	lsls	r6, r6, #16
 8000f58:	4342      	muls	r2, r0
 8000f5a:	0409      	lsls	r1, r1, #16
 8000f5c:	0c36      	lsrs	r6, r6, #16
 8000f5e:	0003      	movs	r3, r0
 8000f60:	430e      	orrs	r6, r1
 8000f62:	42b2      	cmp	r2, r6
 8000f64:	d900      	bls.n	8000f68 <__aeabi_ddiv+0x214>
 8000f66:	e153      	b.n	8001210 <__aeabi_ddiv+0x4bc>
 8000f68:	9803      	ldr	r0, [sp, #12]
 8000f6a:	1ab6      	subs	r6, r6, r2
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	042d      	lsls	r5, r5, #16
 8000f70:	431d      	orrs	r5, r3
 8000f72:	9f02      	ldr	r7, [sp, #8]
 8000f74:	042b      	lsls	r3, r5, #16
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	435a      	muls	r2, r3
 8000f7a:	437b      	muls	r3, r7
 8000f7c:	469c      	mov	ip, r3
 8000f7e:	0c29      	lsrs	r1, r5, #16
 8000f80:	4348      	muls	r0, r1
 8000f82:	0c13      	lsrs	r3, r2, #16
 8000f84:	4484      	add	ip, r0
 8000f86:	4463      	add	r3, ip
 8000f88:	4379      	muls	r1, r7
 8000f8a:	4298      	cmp	r0, r3
 8000f8c:	d903      	bls.n	8000f96 <__aeabi_ddiv+0x242>
 8000f8e:	2080      	movs	r0, #128	; 0x80
 8000f90:	0240      	lsls	r0, r0, #9
 8000f92:	4684      	mov	ip, r0
 8000f94:	4461      	add	r1, ip
 8000f96:	0c18      	lsrs	r0, r3, #16
 8000f98:	0412      	lsls	r2, r2, #16
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	0c12      	lsrs	r2, r2, #16
 8000f9e:	1841      	adds	r1, r0, r1
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	428e      	cmp	r6, r1
 8000fa4:	d200      	bcs.n	8000fa8 <__aeabi_ddiv+0x254>
 8000fa6:	e0ff      	b.n	80011a8 <__aeabi_ddiv+0x454>
 8000fa8:	d100      	bne.n	8000fac <__aeabi_ddiv+0x258>
 8000faa:	e0fa      	b.n	80011a2 <__aeabi_ddiv+0x44e>
 8000fac:	2301      	movs	r3, #1
 8000fae:	431d      	orrs	r5, r3
 8000fb0:	4a49      	ldr	r2, [pc, #292]	; (80010d8 <__aeabi_ddiv+0x384>)
 8000fb2:	445a      	add	r2, fp
 8000fb4:	2a00      	cmp	r2, #0
 8000fb6:	dc00      	bgt.n	8000fba <__aeabi_ddiv+0x266>
 8000fb8:	e0aa      	b.n	8001110 <__aeabi_ddiv+0x3bc>
 8000fba:	076b      	lsls	r3, r5, #29
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_ddiv+0x26c>
 8000fbe:	e13d      	b.n	800123c <__aeabi_ddiv+0x4e8>
 8000fc0:	08ed      	lsrs	r5, r5, #3
 8000fc2:	4643      	mov	r3, r8
 8000fc4:	01db      	lsls	r3, r3, #7
 8000fc6:	d506      	bpl.n	8000fd6 <__aeabi_ddiv+0x282>
 8000fc8:	4642      	mov	r2, r8
 8000fca:	4b44      	ldr	r3, [pc, #272]	; (80010dc <__aeabi_ddiv+0x388>)
 8000fcc:	401a      	ands	r2, r3
 8000fce:	4690      	mov	r8, r2
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	00d2      	lsls	r2, r2, #3
 8000fd4:	445a      	add	r2, fp
 8000fd6:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <__aeabi_ddiv+0x38c>)
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dd00      	ble.n	8000fde <__aeabi_ddiv+0x28a>
 8000fdc:	e71f      	b.n	8000e1e <__aeabi_ddiv+0xca>
 8000fde:	4643      	mov	r3, r8
 8000fe0:	075b      	lsls	r3, r3, #29
 8000fe2:	431d      	orrs	r5, r3
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	0552      	lsls	r2, r2, #21
 8000fe8:	025c      	lsls	r4, r3, #9
 8000fea:	0b24      	lsrs	r4, r4, #12
 8000fec:	0d53      	lsrs	r3, r2, #21
 8000fee:	e708      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8000ff0:	4652      	mov	r2, sl
 8000ff2:	4322      	orrs	r2, r4
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_ddiv+0x2a4>
 8000ff6:	e07b      	b.n	80010f0 <__aeabi_ddiv+0x39c>
 8000ff8:	2c00      	cmp	r4, #0
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x2aa>
 8000ffc:	e0fa      	b.n	80011f4 <__aeabi_ddiv+0x4a0>
 8000ffe:	0020      	movs	r0, r4
 8001000:	f001 f952 	bl	80022a8 <__clzsi2>
 8001004:	0002      	movs	r2, r0
 8001006:	3a0b      	subs	r2, #11
 8001008:	231d      	movs	r3, #29
 800100a:	0001      	movs	r1, r0
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	4652      	mov	r2, sl
 8001010:	3908      	subs	r1, #8
 8001012:	40da      	lsrs	r2, r3
 8001014:	408c      	lsls	r4, r1
 8001016:	4314      	orrs	r4, r2
 8001018:	4652      	mov	r2, sl
 800101a:	408a      	lsls	r2, r1
 800101c:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <__aeabi_ddiv+0x390>)
 800101e:	4458      	add	r0, fp
 8001020:	469b      	mov	fp, r3
 8001022:	4483      	add	fp, r0
 8001024:	2000      	movs	r0, #0
 8001026:	e6d5      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 8001028:	464b      	mov	r3, r9
 800102a:	4323      	orrs	r3, r4
 800102c:	4698      	mov	r8, r3
 800102e:	d044      	beq.n	80010ba <__aeabi_ddiv+0x366>
 8001030:	2c00      	cmp	r4, #0
 8001032:	d100      	bne.n	8001036 <__aeabi_ddiv+0x2e2>
 8001034:	e0ce      	b.n	80011d4 <__aeabi_ddiv+0x480>
 8001036:	0020      	movs	r0, r4
 8001038:	f001 f936 	bl	80022a8 <__clzsi2>
 800103c:	0001      	movs	r1, r0
 800103e:	0002      	movs	r2, r0
 8001040:	390b      	subs	r1, #11
 8001042:	231d      	movs	r3, #29
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	4649      	mov	r1, r9
 8001048:	0010      	movs	r0, r2
 800104a:	40d9      	lsrs	r1, r3
 800104c:	3808      	subs	r0, #8
 800104e:	4084      	lsls	r4, r0
 8001050:	000b      	movs	r3, r1
 8001052:	464d      	mov	r5, r9
 8001054:	4323      	orrs	r3, r4
 8001056:	4698      	mov	r8, r3
 8001058:	4085      	lsls	r5, r0
 800105a:	4823      	ldr	r0, [pc, #140]	; (80010e8 <__aeabi_ddiv+0x394>)
 800105c:	1a83      	subs	r3, r0, r2
 800105e:	469b      	mov	fp, r3
 8001060:	2300      	movs	r3, #0
 8001062:	4699      	mov	r9, r3
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	e69a      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 8001068:	464b      	mov	r3, r9
 800106a:	4323      	orrs	r3, r4
 800106c:	4698      	mov	r8, r3
 800106e:	d11d      	bne.n	80010ac <__aeabi_ddiv+0x358>
 8001070:	2308      	movs	r3, #8
 8001072:	4699      	mov	r9, r3
 8001074:	3b06      	subs	r3, #6
 8001076:	2500      	movs	r5, #0
 8001078:	4683      	mov	fp, r0
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	e68f      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 800107e:	4652      	mov	r2, sl
 8001080:	4322      	orrs	r2, r4
 8001082:	d109      	bne.n	8001098 <__aeabi_ddiv+0x344>
 8001084:	2302      	movs	r3, #2
 8001086:	4649      	mov	r1, r9
 8001088:	4319      	orrs	r1, r3
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <__aeabi_ddiv+0x398>)
 800108c:	4689      	mov	r9, r1
 800108e:	469c      	mov	ip, r3
 8001090:	2400      	movs	r4, #0
 8001092:	2002      	movs	r0, #2
 8001094:	44e3      	add	fp, ip
 8001096:	e69d      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 8001098:	2303      	movs	r3, #3
 800109a:	464a      	mov	r2, r9
 800109c:	431a      	orrs	r2, r3
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <__aeabi_ddiv+0x398>)
 80010a0:	4691      	mov	r9, r2
 80010a2:	469c      	mov	ip, r3
 80010a4:	4652      	mov	r2, sl
 80010a6:	2003      	movs	r0, #3
 80010a8:	44e3      	add	fp, ip
 80010aa:	e693      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 80010ac:	230c      	movs	r3, #12
 80010ae:	4699      	mov	r9, r3
 80010b0:	3b09      	subs	r3, #9
 80010b2:	46a0      	mov	r8, r4
 80010b4:	4683      	mov	fp, r0
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	e671      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 80010ba:	2304      	movs	r3, #4
 80010bc:	4699      	mov	r9, r3
 80010be:	2300      	movs	r3, #0
 80010c0:	469b      	mov	fp, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	2500      	movs	r5, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	e669      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	000007ff 	.word	0x000007ff
 80010d0:	fffffc01 	.word	0xfffffc01
 80010d4:	0800a694 	.word	0x0800a694
 80010d8:	000003ff 	.word	0x000003ff
 80010dc:	feffffff 	.word	0xfeffffff
 80010e0:	000007fe 	.word	0x000007fe
 80010e4:	000003f3 	.word	0x000003f3
 80010e8:	fffffc0d 	.word	0xfffffc0d
 80010ec:	fffff801 	.word	0xfffff801
 80010f0:	4649      	mov	r1, r9
 80010f2:	2301      	movs	r3, #1
 80010f4:	4319      	orrs	r1, r3
 80010f6:	4689      	mov	r9, r1
 80010f8:	2400      	movs	r4, #0
 80010fa:	2001      	movs	r0, #1
 80010fc:	e66a      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 80010fe:	2300      	movs	r3, #0
 8001100:	2480      	movs	r4, #128	; 0x80
 8001102:	469a      	mov	sl, r3
 8001104:	2500      	movs	r5, #0
 8001106:	4b8a      	ldr	r3, [pc, #552]	; (8001330 <__aeabi_ddiv+0x5dc>)
 8001108:	0324      	lsls	r4, r4, #12
 800110a:	e67a      	b.n	8000e02 <__aeabi_ddiv+0xae>
 800110c:	2501      	movs	r5, #1
 800110e:	426d      	negs	r5, r5
 8001110:	2301      	movs	r3, #1
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	2b38      	cmp	r3, #56	; 0x38
 8001116:	dd00      	ble.n	800111a <__aeabi_ddiv+0x3c6>
 8001118:	e670      	b.n	8000dfc <__aeabi_ddiv+0xa8>
 800111a:	2b1f      	cmp	r3, #31
 800111c:	dc00      	bgt.n	8001120 <__aeabi_ddiv+0x3cc>
 800111e:	e0bf      	b.n	80012a0 <__aeabi_ddiv+0x54c>
 8001120:	211f      	movs	r1, #31
 8001122:	4249      	negs	r1, r1
 8001124:	1a8a      	subs	r2, r1, r2
 8001126:	4641      	mov	r1, r8
 8001128:	40d1      	lsrs	r1, r2
 800112a:	000a      	movs	r2, r1
 800112c:	2b20      	cmp	r3, #32
 800112e:	d004      	beq.n	800113a <__aeabi_ddiv+0x3e6>
 8001130:	4641      	mov	r1, r8
 8001132:	4b80      	ldr	r3, [pc, #512]	; (8001334 <__aeabi_ddiv+0x5e0>)
 8001134:	445b      	add	r3, fp
 8001136:	4099      	lsls	r1, r3
 8001138:	430d      	orrs	r5, r1
 800113a:	1e6b      	subs	r3, r5, #1
 800113c:	419d      	sbcs	r5, r3
 800113e:	2307      	movs	r3, #7
 8001140:	432a      	orrs	r2, r5
 8001142:	001d      	movs	r5, r3
 8001144:	2400      	movs	r4, #0
 8001146:	4015      	ands	r5, r2
 8001148:	4213      	tst	r3, r2
 800114a:	d100      	bne.n	800114e <__aeabi_ddiv+0x3fa>
 800114c:	e0d4      	b.n	80012f8 <__aeabi_ddiv+0x5a4>
 800114e:	210f      	movs	r1, #15
 8001150:	2300      	movs	r3, #0
 8001152:	4011      	ands	r1, r2
 8001154:	2904      	cmp	r1, #4
 8001156:	d100      	bne.n	800115a <__aeabi_ddiv+0x406>
 8001158:	e0cb      	b.n	80012f2 <__aeabi_ddiv+0x59e>
 800115a:	1d11      	adds	r1, r2, #4
 800115c:	4291      	cmp	r1, r2
 800115e:	4192      	sbcs	r2, r2
 8001160:	4252      	negs	r2, r2
 8001162:	189b      	adds	r3, r3, r2
 8001164:	000a      	movs	r2, r1
 8001166:	0219      	lsls	r1, r3, #8
 8001168:	d400      	bmi.n	800116c <__aeabi_ddiv+0x418>
 800116a:	e0c2      	b.n	80012f2 <__aeabi_ddiv+0x59e>
 800116c:	2301      	movs	r3, #1
 800116e:	2400      	movs	r4, #0
 8001170:	2500      	movs	r5, #0
 8001172:	e646      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	4641      	mov	r1, r8
 8001178:	031b      	lsls	r3, r3, #12
 800117a:	4219      	tst	r1, r3
 800117c:	d008      	beq.n	8001190 <__aeabi_ddiv+0x43c>
 800117e:	421c      	tst	r4, r3
 8001180:	d106      	bne.n	8001190 <__aeabi_ddiv+0x43c>
 8001182:	431c      	orrs	r4, r3
 8001184:	0324      	lsls	r4, r4, #12
 8001186:	46ba      	mov	sl, r7
 8001188:	0015      	movs	r5, r2
 800118a:	4b69      	ldr	r3, [pc, #420]	; (8001330 <__aeabi_ddiv+0x5dc>)
 800118c:	0b24      	lsrs	r4, r4, #12
 800118e:	e638      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001190:	2480      	movs	r4, #128	; 0x80
 8001192:	4643      	mov	r3, r8
 8001194:	0324      	lsls	r4, r4, #12
 8001196:	431c      	orrs	r4, r3
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	46b2      	mov	sl, r6
 800119c:	4b64      	ldr	r3, [pc, #400]	; (8001330 <__aeabi_ddiv+0x5dc>)
 800119e:	0b24      	lsrs	r4, r4, #12
 80011a0:	e62f      	b.n	8000e02 <__aeabi_ddiv+0xae>
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x454>
 80011a6:	e703      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 80011a8:	19a6      	adds	r6, r4, r6
 80011aa:	1e68      	subs	r0, r5, #1
 80011ac:	42a6      	cmp	r6, r4
 80011ae:	d200      	bcs.n	80011b2 <__aeabi_ddiv+0x45e>
 80011b0:	e08d      	b.n	80012ce <__aeabi_ddiv+0x57a>
 80011b2:	428e      	cmp	r6, r1
 80011b4:	d200      	bcs.n	80011b8 <__aeabi_ddiv+0x464>
 80011b6:	e0a3      	b.n	8001300 <__aeabi_ddiv+0x5ac>
 80011b8:	d100      	bne.n	80011bc <__aeabi_ddiv+0x468>
 80011ba:	e0b3      	b.n	8001324 <__aeabi_ddiv+0x5d0>
 80011bc:	0005      	movs	r5, r0
 80011be:	e6f5      	b.n	8000fac <__aeabi_ddiv+0x258>
 80011c0:	42aa      	cmp	r2, r5
 80011c2:	d900      	bls.n	80011c6 <__aeabi_ddiv+0x472>
 80011c4:	e639      	b.n	8000e3a <__aeabi_ddiv+0xe6>
 80011c6:	4643      	mov	r3, r8
 80011c8:	07de      	lsls	r6, r3, #31
 80011ca:	0858      	lsrs	r0, r3, #1
 80011cc:	086b      	lsrs	r3, r5, #1
 80011ce:	431e      	orrs	r6, r3
 80011d0:	07ed      	lsls	r5, r5, #31
 80011d2:	e639      	b.n	8000e48 <__aeabi_ddiv+0xf4>
 80011d4:	4648      	mov	r0, r9
 80011d6:	f001 f867 	bl	80022a8 <__clzsi2>
 80011da:	0001      	movs	r1, r0
 80011dc:	0002      	movs	r2, r0
 80011de:	3115      	adds	r1, #21
 80011e0:	3220      	adds	r2, #32
 80011e2:	291c      	cmp	r1, #28
 80011e4:	dc00      	bgt.n	80011e8 <__aeabi_ddiv+0x494>
 80011e6:	e72c      	b.n	8001042 <__aeabi_ddiv+0x2ee>
 80011e8:	464b      	mov	r3, r9
 80011ea:	3808      	subs	r0, #8
 80011ec:	4083      	lsls	r3, r0
 80011ee:	2500      	movs	r5, #0
 80011f0:	4698      	mov	r8, r3
 80011f2:	e732      	b.n	800105a <__aeabi_ddiv+0x306>
 80011f4:	f001 f858 	bl	80022a8 <__clzsi2>
 80011f8:	0003      	movs	r3, r0
 80011fa:	001a      	movs	r2, r3
 80011fc:	3215      	adds	r2, #21
 80011fe:	3020      	adds	r0, #32
 8001200:	2a1c      	cmp	r2, #28
 8001202:	dc00      	bgt.n	8001206 <__aeabi_ddiv+0x4b2>
 8001204:	e700      	b.n	8001008 <__aeabi_ddiv+0x2b4>
 8001206:	4654      	mov	r4, sl
 8001208:	3b08      	subs	r3, #8
 800120a:	2200      	movs	r2, #0
 800120c:	409c      	lsls	r4, r3
 800120e:	e705      	b.n	800101c <__aeabi_ddiv+0x2c8>
 8001210:	1936      	adds	r6, r6, r4
 8001212:	3b01      	subs	r3, #1
 8001214:	42b4      	cmp	r4, r6
 8001216:	d900      	bls.n	800121a <__aeabi_ddiv+0x4c6>
 8001218:	e6a6      	b.n	8000f68 <__aeabi_ddiv+0x214>
 800121a:	42b2      	cmp	r2, r6
 800121c:	d800      	bhi.n	8001220 <__aeabi_ddiv+0x4cc>
 800121e:	e6a3      	b.n	8000f68 <__aeabi_ddiv+0x214>
 8001220:	1e83      	subs	r3, r0, #2
 8001222:	1936      	adds	r6, r6, r4
 8001224:	e6a0      	b.n	8000f68 <__aeabi_ddiv+0x214>
 8001226:	1909      	adds	r1, r1, r4
 8001228:	3d01      	subs	r5, #1
 800122a:	428c      	cmp	r4, r1
 800122c:	d900      	bls.n	8001230 <__aeabi_ddiv+0x4dc>
 800122e:	e68d      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8001230:	428a      	cmp	r2, r1
 8001232:	d800      	bhi.n	8001236 <__aeabi_ddiv+0x4e2>
 8001234:	e68a      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8001236:	1e85      	subs	r5, r0, #2
 8001238:	1909      	adds	r1, r1, r4
 800123a:	e687      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 800123c:	230f      	movs	r3, #15
 800123e:	402b      	ands	r3, r5
 8001240:	2b04      	cmp	r3, #4
 8001242:	d100      	bne.n	8001246 <__aeabi_ddiv+0x4f2>
 8001244:	e6bc      	b.n	8000fc0 <__aeabi_ddiv+0x26c>
 8001246:	2305      	movs	r3, #5
 8001248:	425b      	negs	r3, r3
 800124a:	42ab      	cmp	r3, r5
 800124c:	419b      	sbcs	r3, r3
 800124e:	3504      	adds	r5, #4
 8001250:	425b      	negs	r3, r3
 8001252:	08ed      	lsrs	r5, r5, #3
 8001254:	4498      	add	r8, r3
 8001256:	e6b4      	b.n	8000fc2 <__aeabi_ddiv+0x26e>
 8001258:	42af      	cmp	r7, r5
 800125a:	d900      	bls.n	800125e <__aeabi_ddiv+0x50a>
 800125c:	e660      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 800125e:	4282      	cmp	r2, r0
 8001260:	d804      	bhi.n	800126c <__aeabi_ddiv+0x518>
 8001262:	d000      	beq.n	8001266 <__aeabi_ddiv+0x512>
 8001264:	e65c      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 8001266:	42ae      	cmp	r6, r5
 8001268:	d800      	bhi.n	800126c <__aeabi_ddiv+0x518>
 800126a:	e659      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 800126c:	2302      	movs	r3, #2
 800126e:	425b      	negs	r3, r3
 8001270:	469c      	mov	ip, r3
 8001272:	9b00      	ldr	r3, [sp, #0]
 8001274:	44e0      	add	r8, ip
 8001276:	469c      	mov	ip, r3
 8001278:	4465      	add	r5, ip
 800127a:	429d      	cmp	r5, r3
 800127c:	419b      	sbcs	r3, r3
 800127e:	425b      	negs	r3, r3
 8001280:	191b      	adds	r3, r3, r4
 8001282:	18c0      	adds	r0, r0, r3
 8001284:	e64d      	b.n	8000f22 <__aeabi_ddiv+0x1ce>
 8001286:	428a      	cmp	r2, r1
 8001288:	d800      	bhi.n	800128c <__aeabi_ddiv+0x538>
 800128a:	e60e      	b.n	8000eaa <__aeabi_ddiv+0x156>
 800128c:	1e83      	subs	r3, r0, #2
 800128e:	1909      	adds	r1, r1, r4
 8001290:	e60b      	b.n	8000eaa <__aeabi_ddiv+0x156>
 8001292:	428a      	cmp	r2, r1
 8001294:	d800      	bhi.n	8001298 <__aeabi_ddiv+0x544>
 8001296:	e5f4      	b.n	8000e82 <__aeabi_ddiv+0x12e>
 8001298:	1e83      	subs	r3, r0, #2
 800129a:	4698      	mov	r8, r3
 800129c:	1909      	adds	r1, r1, r4
 800129e:	e5f0      	b.n	8000e82 <__aeabi_ddiv+0x12e>
 80012a0:	4925      	ldr	r1, [pc, #148]	; (8001338 <__aeabi_ddiv+0x5e4>)
 80012a2:	0028      	movs	r0, r5
 80012a4:	4459      	add	r1, fp
 80012a6:	408d      	lsls	r5, r1
 80012a8:	4642      	mov	r2, r8
 80012aa:	408a      	lsls	r2, r1
 80012ac:	1e69      	subs	r1, r5, #1
 80012ae:	418d      	sbcs	r5, r1
 80012b0:	4641      	mov	r1, r8
 80012b2:	40d8      	lsrs	r0, r3
 80012b4:	40d9      	lsrs	r1, r3
 80012b6:	4302      	orrs	r2, r0
 80012b8:	432a      	orrs	r2, r5
 80012ba:	000b      	movs	r3, r1
 80012bc:	0751      	lsls	r1, r2, #29
 80012be:	d100      	bne.n	80012c2 <__aeabi_ddiv+0x56e>
 80012c0:	e751      	b.n	8001166 <__aeabi_ddiv+0x412>
 80012c2:	210f      	movs	r1, #15
 80012c4:	4011      	ands	r1, r2
 80012c6:	2904      	cmp	r1, #4
 80012c8:	d000      	beq.n	80012cc <__aeabi_ddiv+0x578>
 80012ca:	e746      	b.n	800115a <__aeabi_ddiv+0x406>
 80012cc:	e74b      	b.n	8001166 <__aeabi_ddiv+0x412>
 80012ce:	0005      	movs	r5, r0
 80012d0:	428e      	cmp	r6, r1
 80012d2:	d000      	beq.n	80012d6 <__aeabi_ddiv+0x582>
 80012d4:	e66a      	b.n	8000fac <__aeabi_ddiv+0x258>
 80012d6:	9a00      	ldr	r2, [sp, #0]
 80012d8:	4293      	cmp	r3, r2
 80012da:	d000      	beq.n	80012de <__aeabi_ddiv+0x58a>
 80012dc:	e666      	b.n	8000fac <__aeabi_ddiv+0x258>
 80012de:	e667      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 80012e0:	4a16      	ldr	r2, [pc, #88]	; (800133c <__aeabi_ddiv+0x5e8>)
 80012e2:	445a      	add	r2, fp
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	dc00      	bgt.n	80012ea <__aeabi_ddiv+0x596>
 80012e8:	e710      	b.n	800110c <__aeabi_ddiv+0x3b8>
 80012ea:	2301      	movs	r3, #1
 80012ec:	2500      	movs	r5, #0
 80012ee:	4498      	add	r8, r3
 80012f0:	e667      	b.n	8000fc2 <__aeabi_ddiv+0x26e>
 80012f2:	075d      	lsls	r5, r3, #29
 80012f4:	025b      	lsls	r3, r3, #9
 80012f6:	0b1c      	lsrs	r4, r3, #12
 80012f8:	08d2      	lsrs	r2, r2, #3
 80012fa:	2300      	movs	r3, #0
 80012fc:	4315      	orrs	r5, r2
 80012fe:	e580      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001300:	9800      	ldr	r0, [sp, #0]
 8001302:	3d02      	subs	r5, #2
 8001304:	0042      	lsls	r2, r0, #1
 8001306:	4282      	cmp	r2, r0
 8001308:	41bf      	sbcs	r7, r7
 800130a:	427f      	negs	r7, r7
 800130c:	193c      	adds	r4, r7, r4
 800130e:	1936      	adds	r6, r6, r4
 8001310:	9200      	str	r2, [sp, #0]
 8001312:	e7dd      	b.n	80012d0 <__aeabi_ddiv+0x57c>
 8001314:	2480      	movs	r4, #128	; 0x80
 8001316:	4643      	mov	r3, r8
 8001318:	0324      	lsls	r4, r4, #12
 800131a:	431c      	orrs	r4, r3
 800131c:	0324      	lsls	r4, r4, #12
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__aeabi_ddiv+0x5dc>)
 8001320:	0b24      	lsrs	r4, r4, #12
 8001322:	e56e      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001324:	9a00      	ldr	r2, [sp, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3ea      	bcc.n	8001300 <__aeabi_ddiv+0x5ac>
 800132a:	0005      	movs	r5, r0
 800132c:	e7d3      	b.n	80012d6 <__aeabi_ddiv+0x582>
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	000007ff 	.word	0x000007ff
 8001334:	0000043e 	.word	0x0000043e
 8001338:	0000041e 	.word	0x0000041e
 800133c:	000003ff 	.word	0x000003ff

08001340 <__eqdf2>:
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	464e      	mov	r6, r9
 8001344:	4645      	mov	r5, r8
 8001346:	46de      	mov	lr, fp
 8001348:	4657      	mov	r7, sl
 800134a:	4690      	mov	r8, r2
 800134c:	b5e0      	push	{r5, r6, r7, lr}
 800134e:	0017      	movs	r7, r2
 8001350:	031a      	lsls	r2, r3, #12
 8001352:	0b12      	lsrs	r2, r2, #12
 8001354:	0005      	movs	r5, r0
 8001356:	4684      	mov	ip, r0
 8001358:	4819      	ldr	r0, [pc, #100]	; (80013c0 <__eqdf2+0x80>)
 800135a:	030e      	lsls	r6, r1, #12
 800135c:	004c      	lsls	r4, r1, #1
 800135e:	4691      	mov	r9, r2
 8001360:	005a      	lsls	r2, r3, #1
 8001362:	0fdb      	lsrs	r3, r3, #31
 8001364:	469b      	mov	fp, r3
 8001366:	0b36      	lsrs	r6, r6, #12
 8001368:	0d64      	lsrs	r4, r4, #21
 800136a:	0fc9      	lsrs	r1, r1, #31
 800136c:	0d52      	lsrs	r2, r2, #21
 800136e:	4284      	cmp	r4, r0
 8001370:	d019      	beq.n	80013a6 <__eqdf2+0x66>
 8001372:	4282      	cmp	r2, r0
 8001374:	d010      	beq.n	8001398 <__eqdf2+0x58>
 8001376:	2001      	movs	r0, #1
 8001378:	4294      	cmp	r4, r2
 800137a:	d10e      	bne.n	800139a <__eqdf2+0x5a>
 800137c:	454e      	cmp	r6, r9
 800137e:	d10c      	bne.n	800139a <__eqdf2+0x5a>
 8001380:	2001      	movs	r0, #1
 8001382:	45c4      	cmp	ip, r8
 8001384:	d109      	bne.n	800139a <__eqdf2+0x5a>
 8001386:	4559      	cmp	r1, fp
 8001388:	d017      	beq.n	80013ba <__eqdf2+0x7a>
 800138a:	2c00      	cmp	r4, #0
 800138c:	d105      	bne.n	800139a <__eqdf2+0x5a>
 800138e:	0030      	movs	r0, r6
 8001390:	4328      	orrs	r0, r5
 8001392:	1e43      	subs	r3, r0, #1
 8001394:	4198      	sbcs	r0, r3
 8001396:	e000      	b.n	800139a <__eqdf2+0x5a>
 8001398:	2001      	movs	r0, #1
 800139a:	bcf0      	pop	{r4, r5, r6, r7}
 800139c:	46bb      	mov	fp, r7
 800139e:	46b2      	mov	sl, r6
 80013a0:	46a9      	mov	r9, r5
 80013a2:	46a0      	mov	r8, r4
 80013a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a6:	0033      	movs	r3, r6
 80013a8:	2001      	movs	r0, #1
 80013aa:	432b      	orrs	r3, r5
 80013ac:	d1f5      	bne.n	800139a <__eqdf2+0x5a>
 80013ae:	42a2      	cmp	r2, r4
 80013b0:	d1f3      	bne.n	800139a <__eqdf2+0x5a>
 80013b2:	464b      	mov	r3, r9
 80013b4:	433b      	orrs	r3, r7
 80013b6:	d1f0      	bne.n	800139a <__eqdf2+0x5a>
 80013b8:	e7e2      	b.n	8001380 <__eqdf2+0x40>
 80013ba:	2000      	movs	r0, #0
 80013bc:	e7ed      	b.n	800139a <__eqdf2+0x5a>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	000007ff 	.word	0x000007ff

080013c4 <__gedf2>:
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	4647      	mov	r7, r8
 80013c8:	46ce      	mov	lr, r9
 80013ca:	0004      	movs	r4, r0
 80013cc:	0018      	movs	r0, r3
 80013ce:	0016      	movs	r6, r2
 80013d0:	031b      	lsls	r3, r3, #12
 80013d2:	0b1b      	lsrs	r3, r3, #12
 80013d4:	4d2d      	ldr	r5, [pc, #180]	; (800148c <__gedf2+0xc8>)
 80013d6:	004a      	lsls	r2, r1, #1
 80013d8:	4699      	mov	r9, r3
 80013da:	b580      	push	{r7, lr}
 80013dc:	0043      	lsls	r3, r0, #1
 80013de:	030f      	lsls	r7, r1, #12
 80013e0:	46a4      	mov	ip, r4
 80013e2:	46b0      	mov	r8, r6
 80013e4:	0b3f      	lsrs	r7, r7, #12
 80013e6:	0d52      	lsrs	r2, r2, #21
 80013e8:	0fc9      	lsrs	r1, r1, #31
 80013ea:	0d5b      	lsrs	r3, r3, #21
 80013ec:	0fc0      	lsrs	r0, r0, #31
 80013ee:	42aa      	cmp	r2, r5
 80013f0:	d021      	beq.n	8001436 <__gedf2+0x72>
 80013f2:	42ab      	cmp	r3, r5
 80013f4:	d013      	beq.n	800141e <__gedf2+0x5a>
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d122      	bne.n	8001440 <__gedf2+0x7c>
 80013fa:	433c      	orrs	r4, r7
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <__gedf2+0x42>
 8001400:	464d      	mov	r5, r9
 8001402:	432e      	orrs	r6, r5
 8001404:	d022      	beq.n	800144c <__gedf2+0x88>
 8001406:	2c00      	cmp	r4, #0
 8001408:	d010      	beq.n	800142c <__gedf2+0x68>
 800140a:	4281      	cmp	r1, r0
 800140c:	d022      	beq.n	8001454 <__gedf2+0x90>
 800140e:	2002      	movs	r0, #2
 8001410:	3901      	subs	r1, #1
 8001412:	4008      	ands	r0, r1
 8001414:	3801      	subs	r0, #1
 8001416:	bcc0      	pop	{r6, r7}
 8001418:	46b9      	mov	r9, r7
 800141a:	46b0      	mov	r8, r6
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	464d      	mov	r5, r9
 8001420:	432e      	orrs	r6, r5
 8001422:	d129      	bne.n	8001478 <__gedf2+0xb4>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d1f0      	bne.n	800140a <__gedf2+0x46>
 8001428:	433c      	orrs	r4, r7
 800142a:	d1ee      	bne.n	800140a <__gedf2+0x46>
 800142c:	2800      	cmp	r0, #0
 800142e:	d1f2      	bne.n	8001416 <__gedf2+0x52>
 8001430:	2001      	movs	r0, #1
 8001432:	4240      	negs	r0, r0
 8001434:	e7ef      	b.n	8001416 <__gedf2+0x52>
 8001436:	003d      	movs	r5, r7
 8001438:	4325      	orrs	r5, r4
 800143a:	d11d      	bne.n	8001478 <__gedf2+0xb4>
 800143c:	4293      	cmp	r3, r2
 800143e:	d0ee      	beq.n	800141e <__gedf2+0x5a>
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1e2      	bne.n	800140a <__gedf2+0x46>
 8001444:	464c      	mov	r4, r9
 8001446:	4326      	orrs	r6, r4
 8001448:	d1df      	bne.n	800140a <__gedf2+0x46>
 800144a:	e7e0      	b.n	800140e <__gedf2+0x4a>
 800144c:	2000      	movs	r0, #0
 800144e:	2c00      	cmp	r4, #0
 8001450:	d0e1      	beq.n	8001416 <__gedf2+0x52>
 8001452:	e7dc      	b.n	800140e <__gedf2+0x4a>
 8001454:	429a      	cmp	r2, r3
 8001456:	dc0a      	bgt.n	800146e <__gedf2+0xaa>
 8001458:	dbe8      	blt.n	800142c <__gedf2+0x68>
 800145a:	454f      	cmp	r7, r9
 800145c:	d8d7      	bhi.n	800140e <__gedf2+0x4a>
 800145e:	d00e      	beq.n	800147e <__gedf2+0xba>
 8001460:	2000      	movs	r0, #0
 8001462:	454f      	cmp	r7, r9
 8001464:	d2d7      	bcs.n	8001416 <__gedf2+0x52>
 8001466:	2900      	cmp	r1, #0
 8001468:	d0e2      	beq.n	8001430 <__gedf2+0x6c>
 800146a:	0008      	movs	r0, r1
 800146c:	e7d3      	b.n	8001416 <__gedf2+0x52>
 800146e:	4243      	negs	r3, r0
 8001470:	4158      	adcs	r0, r3
 8001472:	0040      	lsls	r0, r0, #1
 8001474:	3801      	subs	r0, #1
 8001476:	e7ce      	b.n	8001416 <__gedf2+0x52>
 8001478:	2002      	movs	r0, #2
 800147a:	4240      	negs	r0, r0
 800147c:	e7cb      	b.n	8001416 <__gedf2+0x52>
 800147e:	45c4      	cmp	ip, r8
 8001480:	d8c5      	bhi.n	800140e <__gedf2+0x4a>
 8001482:	2000      	movs	r0, #0
 8001484:	45c4      	cmp	ip, r8
 8001486:	d2c6      	bcs.n	8001416 <__gedf2+0x52>
 8001488:	e7ed      	b.n	8001466 <__gedf2+0xa2>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	000007ff 	.word	0x000007ff

08001490 <__ledf2>:
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	4647      	mov	r7, r8
 8001494:	46ce      	mov	lr, r9
 8001496:	0004      	movs	r4, r0
 8001498:	0018      	movs	r0, r3
 800149a:	0016      	movs	r6, r2
 800149c:	031b      	lsls	r3, r3, #12
 800149e:	0b1b      	lsrs	r3, r3, #12
 80014a0:	4d2c      	ldr	r5, [pc, #176]	; (8001554 <__ledf2+0xc4>)
 80014a2:	004a      	lsls	r2, r1, #1
 80014a4:	4699      	mov	r9, r3
 80014a6:	b580      	push	{r7, lr}
 80014a8:	0043      	lsls	r3, r0, #1
 80014aa:	030f      	lsls	r7, r1, #12
 80014ac:	46a4      	mov	ip, r4
 80014ae:	46b0      	mov	r8, r6
 80014b0:	0b3f      	lsrs	r7, r7, #12
 80014b2:	0d52      	lsrs	r2, r2, #21
 80014b4:	0fc9      	lsrs	r1, r1, #31
 80014b6:	0d5b      	lsrs	r3, r3, #21
 80014b8:	0fc0      	lsrs	r0, r0, #31
 80014ba:	42aa      	cmp	r2, r5
 80014bc:	d00d      	beq.n	80014da <__ledf2+0x4a>
 80014be:	42ab      	cmp	r3, r5
 80014c0:	d010      	beq.n	80014e4 <__ledf2+0x54>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d127      	bne.n	8001516 <__ledf2+0x86>
 80014c6:	433c      	orrs	r4, r7
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <__ledf2+0x60>
 80014cc:	464d      	mov	r5, r9
 80014ce:	432e      	orrs	r6, r5
 80014d0:	d10e      	bne.n	80014f0 <__ledf2+0x60>
 80014d2:	2000      	movs	r0, #0
 80014d4:	2c00      	cmp	r4, #0
 80014d6:	d015      	beq.n	8001504 <__ledf2+0x74>
 80014d8:	e00e      	b.n	80014f8 <__ledf2+0x68>
 80014da:	003d      	movs	r5, r7
 80014dc:	4325      	orrs	r5, r4
 80014de:	d110      	bne.n	8001502 <__ledf2+0x72>
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d118      	bne.n	8001516 <__ledf2+0x86>
 80014e4:	464d      	mov	r5, r9
 80014e6:	432e      	orrs	r6, r5
 80014e8:	d10b      	bne.n	8001502 <__ledf2+0x72>
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d102      	bne.n	80014f4 <__ledf2+0x64>
 80014ee:	433c      	orrs	r4, r7
 80014f0:	2c00      	cmp	r4, #0
 80014f2:	d00b      	beq.n	800150c <__ledf2+0x7c>
 80014f4:	4281      	cmp	r1, r0
 80014f6:	d014      	beq.n	8001522 <__ledf2+0x92>
 80014f8:	2002      	movs	r0, #2
 80014fa:	3901      	subs	r1, #1
 80014fc:	4008      	ands	r0, r1
 80014fe:	3801      	subs	r0, #1
 8001500:	e000      	b.n	8001504 <__ledf2+0x74>
 8001502:	2002      	movs	r0, #2
 8001504:	bcc0      	pop	{r6, r7}
 8001506:	46b9      	mov	r9, r7
 8001508:	46b0      	mov	r8, r6
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150c:	2800      	cmp	r0, #0
 800150e:	d1f9      	bne.n	8001504 <__ledf2+0x74>
 8001510:	2001      	movs	r0, #1
 8001512:	4240      	negs	r0, r0
 8001514:	e7f6      	b.n	8001504 <__ledf2+0x74>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ec      	bne.n	80014f4 <__ledf2+0x64>
 800151a:	464c      	mov	r4, r9
 800151c:	4326      	orrs	r6, r4
 800151e:	d1e9      	bne.n	80014f4 <__ledf2+0x64>
 8001520:	e7ea      	b.n	80014f8 <__ledf2+0x68>
 8001522:	429a      	cmp	r2, r3
 8001524:	dd04      	ble.n	8001530 <__ledf2+0xa0>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	0040      	lsls	r0, r0, #1
 800152c:	3801      	subs	r0, #1
 800152e:	e7e9      	b.n	8001504 <__ledf2+0x74>
 8001530:	429a      	cmp	r2, r3
 8001532:	dbeb      	blt.n	800150c <__ledf2+0x7c>
 8001534:	454f      	cmp	r7, r9
 8001536:	d8df      	bhi.n	80014f8 <__ledf2+0x68>
 8001538:	d006      	beq.n	8001548 <__ledf2+0xb8>
 800153a:	2000      	movs	r0, #0
 800153c:	454f      	cmp	r7, r9
 800153e:	d2e1      	bcs.n	8001504 <__ledf2+0x74>
 8001540:	2900      	cmp	r1, #0
 8001542:	d0e5      	beq.n	8001510 <__ledf2+0x80>
 8001544:	0008      	movs	r0, r1
 8001546:	e7dd      	b.n	8001504 <__ledf2+0x74>
 8001548:	45c4      	cmp	ip, r8
 800154a:	d8d5      	bhi.n	80014f8 <__ledf2+0x68>
 800154c:	2000      	movs	r0, #0
 800154e:	45c4      	cmp	ip, r8
 8001550:	d2d8      	bcs.n	8001504 <__ledf2+0x74>
 8001552:	e7f5      	b.n	8001540 <__ledf2+0xb0>
 8001554:	000007ff 	.word	0x000007ff

08001558 <__aeabi_dmul>:
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	4657      	mov	r7, sl
 800155c:	464e      	mov	r6, r9
 800155e:	4645      	mov	r5, r8
 8001560:	46de      	mov	lr, fp
 8001562:	b5e0      	push	{r5, r6, r7, lr}
 8001564:	4698      	mov	r8, r3
 8001566:	030c      	lsls	r4, r1, #12
 8001568:	004b      	lsls	r3, r1, #1
 800156a:	0006      	movs	r6, r0
 800156c:	4692      	mov	sl, r2
 800156e:	b087      	sub	sp, #28
 8001570:	0b24      	lsrs	r4, r4, #12
 8001572:	0d5b      	lsrs	r3, r3, #21
 8001574:	0fcf      	lsrs	r7, r1, #31
 8001576:	2b00      	cmp	r3, #0
 8001578:	d100      	bne.n	800157c <__aeabi_dmul+0x24>
 800157a:	e15c      	b.n	8001836 <__aeabi_dmul+0x2de>
 800157c:	4ad9      	ldr	r2, [pc, #868]	; (80018e4 <__aeabi_dmul+0x38c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d100      	bne.n	8001584 <__aeabi_dmul+0x2c>
 8001582:	e175      	b.n	8001870 <__aeabi_dmul+0x318>
 8001584:	0f42      	lsrs	r2, r0, #29
 8001586:	00e4      	lsls	r4, r4, #3
 8001588:	4314      	orrs	r4, r2
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	0412      	lsls	r2, r2, #16
 800158e:	4314      	orrs	r4, r2
 8001590:	4ad5      	ldr	r2, [pc, #852]	; (80018e8 <__aeabi_dmul+0x390>)
 8001592:	00c5      	lsls	r5, r0, #3
 8001594:	4694      	mov	ip, r2
 8001596:	4463      	add	r3, ip
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	4699      	mov	r9, r3
 800159e:	469b      	mov	fp, r3
 80015a0:	4643      	mov	r3, r8
 80015a2:	4642      	mov	r2, r8
 80015a4:	031e      	lsls	r6, r3, #12
 80015a6:	0fd2      	lsrs	r2, r2, #31
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4650      	mov	r0, sl
 80015ac:	4690      	mov	r8, r2
 80015ae:	0b36      	lsrs	r6, r6, #12
 80015b0:	0d5b      	lsrs	r3, r3, #21
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dmul+0x5e>
 80015b4:	e120      	b.n	80017f8 <__aeabi_dmul+0x2a0>
 80015b6:	4acb      	ldr	r2, [pc, #812]	; (80018e4 <__aeabi_dmul+0x38c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d100      	bne.n	80015be <__aeabi_dmul+0x66>
 80015bc:	e162      	b.n	8001884 <__aeabi_dmul+0x32c>
 80015be:	49ca      	ldr	r1, [pc, #808]	; (80018e8 <__aeabi_dmul+0x390>)
 80015c0:	0f42      	lsrs	r2, r0, #29
 80015c2:	468c      	mov	ip, r1
 80015c4:	9900      	ldr	r1, [sp, #0]
 80015c6:	4463      	add	r3, ip
 80015c8:	00f6      	lsls	r6, r6, #3
 80015ca:	468c      	mov	ip, r1
 80015cc:	4316      	orrs	r6, r2
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	449c      	add	ip, r3
 80015d2:	0412      	lsls	r2, r2, #16
 80015d4:	4663      	mov	r3, ip
 80015d6:	4316      	orrs	r6, r2
 80015d8:	00c2      	lsls	r2, r0, #3
 80015da:	2000      	movs	r0, #0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	9900      	ldr	r1, [sp, #0]
 80015e0:	4643      	mov	r3, r8
 80015e2:	3101      	adds	r1, #1
 80015e4:	468c      	mov	ip, r1
 80015e6:	4649      	mov	r1, r9
 80015e8:	407b      	eors	r3, r7
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	290f      	cmp	r1, #15
 80015ee:	d826      	bhi.n	800163e <__aeabi_dmul+0xe6>
 80015f0:	4bbe      	ldr	r3, [pc, #760]	; (80018ec <__aeabi_dmul+0x394>)
 80015f2:	0089      	lsls	r1, r1, #2
 80015f4:	5859      	ldr	r1, [r3, r1]
 80015f6:	468f      	mov	pc, r1
 80015f8:	4643      	mov	r3, r8
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	0034      	movs	r4, r6
 80015fe:	0015      	movs	r5, r2
 8001600:	4683      	mov	fp, r0
 8001602:	465b      	mov	r3, fp
 8001604:	2b02      	cmp	r3, #2
 8001606:	d016      	beq.n	8001636 <__aeabi_dmul+0xde>
 8001608:	2b03      	cmp	r3, #3
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0xb6>
 800160c:	e203      	b.n	8001a16 <__aeabi_dmul+0x4be>
 800160e:	2b01      	cmp	r3, #1
 8001610:	d000      	beq.n	8001614 <__aeabi_dmul+0xbc>
 8001612:	e0cd      	b.n	80017b0 <__aeabi_dmul+0x258>
 8001614:	2200      	movs	r2, #0
 8001616:	2400      	movs	r4, #0
 8001618:	2500      	movs	r5, #0
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0512      	lsls	r2, r2, #20
 800161e:	4322      	orrs	r2, r4
 8001620:	07db      	lsls	r3, r3, #31
 8001622:	431a      	orrs	r2, r3
 8001624:	0028      	movs	r0, r5
 8001626:	0011      	movs	r1, r2
 8001628:	b007      	add	sp, #28
 800162a:	bcf0      	pop	{r4, r5, r6, r7}
 800162c:	46bb      	mov	fp, r7
 800162e:	46b2      	mov	sl, r6
 8001630:	46a9      	mov	r9, r5
 8001632:	46a0      	mov	r8, r4
 8001634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001636:	2400      	movs	r4, #0
 8001638:	2500      	movs	r5, #0
 800163a:	4aaa      	ldr	r2, [pc, #680]	; (80018e4 <__aeabi_dmul+0x38c>)
 800163c:	e7ed      	b.n	800161a <__aeabi_dmul+0xc2>
 800163e:	0c28      	lsrs	r0, r5, #16
 8001640:	042d      	lsls	r5, r5, #16
 8001642:	0c2d      	lsrs	r5, r5, #16
 8001644:	002b      	movs	r3, r5
 8001646:	0c11      	lsrs	r1, r2, #16
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	0c12      	lsrs	r2, r2, #16
 800164c:	4353      	muls	r3, r2
 800164e:	4698      	mov	r8, r3
 8001650:	0013      	movs	r3, r2
 8001652:	002f      	movs	r7, r5
 8001654:	4343      	muls	r3, r0
 8001656:	4699      	mov	r9, r3
 8001658:	434f      	muls	r7, r1
 800165a:	444f      	add	r7, r9
 800165c:	46bb      	mov	fp, r7
 800165e:	4647      	mov	r7, r8
 8001660:	000b      	movs	r3, r1
 8001662:	0c3f      	lsrs	r7, r7, #16
 8001664:	46ba      	mov	sl, r7
 8001666:	4343      	muls	r3, r0
 8001668:	44da      	add	sl, fp
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	45d1      	cmp	r9, sl
 800166e:	d904      	bls.n	800167a <__aeabi_dmul+0x122>
 8001670:	2780      	movs	r7, #128	; 0x80
 8001672:	027f      	lsls	r7, r7, #9
 8001674:	46b9      	mov	r9, r7
 8001676:	444b      	add	r3, r9
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	4653      	mov	r3, sl
 800167c:	0c1b      	lsrs	r3, r3, #16
 800167e:	469b      	mov	fp, r3
 8001680:	4653      	mov	r3, sl
 8001682:	041f      	lsls	r7, r3, #16
 8001684:	4643      	mov	r3, r8
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	0c1b      	lsrs	r3, r3, #16
 800168a:	4698      	mov	r8, r3
 800168c:	003b      	movs	r3, r7
 800168e:	4443      	add	r3, r8
 8001690:	9304      	str	r3, [sp, #16]
 8001692:	0c33      	lsrs	r3, r6, #16
 8001694:	0436      	lsls	r6, r6, #16
 8001696:	0c36      	lsrs	r6, r6, #16
 8001698:	4698      	mov	r8, r3
 800169a:	0033      	movs	r3, r6
 800169c:	4343      	muls	r3, r0
 800169e:	4699      	mov	r9, r3
 80016a0:	4643      	mov	r3, r8
 80016a2:	4343      	muls	r3, r0
 80016a4:	002f      	movs	r7, r5
 80016a6:	469a      	mov	sl, r3
 80016a8:	4643      	mov	r3, r8
 80016aa:	4377      	muls	r7, r6
 80016ac:	435d      	muls	r5, r3
 80016ae:	0c38      	lsrs	r0, r7, #16
 80016b0:	444d      	add	r5, r9
 80016b2:	1945      	adds	r5, r0, r5
 80016b4:	45a9      	cmp	r9, r5
 80016b6:	d903      	bls.n	80016c0 <__aeabi_dmul+0x168>
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	025b      	lsls	r3, r3, #9
 80016bc:	4699      	mov	r9, r3
 80016be:	44ca      	add	sl, r9
 80016c0:	043f      	lsls	r7, r7, #16
 80016c2:	0c28      	lsrs	r0, r5, #16
 80016c4:	0c3f      	lsrs	r7, r7, #16
 80016c6:	042d      	lsls	r5, r5, #16
 80016c8:	19ed      	adds	r5, r5, r7
 80016ca:	0c27      	lsrs	r7, r4, #16
 80016cc:	0424      	lsls	r4, r4, #16
 80016ce:	0c24      	lsrs	r4, r4, #16
 80016d0:	0003      	movs	r3, r0
 80016d2:	0020      	movs	r0, r4
 80016d4:	4350      	muls	r0, r2
 80016d6:	437a      	muls	r2, r7
 80016d8:	4691      	mov	r9, r2
 80016da:	003a      	movs	r2, r7
 80016dc:	4453      	add	r3, sl
 80016de:	9305      	str	r3, [sp, #20]
 80016e0:	0c03      	lsrs	r3, r0, #16
 80016e2:	469a      	mov	sl, r3
 80016e4:	434a      	muls	r2, r1
 80016e6:	4361      	muls	r1, r4
 80016e8:	4449      	add	r1, r9
 80016ea:	4451      	add	r1, sl
 80016ec:	44ab      	add	fp, r5
 80016ee:	4589      	cmp	r9, r1
 80016f0:	d903      	bls.n	80016fa <__aeabi_dmul+0x1a2>
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	4699      	mov	r9, r3
 80016f8:	444a      	add	r2, r9
 80016fa:	0400      	lsls	r0, r0, #16
 80016fc:	0c0b      	lsrs	r3, r1, #16
 80016fe:	0c00      	lsrs	r0, r0, #16
 8001700:	0409      	lsls	r1, r1, #16
 8001702:	1809      	adds	r1, r1, r0
 8001704:	0020      	movs	r0, r4
 8001706:	4699      	mov	r9, r3
 8001708:	4643      	mov	r3, r8
 800170a:	4370      	muls	r0, r6
 800170c:	435c      	muls	r4, r3
 800170e:	437e      	muls	r6, r7
 8001710:	435f      	muls	r7, r3
 8001712:	0c03      	lsrs	r3, r0, #16
 8001714:	4698      	mov	r8, r3
 8001716:	19a4      	adds	r4, r4, r6
 8001718:	4444      	add	r4, r8
 800171a:	444a      	add	r2, r9
 800171c:	9703      	str	r7, [sp, #12]
 800171e:	42a6      	cmp	r6, r4
 8001720:	d904      	bls.n	800172c <__aeabi_dmul+0x1d4>
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	4698      	mov	r8, r3
 8001728:	4447      	add	r7, r8
 800172a:	9703      	str	r7, [sp, #12]
 800172c:	0423      	lsls	r3, r4, #16
 800172e:	9e02      	ldr	r6, [sp, #8]
 8001730:	469a      	mov	sl, r3
 8001732:	9b05      	ldr	r3, [sp, #20]
 8001734:	445e      	add	r6, fp
 8001736:	4698      	mov	r8, r3
 8001738:	42ae      	cmp	r6, r5
 800173a:	41ad      	sbcs	r5, r5
 800173c:	1876      	adds	r6, r6, r1
 800173e:	428e      	cmp	r6, r1
 8001740:	4189      	sbcs	r1, r1
 8001742:	0400      	lsls	r0, r0, #16
 8001744:	0c00      	lsrs	r0, r0, #16
 8001746:	4450      	add	r0, sl
 8001748:	4440      	add	r0, r8
 800174a:	426d      	negs	r5, r5
 800174c:	1947      	adds	r7, r0, r5
 800174e:	46b8      	mov	r8, r7
 8001750:	4693      	mov	fp, r2
 8001752:	4249      	negs	r1, r1
 8001754:	4689      	mov	r9, r1
 8001756:	44c3      	add	fp, r8
 8001758:	44d9      	add	r9, fp
 800175a:	4298      	cmp	r0, r3
 800175c:	4180      	sbcs	r0, r0
 800175e:	45a8      	cmp	r8, r5
 8001760:	41ad      	sbcs	r5, r5
 8001762:	4593      	cmp	fp, r2
 8001764:	4192      	sbcs	r2, r2
 8001766:	4589      	cmp	r9, r1
 8001768:	4189      	sbcs	r1, r1
 800176a:	426d      	negs	r5, r5
 800176c:	4240      	negs	r0, r0
 800176e:	4328      	orrs	r0, r5
 8001770:	0c24      	lsrs	r4, r4, #16
 8001772:	4252      	negs	r2, r2
 8001774:	4249      	negs	r1, r1
 8001776:	430a      	orrs	r2, r1
 8001778:	9b03      	ldr	r3, [sp, #12]
 800177a:	1900      	adds	r0, r0, r4
 800177c:	1880      	adds	r0, r0, r2
 800177e:	18c7      	adds	r7, r0, r3
 8001780:	464b      	mov	r3, r9
 8001782:	0ddc      	lsrs	r4, r3, #23
 8001784:	9b04      	ldr	r3, [sp, #16]
 8001786:	0275      	lsls	r5, r6, #9
 8001788:	431d      	orrs	r5, r3
 800178a:	1e6a      	subs	r2, r5, #1
 800178c:	4195      	sbcs	r5, r2
 800178e:	464b      	mov	r3, r9
 8001790:	0df6      	lsrs	r6, r6, #23
 8001792:	027f      	lsls	r7, r7, #9
 8001794:	4335      	orrs	r5, r6
 8001796:	025a      	lsls	r2, r3, #9
 8001798:	433c      	orrs	r4, r7
 800179a:	4315      	orrs	r5, r2
 800179c:	01fb      	lsls	r3, r7, #7
 800179e:	d400      	bmi.n	80017a2 <__aeabi_dmul+0x24a>
 80017a0:	e11c      	b.n	80019dc <__aeabi_dmul+0x484>
 80017a2:	2101      	movs	r1, #1
 80017a4:	086a      	lsrs	r2, r5, #1
 80017a6:	400d      	ands	r5, r1
 80017a8:	4315      	orrs	r5, r2
 80017aa:	07e2      	lsls	r2, r4, #31
 80017ac:	4315      	orrs	r5, r2
 80017ae:	0864      	lsrs	r4, r4, #1
 80017b0:	494f      	ldr	r1, [pc, #316]	; (80018f0 <__aeabi_dmul+0x398>)
 80017b2:	4461      	add	r1, ip
 80017b4:	2900      	cmp	r1, #0
 80017b6:	dc00      	bgt.n	80017ba <__aeabi_dmul+0x262>
 80017b8:	e0b0      	b.n	800191c <__aeabi_dmul+0x3c4>
 80017ba:	076b      	lsls	r3, r5, #29
 80017bc:	d009      	beq.n	80017d2 <__aeabi_dmul+0x27a>
 80017be:	220f      	movs	r2, #15
 80017c0:	402a      	ands	r2, r5
 80017c2:	2a04      	cmp	r2, #4
 80017c4:	d005      	beq.n	80017d2 <__aeabi_dmul+0x27a>
 80017c6:	1d2a      	adds	r2, r5, #4
 80017c8:	42aa      	cmp	r2, r5
 80017ca:	41ad      	sbcs	r5, r5
 80017cc:	426d      	negs	r5, r5
 80017ce:	1964      	adds	r4, r4, r5
 80017d0:	0015      	movs	r5, r2
 80017d2:	01e3      	lsls	r3, r4, #7
 80017d4:	d504      	bpl.n	80017e0 <__aeabi_dmul+0x288>
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	4a46      	ldr	r2, [pc, #280]	; (80018f4 <__aeabi_dmul+0x39c>)
 80017da:	00c9      	lsls	r1, r1, #3
 80017dc:	4014      	ands	r4, r2
 80017de:	4461      	add	r1, ip
 80017e0:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <__aeabi_dmul+0x3a0>)
 80017e2:	4291      	cmp	r1, r2
 80017e4:	dd00      	ble.n	80017e8 <__aeabi_dmul+0x290>
 80017e6:	e726      	b.n	8001636 <__aeabi_dmul+0xde>
 80017e8:	0762      	lsls	r2, r4, #29
 80017ea:	08ed      	lsrs	r5, r5, #3
 80017ec:	0264      	lsls	r4, r4, #9
 80017ee:	0549      	lsls	r1, r1, #21
 80017f0:	4315      	orrs	r5, r2
 80017f2:	0b24      	lsrs	r4, r4, #12
 80017f4:	0d4a      	lsrs	r2, r1, #21
 80017f6:	e710      	b.n	800161a <__aeabi_dmul+0xc2>
 80017f8:	4652      	mov	r2, sl
 80017fa:	4332      	orrs	r2, r6
 80017fc:	d100      	bne.n	8001800 <__aeabi_dmul+0x2a8>
 80017fe:	e07f      	b.n	8001900 <__aeabi_dmul+0x3a8>
 8001800:	2e00      	cmp	r6, #0
 8001802:	d100      	bne.n	8001806 <__aeabi_dmul+0x2ae>
 8001804:	e0dc      	b.n	80019c0 <__aeabi_dmul+0x468>
 8001806:	0030      	movs	r0, r6
 8001808:	f000 fd4e 	bl	80022a8 <__clzsi2>
 800180c:	0002      	movs	r2, r0
 800180e:	3a0b      	subs	r2, #11
 8001810:	231d      	movs	r3, #29
 8001812:	0001      	movs	r1, r0
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	4652      	mov	r2, sl
 8001818:	3908      	subs	r1, #8
 800181a:	40da      	lsrs	r2, r3
 800181c:	408e      	lsls	r6, r1
 800181e:	4316      	orrs	r6, r2
 8001820:	4652      	mov	r2, sl
 8001822:	408a      	lsls	r2, r1
 8001824:	9b00      	ldr	r3, [sp, #0]
 8001826:	4935      	ldr	r1, [pc, #212]	; (80018fc <__aeabi_dmul+0x3a4>)
 8001828:	1a18      	subs	r0, r3, r0
 800182a:	0003      	movs	r3, r0
 800182c:	468c      	mov	ip, r1
 800182e:	4463      	add	r3, ip
 8001830:	2000      	movs	r0, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	e6d3      	b.n	80015de <__aeabi_dmul+0x86>
 8001836:	0025      	movs	r5, r4
 8001838:	4305      	orrs	r5, r0
 800183a:	d04a      	beq.n	80018d2 <__aeabi_dmul+0x37a>
 800183c:	2c00      	cmp	r4, #0
 800183e:	d100      	bne.n	8001842 <__aeabi_dmul+0x2ea>
 8001840:	e0b0      	b.n	80019a4 <__aeabi_dmul+0x44c>
 8001842:	0020      	movs	r0, r4
 8001844:	f000 fd30 	bl	80022a8 <__clzsi2>
 8001848:	0001      	movs	r1, r0
 800184a:	0002      	movs	r2, r0
 800184c:	390b      	subs	r1, #11
 800184e:	231d      	movs	r3, #29
 8001850:	0010      	movs	r0, r2
 8001852:	1a5b      	subs	r3, r3, r1
 8001854:	0031      	movs	r1, r6
 8001856:	0035      	movs	r5, r6
 8001858:	3808      	subs	r0, #8
 800185a:	4084      	lsls	r4, r0
 800185c:	40d9      	lsrs	r1, r3
 800185e:	4085      	lsls	r5, r0
 8001860:	430c      	orrs	r4, r1
 8001862:	4826      	ldr	r0, [pc, #152]	; (80018fc <__aeabi_dmul+0x3a4>)
 8001864:	1a83      	subs	r3, r0, r2
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2300      	movs	r3, #0
 800186a:	4699      	mov	r9, r3
 800186c:	469b      	mov	fp, r3
 800186e:	e697      	b.n	80015a0 <__aeabi_dmul+0x48>
 8001870:	0005      	movs	r5, r0
 8001872:	4325      	orrs	r5, r4
 8001874:	d126      	bne.n	80018c4 <__aeabi_dmul+0x36c>
 8001876:	2208      	movs	r2, #8
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	2400      	movs	r4, #0
 800187e:	4691      	mov	r9, r2
 8001880:	469b      	mov	fp, r3
 8001882:	e68d      	b.n	80015a0 <__aeabi_dmul+0x48>
 8001884:	4652      	mov	r2, sl
 8001886:	9b00      	ldr	r3, [sp, #0]
 8001888:	4332      	orrs	r2, r6
 800188a:	d110      	bne.n	80018ae <__aeabi_dmul+0x356>
 800188c:	4915      	ldr	r1, [pc, #84]	; (80018e4 <__aeabi_dmul+0x38c>)
 800188e:	2600      	movs	r6, #0
 8001890:	468c      	mov	ip, r1
 8001892:	4463      	add	r3, ip
 8001894:	4649      	mov	r1, r9
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2302      	movs	r3, #2
 800189a:	4319      	orrs	r1, r3
 800189c:	4689      	mov	r9, r1
 800189e:	2002      	movs	r0, #2
 80018a0:	e69d      	b.n	80015de <__aeabi_dmul+0x86>
 80018a2:	465b      	mov	r3, fp
 80018a4:	9701      	str	r7, [sp, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d000      	beq.n	80018ac <__aeabi_dmul+0x354>
 80018aa:	e6ad      	b.n	8001608 <__aeabi_dmul+0xb0>
 80018ac:	e6c3      	b.n	8001636 <__aeabi_dmul+0xde>
 80018ae:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <__aeabi_dmul+0x38c>)
 80018b0:	2003      	movs	r0, #3
 80018b2:	4694      	mov	ip, r2
 80018b4:	4463      	add	r3, ip
 80018b6:	464a      	mov	r2, r9
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2303      	movs	r3, #3
 80018bc:	431a      	orrs	r2, r3
 80018be:	4691      	mov	r9, r2
 80018c0:	4652      	mov	r2, sl
 80018c2:	e68c      	b.n	80015de <__aeabi_dmul+0x86>
 80018c4:	220c      	movs	r2, #12
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2303      	movs	r3, #3
 80018ca:	0005      	movs	r5, r0
 80018cc:	4691      	mov	r9, r2
 80018ce:	469b      	mov	fp, r3
 80018d0:	e666      	b.n	80015a0 <__aeabi_dmul+0x48>
 80018d2:	2304      	movs	r3, #4
 80018d4:	4699      	mov	r9, r3
 80018d6:	2300      	movs	r3, #0
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	2400      	movs	r4, #0
 80018de:	469b      	mov	fp, r3
 80018e0:	e65e      	b.n	80015a0 <__aeabi_dmul+0x48>
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	000007ff 	.word	0x000007ff
 80018e8:	fffffc01 	.word	0xfffffc01
 80018ec:	0800a6d4 	.word	0x0800a6d4
 80018f0:	000003ff 	.word	0x000003ff
 80018f4:	feffffff 	.word	0xfeffffff
 80018f8:	000007fe 	.word	0x000007fe
 80018fc:	fffffc0d 	.word	0xfffffc0d
 8001900:	4649      	mov	r1, r9
 8001902:	2301      	movs	r3, #1
 8001904:	4319      	orrs	r1, r3
 8001906:	4689      	mov	r9, r1
 8001908:	2600      	movs	r6, #0
 800190a:	2001      	movs	r0, #1
 800190c:	e667      	b.n	80015de <__aeabi_dmul+0x86>
 800190e:	2300      	movs	r3, #0
 8001910:	2480      	movs	r4, #128	; 0x80
 8001912:	2500      	movs	r5, #0
 8001914:	4a43      	ldr	r2, [pc, #268]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	0324      	lsls	r4, r4, #12
 800191a:	e67e      	b.n	800161a <__aeabi_dmul+0xc2>
 800191c:	2001      	movs	r0, #1
 800191e:	1a40      	subs	r0, r0, r1
 8001920:	2838      	cmp	r0, #56	; 0x38
 8001922:	dd00      	ble.n	8001926 <__aeabi_dmul+0x3ce>
 8001924:	e676      	b.n	8001614 <__aeabi_dmul+0xbc>
 8001926:	281f      	cmp	r0, #31
 8001928:	dd5b      	ble.n	80019e2 <__aeabi_dmul+0x48a>
 800192a:	221f      	movs	r2, #31
 800192c:	0023      	movs	r3, r4
 800192e:	4252      	negs	r2, r2
 8001930:	1a51      	subs	r1, r2, r1
 8001932:	40cb      	lsrs	r3, r1
 8001934:	0019      	movs	r1, r3
 8001936:	2820      	cmp	r0, #32
 8001938:	d003      	beq.n	8001942 <__aeabi_dmul+0x3ea>
 800193a:	4a3b      	ldr	r2, [pc, #236]	; (8001a28 <__aeabi_dmul+0x4d0>)
 800193c:	4462      	add	r2, ip
 800193e:	4094      	lsls	r4, r2
 8001940:	4325      	orrs	r5, r4
 8001942:	1e6a      	subs	r2, r5, #1
 8001944:	4195      	sbcs	r5, r2
 8001946:	002a      	movs	r2, r5
 8001948:	430a      	orrs	r2, r1
 800194a:	2107      	movs	r1, #7
 800194c:	000d      	movs	r5, r1
 800194e:	2400      	movs	r4, #0
 8001950:	4015      	ands	r5, r2
 8001952:	4211      	tst	r1, r2
 8001954:	d05b      	beq.n	8001a0e <__aeabi_dmul+0x4b6>
 8001956:	210f      	movs	r1, #15
 8001958:	2400      	movs	r4, #0
 800195a:	4011      	ands	r1, r2
 800195c:	2904      	cmp	r1, #4
 800195e:	d053      	beq.n	8001a08 <__aeabi_dmul+0x4b0>
 8001960:	1d11      	adds	r1, r2, #4
 8001962:	4291      	cmp	r1, r2
 8001964:	4192      	sbcs	r2, r2
 8001966:	4252      	negs	r2, r2
 8001968:	18a4      	adds	r4, r4, r2
 800196a:	000a      	movs	r2, r1
 800196c:	0223      	lsls	r3, r4, #8
 800196e:	d54b      	bpl.n	8001a08 <__aeabi_dmul+0x4b0>
 8001970:	2201      	movs	r2, #1
 8001972:	2400      	movs	r4, #0
 8001974:	2500      	movs	r5, #0
 8001976:	e650      	b.n	800161a <__aeabi_dmul+0xc2>
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	031b      	lsls	r3, r3, #12
 800197c:	421c      	tst	r4, r3
 800197e:	d009      	beq.n	8001994 <__aeabi_dmul+0x43c>
 8001980:	421e      	tst	r6, r3
 8001982:	d107      	bne.n	8001994 <__aeabi_dmul+0x43c>
 8001984:	4333      	orrs	r3, r6
 8001986:	031c      	lsls	r4, r3, #12
 8001988:	4643      	mov	r3, r8
 800198a:	0015      	movs	r5, r2
 800198c:	0b24      	lsrs	r4, r4, #12
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	e642      	b.n	800161a <__aeabi_dmul+0xc2>
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	0312      	lsls	r2, r2, #12
 8001998:	4314      	orrs	r4, r2
 800199a:	0324      	lsls	r4, r4, #12
 800199c:	4a21      	ldr	r2, [pc, #132]	; (8001a24 <__aeabi_dmul+0x4cc>)
 800199e:	0b24      	lsrs	r4, r4, #12
 80019a0:	9701      	str	r7, [sp, #4]
 80019a2:	e63a      	b.n	800161a <__aeabi_dmul+0xc2>
 80019a4:	f000 fc80 	bl	80022a8 <__clzsi2>
 80019a8:	0001      	movs	r1, r0
 80019aa:	0002      	movs	r2, r0
 80019ac:	3115      	adds	r1, #21
 80019ae:	3220      	adds	r2, #32
 80019b0:	291c      	cmp	r1, #28
 80019b2:	dc00      	bgt.n	80019b6 <__aeabi_dmul+0x45e>
 80019b4:	e74b      	b.n	800184e <__aeabi_dmul+0x2f6>
 80019b6:	0034      	movs	r4, r6
 80019b8:	3808      	subs	r0, #8
 80019ba:	2500      	movs	r5, #0
 80019bc:	4084      	lsls	r4, r0
 80019be:	e750      	b.n	8001862 <__aeabi_dmul+0x30a>
 80019c0:	f000 fc72 	bl	80022a8 <__clzsi2>
 80019c4:	0003      	movs	r3, r0
 80019c6:	001a      	movs	r2, r3
 80019c8:	3215      	adds	r2, #21
 80019ca:	3020      	adds	r0, #32
 80019cc:	2a1c      	cmp	r2, #28
 80019ce:	dc00      	bgt.n	80019d2 <__aeabi_dmul+0x47a>
 80019d0:	e71e      	b.n	8001810 <__aeabi_dmul+0x2b8>
 80019d2:	4656      	mov	r6, sl
 80019d4:	3b08      	subs	r3, #8
 80019d6:	2200      	movs	r2, #0
 80019d8:	409e      	lsls	r6, r3
 80019da:	e723      	b.n	8001824 <__aeabi_dmul+0x2cc>
 80019dc:	9b00      	ldr	r3, [sp, #0]
 80019de:	469c      	mov	ip, r3
 80019e0:	e6e6      	b.n	80017b0 <__aeabi_dmul+0x258>
 80019e2:	4912      	ldr	r1, [pc, #72]	; (8001a2c <__aeabi_dmul+0x4d4>)
 80019e4:	0022      	movs	r2, r4
 80019e6:	4461      	add	r1, ip
 80019e8:	002e      	movs	r6, r5
 80019ea:	408d      	lsls	r5, r1
 80019ec:	408a      	lsls	r2, r1
 80019ee:	40c6      	lsrs	r6, r0
 80019f0:	1e69      	subs	r1, r5, #1
 80019f2:	418d      	sbcs	r5, r1
 80019f4:	4332      	orrs	r2, r6
 80019f6:	432a      	orrs	r2, r5
 80019f8:	40c4      	lsrs	r4, r0
 80019fa:	0753      	lsls	r3, r2, #29
 80019fc:	d0b6      	beq.n	800196c <__aeabi_dmul+0x414>
 80019fe:	210f      	movs	r1, #15
 8001a00:	4011      	ands	r1, r2
 8001a02:	2904      	cmp	r1, #4
 8001a04:	d1ac      	bne.n	8001960 <__aeabi_dmul+0x408>
 8001a06:	e7b1      	b.n	800196c <__aeabi_dmul+0x414>
 8001a08:	0765      	lsls	r5, r4, #29
 8001a0a:	0264      	lsls	r4, r4, #9
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	08d2      	lsrs	r2, r2, #3
 8001a10:	4315      	orrs	r5, r2
 8001a12:	2200      	movs	r2, #0
 8001a14:	e601      	b.n	800161a <__aeabi_dmul+0xc2>
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	0312      	lsls	r2, r2, #12
 8001a1a:	4314      	orrs	r4, r2
 8001a1c:	0324      	lsls	r4, r4, #12
 8001a1e:	4a01      	ldr	r2, [pc, #4]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001a20:	0b24      	lsrs	r4, r4, #12
 8001a22:	e5fa      	b.n	800161a <__aeabi_dmul+0xc2>
 8001a24:	000007ff 	.word	0x000007ff
 8001a28:	0000043e 	.word	0x0000043e
 8001a2c:	0000041e 	.word	0x0000041e

08001a30 <__aeabi_dsub>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	4657      	mov	r7, sl
 8001a34:	464e      	mov	r6, r9
 8001a36:	4645      	mov	r5, r8
 8001a38:	46de      	mov	lr, fp
 8001a3a:	b5e0      	push	{r5, r6, r7, lr}
 8001a3c:	001e      	movs	r6, r3
 8001a3e:	0017      	movs	r7, r2
 8001a40:	004a      	lsls	r2, r1, #1
 8001a42:	030b      	lsls	r3, r1, #12
 8001a44:	0d52      	lsrs	r2, r2, #21
 8001a46:	0a5b      	lsrs	r3, r3, #9
 8001a48:	4690      	mov	r8, r2
 8001a4a:	0f42      	lsrs	r2, r0, #29
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	0fcd      	lsrs	r5, r1, #31
 8001a50:	4ccd      	ldr	r4, [pc, #820]	; (8001d88 <__aeabi_dsub+0x358>)
 8001a52:	0331      	lsls	r1, r6, #12
 8001a54:	00c3      	lsls	r3, r0, #3
 8001a56:	4694      	mov	ip, r2
 8001a58:	0070      	lsls	r0, r6, #1
 8001a5a:	0f7a      	lsrs	r2, r7, #29
 8001a5c:	0a49      	lsrs	r1, r1, #9
 8001a5e:	00ff      	lsls	r7, r7, #3
 8001a60:	469a      	mov	sl, r3
 8001a62:	46b9      	mov	r9, r7
 8001a64:	0d40      	lsrs	r0, r0, #21
 8001a66:	0ff6      	lsrs	r6, r6, #31
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	42a0      	cmp	r0, r4
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x40>
 8001a6e:	e0b1      	b.n	8001bd4 <__aeabi_dsub+0x1a4>
 8001a70:	2201      	movs	r2, #1
 8001a72:	4056      	eors	r6, r2
 8001a74:	46b3      	mov	fp, r6
 8001a76:	42b5      	cmp	r5, r6
 8001a78:	d100      	bne.n	8001a7c <__aeabi_dsub+0x4c>
 8001a7a:	e088      	b.n	8001b8e <__aeabi_dsub+0x15e>
 8001a7c:	4642      	mov	r2, r8
 8001a7e:	1a12      	subs	r2, r2, r0
 8001a80:	2a00      	cmp	r2, #0
 8001a82:	dc00      	bgt.n	8001a86 <__aeabi_dsub+0x56>
 8001a84:	e0ae      	b.n	8001be4 <__aeabi_dsub+0x1b4>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x5c>
 8001a8a:	e0c1      	b.n	8001c10 <__aeabi_dsub+0x1e0>
 8001a8c:	48be      	ldr	r0, [pc, #760]	; (8001d88 <__aeabi_dsub+0x358>)
 8001a8e:	4580      	cmp	r8, r0
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dsub+0x64>
 8001a92:	e151      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001a94:	2080      	movs	r0, #128	; 0x80
 8001a96:	0400      	lsls	r0, r0, #16
 8001a98:	4301      	orrs	r1, r0
 8001a9a:	2a38      	cmp	r2, #56	; 0x38
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dsub+0x70>
 8001a9e:	e17b      	b.n	8001d98 <__aeabi_dsub+0x368>
 8001aa0:	2a1f      	cmp	r2, #31
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x76>
 8001aa4:	e1ee      	b.n	8001e84 <__aeabi_dsub+0x454>
 8001aa6:	2020      	movs	r0, #32
 8001aa8:	003e      	movs	r6, r7
 8001aaa:	1a80      	subs	r0, r0, r2
 8001aac:	000c      	movs	r4, r1
 8001aae:	40d6      	lsrs	r6, r2
 8001ab0:	40d1      	lsrs	r1, r2
 8001ab2:	4087      	lsls	r7, r0
 8001ab4:	4662      	mov	r2, ip
 8001ab6:	4084      	lsls	r4, r0
 8001ab8:	1a52      	subs	r2, r2, r1
 8001aba:	1e78      	subs	r0, r7, #1
 8001abc:	4187      	sbcs	r7, r0
 8001abe:	4694      	mov	ip, r2
 8001ac0:	4334      	orrs	r4, r6
 8001ac2:	4327      	orrs	r7, r4
 8001ac4:	1bdc      	subs	r4, r3, r7
 8001ac6:	42a3      	cmp	r3, r4
 8001ac8:	419b      	sbcs	r3, r3
 8001aca:	4662      	mov	r2, ip
 8001acc:	425b      	negs	r3, r3
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	4699      	mov	r9, r3
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	d400      	bmi.n	8001ada <__aeabi_dsub+0xaa>
 8001ad8:	e118      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001ada:	464b      	mov	r3, r9
 8001adc:	0258      	lsls	r0, r3, #9
 8001ade:	0a43      	lsrs	r3, r0, #9
 8001ae0:	4699      	mov	r9, r3
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dsub+0xba>
 8001ae8:	e137      	b.n	8001d5a <__aeabi_dsub+0x32a>
 8001aea:	4648      	mov	r0, r9
 8001aec:	f000 fbdc 	bl	80022a8 <__clzsi2>
 8001af0:	0001      	movs	r1, r0
 8001af2:	3908      	subs	r1, #8
 8001af4:	2320      	movs	r3, #32
 8001af6:	0022      	movs	r2, r4
 8001af8:	4648      	mov	r0, r9
 8001afa:	1a5b      	subs	r3, r3, r1
 8001afc:	40da      	lsrs	r2, r3
 8001afe:	4088      	lsls	r0, r1
 8001b00:	408c      	lsls	r4, r1
 8001b02:	4643      	mov	r3, r8
 8001b04:	4310      	orrs	r0, r2
 8001b06:	4588      	cmp	r8, r1
 8001b08:	dd00      	ble.n	8001b0c <__aeabi_dsub+0xdc>
 8001b0a:	e136      	b.n	8001d7a <__aeabi_dsub+0x34a>
 8001b0c:	1ac9      	subs	r1, r1, r3
 8001b0e:	1c4b      	adds	r3, r1, #1
 8001b10:	2b1f      	cmp	r3, #31
 8001b12:	dd00      	ble.n	8001b16 <__aeabi_dsub+0xe6>
 8001b14:	e0ea      	b.n	8001cec <__aeabi_dsub+0x2bc>
 8001b16:	2220      	movs	r2, #32
 8001b18:	0026      	movs	r6, r4
 8001b1a:	1ad2      	subs	r2, r2, r3
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	4094      	lsls	r4, r2
 8001b20:	40de      	lsrs	r6, r3
 8001b22:	40d8      	lsrs	r0, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4091      	lsls	r1, r2
 8001b28:	1e62      	subs	r2, r4, #1
 8001b2a:	4194      	sbcs	r4, r2
 8001b2c:	4681      	mov	r9, r0
 8001b2e:	4698      	mov	r8, r3
 8001b30:	4331      	orrs	r1, r6
 8001b32:	430c      	orrs	r4, r1
 8001b34:	0763      	lsls	r3, r4, #29
 8001b36:	d009      	beq.n	8001b4c <__aeabi_dsub+0x11c>
 8001b38:	230f      	movs	r3, #15
 8001b3a:	4023      	ands	r3, r4
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d005      	beq.n	8001b4c <__aeabi_dsub+0x11c>
 8001b40:	1d23      	adds	r3, r4, #4
 8001b42:	42a3      	cmp	r3, r4
 8001b44:	41a4      	sbcs	r4, r4
 8001b46:	4264      	negs	r4, r4
 8001b48:	44a1      	add	r9, r4
 8001b4a:	001c      	movs	r4, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	d400      	bmi.n	8001b54 <__aeabi_dsub+0x124>
 8001b52:	e0de      	b.n	8001d12 <__aeabi_dsub+0x2e2>
 8001b54:	4641      	mov	r1, r8
 8001b56:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <__aeabi_dsub+0x358>)
 8001b58:	3101      	adds	r1, #1
 8001b5a:	4299      	cmp	r1, r3
 8001b5c:	d100      	bne.n	8001b60 <__aeabi_dsub+0x130>
 8001b5e:	e0e7      	b.n	8001d30 <__aeabi_dsub+0x300>
 8001b60:	464b      	mov	r3, r9
 8001b62:	488a      	ldr	r0, [pc, #552]	; (8001d8c <__aeabi_dsub+0x35c>)
 8001b64:	08e4      	lsrs	r4, r4, #3
 8001b66:	4003      	ands	r3, r0
 8001b68:	0018      	movs	r0, r3
 8001b6a:	0549      	lsls	r1, r1, #21
 8001b6c:	075b      	lsls	r3, r3, #29
 8001b6e:	0240      	lsls	r0, r0, #9
 8001b70:	4323      	orrs	r3, r4
 8001b72:	0d4a      	lsrs	r2, r1, #21
 8001b74:	0b04      	lsrs	r4, r0, #12
 8001b76:	0512      	lsls	r2, r2, #20
 8001b78:	07ed      	lsls	r5, r5, #31
 8001b7a:	4322      	orrs	r2, r4
 8001b7c:	432a      	orrs	r2, r5
 8001b7e:	0018      	movs	r0, r3
 8001b80:	0011      	movs	r1, r2
 8001b82:	bcf0      	pop	{r4, r5, r6, r7}
 8001b84:	46bb      	mov	fp, r7
 8001b86:	46b2      	mov	sl, r6
 8001b88:	46a9      	mov	r9, r5
 8001b8a:	46a0      	mov	r8, r4
 8001b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b8e:	4642      	mov	r2, r8
 8001b90:	1a12      	subs	r2, r2, r0
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	dd52      	ble.n	8001c3c <__aeabi_dsub+0x20c>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x16c>
 8001b9a:	e09c      	b.n	8001cd6 <__aeabi_dsub+0x2a6>
 8001b9c:	45a0      	cmp	r8, r4
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x172>
 8001ba0:	e0ca      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001ba2:	2080      	movs	r0, #128	; 0x80
 8001ba4:	0400      	lsls	r0, r0, #16
 8001ba6:	4301      	orrs	r1, r0
 8001ba8:	2a38      	cmp	r2, #56	; 0x38
 8001baa:	dd00      	ble.n	8001bae <__aeabi_dsub+0x17e>
 8001bac:	e149      	b.n	8001e42 <__aeabi_dsub+0x412>
 8001bae:	2a1f      	cmp	r2, #31
 8001bb0:	dc00      	bgt.n	8001bb4 <__aeabi_dsub+0x184>
 8001bb2:	e197      	b.n	8001ee4 <__aeabi_dsub+0x4b4>
 8001bb4:	0010      	movs	r0, r2
 8001bb6:	000e      	movs	r6, r1
 8001bb8:	3820      	subs	r0, #32
 8001bba:	40c6      	lsrs	r6, r0
 8001bbc:	2a20      	cmp	r2, #32
 8001bbe:	d004      	beq.n	8001bca <__aeabi_dsub+0x19a>
 8001bc0:	2040      	movs	r0, #64	; 0x40
 8001bc2:	1a82      	subs	r2, r0, r2
 8001bc4:	4091      	lsls	r1, r2
 8001bc6:	430f      	orrs	r7, r1
 8001bc8:	46b9      	mov	r9, r7
 8001bca:	464c      	mov	r4, r9
 8001bcc:	1e62      	subs	r2, r4, #1
 8001bce:	4194      	sbcs	r4, r2
 8001bd0:	4334      	orrs	r4, r6
 8001bd2:	e13a      	b.n	8001e4a <__aeabi_dsub+0x41a>
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	433a      	orrs	r2, r7
 8001bd8:	d028      	beq.n	8001c2c <__aeabi_dsub+0x1fc>
 8001bda:	46b3      	mov	fp, r6
 8001bdc:	42b5      	cmp	r5, r6
 8001bde:	d02b      	beq.n	8001c38 <__aeabi_dsub+0x208>
 8001be0:	4a6b      	ldr	r2, [pc, #428]	; (8001d90 <__aeabi_dsub+0x360>)
 8001be2:	4442      	add	r2, r8
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d05d      	beq.n	8001ca4 <__aeabi_dsub+0x274>
 8001be8:	4642      	mov	r2, r8
 8001bea:	4644      	mov	r4, r8
 8001bec:	1a82      	subs	r2, r0, r2
 8001bee:	2c00      	cmp	r4, #0
 8001bf0:	d000      	beq.n	8001bf4 <__aeabi_dsub+0x1c4>
 8001bf2:	e0f5      	b.n	8001de0 <__aeabi_dsub+0x3b0>
 8001bf4:	4665      	mov	r5, ip
 8001bf6:	431d      	orrs	r5, r3
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x1cc>
 8001bfa:	e19c      	b.n	8001f36 <__aeabi_dsub+0x506>
 8001bfc:	1e55      	subs	r5, r2, #1
 8001bfe:	2a01      	cmp	r2, #1
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x1d4>
 8001c02:	e1fb      	b.n	8001ffc <__aeabi_dsub+0x5cc>
 8001c04:	4c60      	ldr	r4, [pc, #384]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c06:	42a2      	cmp	r2, r4
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x1dc>
 8001c0a:	e1bd      	b.n	8001f88 <__aeabi_dsub+0x558>
 8001c0c:	002a      	movs	r2, r5
 8001c0e:	e0f0      	b.n	8001df2 <__aeabi_dsub+0x3c2>
 8001c10:	0008      	movs	r0, r1
 8001c12:	4338      	orrs	r0, r7
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x1e8>
 8001c16:	e0c3      	b.n	8001da0 <__aeabi_dsub+0x370>
 8001c18:	1e50      	subs	r0, r2, #1
 8001c1a:	2a01      	cmp	r2, #1
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x1f0>
 8001c1e:	e1a8      	b.n	8001f72 <__aeabi_dsub+0x542>
 8001c20:	4c59      	ldr	r4, [pc, #356]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c22:	42a2      	cmp	r2, r4
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x1f8>
 8001c26:	e087      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	e736      	b.n	8001a9a <__aeabi_dsub+0x6a>
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4056      	eors	r6, r2
 8001c30:	46b3      	mov	fp, r6
 8001c32:	42b5      	cmp	r5, r6
 8001c34:	d000      	beq.n	8001c38 <__aeabi_dsub+0x208>
 8001c36:	e721      	b.n	8001a7c <__aeabi_dsub+0x4c>
 8001c38:	4a55      	ldr	r2, [pc, #340]	; (8001d90 <__aeabi_dsub+0x360>)
 8001c3a:	4442      	add	r2, r8
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x212>
 8001c40:	e0b5      	b.n	8001dae <__aeabi_dsub+0x37e>
 8001c42:	4642      	mov	r2, r8
 8001c44:	4644      	mov	r4, r8
 8001c46:	1a82      	subs	r2, r0, r2
 8001c48:	2c00      	cmp	r4, #0
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x21e>
 8001c4c:	e138      	b.n	8001ec0 <__aeabi_dsub+0x490>
 8001c4e:	4e4e      	ldr	r6, [pc, #312]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c50:	42b0      	cmp	r0, r6
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x226>
 8001c54:	e1de      	b.n	8002014 <__aeabi_dsub+0x5e4>
 8001c56:	2680      	movs	r6, #128	; 0x80
 8001c58:	4664      	mov	r4, ip
 8001c5a:	0436      	lsls	r6, r6, #16
 8001c5c:	4334      	orrs	r4, r6
 8001c5e:	46a4      	mov	ip, r4
 8001c60:	2a38      	cmp	r2, #56	; 0x38
 8001c62:	dd00      	ble.n	8001c66 <__aeabi_dsub+0x236>
 8001c64:	e196      	b.n	8001f94 <__aeabi_dsub+0x564>
 8001c66:	2a1f      	cmp	r2, #31
 8001c68:	dd00      	ble.n	8001c6c <__aeabi_dsub+0x23c>
 8001c6a:	e224      	b.n	80020b6 <__aeabi_dsub+0x686>
 8001c6c:	2620      	movs	r6, #32
 8001c6e:	1ab4      	subs	r4, r6, r2
 8001c70:	46a2      	mov	sl, r4
 8001c72:	4664      	mov	r4, ip
 8001c74:	4656      	mov	r6, sl
 8001c76:	40b4      	lsls	r4, r6
 8001c78:	46a1      	mov	r9, r4
 8001c7a:	001c      	movs	r4, r3
 8001c7c:	464e      	mov	r6, r9
 8001c7e:	40d4      	lsrs	r4, r2
 8001c80:	4326      	orrs	r6, r4
 8001c82:	0034      	movs	r4, r6
 8001c84:	4656      	mov	r6, sl
 8001c86:	40b3      	lsls	r3, r6
 8001c88:	1e5e      	subs	r6, r3, #1
 8001c8a:	41b3      	sbcs	r3, r6
 8001c8c:	431c      	orrs	r4, r3
 8001c8e:	4663      	mov	r3, ip
 8001c90:	40d3      	lsrs	r3, r2
 8001c92:	18c9      	adds	r1, r1, r3
 8001c94:	19e4      	adds	r4, r4, r7
 8001c96:	42bc      	cmp	r4, r7
 8001c98:	41bf      	sbcs	r7, r7
 8001c9a:	427f      	negs	r7, r7
 8001c9c:	46b9      	mov	r9, r7
 8001c9e:	4680      	mov	r8, r0
 8001ca0:	4489      	add	r9, r1
 8001ca2:	e0d8      	b.n	8001e56 <__aeabi_dsub+0x426>
 8001ca4:	4640      	mov	r0, r8
 8001ca6:	4c3b      	ldr	r4, [pc, #236]	; (8001d94 <__aeabi_dsub+0x364>)
 8001ca8:	3001      	adds	r0, #1
 8001caa:	4220      	tst	r0, r4
 8001cac:	d000      	beq.n	8001cb0 <__aeabi_dsub+0x280>
 8001cae:	e0b4      	b.n	8001e1a <__aeabi_dsub+0x3ea>
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x288>
 8001cb6:	e144      	b.n	8001f42 <__aeabi_dsub+0x512>
 8001cb8:	4660      	mov	r0, ip
 8001cba:	4318      	orrs	r0, r3
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x290>
 8001cbe:	e190      	b.n	8001fe2 <__aeabi_dsub+0x5b2>
 8001cc0:	0008      	movs	r0, r1
 8001cc2:	4338      	orrs	r0, r7
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dsub+0x298>
 8001cc6:	e1aa      	b.n	800201e <__aeabi_dsub+0x5ee>
 8001cc8:	4661      	mov	r1, ip
 8001cca:	08db      	lsrs	r3, r3, #3
 8001ccc:	0749      	lsls	r1, r1, #29
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	4661      	mov	r1, ip
 8001cd2:	08cc      	lsrs	r4, r1, #3
 8001cd4:	e027      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001cd6:	0008      	movs	r0, r1
 8001cd8:	4338      	orrs	r0, r7
 8001cda:	d061      	beq.n	8001da0 <__aeabi_dsub+0x370>
 8001cdc:	1e50      	subs	r0, r2, #1
 8001cde:	2a01      	cmp	r2, #1
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x2b4>
 8001ce2:	e139      	b.n	8001f58 <__aeabi_dsub+0x528>
 8001ce4:	42a2      	cmp	r2, r4
 8001ce6:	d027      	beq.n	8001d38 <__aeabi_dsub+0x308>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	e75d      	b.n	8001ba8 <__aeabi_dsub+0x178>
 8001cec:	0002      	movs	r2, r0
 8001cee:	391f      	subs	r1, #31
 8001cf0:	40ca      	lsrs	r2, r1
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d003      	beq.n	8001d00 <__aeabi_dsub+0x2d0>
 8001cf8:	2240      	movs	r2, #64	; 0x40
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	4098      	lsls	r0, r3
 8001cfe:	4304      	orrs	r4, r0
 8001d00:	1e63      	subs	r3, r4, #1
 8001d02:	419c      	sbcs	r4, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	4699      	mov	r9, r3
 8001d08:	4698      	mov	r8, r3
 8001d0a:	430c      	orrs	r4, r1
 8001d0c:	0763      	lsls	r3, r4, #29
 8001d0e:	d000      	beq.n	8001d12 <__aeabi_dsub+0x2e2>
 8001d10:	e712      	b.n	8001b38 <__aeabi_dsub+0x108>
 8001d12:	464b      	mov	r3, r9
 8001d14:	464a      	mov	r2, r9
 8001d16:	08e4      	lsrs	r4, r4, #3
 8001d18:	075b      	lsls	r3, r3, #29
 8001d1a:	4323      	orrs	r3, r4
 8001d1c:	08d4      	lsrs	r4, r2, #3
 8001d1e:	4642      	mov	r2, r8
 8001d20:	4919      	ldr	r1, [pc, #100]	; (8001d88 <__aeabi_dsub+0x358>)
 8001d22:	428a      	cmp	r2, r1
 8001d24:	d00e      	beq.n	8001d44 <__aeabi_dsub+0x314>
 8001d26:	0324      	lsls	r4, r4, #12
 8001d28:	0552      	lsls	r2, r2, #21
 8001d2a:	0b24      	lsrs	r4, r4, #12
 8001d2c:	0d52      	lsrs	r2, r2, #21
 8001d2e:	e722      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d30:	000a      	movs	r2, r1
 8001d32:	2400      	movs	r4, #0
 8001d34:	2300      	movs	r3, #0
 8001d36:	e71e      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	4662      	mov	r2, ip
 8001d3c:	0752      	lsls	r2, r2, #29
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	4662      	mov	r2, ip
 8001d42:	08d4      	lsrs	r4, r2, #3
 8001d44:	001a      	movs	r2, r3
 8001d46:	4322      	orrs	r2, r4
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x31c>
 8001d4a:	e1fc      	b.n	8002146 <__aeabi_dsub+0x716>
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	0312      	lsls	r2, r2, #12
 8001d50:	4314      	orrs	r4, r2
 8001d52:	0324      	lsls	r4, r4, #12
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <__aeabi_dsub+0x358>)
 8001d56:	0b24      	lsrs	r4, r4, #12
 8001d58:	e70d      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d5a:	0020      	movs	r0, r4
 8001d5c:	f000 faa4 	bl	80022a8 <__clzsi2>
 8001d60:	0001      	movs	r1, r0
 8001d62:	3118      	adds	r1, #24
 8001d64:	291f      	cmp	r1, #31
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x33a>
 8001d68:	e6c4      	b.n	8001af4 <__aeabi_dsub+0xc4>
 8001d6a:	3808      	subs	r0, #8
 8001d6c:	4084      	lsls	r4, r0
 8001d6e:	4643      	mov	r3, r8
 8001d70:	0020      	movs	r0, r4
 8001d72:	2400      	movs	r4, #0
 8001d74:	4588      	cmp	r8, r1
 8001d76:	dc00      	bgt.n	8001d7a <__aeabi_dsub+0x34a>
 8001d78:	e6c8      	b.n	8001b0c <__aeabi_dsub+0xdc>
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__aeabi_dsub+0x35c>)
 8001d7c:	1a5b      	subs	r3, r3, r1
 8001d7e:	4010      	ands	r0, r2
 8001d80:	4698      	mov	r8, r3
 8001d82:	4681      	mov	r9, r0
 8001d84:	e6d6      	b.n	8001b34 <__aeabi_dsub+0x104>
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	ff7fffff 	.word	0xff7fffff
 8001d90:	fffff801 	.word	0xfffff801
 8001d94:	000007fe 	.word	0x000007fe
 8001d98:	430f      	orrs	r7, r1
 8001d9a:	1e7a      	subs	r2, r7, #1
 8001d9c:	4197      	sbcs	r7, r2
 8001d9e:	e691      	b.n	8001ac4 <__aeabi_dsub+0x94>
 8001da0:	4661      	mov	r1, ip
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	0749      	lsls	r1, r1, #29
 8001da6:	430b      	orrs	r3, r1
 8001da8:	4661      	mov	r1, ip
 8001daa:	08cc      	lsrs	r4, r1, #3
 8001dac:	e7b8      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8001dae:	4640      	mov	r0, r8
 8001db0:	4cd3      	ldr	r4, [pc, #844]	; (8002100 <__aeabi_dsub+0x6d0>)
 8001db2:	3001      	adds	r0, #1
 8001db4:	4220      	tst	r0, r4
 8001db6:	d000      	beq.n	8001dba <__aeabi_dsub+0x38a>
 8001db8:	e0a2      	b.n	8001f00 <__aeabi_dsub+0x4d0>
 8001dba:	4640      	mov	r0, r8
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d000      	beq.n	8001dc2 <__aeabi_dsub+0x392>
 8001dc0:	e101      	b.n	8001fc6 <__aeabi_dsub+0x596>
 8001dc2:	4660      	mov	r0, ip
 8001dc4:	4318      	orrs	r0, r3
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x39a>
 8001dc8:	e15e      	b.n	8002088 <__aeabi_dsub+0x658>
 8001dca:	0008      	movs	r0, r1
 8001dcc:	4338      	orrs	r0, r7
 8001dce:	d000      	beq.n	8001dd2 <__aeabi_dsub+0x3a2>
 8001dd0:	e15f      	b.n	8002092 <__aeabi_dsub+0x662>
 8001dd2:	4661      	mov	r1, ip
 8001dd4:	08db      	lsrs	r3, r3, #3
 8001dd6:	0749      	lsls	r1, r1, #29
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	4661      	mov	r1, ip
 8001ddc:	08cc      	lsrs	r4, r1, #3
 8001dde:	e7a2      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001de0:	4dc8      	ldr	r5, [pc, #800]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001de2:	42a8      	cmp	r0, r5
 8001de4:	d100      	bne.n	8001de8 <__aeabi_dsub+0x3b8>
 8001de6:	e0cf      	b.n	8001f88 <__aeabi_dsub+0x558>
 8001de8:	2580      	movs	r5, #128	; 0x80
 8001dea:	4664      	mov	r4, ip
 8001dec:	042d      	lsls	r5, r5, #16
 8001dee:	432c      	orrs	r4, r5
 8001df0:	46a4      	mov	ip, r4
 8001df2:	2a38      	cmp	r2, #56	; 0x38
 8001df4:	dc56      	bgt.n	8001ea4 <__aeabi_dsub+0x474>
 8001df6:	2a1f      	cmp	r2, #31
 8001df8:	dd00      	ble.n	8001dfc <__aeabi_dsub+0x3cc>
 8001dfa:	e0d1      	b.n	8001fa0 <__aeabi_dsub+0x570>
 8001dfc:	2520      	movs	r5, #32
 8001dfe:	001e      	movs	r6, r3
 8001e00:	1aad      	subs	r5, r5, r2
 8001e02:	4664      	mov	r4, ip
 8001e04:	40ab      	lsls	r3, r5
 8001e06:	40ac      	lsls	r4, r5
 8001e08:	40d6      	lsrs	r6, r2
 8001e0a:	1e5d      	subs	r5, r3, #1
 8001e0c:	41ab      	sbcs	r3, r5
 8001e0e:	4334      	orrs	r4, r6
 8001e10:	4323      	orrs	r3, r4
 8001e12:	4664      	mov	r4, ip
 8001e14:	40d4      	lsrs	r4, r2
 8001e16:	1b09      	subs	r1, r1, r4
 8001e18:	e049      	b.n	8001eae <__aeabi_dsub+0x47e>
 8001e1a:	4660      	mov	r0, ip
 8001e1c:	1bdc      	subs	r4, r3, r7
 8001e1e:	1a46      	subs	r6, r0, r1
 8001e20:	42a3      	cmp	r3, r4
 8001e22:	4180      	sbcs	r0, r0
 8001e24:	4240      	negs	r0, r0
 8001e26:	4681      	mov	r9, r0
 8001e28:	0030      	movs	r0, r6
 8001e2a:	464e      	mov	r6, r9
 8001e2c:	1b80      	subs	r0, r0, r6
 8001e2e:	4681      	mov	r9, r0
 8001e30:	0200      	lsls	r0, r0, #8
 8001e32:	d476      	bmi.n	8001f22 <__aeabi_dsub+0x4f2>
 8001e34:	464b      	mov	r3, r9
 8001e36:	4323      	orrs	r3, r4
 8001e38:	d000      	beq.n	8001e3c <__aeabi_dsub+0x40c>
 8001e3a:	e652      	b.n	8001ae2 <__aeabi_dsub+0xb2>
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	2500      	movs	r5, #0
 8001e40:	e771      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001e42:	4339      	orrs	r1, r7
 8001e44:	000c      	movs	r4, r1
 8001e46:	1e62      	subs	r2, r4, #1
 8001e48:	4194      	sbcs	r4, r2
 8001e4a:	18e4      	adds	r4, r4, r3
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	419b      	sbcs	r3, r3
 8001e50:	425b      	negs	r3, r3
 8001e52:	4463      	add	r3, ip
 8001e54:	4699      	mov	r9, r3
 8001e56:	464b      	mov	r3, r9
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x42e>
 8001e5c:	e756      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	469c      	mov	ip, r3
 8001e62:	4ba8      	ldr	r3, [pc, #672]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001e64:	44e0      	add	r8, ip
 8001e66:	4598      	cmp	r8, r3
 8001e68:	d038      	beq.n	8001edc <__aeabi_dsub+0x4ac>
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	48a6      	ldr	r0, [pc, #664]	; (8002108 <__aeabi_dsub+0x6d8>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4003      	ands	r3, r0
 8001e72:	0018      	movs	r0, r3
 8001e74:	0863      	lsrs	r3, r4, #1
 8001e76:	4014      	ands	r4, r2
 8001e78:	431c      	orrs	r4, r3
 8001e7a:	07c3      	lsls	r3, r0, #31
 8001e7c:	431c      	orrs	r4, r3
 8001e7e:	0843      	lsrs	r3, r0, #1
 8001e80:	4699      	mov	r9, r3
 8001e82:	e657      	b.n	8001b34 <__aeabi_dsub+0x104>
 8001e84:	0010      	movs	r0, r2
 8001e86:	000e      	movs	r6, r1
 8001e88:	3820      	subs	r0, #32
 8001e8a:	40c6      	lsrs	r6, r0
 8001e8c:	2a20      	cmp	r2, #32
 8001e8e:	d004      	beq.n	8001e9a <__aeabi_dsub+0x46a>
 8001e90:	2040      	movs	r0, #64	; 0x40
 8001e92:	1a82      	subs	r2, r0, r2
 8001e94:	4091      	lsls	r1, r2
 8001e96:	430f      	orrs	r7, r1
 8001e98:	46b9      	mov	r9, r7
 8001e9a:	464f      	mov	r7, r9
 8001e9c:	1e7a      	subs	r2, r7, #1
 8001e9e:	4197      	sbcs	r7, r2
 8001ea0:	4337      	orrs	r7, r6
 8001ea2:	e60f      	b.n	8001ac4 <__aeabi_dsub+0x94>
 8001ea4:	4662      	mov	r2, ip
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	1e5a      	subs	r2, r3, #1
 8001eac:	4193      	sbcs	r3, r2
 8001eae:	1afc      	subs	r4, r7, r3
 8001eb0:	42a7      	cmp	r7, r4
 8001eb2:	41bf      	sbcs	r7, r7
 8001eb4:	427f      	negs	r7, r7
 8001eb6:	1bcb      	subs	r3, r1, r7
 8001eb8:	4699      	mov	r9, r3
 8001eba:	465d      	mov	r5, fp
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	e608      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8001ec0:	4666      	mov	r6, ip
 8001ec2:	431e      	orrs	r6, r3
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x498>
 8001ec6:	e0be      	b.n	8002046 <__aeabi_dsub+0x616>
 8001ec8:	1e56      	subs	r6, r2, #1
 8001eca:	2a01      	cmp	r2, #1
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x4a0>
 8001ece:	e109      	b.n	80020e4 <__aeabi_dsub+0x6b4>
 8001ed0:	4c8c      	ldr	r4, [pc, #560]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001ed2:	42a2      	cmp	r2, r4
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dsub+0x4a8>
 8001ed6:	e119      	b.n	800210c <__aeabi_dsub+0x6dc>
 8001ed8:	0032      	movs	r2, r6
 8001eda:	e6c1      	b.n	8001c60 <__aeabi_dsub+0x230>
 8001edc:	4642      	mov	r2, r8
 8001ede:	2400      	movs	r4, #0
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e648      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001ee4:	2020      	movs	r0, #32
 8001ee6:	000c      	movs	r4, r1
 8001ee8:	1a80      	subs	r0, r0, r2
 8001eea:	003e      	movs	r6, r7
 8001eec:	4087      	lsls	r7, r0
 8001eee:	4084      	lsls	r4, r0
 8001ef0:	40d6      	lsrs	r6, r2
 8001ef2:	1e78      	subs	r0, r7, #1
 8001ef4:	4187      	sbcs	r7, r0
 8001ef6:	40d1      	lsrs	r1, r2
 8001ef8:	4334      	orrs	r4, r6
 8001efa:	433c      	orrs	r4, r7
 8001efc:	448c      	add	ip, r1
 8001efe:	e7a4      	b.n	8001e4a <__aeabi_dsub+0x41a>
 8001f00:	4a80      	ldr	r2, [pc, #512]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001f02:	4290      	cmp	r0, r2
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x4d8>
 8001f06:	e0e9      	b.n	80020dc <__aeabi_dsub+0x6ac>
 8001f08:	19df      	adds	r7, r3, r7
 8001f0a:	429f      	cmp	r7, r3
 8001f0c:	419b      	sbcs	r3, r3
 8001f0e:	4461      	add	r1, ip
 8001f10:	425b      	negs	r3, r3
 8001f12:	18c9      	adds	r1, r1, r3
 8001f14:	07cc      	lsls	r4, r1, #31
 8001f16:	087f      	lsrs	r7, r7, #1
 8001f18:	084b      	lsrs	r3, r1, #1
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	4680      	mov	r8, r0
 8001f1e:	433c      	orrs	r4, r7
 8001f20:	e6f4      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001f22:	1afc      	subs	r4, r7, r3
 8001f24:	42a7      	cmp	r7, r4
 8001f26:	41bf      	sbcs	r7, r7
 8001f28:	4663      	mov	r3, ip
 8001f2a:	427f      	negs	r7, r7
 8001f2c:	1ac9      	subs	r1, r1, r3
 8001f2e:	1bcb      	subs	r3, r1, r7
 8001f30:	4699      	mov	r9, r3
 8001f32:	465d      	mov	r5, fp
 8001f34:	e5d5      	b.n	8001ae2 <__aeabi_dsub+0xb2>
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	074b      	lsls	r3, r1, #29
 8001f3a:	465d      	mov	r5, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	08cc      	lsrs	r4, r1, #3
 8001f40:	e6ee      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8001f42:	4662      	mov	r2, ip
 8001f44:	431a      	orrs	r2, r3
 8001f46:	d000      	beq.n	8001f4a <__aeabi_dsub+0x51a>
 8001f48:	e082      	b.n	8002050 <__aeabi_dsub+0x620>
 8001f4a:	000b      	movs	r3, r1
 8001f4c:	433b      	orrs	r3, r7
 8001f4e:	d11b      	bne.n	8001f88 <__aeabi_dsub+0x558>
 8001f50:	2480      	movs	r4, #128	; 0x80
 8001f52:	2500      	movs	r5, #0
 8001f54:	0324      	lsls	r4, r4, #12
 8001f56:	e6f9      	b.n	8001d4c <__aeabi_dsub+0x31c>
 8001f58:	19dc      	adds	r4, r3, r7
 8001f5a:	429c      	cmp	r4, r3
 8001f5c:	419b      	sbcs	r3, r3
 8001f5e:	4461      	add	r1, ip
 8001f60:	4689      	mov	r9, r1
 8001f62:	425b      	negs	r3, r3
 8001f64:	4499      	add	r9, r3
 8001f66:	464b      	mov	r3, r9
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	d444      	bmi.n	8001ff6 <__aeabi_dsub+0x5c6>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	4698      	mov	r8, r3
 8001f70:	e6cc      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001f72:	1bdc      	subs	r4, r3, r7
 8001f74:	4662      	mov	r2, ip
 8001f76:	42a3      	cmp	r3, r4
 8001f78:	419b      	sbcs	r3, r3
 8001f7a:	1a51      	subs	r1, r2, r1
 8001f7c:	425b      	negs	r3, r3
 8001f7e:	1acb      	subs	r3, r1, r3
 8001f80:	4699      	mov	r9, r3
 8001f82:	2301      	movs	r3, #1
 8001f84:	4698      	mov	r8, r3
 8001f86:	e5a4      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8001f88:	08ff      	lsrs	r7, r7, #3
 8001f8a:	074b      	lsls	r3, r1, #29
 8001f8c:	465d      	mov	r5, fp
 8001f8e:	433b      	orrs	r3, r7
 8001f90:	08cc      	lsrs	r4, r1, #3
 8001f92:	e6d7      	b.n	8001d44 <__aeabi_dsub+0x314>
 8001f94:	4662      	mov	r2, ip
 8001f96:	431a      	orrs	r2, r3
 8001f98:	0014      	movs	r4, r2
 8001f9a:	1e63      	subs	r3, r4, #1
 8001f9c:	419c      	sbcs	r4, r3
 8001f9e:	e679      	b.n	8001c94 <__aeabi_dsub+0x264>
 8001fa0:	0015      	movs	r5, r2
 8001fa2:	4664      	mov	r4, ip
 8001fa4:	3d20      	subs	r5, #32
 8001fa6:	40ec      	lsrs	r4, r5
 8001fa8:	46a0      	mov	r8, r4
 8001faa:	2a20      	cmp	r2, #32
 8001fac:	d005      	beq.n	8001fba <__aeabi_dsub+0x58a>
 8001fae:	2540      	movs	r5, #64	; 0x40
 8001fb0:	4664      	mov	r4, ip
 8001fb2:	1aaa      	subs	r2, r5, r2
 8001fb4:	4094      	lsls	r4, r2
 8001fb6:	4323      	orrs	r3, r4
 8001fb8:	469a      	mov	sl, r3
 8001fba:	4654      	mov	r4, sl
 8001fbc:	1e63      	subs	r3, r4, #1
 8001fbe:	419c      	sbcs	r4, r3
 8001fc0:	4643      	mov	r3, r8
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	e773      	b.n	8001eae <__aeabi_dsub+0x47e>
 8001fc6:	4662      	mov	r2, ip
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	d023      	beq.n	8002014 <__aeabi_dsub+0x5e4>
 8001fcc:	000a      	movs	r2, r1
 8001fce:	433a      	orrs	r2, r7
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x5a4>
 8001fd2:	e0a0      	b.n	8002116 <__aeabi_dsub+0x6e6>
 8001fd4:	4662      	mov	r2, ip
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	0752      	lsls	r2, r2, #29
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	4662      	mov	r2, ip
 8001fde:	08d4      	lsrs	r4, r2, #3
 8001fe0:	e6b0      	b.n	8001d44 <__aeabi_dsub+0x314>
 8001fe2:	000b      	movs	r3, r1
 8001fe4:	433b      	orrs	r3, r7
 8001fe6:	d100      	bne.n	8001fea <__aeabi_dsub+0x5ba>
 8001fe8:	e728      	b.n	8001e3c <__aeabi_dsub+0x40c>
 8001fea:	08ff      	lsrs	r7, r7, #3
 8001fec:	074b      	lsls	r3, r1, #29
 8001fee:	465d      	mov	r5, fp
 8001ff0:	433b      	orrs	r3, r7
 8001ff2:	08cc      	lsrs	r4, r1, #3
 8001ff4:	e697      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	4698      	mov	r8, r3
 8001ffa:	e736      	b.n	8001e6a <__aeabi_dsub+0x43a>
 8001ffc:	1afc      	subs	r4, r7, r3
 8001ffe:	42a7      	cmp	r7, r4
 8002000:	41bf      	sbcs	r7, r7
 8002002:	4663      	mov	r3, ip
 8002004:	427f      	negs	r7, r7
 8002006:	1ac9      	subs	r1, r1, r3
 8002008:	1bcb      	subs	r3, r1, r7
 800200a:	4699      	mov	r9, r3
 800200c:	2301      	movs	r3, #1
 800200e:	465d      	mov	r5, fp
 8002010:	4698      	mov	r8, r3
 8002012:	e55e      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8002014:	074b      	lsls	r3, r1, #29
 8002016:	08ff      	lsrs	r7, r7, #3
 8002018:	433b      	orrs	r3, r7
 800201a:	08cc      	lsrs	r4, r1, #3
 800201c:	e692      	b.n	8001d44 <__aeabi_dsub+0x314>
 800201e:	1bdc      	subs	r4, r3, r7
 8002020:	4660      	mov	r0, ip
 8002022:	42a3      	cmp	r3, r4
 8002024:	41b6      	sbcs	r6, r6
 8002026:	1a40      	subs	r0, r0, r1
 8002028:	4276      	negs	r6, r6
 800202a:	1b80      	subs	r0, r0, r6
 800202c:	4681      	mov	r9, r0
 800202e:	0200      	lsls	r0, r0, #8
 8002030:	d560      	bpl.n	80020f4 <__aeabi_dsub+0x6c4>
 8002032:	1afc      	subs	r4, r7, r3
 8002034:	42a7      	cmp	r7, r4
 8002036:	41bf      	sbcs	r7, r7
 8002038:	4663      	mov	r3, ip
 800203a:	427f      	negs	r7, r7
 800203c:	1ac9      	subs	r1, r1, r3
 800203e:	1bcb      	subs	r3, r1, r7
 8002040:	4699      	mov	r9, r3
 8002042:	465d      	mov	r5, fp
 8002044:	e576      	b.n	8001b34 <__aeabi_dsub+0x104>
 8002046:	08ff      	lsrs	r7, r7, #3
 8002048:	074b      	lsls	r3, r1, #29
 800204a:	433b      	orrs	r3, r7
 800204c:	08cc      	lsrs	r4, r1, #3
 800204e:	e667      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8002050:	000a      	movs	r2, r1
 8002052:	08db      	lsrs	r3, r3, #3
 8002054:	433a      	orrs	r2, r7
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x62a>
 8002058:	e66f      	b.n	8001d3a <__aeabi_dsub+0x30a>
 800205a:	4662      	mov	r2, ip
 800205c:	0752      	lsls	r2, r2, #29
 800205e:	4313      	orrs	r3, r2
 8002060:	4662      	mov	r2, ip
 8002062:	08d4      	lsrs	r4, r2, #3
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	0312      	lsls	r2, r2, #12
 8002068:	4214      	tst	r4, r2
 800206a:	d007      	beq.n	800207c <__aeabi_dsub+0x64c>
 800206c:	08c8      	lsrs	r0, r1, #3
 800206e:	4210      	tst	r0, r2
 8002070:	d104      	bne.n	800207c <__aeabi_dsub+0x64c>
 8002072:	465d      	mov	r5, fp
 8002074:	0004      	movs	r4, r0
 8002076:	08fb      	lsrs	r3, r7, #3
 8002078:	0749      	lsls	r1, r1, #29
 800207a:	430b      	orrs	r3, r1
 800207c:	0f5a      	lsrs	r2, r3, #29
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	0752      	lsls	r2, r2, #29
 8002084:	4313      	orrs	r3, r2
 8002086:	e65d      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002088:	074b      	lsls	r3, r1, #29
 800208a:	08ff      	lsrs	r7, r7, #3
 800208c:	433b      	orrs	r3, r7
 800208e:	08cc      	lsrs	r4, r1, #3
 8002090:	e649      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8002092:	19dc      	adds	r4, r3, r7
 8002094:	429c      	cmp	r4, r3
 8002096:	419b      	sbcs	r3, r3
 8002098:	4461      	add	r1, ip
 800209a:	4689      	mov	r9, r1
 800209c:	425b      	negs	r3, r3
 800209e:	4499      	add	r9, r3
 80020a0:	464b      	mov	r3, r9
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	d400      	bmi.n	80020a8 <__aeabi_dsub+0x678>
 80020a6:	e631      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020a8:	464a      	mov	r2, r9
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <__aeabi_dsub+0x6d8>)
 80020ac:	401a      	ands	r2, r3
 80020ae:	2301      	movs	r3, #1
 80020b0:	4691      	mov	r9, r2
 80020b2:	4698      	mov	r8, r3
 80020b4:	e62a      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020b6:	0016      	movs	r6, r2
 80020b8:	4664      	mov	r4, ip
 80020ba:	3e20      	subs	r6, #32
 80020bc:	40f4      	lsrs	r4, r6
 80020be:	46a0      	mov	r8, r4
 80020c0:	2a20      	cmp	r2, #32
 80020c2:	d005      	beq.n	80020d0 <__aeabi_dsub+0x6a0>
 80020c4:	2640      	movs	r6, #64	; 0x40
 80020c6:	4664      	mov	r4, ip
 80020c8:	1ab2      	subs	r2, r6, r2
 80020ca:	4094      	lsls	r4, r2
 80020cc:	4323      	orrs	r3, r4
 80020ce:	469a      	mov	sl, r3
 80020d0:	4654      	mov	r4, sl
 80020d2:	1e63      	subs	r3, r4, #1
 80020d4:	419c      	sbcs	r4, r3
 80020d6:	4643      	mov	r3, r8
 80020d8:	431c      	orrs	r4, r3
 80020da:	e5db      	b.n	8001c94 <__aeabi_dsub+0x264>
 80020dc:	0002      	movs	r2, r0
 80020de:	2400      	movs	r4, #0
 80020e0:	2300      	movs	r3, #0
 80020e2:	e548      	b.n	8001b76 <__aeabi_dsub+0x146>
 80020e4:	19dc      	adds	r4, r3, r7
 80020e6:	42bc      	cmp	r4, r7
 80020e8:	41bf      	sbcs	r7, r7
 80020ea:	4461      	add	r1, ip
 80020ec:	4689      	mov	r9, r1
 80020ee:	427f      	negs	r7, r7
 80020f0:	44b9      	add	r9, r7
 80020f2:	e738      	b.n	8001f66 <__aeabi_dsub+0x536>
 80020f4:	464b      	mov	r3, r9
 80020f6:	4323      	orrs	r3, r4
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x6cc>
 80020fa:	e69f      	b.n	8001e3c <__aeabi_dsub+0x40c>
 80020fc:	e606      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	000007fe 	.word	0x000007fe
 8002104:	000007ff 	.word	0x000007ff
 8002108:	ff7fffff 	.word	0xff7fffff
 800210c:	08ff      	lsrs	r7, r7, #3
 800210e:	074b      	lsls	r3, r1, #29
 8002110:	433b      	orrs	r3, r7
 8002112:	08cc      	lsrs	r4, r1, #3
 8002114:	e616      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002116:	4662      	mov	r2, ip
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	0752      	lsls	r2, r2, #29
 800211c:	4313      	orrs	r3, r2
 800211e:	4662      	mov	r2, ip
 8002120:	08d4      	lsrs	r4, r2, #3
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	0312      	lsls	r2, r2, #12
 8002126:	4214      	tst	r4, r2
 8002128:	d007      	beq.n	800213a <__aeabi_dsub+0x70a>
 800212a:	08c8      	lsrs	r0, r1, #3
 800212c:	4210      	tst	r0, r2
 800212e:	d104      	bne.n	800213a <__aeabi_dsub+0x70a>
 8002130:	465d      	mov	r5, fp
 8002132:	0004      	movs	r4, r0
 8002134:	08fb      	lsrs	r3, r7, #3
 8002136:	0749      	lsls	r1, r1, #29
 8002138:	430b      	orrs	r3, r1
 800213a:	0f5a      	lsrs	r2, r3, #29
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	0752      	lsls	r2, r2, #29
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	4313      	orrs	r3, r2
 8002144:	e5fe      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002146:	2300      	movs	r3, #0
 8002148:	4a01      	ldr	r2, [pc, #4]	; (8002150 <__aeabi_dsub+0x720>)
 800214a:	001c      	movs	r4, r3
 800214c:	e513      	b.n	8001b76 <__aeabi_dsub+0x146>
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	000007ff 	.word	0x000007ff

08002154 <__aeabi_dcmpun>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	0005      	movs	r5, r0
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <__aeabi_dcmpun+0x38>)
 800215a:	031c      	lsls	r4, r3, #12
 800215c:	0016      	movs	r6, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	030a      	lsls	r2, r1, #12
 8002162:	0049      	lsls	r1, r1, #1
 8002164:	0b12      	lsrs	r2, r2, #12
 8002166:	0d49      	lsrs	r1, r1, #21
 8002168:	0b24      	lsrs	r4, r4, #12
 800216a:	0d5b      	lsrs	r3, r3, #21
 800216c:	4281      	cmp	r1, r0
 800216e:	d008      	beq.n	8002182 <__aeabi_dcmpun+0x2e>
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <__aeabi_dcmpun+0x38>)
 8002172:	2000      	movs	r0, #0
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <__aeabi_dcmpun+0x2c>
 8002178:	0020      	movs	r0, r4
 800217a:	4330      	orrs	r0, r6
 800217c:	1e43      	subs	r3, r0, #1
 800217e:	4198      	sbcs	r0, r3
 8002180:	bd70      	pop	{r4, r5, r6, pc}
 8002182:	2001      	movs	r0, #1
 8002184:	432a      	orrs	r2, r5
 8002186:	d1fb      	bne.n	8002180 <__aeabi_dcmpun+0x2c>
 8002188:	e7f2      	b.n	8002170 <__aeabi_dcmpun+0x1c>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	000007ff 	.word	0x000007ff

08002190 <__aeabi_d2iz>:
 8002190:	000a      	movs	r2, r1
 8002192:	b530      	push	{r4, r5, lr}
 8002194:	4c13      	ldr	r4, [pc, #76]	; (80021e4 <__aeabi_d2iz+0x54>)
 8002196:	0053      	lsls	r3, r2, #1
 8002198:	0309      	lsls	r1, r1, #12
 800219a:	0005      	movs	r5, r0
 800219c:	0b09      	lsrs	r1, r1, #12
 800219e:	2000      	movs	r0, #0
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	0fd2      	lsrs	r2, r2, #31
 80021a4:	42a3      	cmp	r3, r4
 80021a6:	dd04      	ble.n	80021b2 <__aeabi_d2iz+0x22>
 80021a8:	480f      	ldr	r0, [pc, #60]	; (80021e8 <__aeabi_d2iz+0x58>)
 80021aa:	4283      	cmp	r3, r0
 80021ac:	dd02      	ble.n	80021b4 <__aeabi_d2iz+0x24>
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <__aeabi_d2iz+0x5c>)
 80021b0:	18d0      	adds	r0, r2, r3
 80021b2:	bd30      	pop	{r4, r5, pc}
 80021b4:	2080      	movs	r0, #128	; 0x80
 80021b6:	0340      	lsls	r0, r0, #13
 80021b8:	4301      	orrs	r1, r0
 80021ba:	480d      	ldr	r0, [pc, #52]	; (80021f0 <__aeabi_d2iz+0x60>)
 80021bc:	1ac0      	subs	r0, r0, r3
 80021be:	281f      	cmp	r0, #31
 80021c0:	dd08      	ble.n	80021d4 <__aeabi_d2iz+0x44>
 80021c2:	480c      	ldr	r0, [pc, #48]	; (80021f4 <__aeabi_d2iz+0x64>)
 80021c4:	1ac3      	subs	r3, r0, r3
 80021c6:	40d9      	lsrs	r1, r3
 80021c8:	000b      	movs	r3, r1
 80021ca:	4258      	negs	r0, r3
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	d1f0      	bne.n	80021b2 <__aeabi_d2iz+0x22>
 80021d0:	0018      	movs	r0, r3
 80021d2:	e7ee      	b.n	80021b2 <__aeabi_d2iz+0x22>
 80021d4:	4c08      	ldr	r4, [pc, #32]	; (80021f8 <__aeabi_d2iz+0x68>)
 80021d6:	40c5      	lsrs	r5, r0
 80021d8:	46a4      	mov	ip, r4
 80021da:	4463      	add	r3, ip
 80021dc:	4099      	lsls	r1, r3
 80021de:	000b      	movs	r3, r1
 80021e0:	432b      	orrs	r3, r5
 80021e2:	e7f2      	b.n	80021ca <__aeabi_d2iz+0x3a>
 80021e4:	000003fe 	.word	0x000003fe
 80021e8:	0000041d 	.word	0x0000041d
 80021ec:	7fffffff 	.word	0x7fffffff
 80021f0:	00000433 	.word	0x00000433
 80021f4:	00000413 	.word	0x00000413
 80021f8:	fffffbed 	.word	0xfffffbed

080021fc <__aeabi_i2d>:
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	2800      	cmp	r0, #0
 8002200:	d016      	beq.n	8002230 <__aeabi_i2d+0x34>
 8002202:	17c3      	asrs	r3, r0, #31
 8002204:	18c5      	adds	r5, r0, r3
 8002206:	405d      	eors	r5, r3
 8002208:	0fc4      	lsrs	r4, r0, #31
 800220a:	0028      	movs	r0, r5
 800220c:	f000 f84c 	bl	80022a8 <__clzsi2>
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <__aeabi_i2d+0x5c>)
 8002212:	1a12      	subs	r2, r2, r0
 8002214:	280a      	cmp	r0, #10
 8002216:	dc16      	bgt.n	8002246 <__aeabi_i2d+0x4a>
 8002218:	0003      	movs	r3, r0
 800221a:	002e      	movs	r6, r5
 800221c:	3315      	adds	r3, #21
 800221e:	409e      	lsls	r6, r3
 8002220:	230b      	movs	r3, #11
 8002222:	1a18      	subs	r0, r3, r0
 8002224:	40c5      	lsrs	r5, r0
 8002226:	0552      	lsls	r2, r2, #21
 8002228:	032d      	lsls	r5, r5, #12
 800222a:	0b2d      	lsrs	r5, r5, #12
 800222c:	0d53      	lsrs	r3, r2, #21
 800222e:	e003      	b.n	8002238 <__aeabi_i2d+0x3c>
 8002230:	2400      	movs	r4, #0
 8002232:	2300      	movs	r3, #0
 8002234:	2500      	movs	r5, #0
 8002236:	2600      	movs	r6, #0
 8002238:	051b      	lsls	r3, r3, #20
 800223a:	432b      	orrs	r3, r5
 800223c:	07e4      	lsls	r4, r4, #31
 800223e:	4323      	orrs	r3, r4
 8002240:	0030      	movs	r0, r6
 8002242:	0019      	movs	r1, r3
 8002244:	bd70      	pop	{r4, r5, r6, pc}
 8002246:	380b      	subs	r0, #11
 8002248:	4085      	lsls	r5, r0
 800224a:	0552      	lsls	r2, r2, #21
 800224c:	032d      	lsls	r5, r5, #12
 800224e:	2600      	movs	r6, #0
 8002250:	0b2d      	lsrs	r5, r5, #12
 8002252:	0d53      	lsrs	r3, r2, #21
 8002254:	e7f0      	b.n	8002238 <__aeabi_i2d+0x3c>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	0000041e 	.word	0x0000041e

0800225c <__aeabi_ui2d>:
 800225c:	b510      	push	{r4, lr}
 800225e:	1e04      	subs	r4, r0, #0
 8002260:	d010      	beq.n	8002284 <__aeabi_ui2d+0x28>
 8002262:	f000 f821 	bl	80022a8 <__clzsi2>
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <__aeabi_ui2d+0x48>)
 8002268:	1a1b      	subs	r3, r3, r0
 800226a:	280a      	cmp	r0, #10
 800226c:	dc11      	bgt.n	8002292 <__aeabi_ui2d+0x36>
 800226e:	220b      	movs	r2, #11
 8002270:	0021      	movs	r1, r4
 8002272:	1a12      	subs	r2, r2, r0
 8002274:	40d1      	lsrs	r1, r2
 8002276:	3015      	adds	r0, #21
 8002278:	030a      	lsls	r2, r1, #12
 800227a:	055b      	lsls	r3, r3, #21
 800227c:	4084      	lsls	r4, r0
 800227e:	0b12      	lsrs	r2, r2, #12
 8002280:	0d5b      	lsrs	r3, r3, #21
 8002282:	e001      	b.n	8002288 <__aeabi_ui2d+0x2c>
 8002284:	2300      	movs	r3, #0
 8002286:	2200      	movs	r2, #0
 8002288:	051b      	lsls	r3, r3, #20
 800228a:	4313      	orrs	r3, r2
 800228c:	0020      	movs	r0, r4
 800228e:	0019      	movs	r1, r3
 8002290:	bd10      	pop	{r4, pc}
 8002292:	0022      	movs	r2, r4
 8002294:	380b      	subs	r0, #11
 8002296:	4082      	lsls	r2, r0
 8002298:	055b      	lsls	r3, r3, #21
 800229a:	0312      	lsls	r2, r2, #12
 800229c:	2400      	movs	r4, #0
 800229e:	0b12      	lsrs	r2, r2, #12
 80022a0:	0d5b      	lsrs	r3, r3, #21
 80022a2:	e7f1      	b.n	8002288 <__aeabi_ui2d+0x2c>
 80022a4:	0000041e 	.word	0x0000041e

080022a8 <__clzsi2>:
 80022a8:	211c      	movs	r1, #28
 80022aa:	2301      	movs	r3, #1
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	4298      	cmp	r0, r3
 80022b0:	d301      	bcc.n	80022b6 <__clzsi2+0xe>
 80022b2:	0c00      	lsrs	r0, r0, #16
 80022b4:	3910      	subs	r1, #16
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	4298      	cmp	r0, r3
 80022ba:	d301      	bcc.n	80022c0 <__clzsi2+0x18>
 80022bc:	0a00      	lsrs	r0, r0, #8
 80022be:	3908      	subs	r1, #8
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	4298      	cmp	r0, r3
 80022c4:	d301      	bcc.n	80022ca <__clzsi2+0x22>
 80022c6:	0900      	lsrs	r0, r0, #4
 80022c8:	3904      	subs	r1, #4
 80022ca:	a202      	add	r2, pc, #8	; (adr r2, 80022d4 <__clzsi2+0x2c>)
 80022cc:	5c10      	ldrb	r0, [r2, r0]
 80022ce:	1840      	adds	r0, r0, r1
 80022d0:	4770      	bx	lr
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	02020304 	.word	0x02020304
 80022d8:	01010101 	.word	0x01010101
	...

080022e4 <__clzdi2>:
 80022e4:	b510      	push	{r4, lr}
 80022e6:	2900      	cmp	r1, #0
 80022e8:	d103      	bne.n	80022f2 <__clzdi2+0xe>
 80022ea:	f7ff ffdd 	bl	80022a8 <__clzsi2>
 80022ee:	3020      	adds	r0, #32
 80022f0:	e002      	b.n	80022f8 <__clzdi2+0x14>
 80022f2:	0008      	movs	r0, r1
 80022f4:	f7ff ffd8 	bl	80022a8 <__clzsi2>
 80022f8:	bd10      	pop	{r4, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)

080022fc <main>:
  * @brief  Main program.
  * @param  : None
  * @retval : None
  */
int32_t main(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Configure the System clock to have a system clock = 32 MHz */
  SystemClock_Config();
 8002300:	f000 f850 	bl	80023a4 <SystemClock_Config>
  /* STM32L0xx HAL library initialization:
       - Configure the Flash prefetch, Flash preread and Buffer caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Low Level Initialization
     */
  HAL_Init();
 8002304:	f002 f8ee 	bl	80044e4 <HAL_Init>
  
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	05da      	lsls	r2, r3, #23
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	045b      	lsls	r3, r3, #17
 8002310:	0019      	movs	r1, r3
 8002312:	2000      	movs	r0, #0
 8002314:	f003 fb64 	bl	80059e0 <HAL_RCC_MCOConfig>
    
  #if defined (STL_VERBOSE)
    /* Verbose messages ------------------------------------------------------*/
    USART_Configuration();
 8002318:	f000 f942 	bl	80025a0 <USART_Configuration>
    printf("\n\r %s\n\r", MESSAGE1);
 800231c:	4a13      	ldr	r2, [pc, #76]	; (800236c <main+0x70>)
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <main+0x74>)
 8002320:	0011      	movs	r1, r2
 8002322:	0018      	movs	r0, r3
 8002324:	f005 fbfe 	bl	8007b24 <iprintf>
    printf(" %s\n\r", MESSAGE2);
 8002328:	4a12      	ldr	r2, [pc, #72]	; (8002374 <main+0x78>)
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <main+0x7c>)
 800232c:	0011      	movs	r1, r2
 800232e:	0018      	movs	r0, r3
 8002330:	f005 fbf8 	bl	8007b24 <iprintf>
    printf(" ... main routine starts ...\r\n");
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <main+0x80>)
 8002336:	0018      	movs	r0, r3
 8002338:	f005 fc80 	bl	8007c3c <puts>
  #endif /* STL_VERBOSE */

  #if defined (STL_EVAL_MODE)
    /* Evaluation board control ----------------------------------------------*/
    Eval_Board_HW_Init();
 800233c:	f000 f8f4 	bl	8002528 <Eval_Board_HW_Init>
  #endif /* STL_EVAL_MODE */
  /* NVIC configuration ------------------------------------------------------*/
  NVIC_Configuration();
 8002340:	f000 f81e 	bl	8002380 <NVIC_Configuration>
    /* if you debug TIM21 it is helpful to uncomment next lines */
    /*
    __DBGMCU_CLK_ENABLE();
    __HAL_FREEZE_TIM21_DBGMCU();
    */  
    BSP_LED_On(LED_ERR);
 8002344:	23a0      	movs	r3, #160	; 0xa0
 8002346:	05db      	lsls	r3, r3, #23
 8002348:	2201      	movs	r2, #1
 800234a:	2180      	movs	r1, #128	; 0x80
 800234c:	0018      	movs	r0, r3
 800234e:	f002 fdb1 	bl	8004eb4 <HAL_GPIO_WritePin>
  #endif  /* STL_EVAL_MODE */
  /* -------------------------------------------------------------------------*/
  /* This is where the main self-test routines are initialized */        
  STL_InitRunTimeChecks();
 8002352:	f000 fbfb 	bl	8002b4c <STL_InitRunTimeChecks>
  /* -------------------------------------------------------------------------*/
  #if defined STL_EVAL_MODE
    BSP_LED_Off(LED_ERR);
 8002356:	23a0      	movs	r3, #160	; 0xa0
 8002358:	05db      	lsls	r3, r3, #23
 800235a:	2200      	movs	r2, #0
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	0018      	movs	r0, r3
 8002360:	f002 fda8 	bl	8004eb4 <HAL_GPIO_WritePin>
  /* Infinite loop */
  while (1)
  {
    /* -----------------------------------------------------------------------*/
    /* This is where the main self-test routines are executed */
    STL_DoRunTimeChecks();
 8002364:	f000 fc7c 	bl	8002c60 <STL_DoRunTimeChecks>
 8002368:	e7fc      	b.n	8002364 <main+0x68>
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	08009f28 	.word	0x08009f28
 8002370:	08009f40 	.word	0x08009f40
 8002374:	08009f48 	.word	0x08009f48
 8002378:	08009f60 	.word	0x08009f60
 800237c:	08009f68 	.word	0x08009f68

08002380 <NVIC_Configuration>:
  * @brief  NVIC configuration
  * @param :  None
  * @retval : None
  */
static void NVIC_Configuration(void)
{  
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <NVIC_Configuration+0x20>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	22fa      	movs	r2, #250	; 0xfa
 800238a:	0091      	lsls	r1, r2, #2
 800238c:	0018      	movs	r0, r3
 800238e:	f7fd fed7 	bl	8000140 <__udivsi3>
 8002392:	0003      	movs	r3, r0
 8002394:	0018      	movs	r0, r3
 8002396:	f002 f9e6 	bl	8004766 <HAL_SYSTICK_Config>
}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000080 	.word	0x20000080

080023a4 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale 1 mode
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b094      	sub	sp, #80	; 0x50
 80023a8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 80023aa:	4b29      	ldr	r3, [pc, #164]	; (8002450 <SystemClock_Config+0xac>)
 80023ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ae:	4b28      	ldr	r3, [pc, #160]	; (8002450 <SystemClock_Config+0xac>)
 80023b0:	2180      	movs	r1, #128	; 0x80
 80023b2:	0549      	lsls	r1, r1, #21
 80023b4:	430a      	orrs	r2, r1
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* The voltage scaling  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <SystemClock_Config+0xb0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a26      	ldr	r2, [pc, #152]	; (8002458 <SystemClock_Config+0xb4>)
 80023be:	401a      	ands	r2, r3
 80023c0:	4b24      	ldr	r3, [pc, #144]	; (8002454 <SystemClock_Config+0xb0>)
 80023c2:	2180      	movs	r1, #128	; 0x80
 80023c4:	0109      	lsls	r1, r1, #4
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]

#ifdef HSE_CLOCK_APPLIED    
  /* Enable HSE Oscillator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	2280      	movs	r2, #128	; 0x80
 80023d4:	0252      	lsls	r2, r2, #9
 80023d6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	2202      	movs	r2, #2
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	2280      	movs	r2, #128	; 0x80
 80023e2:	0252      	lsls	r2, r2, #9
 80023e4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	22c0      	movs	r2, #192	; 0xc0
 80023ea:	0312      	lsls	r2, r2, #12
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	03d2      	lsls	r2, r2, #15
 80023f4:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
#endif
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	0018      	movs	r0, r3
 80023fa:	f002 fde5 	bl	8004fc8 <HAL_RCC_OscConfig>
 80023fe:	1e03      	subs	r3, r0, #0
 8002400:	d005      	beq.n	800240e <SystemClock_Config+0x6a>
  {
    #ifdef STL_VERBOSE_POR
      printf("PLL Osc config failure\n\r");
 8002402:	4b16      	ldr	r3, [pc, #88]	; (800245c <SystemClock_Config+0xb8>)
 8002404:	0018      	movs	r0, r3
 8002406:	f005 fb8d 	bl	8007b24 <iprintf>
    #endif  /* STL_VERBOSE_POR */
    FailSafePOR();
 800240a:	f000 fddb 	bl	8002fc4 <FailSafePOR>
  }
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800240e:	213c      	movs	r1, #60	; 0x3c
 8002410:	187b      	adds	r3, r7, r1
 8002412:	220f      	movs	r2, #15
 8002414:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002416:	187b      	adds	r3, r7, r1
 8002418:	2203      	movs	r2, #3
 800241a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800241c:	187b      	adds	r3, r7, r1
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 8002422:	187b      	adds	r3, r7, r1
 8002424:	2200      	movs	r2, #0
 8002426:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8002428:	187b      	adds	r3, r7, r1
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, MAX_FLASH_LATENCY) != HAL_OK)
 800242e:	187b      	adds	r3, r7, r1
 8002430:	2101      	movs	r1, #1
 8002432:	0018      	movs	r0, r3
 8002434:	f003 f98c 	bl	8005750 <HAL_RCC_ClockConfig>
 8002438:	1e03      	subs	r3, r0, #0
 800243a:	d005      	beq.n	8002448 <SystemClock_Config+0xa4>
  {
    #ifdef STL_VERBOSE_POR
      printf("PLL clock config failure\n\r");
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <SystemClock_Config+0xbc>)
 800243e:	0018      	movs	r0, r3
 8002440:	f005 fb70 	bl	8007b24 <iprintf>
    #endif  /* STL_VERBOSE_POR */
    FailSafePOR();
 8002444:	f000 fdbe 	bl	8002fc4 <FailSafePOR>
  }
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b014      	add	sp, #80	; 0x50
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	40007000 	.word	0x40007000
 8002458:	ffffe7ff 	.word	0xffffe7ff
 800245c:	08009f88 	.word	0x08009f88
 8002460:	08009fa4 	.word	0x08009fa4

08002464 <StartUpClock_Config>:
  * @param  None
  * @retval None
  */

void StartUpClock_Config(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b094      	sub	sp, #80	; 0x50
 8002468:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 800246a:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <StartUpClock_Config+0xb0>)
 800246c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800246e:	4b29      	ldr	r3, [pc, #164]	; (8002514 <StartUpClock_Config+0xb0>)
 8002470:	2180      	movs	r1, #128	; 0x80
 8002472:	0549      	lsls	r1, r1, #21
 8002474:	430a      	orrs	r2, r1
 8002476:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* The voltage scaling  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <StartUpClock_Config+0xb4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a27      	ldr	r2, [pc, #156]	; (800251c <StartUpClock_Config+0xb8>)
 800247e:	401a      	ands	r2, r3
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <StartUpClock_Config+0xb4>)
 8002482:	2180      	movs	r1, #128	; 0x80
 8002484:	0109      	lsls	r1, r1, #4
 8002486:	430a      	orrs	r2, r1
 8002488:	601a      	str	r2, [r3, #0]
  
  /* Enable HSI Oscillator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	2202      	movs	r2, #2
 800248e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	2201      	movs	r2, #1
 8002494:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	2202      	movs	r2, #2
 800249a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	2200      	movs	r2, #0
 80024a0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 0x10; /* !!! default HSI trimming value !!! */
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	2210      	movs	r2, #16
 80024a6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2280      	movs	r2, #128	; 0x80
 80024ac:	02d2      	lsls	r2, r2, #11
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2280      	movs	r2, #128	; 0x80
 80024b4:	03d2      	lsls	r2, r2, #15
 80024b6:	635a      	str	r2, [r3, #52]	; 0x34
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	0018      	movs	r0, r3
 80024bc:	f002 fd84 	bl	8004fc8 <HAL_RCC_OscConfig>
 80024c0:	1e03      	subs	r3, r0, #0
 80024c2:	d005      	beq.n	80024d0 <StartUpClock_Config+0x6c>
  {
    #ifdef STL_VERBOSE_POR
      printf("PLL clock config failure\n\r");
 80024c4:	4b16      	ldr	r3, [pc, #88]	; (8002520 <StartUpClock_Config+0xbc>)
 80024c6:	0018      	movs	r0, r3
 80024c8:	f005 fb2c 	bl	8007b24 <iprintf>
    #endif  /* STL_VERBOSE_POR */
    FailSafePOR();
 80024cc:	f000 fd7a 	bl	8002fc4 <FailSafePOR>
  }
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80024d0:	213c      	movs	r1, #60	; 0x3c
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	220f      	movs	r2, #15
 80024d6:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024d8:	187b      	adds	r3, r7, r1
 80024da:	2203      	movs	r2, #3
 80024dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024de:	187b      	adds	r3, r7, r1
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	2200      	movs	r2, #0
 80024e8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	2200      	movs	r2, #0
 80024ee:	611a      	str	r2, [r3, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	2101      	movs	r1, #1
 80024f4:	0018      	movs	r0, r3
 80024f6:	f003 f92b 	bl	8005750 <HAL_RCC_ClockConfig>
 80024fa:	1e03      	subs	r3, r0, #0
 80024fc:	d005      	beq.n	800250a <StartUpClock_Config+0xa6>
  {
    #ifdef STL_VERBOSE_POR
      printf("PLL clock switch failure\n\r");
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <StartUpClock_Config+0xc0>)
 8002500:	0018      	movs	r0, r3
 8002502:	f005 fb0f 	bl	8007b24 <iprintf>
    #endif  /* STL_VERBOSE_POR */
    FailSafePOR();
 8002506:	f000 fd5d 	bl	8002fc4 <FailSafePOR>
  }
}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	46bd      	mov	sp, r7
 800250e:	b014      	add	sp, #80	; 0x50
 8002510:	bd80      	pop	{r7, pc}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	40021000 	.word	0x40021000
 8002518:	40007000 	.word	0x40007000
 800251c:	ffffe7ff 	.word	0xffffe7ff
 8002520:	08009fa4 	.word	0x08009fa4
 8002524:	08009fc0 	.word	0x08009fc0

08002528 <Eval_Board_HW_Init>:
  * @brief  Initialization of evaluation board HW
  * @param :  None
  * @retval : None
  */
void Eval_Board_HW_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* init LED and monitoring signals on evaluation board -------------------*/
    BSP_LED_Init(LED_VLM);
 800252c:	2020      	movs	r0, #32
 800252e:	f000 f809 	bl	8002544 <User_signal_Init>
    BSP_LED_Init(LED_NVM);
 8002532:	2040      	movs	r0, #64	; 0x40
 8002534:	f000 f806 	bl	8002544 <User_signal_Init>
    BSP_LED_Init(LED_ERR);
 8002538:	2080      	movs	r0, #128	; 0x80
 800253a:	f000 f803 	bl	8002544 <User_signal_Init>
}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <User_signal_Init>:
  * @brief  Initialization of evaluation board HW
  * @param :  None
  * @retval : None
  */
void User_signal_Init(uint16_t gpio_pin)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	0002      	movs	r2, r0
 800254c:	1dbb      	adds	r3, r7, #6
 800254e:	801a      	strh	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  __GPIOA_CLK_ENABLE();
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <User_signal_Init+0x58>)
 8002552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002554:	4b11      	ldr	r3, [pc, #68]	; (800259c <User_signal_Init+0x58>)
 8002556:	2101      	movs	r1, #1
 8002558:	430a      	orrs	r2, r1
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <User_signal_Init+0x58>)
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	2201      	movs	r2, #1
 8002562:	4013      	ands	r3, r2
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = gpio_pin;
 8002568:	1dbb      	adds	r3, r7, #6
 800256a:	881a      	ldrh	r2, [r3, #0]
 800256c:	210c      	movs	r1, #12
 800256e:	187b      	adds	r3, r7, r1
 8002570:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2201      	movs	r2, #1
 8002576:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002578:	187b      	adds	r3, r7, r1
 800257a:	2201      	movs	r2, #1
 800257c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800257e:	187b      	adds	r3, r7, r1
 8002580:	2202      	movs	r2, #2
 8002582:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	187a      	adds	r2, r7, r1
 8002586:	23a0      	movs	r3, #160	; 0xa0
 8002588:	05db      	lsls	r3, r3, #23
 800258a:	0011      	movs	r1, r2
 800258c:	0018      	movs	r0, r3
 800258e:	f002 fb1b 	bl	8004bc8 <HAL_GPIO_Init>
}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	46bd      	mov	sp, r7
 8002596:	b008      	add	sp, #32
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	40021000 	.word	0x40021000

080025a0 <USART_Configuration>:
  * @brief  Configure the UART peripheral 
  * @param  None
  * @retval None
  */
void USART_Configuration(void)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b09f      	sub	sp, #124	; 0x7c
 80025a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable GPIO clock */
  __GPIOA_CLK_ENABLE();
 80025a6:	4b3d      	ldr	r3, [pc, #244]	; (800269c <USART_Configuration+0xfc>)
 80025a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025aa:	4b3c      	ldr	r3, [pc, #240]	; (800269c <USART_Configuration+0xfc>)
 80025ac:	2101      	movs	r1, #1
 80025ae:	430a      	orrs	r2, r1
 80025b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80025b2:	4b3a      	ldr	r3, [pc, #232]	; (800269c <USART_Configuration+0xfc>)
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	2201      	movs	r2, #1
 80025b8:	4013      	ands	r3, r2
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
    
  /* Configure USART Tx as alternate function */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025be:	2464      	movs	r4, #100	; 0x64
 80025c0:	193b      	adds	r3, r7, r4
 80025c2:	2204      	movs	r2, #4
 80025c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	193b      	adds	r3, r7, r4
 80025c8:	2202      	movs	r2, #2
 80025ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80025cc:	193b      	adds	r3, r7, r4
 80025ce:	2202      	movs	r2, #2
 80025d0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d2:	193b      	adds	r3, r7, r4
 80025d4:	2201      	movs	r2, #1
 80025d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80025d8:	193b      	adds	r3, r7, r4
 80025da:	2204      	movs	r2, #4
 80025dc:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025de:	193a      	adds	r2, r7, r4
 80025e0:	23a0      	movs	r3, #160	; 0xa0
 80025e2:	05db      	lsls	r3, r3, #23
 80025e4:	0011      	movs	r1, r2
 80025e6:	0018      	movs	r0, r3
 80025e8:	f002 faee 	bl	8004bc8 <HAL_GPIO_Init>
  
  /* Configure USART Rx as alternate function */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025ec:	193b      	adds	r3, r7, r4
 80025ee:	2208      	movs	r2, #8
 80025f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	193b      	adds	r3, r7, r4
 80025f4:	2202      	movs	r2, #2
 80025f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80025f8:	193b      	adds	r3, r7, r4
 80025fa:	2204      	movs	r2, #4
 80025fc:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fe:	193a      	adds	r2, r7, r4
 8002600:	23a0      	movs	r3, #160	; 0xa0
 8002602:	05db      	lsls	r3, r3, #23
 8002604:	0011      	movs	r1, r2
 8002606:	0018      	movs	r0, r3
 8002608:	f002 fade 	bl	8004bc8 <HAL_GPIO_Init>
  
   /* Start high speed internal (HSI) oscillator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800260c:	2108      	movs	r1, #8
 800260e:	187b      	adds	r3, r7, r1
 8002610:	2202      	movs	r2, #2
 8002612:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002614:	187b      	adds	r3, r7, r1
 8002616:	2201      	movs	r2, #1
 8002618:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800261a:	187b      	adds	r3, r7, r1
 800261c:	2200      	movs	r2, #0
 800261e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT; /* !!! 0x10 - default HSI trimming value !!! */
 8002620:	187b      	adds	r3, r7, r1
 8002622:	2210      	movs	r2, #16
 8002624:	611a      	str	r2, [r3, #16]
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002626:	187b      	adds	r3, r7, r1
 8002628:	0018      	movs	r0, r3
 800262a:	f002 fccd 	bl	8004fc8 <HAL_RCC_OscConfig>

   /* HSI feeds USART2 */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2; 
 800262e:	2140      	movs	r1, #64	; 0x40
 8002630:	187b      	adds	r3, r7, r1
 8002632:	2202      	movs	r2, #2
 8002634:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8002636:	187b      	adds	r3, r7, r1
 8002638:	2208      	movs	r2, #8
 800263a:	611a      	str	r2, [r3, #16]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800263c:	187b      	adds	r3, r7, r1
 800263e:	0018      	movs	r0, r3
 8002640:	f003 fb3c 	bl	8005cbc <HAL_RCCEx_PeriphCLKConfig>
  
  /* Enable USART clock */
  __USART2_CLK_ENABLE();
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <USART_Configuration+0xfc>)
 8002646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <USART_Configuration+0xfc>)
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	0289      	lsls	r1, r1, #10
 800264e:	430a      	orrs	r2, r1
 8002650:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* UART configuration */
  UartHandle.Instance = USART2;
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <USART_Configuration+0x100>)
 8002654:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <USART_Configuration+0x104>)
 8002656:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate   = 115200;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <USART_Configuration+0x100>)
 800265a:	22e1      	movs	r2, #225	; 0xe1
 800265c:	0252      	lsls	r2, r2, #9
 800265e:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <USART_Configuration+0x100>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <USART_Configuration+0x100>)
 8002668:	2200      	movs	r2, #0
 800266a:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <USART_Configuration+0x100>)
 800266e:	2200      	movs	r2, #0
 8002670:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <USART_Configuration+0x100>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX;
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <USART_Configuration+0x100>)
 800267a:	2208      	movs	r2, #8
 800267c:	615a      	str	r2, [r3, #20]
  __HAL_UART_RESET_HANDLE_STATE(&UartHandle);
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <USART_Configuration+0x100>)
 8002680:	2200      	movs	r2, #0
 8002682:	679a      	str	r2, [r3, #120]	; 0x78
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <USART_Configuration+0x100>)
 8002686:	2200      	movs	r2, #0
 8002688:	67da      	str	r2, [r3, #124]	; 0x7c
  HAL_UART_Init(&UartHandle); 
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <USART_Configuration+0x100>)
 800268c:	0018      	movs	r0, r3
 800268e:	f003 ffdf 	bl	8006650 <HAL_UART_Init>
}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	b01f      	add	sp, #124	; 0x7c
 8002698:	bd90      	pop	{r4, r7, pc}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	40021000 	.word	0x40021000
 80026a0:	20000278 	.word	0x20000278
 80026a4:	40004400 	.word	0x40004400

080026a8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	0002      	movs	r2, r0
 80026b0:	1dbb      	adds	r3, r7, #6
 80026b2:	801a      	strh	r2, [r3, #0]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 10); /* 0xFFFF */
 80026b4:	1db9      	adds	r1, r7, #6
 80026b6:	4806      	ldr	r0, [pc, #24]	; (80026d0 <__io_putchar+0x28>)
 80026b8:	230a      	movs	r3, #10
 80026ba:	2201      	movs	r2, #1
 80026bc:	f004 f866 	bl	800678c <HAL_UART_Transmit>

  return ch;
 80026c0:	1dbb      	adds	r3, r7, #6
 80026c2:	2200      	movs	r2, #0
 80026c4:	5e9b      	ldrsh	r3, [r3, r2]
}
 80026c6:	0018      	movs	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b002      	add	sp, #8
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	20000278 	.word	0x20000278

080026d4 <_write>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
int16_t _write(int16_t file, int8_t *ptr, int16_t len) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6039      	str	r1, [r7, #0]
 80026dc:	0011      	movs	r1, r2
 80026de:	1dbb      	adds	r3, r7, #6
 80026e0:	1c02      	adds	r2, r0, #0
 80026e2:	801a      	strh	r2, [r3, #0]
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	1c0a      	adds	r2, r1, #0
 80026e8:	801a      	strh	r2, [r3, #0]
	int16_t DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80026ea:	230e      	movs	r3, #14
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2200      	movs	r2, #0
 80026f0:	801a      	strh	r2, [r3, #0]
 80026f2:	e011      	b.n	8002718 <_write+0x44>
		__io_putchar(*ptr++);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	603a      	str	r2, [r7, #0]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b25b      	sxtb	r3, r3
 80026fe:	b21b      	sxth	r3, r3
 8002700:	0018      	movs	r0, r3
 8002702:	f7ff ffd1 	bl	80026a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002706:	210e      	movs	r1, #14
 8002708:	187b      	adds	r3, r7, r1
 800270a:	2200      	movs	r2, #0
 800270c:	5e9b      	ldrsh	r3, [r3, r2]
 800270e:	b29b      	uxth	r3, r3
 8002710:	3301      	adds	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	187b      	adds	r3, r7, r1
 8002716:	801a      	strh	r2, [r3, #0]
 8002718:	230e      	movs	r3, #14
 800271a:	18fa      	adds	r2, r7, r3
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	2100      	movs	r1, #0
 8002720:	5e52      	ldrsh	r2, [r2, r1]
 8002722:	2100      	movs	r1, #0
 8002724:	5e5b      	ldrsh	r3, [r3, r1]
 8002726:	429a      	cmp	r2, r3
 8002728:	dbe4      	blt.n	80026f4 <_write+0x20>
	}
	return len;
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	2200      	movs	r2, #0
 800272e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b004      	add	sp, #16
 8002736:	bd80      	pop	{r7, pc}

08002738 <STL_MainClockTest>:
  * @retval : ClockStatus = (LSI_START_FAIL, HSE_START_FAIL,
  *   HSI_HSE_SWITCH_FAIL, TEST_ONGOING, EXT_SOURCE_FAIL,
  *   CLASS_B_VAR_FAIL, CTRL_FLOW_ERROR, FREQ_OK)
  */
ClockStatus STL_MainClockTest(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
  ClockStatus result = TEST_ONGOING; /* In case of unexpected exit */
 800273e:	1dfb      	adds	r3, r7, #7
 8002740:	2203      	movs	r2, #3
 8002742:	701a      	strb	r2, [r3, #0]

  CtrlFlowCnt += CLOCKPERIOD_TEST_CALLEE;
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <STL_MainClockTest+0xb8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	333d      	adds	r3, #61	; 0x3d
 800274a:	001a      	movs	r2, r3
 800274c:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <STL_MainClockTest+0xb8>)
 800274e:	601a      	str	r2, [r3, #0]
   - all the following pairs of volatile variables are changed consistently at timer ISR only */
  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_suppress=Pm026              
  #endif /* __IAR_SYSTEMS_ICC__ */
  /* checking result of HSE measurement done at TIM5 interrupt */
  if (((PeriodValue ^ PeriodValueInv) == 0xFFFFFFFFuL)\
 8002750:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <STL_MainClockTest+0xbc>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b28      	ldr	r3, [pc, #160]	; (80027f8 <STL_MainClockTest+0xc0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4053      	eors	r3, r2
 800275a:	3301      	adds	r3, #1
 800275c:	d139      	bne.n	80027d2 <STL_MainClockTest+0x9a>
  &&  ((LSIPeriodFlag ^ LSIPeriodFlagInv) == 0xFFFFFFFFuL)\
 800275e:	4b27      	ldr	r3, [pc, #156]	; (80027fc <STL_MainClockTest+0xc4>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b27      	ldr	r3, [pc, #156]	; (8002800 <STL_MainClockTest+0xc8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4053      	eors	r3, r2
 8002768:	3301      	adds	r3, #1
 800276a:	d132      	bne.n	80027d2 <STL_MainClockTest+0x9a>
  &&   (LSIPeriodFlag != 0u) )
 800276c:	4b23      	ldr	r3, [pc, #140]	; (80027fc <STL_MainClockTest+0xc4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d02e      	beq.n	80027d2 <STL_MainClockTest+0x9a>
  #endif /* __IAR_SYSTEMS_ICC__ */
  /* ==============================================================================*/
   
  {
#ifdef HSE_CLOCK_APPLIED    
    if (PeriodValue < HSE_LimitLow(SYSTCLK_AT_RUN_HSE))
 8002774:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <STL_MainClockTest+0xbc>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a22      	ldr	r2, [pc, #136]	; (8002804 <STL_MainClockTest+0xcc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d80e      	bhi.n	800279c <STL_MainClockTest+0x64>
#else
    if (PeriodValue < HSI_LimitLow(SYSTCLK_AT_RUN_HSI))
#endif
    {
      /* Switch back to internal clock */
      RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 800277e:	4b22      	ldr	r3, [pc, #136]	; (8002808 <STL_MainClockTest+0xd0>)
 8002780:	2201      	movs	r2, #1
 8002782:	601a      	str	r2, [r3, #0]
      RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002784:	4b20      	ldr	r3, [pc, #128]	; (8002808 <STL_MainClockTest+0xd0>)
 8002786:	2201      	movs	r2, #1
 8002788:	605a      	str	r2, [r3, #4]
      HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 800278a:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <STL_MainClockTest+0xd0>)
 800278c:	2100      	movs	r1, #0
 800278e:	0018      	movs	r0, r3
 8002790:	f002 ffde 	bl	8005750 <HAL_RCC_ClockConfig>
      result = EXT_SOURCE_FAIL;	/* Sub-harmonics: HSE -25% below expected */
 8002794:	1dfb      	adds	r3, r7, #7
 8002796:	2204      	movs	r2, #4
 8002798:	701a      	strb	r2, [r3, #0]
    if (PeriodValue < HSE_LimitLow(SYSTCLK_AT_RUN_HSE))
 800279a:	e01d      	b.n	80027d8 <STL_MainClockTest+0xa0>
    }
    else
    {
#ifdef HSE_CLOCK_APPLIED    
      if (PeriodValue > HSE_LimitHigh(SYSTCLK_AT_RUN_HSE))
 800279c:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <STL_MainClockTest+0xbc>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1a      	ldr	r2, [pc, #104]	; (800280c <STL_MainClockTest+0xd4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d90e      	bls.n	80027c4 <STL_MainClockTest+0x8c>
#else
      if (PeriodValue > HSI_LimitHigh(SYSTCLK_AT_RUN_HSI))
#endif
      {
        /* Switch back to internal clock */
        RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 80027a6:	4b18      	ldr	r3, [pc, #96]	; (8002808 <STL_MainClockTest+0xd0>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
        RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027ac:	4b16      	ldr	r3, [pc, #88]	; (8002808 <STL_MainClockTest+0xd0>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	605a      	str	r2, [r3, #4]
        HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <STL_MainClockTest+0xd0>)
 80027b4:	2100      	movs	r1, #0
 80027b6:	0018      	movs	r0, r3
 80027b8:	f002 ffca 	bl	8005750 <HAL_RCC_ClockConfig>
        result = EXT_SOURCE_FAIL;	/* Harmonics: HSE +25% above expected */
 80027bc:	1dfb      	adds	r3, r7, #7
 80027be:	2204      	movs	r2, #4
 80027c0:	701a      	strb	r2, [r3, #0]
    if (PeriodValue < HSE_LimitLow(SYSTCLK_AT_RUN_HSE))
 80027c2:	e009      	b.n	80027d8 <STL_MainClockTest+0xa0>
      }
      else
      {
        result = FREQ_OK;         /* Crystal or Resonator started correctly */        
 80027c4:	1dfb      	adds	r3, r7, #7
 80027c6:	220a      	movs	r2, #10
 80027c8:	701a      	strb	r2, [r3, #0]
        /* clear flag here to ensure refresh LSI measurement result will be taken at next check */
        LSIPeriodFlag = 0u;
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <STL_MainClockTest+0xc4>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
    if (PeriodValue < HSE_LimitLow(SYSTCLK_AT_RUN_HSE))
 80027d0:	e002      	b.n	80027d8 <STL_MainClockTest+0xa0>
      } /* No harmonics */
    } /* No sub-harmonics */
  } /* Control Flow error */
  else
  {
    result = CLASS_B_VAR_FAIL;
 80027d2:	1dfb      	adds	r3, r7, #7
 80027d4:	2208      	movs	r2, #8
 80027d6:	701a      	strb	r2, [r3, #0]
  }

  CtrlFlowCntInv -= CLOCKPERIOD_TEST_CALLEE;
 80027d8:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <STL_MainClockTest+0xd8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3b3d      	subs	r3, #61	; 0x3d
 80027de:	001a      	movs	r2, r3
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <STL_MainClockTest+0xd8>)
 80027e2:	601a      	str	r2, [r3, #0]

  return (result);
 80027e4:	1dfb      	adds	r3, r7, #7
 80027e6:	781b      	ldrb	r3, [r3, #0]
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000030 	.word	0x20000030
 80027f4:	20000038 	.word	0x20000038
 80027f8:	2000005c 	.word	0x2000005c
 80027fc:	20000044 	.word	0x20000044
 8002800:	20000068 	.word	0x20000068
 8002804:	000013bb 	.word	0x000013bb
 8002808:	200002fc 	.word	0x200002fc
 800280c:	000020e4 	.word	0x000020e4
 8002810:	20000054 	.word	0x20000054

08002814 <STL_ClockStartUpTest>:
  * @param  : None
  * @retval : ClockStatus = (LSI_START_FAIL, HSE_START_FAIL,
  *   HSI_HSE_SWITCH_FAIL, XCROSS_CONFIG_FAIL, EXT_SOURCE_FAIL, FREQ_OK)
  */
ClockStatus STL_ClockStartUpTest(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
  ClockStatus clck_sts = TEST_ONGOING;
 800281a:	1dfb      	adds	r3, r7, #7
 800281c:	2203      	movs	r2, #3
 800281e:	701a      	strb	r2, [r3, #0]
  CtrlFlowCnt += CLOCK_TEST_CALLEE;
 8002820:	4b54      	ldr	r3, [pc, #336]	; (8002974 <STL_ClockStartUpTest+0x160>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	331d      	adds	r3, #29
 8002826:	001a      	movs	r2, r3
 8002828:	4b52      	ldr	r3, [pc, #328]	; (8002974 <STL_ClockStartUpTest+0x160>)
 800282a:	601a      	str	r2, [r3, #0]

  /* Start low speed internal (LSI) oscillator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI;
 800282c:	4b52      	ldr	r3, [pc, #328]	; (8002978 <STL_ClockStartUpTest+0x164>)
 800282e:	2208      	movs	r2, #8
 8002830:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002832:	4b51      	ldr	r3, [pc, #324]	; (8002978 <STL_ClockStartUpTest+0x164>)
 8002834:	2201      	movs	r2, #1
 8002836:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002838:	4b4f      	ldr	r3, [pc, #316]	; (8002978 <STL_ClockStartUpTest+0x164>)
 800283a:	2200      	movs	r2, #0
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800283e:	4b4e      	ldr	r3, [pc, #312]	; (8002978 <STL_ClockStartUpTest+0x164>)
 8002840:	0018      	movs	r0, r3
 8002842:	f002 fbc1 	bl	8004fc8 <HAL_RCC_OscConfig>
 8002846:	1e03      	subs	r3, r0, #0
 8002848:	d002      	beq.n	8002850 <STL_ClockStartUpTest+0x3c>
  {
    /* LSI clock fails */
    clck_sts = LSI_START_FAIL;
 800284a:	1dfb      	adds	r3, r7, #7
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
  }
  
#ifdef HSE_CLOCK_APPLIED  
  /* if LSI started OK - Start High-speed external oscillator (HSE) */
  if(clck_sts == TEST_ONGOING)
 8002850:	1dfb      	adds	r3, r7, #7
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d112      	bne.n	800287e <STL_ClockStartUpTest+0x6a>
  {
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002858:	4b47      	ldr	r3, [pc, #284]	; (8002978 <STL_ClockStartUpTest+0x164>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]
    /* Use HSEState parameter RCC_HSE_BYPASS when external generator is applied */
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800285e:	4b46      	ldr	r3, [pc, #280]	; (8002978 <STL_ClockStartUpTest+0x164>)
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	0252      	lsls	r2, r2, #9
 8002864:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002866:	4b44      	ldr	r3, [pc, #272]	; (8002978 <STL_ClockStartUpTest+0x164>)
 8002868:	2200      	movs	r2, #0
 800286a:	629a      	str	r2, [r3, #40]	; 0x28
    if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800286c:	4b42      	ldr	r3, [pc, #264]	; (8002978 <STL_ClockStartUpTest+0x164>)
 800286e:	0018      	movs	r0, r3
 8002870:	f002 fbaa 	bl	8004fc8 <HAL_RCC_OscConfig>
 8002874:	1e03      	subs	r3, r0, #0
 8002876:	d002      	beq.n	800287e <STL_ClockStartUpTest+0x6a>
    {
      /* HSE clock fails */
      clck_sts = HSE_START_FAIL;
 8002878:	1dfb      	adds	r3, r7, #7
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  /* if HSE started OK - enable CSS */
  if(clck_sts == TEST_ONGOING)
 800287e:	1dfb      	adds	r3, r7, #7
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b03      	cmp	r3, #3
 8002884:	d111      	bne.n	80028aa <STL_ClockStartUpTest+0x96>
  {
    HAL_RCC_EnableCSS();
 8002886:	f003 f92f 	bl	8005ae8 <HAL_RCC_EnableCSS>
    /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
       clocks dividers */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 800288a:	4b3c      	ldr	r3, [pc, #240]	; (800297c <STL_ClockStartUpTest+0x168>)
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002890:	4b3a      	ldr	r3, [pc, #232]	; (800297c <STL_ClockStartUpTest+0x168>)
 8002892:	2202      	movs	r2, #2
 8002894:	605a      	str	r2, [r3, #4]
    if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002896:	4b39      	ldr	r3, [pc, #228]	; (800297c <STL_ClockStartUpTest+0x168>)
 8002898:	2100      	movs	r1, #0
 800289a:	0018      	movs	r0, r3
 800289c:	f002 ff58 	bl	8005750 <HAL_RCC_ClockConfig>
 80028a0:	1e03      	subs	r3, r0, #0
 80028a2:	d002      	beq.n	80028aa <STL_ClockStartUpTest+0x96>
    {
      /* switch to HSE clock fails */
      clck_sts = HSI_HSE_SWITCH_FAIL;
 80028a4:	1dfb      	adds	r3, r7, #7
 80028a6:	2202      	movs	r2, #2
 80028a8:	701a      	strb	r2, [r3, #0]
    }
  }
  
  /*-------------- Start Reference Measurement -------------------------------*/
  if(clck_sts == TEST_ONGOING)
 80028aa:	1dfb      	adds	r3, r7, #7
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d12b      	bne.n	800290a <STL_ClockStartUpTest+0xf6>
  {  
    /* Configure dedicated timer to measure LSI period */
    if(STL_InitClock_Xcross_Measurement() == ERROR)
 80028b2:	f001 fbef 	bl	8004094 <STL_InitClock_Xcross_Measurement>
 80028b6:	0003      	movs	r3, r0
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d103      	bne.n	80028c4 <STL_ClockStartUpTest+0xb0>
    {
      clck_sts = XCROSS_CONFIG_FAIL;
 80028bc:	1dfb      	adds	r3, r7, #7
 80028be:	2205      	movs	r2, #5
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	e022      	b.n	800290a <STL_ClockStartUpTest+0xf6>
    }
    else
    {   
      /* Wait for two subsequent LSI periods measurements */
      LSIPeriodFlag = 0u;
 80028c4:	4b2e      	ldr	r3, [pc, #184]	; (8002980 <STL_ClockStartUpTest+0x16c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
      while (LSIPeriodFlag == 0u)
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	4b2c      	ldr	r3, [pc, #176]	; (8002980 <STL_ClockStartUpTest+0x16c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0fb      	beq.n	80028cc <STL_ClockStartUpTest+0xb8>
      { }
      LSIPeriodFlag = 0u;
 80028d4:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <STL_ClockStartUpTest+0x16c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
      while (LSIPeriodFlag == 0u)
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <STL_ClockStartUpTest+0x16c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0fb      	beq.n	80028dc <STL_ClockStartUpTest+0xc8>
      { }

      /*-------------------- HSE measurement check -------------------------*/
      if (PeriodValue < HSE_LimitLow(HSE_VALUE))
 80028e4:	4b27      	ldr	r3, [pc, #156]	; (8002984 <STL_ClockStartUpTest+0x170>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	23fc      	movs	r3, #252	; 0xfc
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d203      	bcs.n	80028f8 <STL_ClockStartUpTest+0xe4>
      {
        /* Sub-harmonics: HSE -25% below expected */
        clck_sts = EXT_SOURCE_FAIL;
 80028f0:	1dfb      	adds	r3, r7, #7
 80028f2:	2204      	movs	r2, #4
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e008      	b.n	800290a <STL_ClockStartUpTest+0xf6>
      }
      else if (PeriodValue > HSE_LimitHigh(HSE_VALUE))
 80028f8:	4b22      	ldr	r3, [pc, #136]	; (8002984 <STL_ClockStartUpTest+0x170>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	23d2      	movs	r3, #210	; 0xd2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d902      	bls.n	800290a <STL_ClockStartUpTest+0xf6>
      {
        /* Harmonics: HSE +25% above expected */
        clck_sts = EXT_SOURCE_FAIL;
 8002904:	1dfb      	adds	r3, r7, #7
 8002906:	2204      	movs	r2, #4
 8002908:	701a      	strb	r2, [r3, #0]
    }
  }
#endif
  
  /* Switch back HSI internal clock at any case */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 800290a:	4b1c      	ldr	r3, [pc, #112]	; (800297c <STL_ClockStartUpTest+0x168>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002910:	4b1a      	ldr	r3, [pc, #104]	; (800297c <STL_ClockStartUpTest+0x168>)
 8002912:	2201      	movs	r2, #1
 8002914:	605a      	str	r2, [r3, #4]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, MAX_FLASH_LATENCY) != HAL_OK)
 8002916:	4b19      	ldr	r3, [pc, #100]	; (800297c <STL_ClockStartUpTest+0x168>)
 8002918:	2101      	movs	r1, #1
 800291a:	0018      	movs	r0, r3
 800291c:	f002 ff18 	bl	8005750 <HAL_RCC_ClockConfig>
 8002920:	1e03      	subs	r3, r0, #0
 8002922:	d003      	beq.n	800292c <STL_ClockStartUpTest+0x118>
  {
    /* switch to HSE clock fails */
    clck_sts = HSE_HSI_SWITCH_FAIL;
 8002924:	1dfb      	adds	r3, r7, #7
 8002926:	2206      	movs	r2, #6
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e016      	b.n	800295a <STL_ClockStartUpTest+0x146>
  }
  else
  {
    /* Switch off PLL */
    RCC_OscInitStruct.OscillatorType = 0u;
 800292c:	4b12      	ldr	r3, [pc, #72]	; (8002978 <STL_ClockStartUpTest+0x164>)
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_OFF;
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <STL_ClockStartUpTest+0x164>)
 8002934:	2201      	movs	r2, #1
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
    if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002938:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <STL_ClockStartUpTest+0x164>)
 800293a:	0018      	movs	r0, r3
 800293c:	f002 fb44 	bl	8004fc8 <HAL_RCC_OscConfig>
 8002940:	1e03      	subs	r3, r0, #0
 8002942:	d003      	beq.n	800294c <STL_ClockStartUpTest+0x138>
    {
      /* PLL off fails */
      clck_sts = PLL_OFF_FAIL;
 8002944:	1dfb      	adds	r3, r7, #7
 8002946:	2207      	movs	r2, #7
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	e006      	b.n	800295a <STL_ClockStartUpTest+0x146>
    }
    else
    {
      if(clck_sts == TEST_ONGOING)
 800294c:	1dfb      	adds	r3, r7, #7
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d102      	bne.n	800295a <STL_ClockStartUpTest+0x146>
      {
        /* the test was finished correctly */
        clck_sts = FREQ_OK;
 8002954:	1dfb      	adds	r3, r7, #7
 8002956:	220a      	movs	r2, #10
 8002958:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  
  CtrlFlowCntInv -= CLOCK_TEST_CALLEE;
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <STL_ClockStartUpTest+0x174>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3b1d      	subs	r3, #29
 8002960:	001a      	movs	r2, r3
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <STL_ClockStartUpTest+0x174>)
 8002964:	601a      	str	r2, [r3, #0]
  
  return(clck_sts);
 8002966:	1dfb      	adds	r3, r7, #7
 8002968:	781b      	ldrb	r3, [r3, #0]
}
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b002      	add	sp, #8
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	20000030 	.word	0x20000030
 8002978:	20000310 	.word	0x20000310
 800297c:	200002fc 	.word	0x200002fc
 8002980:	20000044 	.word	0x20000044
 8002984:	20000038 	.word	0x20000038
 8002988:	20000054 	.word	0x20000054

0800298c <STL_FlashCrc32Init>:
  *   run-time
  * @param  : None
  * @retval : None
  */
void STL_FlashCrc32Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  pRunCrc32Chk = (uint32_t*)ROM_START;
 8002990:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <STL_FlashCrc32Init+0x54>)
 8002992:	2280      	movs	r2, #128	; 0x80
 8002994:	0512      	lsls	r2, r2, #20
 8002996:	601a      	str	r2, [r3, #0]
  pRunCrc32ChkInv = ((uint32_t *)(uint32_t)(~(uint32_t)(ROM_START)));
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <STL_FlashCrc32Init+0x58>)
 800299a:	4a13      	ldr	r2, [pc, #76]	; (80029e8 <STL_FlashCrc32Init+0x5c>)
 800299c:	601a      	str	r2, [r3, #0]
  
  CrcHandle.Instance = CRC;
 800299e:	4b13      	ldr	r3, [pc, #76]	; (80029ec <STL_FlashCrc32Init+0x60>)
 80029a0:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <STL_FlashCrc32Init+0x64>)
 80029a2:	601a      	str	r2, [r3, #0]

  /* Reset CRC Calculation Unit */
  __HAL_CRC_DR_RESET(&CrcHandle);
 80029a4:	4b11      	ldr	r3, [pc, #68]	; (80029ec <STL_FlashCrc32Init+0x60>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <STL_FlashCrc32Init+0x60>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2101      	movs	r1, #1
 80029b0:	430a      	orrs	r2, r1
 80029b2:	609a      	str	r2, [r3, #8]

  #ifdef  CRC_UNIT_CONFIGURABLE
    CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_ENABLE;
 80029b4:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <STL_FlashCrc32Init+0x60>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	711a      	strb	r2, [r3, #4]
    CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_ENABLE;
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <STL_FlashCrc32Init+0x60>)
 80029bc:	2200      	movs	r2, #0
 80029be:	715a      	strb	r2, [r3, #5]
    CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 80029c0:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <STL_FlashCrc32Init+0x60>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	615a      	str	r2, [r3, #20]
    CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLED;
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <STL_FlashCrc32Init+0x60>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	619a      	str	r2, [r3, #24]
    CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_WORDS;
 80029cc:	4b07      	ldr	r3, [pc, #28]	; (80029ec <STL_FlashCrc32Init+0x60>)
 80029ce:	2203      	movs	r2, #3
 80029d0:	621a      	str	r2, [r3, #32]
  #endif
  HAL_CRC_Init(&CrcHandle);
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <STL_FlashCrc32Init+0x60>)
 80029d4:	0018      	movs	r0, r3
 80029d6:	f001 fed3 	bl	8004780 <HAL_CRC_Init>
}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	2000004c 	.word	0x2000004c
 80029e4:	20000070 	.word	0x20000070
 80029e8:	f7ffffff 	.word	0xf7ffffff
 80029ec:	2000036c 	.word	0x2000036c
 80029f0:	40023000 	.word	0x40023000

080029f4 <STL_crc32Run>:
  * @param  : None
  * @retval : ClassBTestStatus (TEST_RUNNING, CLASS_B_DATA_FAIL,
  *   TEST_FAILURE, TEST_OK)
  */
ClassBTestStatus STL_crc32Run(void)
{
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
  ClassBTestStatus result = CTRL_FLW_ERROR; /* In case of abnormal func exit*/
 80029fa:	230f      	movs	r3, #15
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2202      	movs	r2, #2
 8002a00:	701a      	strb	r2, [r3, #0]

  CtrlFlowCnt += CRC32_RUN_TEST_CALLEE;
 8002a02:	4b4a      	ldr	r3, [pc, #296]	; (8002b2c <STL_crc32Run+0x138>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	333f      	adds	r3, #63	; 0x3f
 8002a08:	001a      	movs	r2, r3
 8002a0a:	4b48      	ldr	r3, [pc, #288]	; (8002b2c <STL_crc32Run+0x138>)
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Check Class B var integrity */
  if ((((uint32_t)pRunCrc32Chk) ^ ((uint32_t)pRunCrc32ChkInv)) == 0xFFFFFFFFuL)
 8002a0e:	4b48      	ldr	r3, [pc, #288]	; (8002b30 <STL_crc32Run+0x13c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	001a      	movs	r2, r3
 8002a14:	4b47      	ldr	r3, [pc, #284]	; (8002b34 <STL_crc32Run+0x140>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4053      	eors	r3, r2
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	d000      	beq.n	8002a20 <STL_crc32Run+0x2c>
 8002a1e:	e074      	b.n	8002b0a <STL_crc32Run+0x116>
  {
    if (pRunCrc32Chk < (uint32_t *)ROM_END)
 8002a20:	4b43      	ldr	r3, [pc, #268]	; (8002b30 <STL_crc32Run+0x13c>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b44      	ldr	r3, [pc, #272]	; (8002b38 <STL_crc32Run+0x144>)
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d247      	bcs.n	8002aba <STL_crc32Run+0xc6>
   /* the next lines replaces the HAL function call
      HAL_CRC_Accumulate(&CrcHandle, (uint32_t *)pRunCrc32Chk, (uint32_t)FLASH_BLOCK_WORDS);
      due to bug at IAR linker - check sum computation can't support both big & little endian  */
  
      uint32_t index;
      for(index = 0; index < (uint32_t)FLASH_BLOCK_WORDS; index++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	e00d      	b.n	8002a4c <STL_crc32Run+0x58>
      {
        CRC->DR = __REV(*(pRunCrc32Chk + index));
 8002a30:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <STL_crc32Run+0x13c>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	18d3      	adds	r3, r2, r3
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b3f      	ldr	r3, [pc, #252]	; (8002b3c <STL_crc32Run+0x148>)
 8002a3e:	607a      	str	r2, [r7, #4]
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	ba12      	rev	r2, r2
 8002a44:	601a      	str	r2, [r3, #0]
      for(index = 0; index < (uint32_t)FLASH_BLOCK_WORDS; index++)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	4b3a      	ldr	r3, [pc, #232]	; (8002b38 <STL_crc32Run+0x144>)
 8002a4e:	22f8      	movs	r2, #248	; 0xf8
 8002a50:	0612      	lsls	r2, r2, #24
 8002a52:	4694      	mov	ip, r2
 8002a54:	4463      	add	r3, ip
 8002a56:	089a      	lsrs	r2, r3, #2
 8002a58:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <STL_crc32Run+0x144>)
 8002a5a:	21f8      	movs	r1, #248	; 0xf8
 8002a5c:	0609      	lsls	r1, r1, #24
 8002a5e:	468c      	mov	ip, r1
 8002a60:	4463      	add	r3, ip
 8002a62:	099b      	lsrs	r3, r3, #6
 8002a64:	0019      	movs	r1, r3
 8002a66:	0010      	movs	r0, r2
 8002a68:	f7fd fb6a 	bl	8000140 <__udivsi3>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	001a      	movs	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d3dc      	bcc.n	8002a30 <STL_crc32Run+0x3c>
      }
      pRunCrc32Chk += FLASH_BLOCK_WORDS;     /* Increment pointer to next block */
 8002a76:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <STL_crc32Run+0x13c>)
 8002a78:	681c      	ldr	r4, [r3, #0]
 8002a7a:	4b2f      	ldr	r3, [pc, #188]	; (8002b38 <STL_crc32Run+0x144>)
 8002a7c:	22f8      	movs	r2, #248	; 0xf8
 8002a7e:	0612      	lsls	r2, r2, #24
 8002a80:	4694      	mov	ip, r2
 8002a82:	4463      	add	r3, ip
 8002a84:	089a      	lsrs	r2, r3, #2
 8002a86:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <STL_crc32Run+0x144>)
 8002a88:	21f8      	movs	r1, #248	; 0xf8
 8002a8a:	0609      	lsls	r1, r1, #24
 8002a8c:	468c      	mov	ip, r1
 8002a8e:	4463      	add	r3, ip
 8002a90:	099b      	lsrs	r3, r3, #6
 8002a92:	0019      	movs	r1, r3
 8002a94:	0010      	movs	r0, r2
 8002a96:	f7fd fb53 	bl	8000140 <__udivsi3>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	18e2      	adds	r2, r4, r3
 8002aa0:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <STL_crc32Run+0x13c>)
 8002aa2:	601a      	str	r2, [r3, #0]
      pRunCrc32ChkInv = ((uint32_t *)~((uint32_t)pRunCrc32Chk));
 8002aa4:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <STL_crc32Run+0x13c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	001a      	movs	r2, r3
 8002aac:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <STL_crc32Run+0x140>)
 8002aae:	601a      	str	r2, [r3, #0]
      result = TEST_RUNNING;
 8002ab0:	230f      	movs	r3, #15
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	e02b      	b.n	8002b12 <STL_crc32Run+0x11e>
    }
    else
    {
      if ((RefCrc32 ^ RefCrc32Inv) == 0xFFFFFFFFuL)
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <STL_crc32Run+0x14c>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <STL_crc32Run+0x150>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4053      	eors	r3, r2
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	d11b      	bne.n	8002b00 <STL_crc32Run+0x10c>
      {
        CtrlFlowCnt += CRC32_INIT_CALLER;
 8002ac8:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <STL_crc32Run+0x138>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	1dda      	adds	r2, r3, #7
 8002ace:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <STL_crc32Run+0x138>)
 8002ad0:	601a      	str	r2, [r3, #0]
        if(CRC->DR == *(uint32_t *)(&REF_CRC32))
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <STL_crc32Run+0x148>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <STL_crc32Run+0x144>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d104      	bne.n	8002ae8 <STL_crc32Run+0xf4>
        {
          result = TEST_OK;
 8002ade:	230f      	movs	r3, #15
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	e003      	b.n	8002af0 <STL_crc32Run+0xfc>
        }
        else
        {
          result = TEST_FAILURE;
 8002ae8:	230f      	movs	r3, #15
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2203      	movs	r2, #3
 8002aee:	701a      	strb	r2, [r3, #0]
        }
        STL_FlashCrc32Init(); /* Prepare next test (or redo it if this one failed) */
 8002af0:	f7ff ff4c 	bl	800298c <STL_FlashCrc32Init>
        
        CtrlFlowCntInv -= CRC32_INIT_CALLER;
 8002af4:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <STL_crc32Run+0x154>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	1fda      	subs	r2, r3, #7
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <STL_crc32Run+0x154>)
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	e008      	b.n	8002b12 <STL_crc32Run+0x11e>
      }
      else /* Class B error on RefCrc32 */
      {
        result = CLASS_B_DATA_FAIL;
 8002b00:	230f      	movs	r3, #15
 8002b02:	18fb      	adds	r3, r7, r3
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e003      	b.n	8002b12 <STL_crc32Run+0x11e>
      }
    }
  }
  else  /* Class B error pRunCrc32Chk */
  {
    result = CLASS_B_DATA_FAIL;
 8002b0a:	230f      	movs	r3, #15
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
  }

  CtrlFlowCntInv -= CRC32_RUN_TEST_CALLEE;
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <STL_crc32Run+0x154>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3b3f      	subs	r3, #63	; 0x3f
 8002b18:	001a      	movs	r2, r3
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <STL_crc32Run+0x154>)
 8002b1c:	601a      	str	r2, [r3, #0]

  return (result);
 8002b1e:	230f      	movs	r3, #15
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	781b      	ldrb	r3, [r3, #0]

}
 8002b24:	0018      	movs	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b005      	add	sp, #20
 8002b2a:	bd90      	pop	{r4, r7, pc}
 8002b2c:	20000030 	.word	0x20000030
 8002b30:	2000004c 	.word	0x2000004c
 8002b34:	20000070 	.word	0x20000070
 8002b38:	0800ad80 	.word	0x0800ad80
 8002b3c:	40023000 	.word	0x40023000
 8002b40:	20000050 	.word	0x20000050
 8002b44:	20000074 	.word	0x20000074
 8002b48:	20000054 	.word	0x20000054

08002b4c <STL_InitRunTimeChecks>:
  *   counterparts. Init also the Systick for clock frequency monitoring.
  * @param  : None
  * @retval : None
  */
void STL_InitRunTimeChecks(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
  uint32_t tout;
  
  /* Initialize variables for invariable memory check */
  STL_TranspMarchInit();
 8002b52:	f000 fe1f 	bl	8003794 <STL_TranspMarchInit>

  /* Init Class B variables required in main routine and SysTick interrupt
  service routine for timing purposes */
  TickCounter = 0u;
 8002b56:	4b35      	ldr	r3, [pc, #212]	; (8002c2c <STL_InitRunTimeChecks+0xe0>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
  TickCounterInv = 0xFFFFFFFFuL;
 8002b5c:	4b34      	ldr	r3, [pc, #208]	; (8002c30 <STL_InitRunTimeChecks+0xe4>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	4252      	negs	r2, r2
 8002b62:	601a      	str	r2, [r3, #0]

  TimeBaseFlag = 0u;
 8002b64:	4b33      	ldr	r3, [pc, #204]	; (8002c34 <STL_InitRunTimeChecks+0xe8>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
  TimeBaseFlagInv = 0xFFFFFFFFuL;
 8002b6a:	4b33      	ldr	r3, [pc, #204]	; (8002c38 <STL_InitRunTimeChecks+0xec>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4252      	negs	r2, r2
 8002b70:	601a      	str	r2, [r3, #0]

  LastCtrlFlowCnt = 0u;
 8002b72:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <STL_InitRunTimeChecks+0xf0>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
  LastCtrlFlowCntInv = 0xFFFFFFFFuL;
 8002b78:	4b31      	ldr	r3, [pc, #196]	; (8002c40 <STL_InitRunTimeChecks+0xf4>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4252      	negs	r2, r2
 8002b7e:	601a      	str	r2, [r3, #0]
  init_control_flow();
 8002b80:	4b30      	ldr	r3, [pc, #192]	; (8002c44 <STL_InitRunTimeChecks+0xf8>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	4b2f      	ldr	r3, [pc, #188]	; (8002c44 <STL_InitRunTimeChecks+0xf8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	4b2e      	ldr	r3, [pc, #184]	; (8002c48 <STL_InitRunTimeChecks+0xfc>)
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Initialize variables for SysTick interrupt routine control flow monitoring */
  ISRCtrlFlowCnt = 0u;
 8002b90:	4b2e      	ldr	r3, [pc, #184]	; (8002c4c <STL_InitRunTimeChecks+0x100>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
  ISRCtrlFlowCntInv = 0xFFFFFFFFuL;
 8002b96:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <STL_InitRunTimeChecks+0x104>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	4252      	negs	r2, r2
 8002b9c:	601a      	str	r2, [r3, #0]

  /* Initialize SysTick to generate 1ms time base */
#ifdef HSE_CLOCK_APPLIED    
  if (HAL_SYSTICK_Config(SYSTCLK_AT_RUN_HSE/1000uL) != HAL_OK)
 8002b9e:	23fa      	movs	r3, #250	; 0xfa
 8002ba0:	01db      	lsls	r3, r3, #7
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f001 fddf 	bl	8004766 <HAL_SYSTICK_Config>
 8002ba8:	1e03      	subs	r3, r0, #0
 8002baa:	d005      	beq.n	8002bb8 <STL_InitRunTimeChecks+0x6c>
#else
  if (HAL_SYSTICK_Config(SYSTCLK_AT_RUN_HSI/1000uL) != HAL_OK)
#endif
  {
    #ifdef STL_VERBOSE_POR
      printf("Run time base init failure\n\r");
 8002bac:	4b29      	ldr	r3, [pc, #164]	; (8002c54 <STL_InitRunTimeChecks+0x108>)
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f004 ffb8 	bl	8007b24 <iprintf>
    #endif /* STL_VERBOSE_POR */
    FailSafePOR();
 8002bb4:	f000 fa06 	bl	8002fc4 <FailSafePOR>
  }

  /* Initialize variables for invariable memory check */
  STL_FlashCrc32Init();
 8002bb8:	f7ff fee8 	bl	800298c <STL_FlashCrc32Init>

  /* wait till HSE measurement is completed & check timer system */
  tout = HAL_GetTick() + 5u;
 8002bbc:	f001 fcf8 	bl	80045b0 <HAL_GetTick>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	3305      	adds	r3, #5
 8002bc4:	607b      	str	r3, [r7, #4]
  LSIPeriodFlag = 0u;
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <STL_InitRunTimeChecks+0x10c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
  /* MISRA violation of rule 12.4, 12.5 - "&&" operand can't contain side effects 
    and shall be primary expressions  */
  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_suppress= Pm026,Pm027              
  #endif /* __IAR_SYSTEMS_ICC__ */
  while ( LSIPeriodFlag == 0u  &&  HAL_GetTick() < tout )
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <STL_InitRunTimeChecks+0x10c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <STL_InitRunTimeChecks+0x96>
 8002bd6:	f001 fceb 	bl	80045b0 <HAL_GetTick>
 8002bda:	0002      	movs	r2, r0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d8f5      	bhi.n	8002bce <STL_InitRunTimeChecks+0x82>
  { }
  LSIPeriodFlag = 0u;
 8002be2:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <STL_InitRunTimeChecks+0x10c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
  while ( LSIPeriodFlag == 0u  &&  HAL_GetTick() < tout )
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <STL_InitRunTimeChecks+0x10c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d105      	bne.n	8002bfe <STL_InitRunTimeChecks+0xb2>
 8002bf2:	f001 fcdd 	bl	80045b0 <HAL_GetTick>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d8f5      	bhi.n	8002bea <STL_InitRunTimeChecks+0x9e>
  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_default= Pm026,Pm027
  #endif /* __IAR_SYSTEMS_ICC__ */
  /* ==============================================================================*/

  if(HAL_GetTick() >= tout)
 8002bfe:	f001 fcd7 	bl	80045b0 <HAL_GetTick>
 8002c02:	0002      	movs	r2, r0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d805      	bhi.n	8002c16 <STL_InitRunTimeChecks+0xca>
  {
    #ifdef STL_VERBOSE_POR
      printf("Run time clock measurement failure\n\r");
 8002c0a:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <STL_InitRunTimeChecks+0x110>)
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f004 ff89 	bl	8007b24 <iprintf>
    #endif /* STL_VERBOSE_POR */
    FailSafePOR();
 8002c12:	f000 f9d7 	bl	8002fc4 <FailSafePOR>
  }
    
  /* Initialize variables for main routine control flow monitoring */
  CtrlFlowCnt = 0u;
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <STL_InitRunTimeChecks+0xf8>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
  CtrlFlowCntInv = 0xFFFFFFFFuL;
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <STL_InitRunTimeChecks+0xfc>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4252      	negs	r2, r2
 8002c22:	601a      	str	r2, [r3, #0]
      printf(" WWDG init Error\n\r");
    #endif  /* STL_VERBOSE */
    FailSafePOR();
  }
#endif /* USE_WINDOW_WDOG */ 
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	2000003c 	.word	0x2000003c
 8002c30:	20000060 	.word	0x20000060
 8002c34:	20000040 	.word	0x20000040
 8002c38:	20000064 	.word	0x20000064
 8002c3c:	20000048 	.word	0x20000048
 8002c40:	2000006c 	.word	0x2000006c
 8002c44:	20000030 	.word	0x20000030
 8002c48:	20000054 	.word	0x20000054
 8002c4c:	20000034 	.word	0x20000034
 8002c50:	20000058 	.word	0x20000058
 8002c54:	08009fdc 	.word	0x08009fdc
 8002c58:	20000044 	.word	0x20000044
 8002c5c:	08009ffc 	.word	0x08009ffc

08002c60 <STL_DoRunTimeChecks>:
  *         (can be divided into more separated segments if necessary)
  * @param  : None
  * @retval : None
  */
void STL_DoRunTimeChecks(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
  uint32_t rom_test;
  
  /* Is the time base duration elapsed? */
  if (TimeBaseFlag == 0xAAAAAAAAuL)
 8002c66:	4b98      	ldr	r3, [pc, #608]	; (8002ec8 <STL_DoRunTimeChecks+0x268>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a98      	ldr	r2, [pc, #608]	; (8002ecc <STL_DoRunTimeChecks+0x26c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d000      	beq.n	8002c72 <STL_DoRunTimeChecks+0x12>
 8002c70:	e126      	b.n	8002ec0 <STL_DoRunTimeChecks+0x260>
  {
    /* Toggle LED_Non Volatile Memory */
    #if defined STL_EVAL_MODE
      BSP_LED_Toggle(LED_NVM);
 8002c72:	23a0      	movs	r3, #160	; 0xa0
 8002c74:	05db      	lsls	r3, r3, #23
 8002c76:	2140      	movs	r1, #64	; 0x40
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f002 f938 	bl	8004eee <HAL_GPIO_TogglePin>
    #endif  /* STL_EVAL_MODE */
      
    /* Verification of TimeBaseFlag integrity */
    /* The following pair of volatile variables is changed consistently at Systick ISR only */
    if ((TimeBaseFlag ^ TimeBaseFlagInv) == 0xFFFFFFFFuL)
 8002c7e:	4b92      	ldr	r3, [pc, #584]	; (8002ec8 <STL_DoRunTimeChecks+0x268>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b93      	ldr	r3, [pc, #588]	; (8002ed0 <STL_DoRunTimeChecks+0x270>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4053      	eors	r3, r2
 8002c88:	3301      	adds	r3, #1
 8002c8a:	d000      	beq.n	8002c8e <STL_DoRunTimeChecks+0x2e>
 8002c8c:	e10c      	b.n	8002ea8 <STL_DoRunTimeChecks+0x248>
    {
      TimeBaseFlag = 0u;
 8002c8e:	4b8e      	ldr	r3, [pc, #568]	; (8002ec8 <STL_DoRunTimeChecks+0x268>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
    
      /*----------------------------------------------------------------------*/
      /*---------------------------- CPU registers ----------------------------*/
      /*----------------------------------------------------------------------*/
      control_flow_call(CPU_TEST_CALLER);
 8002c94:	4b8f      	ldr	r3, [pc, #572]	; (8002ed4 <STL_DoRunTimeChecks+0x274>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	1c9a      	adds	r2, r3, #2
 8002c9a:	4b8e      	ldr	r3, [pc, #568]	; (8002ed4 <STL_DoRunTimeChecks+0x274>)
 8002c9c:	601a      	str	r2, [r3, #0]
      
      if (STL_RunTimeCPUTest() != CPUTEST_SUCCESS)
 8002c9e:	f000 fed7 	bl	8003a50 <STL_RunTimeCPUTest>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d006      	beq.n	8002cb6 <STL_DoRunTimeChecks+0x56>
      {
        #ifdef STL_VERBOSE
          printf("Run-time CPU Test Failure\n\r");
 8002ca8:	4b8b      	ldr	r3, [pc, #556]	; (8002ed8 <STL_DoRunTimeChecks+0x278>)
 8002caa:	0018      	movs	r0, r3
 8002cac:	f004 ff3a 	bl	8007b24 <iprintf>
        #endif /* STL_VERBOSE */
        FailSafePOR();
 8002cb0:	f000 f988 	bl	8002fc4 <FailSafePOR>
 8002cb4:	e004      	b.n	8002cc0 <STL_DoRunTimeChecks+0x60>
      }
      else
      {
        control_flow_resume(CPU_TEST_CALLER);
 8002cb6:	4b89      	ldr	r3, [pc, #548]	; (8002edc <STL_DoRunTimeChecks+0x27c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	1e9a      	subs	r2, r3, #2
 8002cbc:	4b87      	ldr	r3, [pc, #540]	; (8002edc <STL_DoRunTimeChecks+0x27c>)
 8002cbe:	601a      	str	r2, [r3, #0]
      }
  
      /*----------------------------------------------------------------------*/
      /*------------------------- Stack overflow -----------------------------*/
      /*----------------------------------------------------------------------*/
      control_flow_call(STACK_OVERFLOW_TEST);
 8002cc0:	4b84      	ldr	r3, [pc, #528]	; (8002ed4 <STL_DoRunTimeChecks+0x274>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3335      	adds	r3, #53	; 0x35
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	4b82      	ldr	r3, [pc, #520]	; (8002ed4 <STL_DoRunTimeChecks+0x274>)
 8002cca:	601a      	str	r2, [r3, #0]
      
      if (STL_CheckStack() != SUCCESS)
 8002ccc:	f000 f922 	bl	8002f14 <STL_CheckStack>
 8002cd0:	1e03      	subs	r3, r0, #0
 8002cd2:	d006      	beq.n	8002ce2 <STL_DoRunTimeChecks+0x82>
      {
        #ifdef STL_VERBOSE
          printf("Stack overflow\n\r");
 8002cd4:	4b82      	ldr	r3, [pc, #520]	; (8002ee0 <STL_DoRunTimeChecks+0x280>)
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f004 ff24 	bl	8007b24 <iprintf>
        #endif /* STL_VERBOSE */
        FailSafePOR();
 8002cdc:	f000 f972 	bl	8002fc4 <FailSafePOR>
 8002ce0:	e005      	b.n	8002cee <STL_DoRunTimeChecks+0x8e>
      }
      else
      {
        control_flow_resume(STACK_OVERFLOW_TEST);
 8002ce2:	4b7e      	ldr	r3, [pc, #504]	; (8002edc <STL_DoRunTimeChecks+0x27c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3b35      	subs	r3, #53	; 0x35
 8002ce8:	001a      	movs	r2, r3
 8002cea:	4b7c      	ldr	r3, [pc, #496]	; (8002edc <STL_DoRunTimeChecks+0x27c>)
 8002cec:	601a      	str	r2, [r3, #0]
      }
      
      /*----------------------------------------------------------------------*/
      /*------------------------- Clock monitoring ---------------------------*/
      /*----------------------------------------------------------------------*/
      control_flow_call(CLOCK_TEST_CALLER);
 8002cee:	4b79      	ldr	r3, [pc, #484]	; (8002ed4 <STL_DoRunTimeChecks+0x274>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3317      	adds	r3, #23
 8002cf4:	001a      	movs	r2, r3
 8002cf6:	4b77      	ldr	r3, [pc, #476]	; (8002ed4 <STL_DoRunTimeChecks+0x274>)
 8002cf8:	601a      	str	r2, [r3, #0]
      
      switch ( STL_MainClockTest() )
 8002cfa:	f7ff fd1d 	bl	8002738 <STL_MainClockTest>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	2b0a      	cmp	r3, #10
 8002d02:	d005      	beq.n	8002d10 <STL_DoRunTimeChecks+0xb0>
 8002d04:	dc3f      	bgt.n	8002d86 <STL_DoRunTimeChecks+0x126>
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d009      	beq.n	8002d1e <STL_DoRunTimeChecks+0xbe>
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d034      	beq.n	8002d78 <STL_DoRunTimeChecks+0x118>
 8002d0e:	e03a      	b.n	8002d86 <STL_DoRunTimeChecks+0x126>
      {
        case FREQ_OK:
          control_flow_resume(CLOCK_TEST_CALLER);
 8002d10:	4b72      	ldr	r3, [pc, #456]	; (8002edc <STL_DoRunTimeChecks+0x27c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3b17      	subs	r3, #23
 8002d16:	001a      	movs	r2, r3
 8002d18:	4b70      	ldr	r3, [pc, #448]	; (8002edc <STL_DoRunTimeChecks+0x27c>)
 8002d1a:	601a      	str	r2, [r3, #0]
          break;
 8002d1c:	e03a      	b.n	8002d94 <STL_DoRunTimeChecks+0x134>
  
        case EXT_SOURCE_FAIL:
          #ifdef STL_VERBOSE
            /* finish communication flow prior system clock change */
            UartHandle.Instance = USARTx;
 8002d1e:	4b71      	ldr	r3, [pc, #452]	; (8002ee4 <STL_DoRunTimeChecks+0x284>)
 8002d20:	4a71      	ldr	r2, [pc, #452]	; (8002ee8 <STL_DoRunTimeChecks+0x288>)
 8002d22:	601a      	str	r2, [r3, #0]
            while (HAL_UART_GetState(&UartHandle) == HAL_UART_STATE_BUSY_TX)
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	4b6f      	ldr	r3, [pc, #444]	; (8002ee4 <STL_DoRunTimeChecks+0x284>)
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f003 fdd7 	bl	80068dc <HAL_UART_GetState>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	2b21      	cmp	r3, #33	; 0x21
 8002d32:	d0f8      	beq.n	8002d26 <STL_DoRunTimeChecks+0xc6>
            { }
            /* Re-init communication channel with modified clock setting */
            HAL_UART_DeInit(&UartHandle);
 8002d34:	4b6b      	ldr	r3, [pc, #428]	; (8002ee4 <STL_DoRunTimeChecks+0x284>)
 8002d36:	0018      	movs	r0, r3
 8002d38:	f003 fcde 	bl	80066f8 <HAL_UART_DeInit>
            UartHandle.Init.BaudRate   = 115200;
 8002d3c:	4b69      	ldr	r3, [pc, #420]	; (8002ee4 <STL_DoRunTimeChecks+0x284>)
 8002d3e:	22e1      	movs	r2, #225	; 0xe1
 8002d40:	0252      	lsls	r2, r2, #9
 8002d42:	605a      	str	r2, [r3, #4]
            UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002d44:	4b67      	ldr	r3, [pc, #412]	; (8002ee4 <STL_DoRunTimeChecks+0x284>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
            UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002d4a:	4b66      	ldr	r3, [pc, #408]	; (8002ee4 <STL_DoRunTimeChecks+0x284>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	60da      	str	r2, [r3, #12]
            UartHandle.Init.Parity     = UART_PARITY_NONE;
 8002d50:	4b64      	ldr	r3, [pc, #400]	; (8002ee4 <STL_DoRunTimeChecks+0x284>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	611a      	str	r2, [r3, #16]
            UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <STL_DoRunTimeChecks+0x284>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
            UartHandle.Init.Mode       = UART_MODE_TX;
 8002d5c:	4b61      	ldr	r3, [pc, #388]	; (8002ee4 <STL_DoRunTimeChecks+0x284>)
 8002d5e:	2208      	movs	r2, #8
 8002d60:	615a      	str	r2, [r3, #20]
            HAL_UART_Init(&UartHandle);
 8002d62:	4b60      	ldr	r3, [pc, #384]	; (8002ee4 <STL_DoRunTimeChecks+0x284>)
 8002d64:	0018      	movs	r0, r3
 8002d66:	f003 fc73 	bl	8006650 <HAL_UART_Init>
            printf("\n\r Clock Source failure (Run-time)\n\r");
 8002d6a:	4b60      	ldr	r3, [pc, #384]	; (8002eec <STL_DoRunTimeChecks+0x28c>)
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f004 fed9 	bl	8007b24 <iprintf>
          #endif /* STL_VERBOSE */
          FailSafePOR();
 8002d72:	f000 f927 	bl	8002fc4 <FailSafePOR>
          break;
 8002d76:	e00d      	b.n	8002d94 <STL_DoRunTimeChecks+0x134>
  
        case CLASS_B_VAR_FAIL:
          #ifdef STL_VERBOSE
            printf("\n\r Class B variable error (clock test)\n\r");
 8002d78:	4b5d      	ldr	r3, [pc, #372]	; (8002ef0 <STL_DoRunTimeChecks+0x290>)
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f004 fed2 	bl	8007b24 <iprintf>
          #endif /* STL_VERBOSE */
          FailSafePOR();
 8002d80:	f000 f920 	bl	8002fc4 <FailSafePOR>
          break;
 8002d84:	e006      	b.n	8002d94 <STL_DoRunTimeChecks+0x134>
        case HSI_HSE_SWITCH_FAIL:
        case TEST_ONGOING:
        case CTRL_FLOW_ERROR:
        default:
          #ifdef STL_VERBOSE
            printf("Abnormal Clock Test routine termination \n\r");
 8002d86:	4b5b      	ldr	r3, [pc, #364]	; (8002ef4 <STL_DoRunTimeChecks+0x294>)
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f004 fecb 	bl	8007b24 <iprintf>
          #endif  /* STL_VERBOSE */
          FailSafePOR();
 8002d8e:	f000 f919 	bl	8002fc4 <FailSafePOR>
          break;
 8002d92:	46c0      	nop			; (mov r8, r8)
  
  
      /*----------------------------------------------------------------------*/
      /*------------------ Invariable memory CRC check -----------------------*/
      /*----------------------------------------------------------------------*/
      control_flow_call(FLASH_TEST_CALLER);
 8002d94:	4b4f      	ldr	r3, [pc, #316]	; (8002ed4 <STL_DoRunTimeChecks+0x274>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	333f      	adds	r3, #63	; 0x3f
 8002d9a:	001a      	movs	r2, r3
 8002d9c:	4b4d      	ldr	r3, [pc, #308]	; (8002ed4 <STL_DoRunTimeChecks+0x274>)
 8002d9e:	601a      	str	r2, [r3, #0]
			
      rom_test = STL_crc32Run();  /* Requires the control flow check to be modified */
 8002da0:	f7ff fe28 	bl	80029f4 <STL_crc32Run>
 8002da4:	0003      	movs	r3, r0
 8002da6:	607b      	str	r3, [r7, #4]
      switch ( rom_test )
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <STL_DoRunTimeChecks+0x156>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d007      	beq.n	8002dc4 <STL_DoRunTimeChecks+0x164>
 8002db4:	e016      	b.n	8002de4 <STL_DoRunTimeChecks+0x184>
      {
        case TEST_RUNNING:
            control_flow_resume(FLASH_TEST_CALLER);
 8002db6:	4b49      	ldr	r3, [pc, #292]	; (8002edc <STL_DoRunTimeChecks+0x27c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3b3f      	subs	r3, #63	; 0x3f
 8002dbc:	001a      	movs	r2, r3
 8002dbe:	4b47      	ldr	r3, [pc, #284]	; (8002edc <STL_DoRunTimeChecks+0x27c>)
 8002dc0:	601a      	str	r2, [r3, #0]
          break;
 8002dc2:	e016      	b.n	8002df2 <STL_DoRunTimeChecks+0x192>
          #ifdef STL_VERBOSE
            /* avoid any long string output here, '*' just marks the flash test completed ok */
            #ifndef __GNUC__
              putchar((int16_t)'*');
            #else
              __io_putchar((int16_t)'*');
 8002dc4:	202a      	movs	r0, #42	; 0x2a
 8002dc6:	f7ff fc6f 	bl	80026a8 <__io_putchar>
            #endif /* __GNUC__ */
          #endif /* STL_VERBOSE */
          #if defined STL_EVAL_MODE
            /* Toggle LED_NVM for debug purpose */
            BSP_LED_Toggle(LED_NVM);
 8002dca:	23a0      	movs	r3, #160	; 0xa0
 8002dcc:	05db      	lsls	r3, r3, #23
 8002dce:	2140      	movs	r1, #64	; 0x40
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f002 f88c 	bl	8004eee <HAL_GPIO_TogglePin>
          #endif  /* STL_EVAL_MODE */
          #if defined(STL_EVAL_LCD)
            ++MyFLASHCounter;
          #endif /* STL_EVAL_LCD */
          CtrlFlowCntInv -= FLASH_TEST_CALLER;
 8002dd6:	4b41      	ldr	r3, [pc, #260]	; (8002edc <STL_DoRunTimeChecks+0x27c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3b3f      	subs	r3, #63	; 0x3f
 8002ddc:	001a      	movs	r2, r3
 8002dde:	4b3f      	ldr	r3, [pc, #252]	; (8002edc <STL_DoRunTimeChecks+0x27c>)
 8002de0:	601a      	str	r2, [r3, #0]
          break;
 8002de2:	e006      	b.n	8002df2 <STL_DoRunTimeChecks+0x192>
  
        case TEST_FAILURE:
        case CLASS_B_DATA_FAIL:
        default:
          #ifdef STL_VERBOSE
            printf(" Run-time FLASH CRC Error\n\r");
 8002de4:	4b44      	ldr	r3, [pc, #272]	; (8002ef8 <STL_DoRunTimeChecks+0x298>)
 8002de6:	0018      	movs	r0, r3
 8002de8:	f004 fe9c 	bl	8007b24 <iprintf>
          #endif  /* STL_VERBOSE */
          FailSafePOR();
 8002dec:	f000 f8ea 	bl	8002fc4 <FailSafePOR>
          break;
 8002df0:	46c0      	nop			; (mov r8, r8)
          #endif  /* STL_VERBOSE */
          FailSafePOR();
        }
      #endif /* USE_INDEPENDENT_WDOG */
  
      if (((CtrlFlowCnt ^ CtrlFlowCntInv) == 0xFFFFFFFFuL)
 8002df2:	4b38      	ldr	r3, [pc, #224]	; (8002ed4 <STL_DoRunTimeChecks+0x274>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b39      	ldr	r3, [pc, #228]	; (8002edc <STL_DoRunTimeChecks+0x27c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4053      	eors	r3, r2
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	d14c      	bne.n	8002e9a <STL_DoRunTimeChecks+0x23a>
        &&((LastCtrlFlowCnt ^ LastCtrlFlowCntInv) == 0xFFFFFFFFuL))
 8002e00:	4b3e      	ldr	r3, [pc, #248]	; (8002efc <STL_DoRunTimeChecks+0x29c>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b3e      	ldr	r3, [pc, #248]	; (8002f00 <STL_DoRunTimeChecks+0x2a0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4053      	eors	r3, r2
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	d145      	bne.n	8002e9a <STL_DoRunTimeChecks+0x23a>
      {
        if (rom_test == TEST_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d12a      	bne.n	8002e6a <STL_DoRunTimeChecks+0x20a>
          /* ==============================================================================*/
          /* MISRA violation of rule 11.4,17.4 - pointer arithmetic & casting has is used */
          #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
            #pragma diag_suppress=Pm088,Pm141
          #endif /* __IAR_SYSTEMS_ICC__ */
          if ((CtrlFlowCnt == FULL_FLASH_CHECKED) 
 8002e14:	4b2f      	ldr	r3, [pc, #188]	; (8002ed4 <STL_DoRunTimeChecks+0x274>)
 8002e16:	6819      	ldr	r1, [r3, #0]
 8002e18:	4b3a      	ldr	r3, [pc, #232]	; (8002f04 <STL_DoRunTimeChecks+0x2a4>)
 8002e1a:	22f8      	movs	r2, #248	; 0xf8
 8002e1c:	0612      	lsls	r2, r2, #24
 8002e1e:	4694      	mov	ip, r2
 8002e20:	4463      	add	r3, ip
 8002e22:	099a      	lsrs	r2, r3, #6
 8002e24:	0013      	movs	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	189b      	adds	r3, r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	189b      	adds	r3, r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	334f      	adds	r3, #79	; 0x4f
 8002e34:	33ff      	adds	r3, #255	; 0xff
 8002e36:	4299      	cmp	r1, r3
 8002e38:	d110      	bne.n	8002e5c <STL_DoRunTimeChecks+0x1fc>
            && ((CtrlFlowCnt - LastCtrlFlowCnt) == (LAST_DELTA_MAIN)))
 8002e3a:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <STL_DoRunTimeChecks+0x274>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4b2f      	ldr	r3, [pc, #188]	; (8002efc <STL_DoRunTimeChecks+0x29c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	1ad2      	subs	r2, r2, r3
 8002e44:	23a7      	movs	r3, #167	; 0xa7
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d107      	bne.n	8002e5c <STL_DoRunTimeChecks+0x1fc>
          #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
            #pragma diag_default=Pm088,Pm141
          #endif /* __IAR_SYSTEMS_ICC__ */
          /* ==============================================================================*/
          {
            CtrlFlowCnt = 0u;
 8002e4c:	4b21      	ldr	r3, [pc, #132]	; (8002ed4 <STL_DoRunTimeChecks+0x274>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
            CtrlFlowCntInv = 0xFFFFFFFFuL;
 8002e52:	4b22      	ldr	r3, [pc, #136]	; (8002edc <STL_DoRunTimeChecks+0x27c>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	4252      	negs	r2, r2
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e015      	b.n	8002e88 <STL_DoRunTimeChecks+0x228>
          }
          else  /* Return value form crc check was corrupted */
          {
            #ifdef STL_VERBOSE
              printf("Control Flow Error (main loop, Flash CRC)\n\r");
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <STL_DoRunTimeChecks+0x2a8>)
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f004 fe60 	bl	8007b24 <iprintf>
            #endif  /* STL_VERBOSE */
            FailSafePOR();
 8002e64:	f000 f8ae 	bl	8002fc4 <FailSafePOR>
 8002e68:	e00e      	b.n	8002e88 <STL_DoRunTimeChecks+0x228>
          }
        }
        else  /* Flash test not completed yet */
        {
          if ((CtrlFlowCnt - LastCtrlFlowCnt) != DELTA_MAIN)
 8002e6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <STL_DoRunTimeChecks+0x274>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4b23      	ldr	r3, [pc, #140]	; (8002efc <STL_DoRunTimeChecks+0x29c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	1ad2      	subs	r2, r2, r3
 8002e74:	2348      	movs	r3, #72	; 0x48
 8002e76:	33ff      	adds	r3, #255	; 0xff
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d005      	beq.n	8002e88 <STL_DoRunTimeChecks+0x228>
          {
            #ifdef STL_VERBOSE
              printf("Control Flow Error (main loop, Flash CRC on-going)\n\r");
 8002e7c:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <STL_DoRunTimeChecks+0x2ac>)
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f004 fe50 	bl	8007b24 <iprintf>
            #endif  /* STL_VERBOSE */
            FailSafePOR();
 8002e84:	f000 f89e 	bl	8002fc4 <FailSafePOR>
          }
        }
  
        LastCtrlFlowCnt = CtrlFlowCnt;
 8002e88:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <STL_DoRunTimeChecks+0x274>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <STL_DoRunTimeChecks+0x29c>)
 8002e8e:	601a      	str	r2, [r3, #0]
        LastCtrlFlowCntInv = CtrlFlowCntInv;
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <STL_DoRunTimeChecks+0x27c>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <STL_DoRunTimeChecks+0x2a0>)
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	e00c      	b.n	8002eb4 <STL_DoRunTimeChecks+0x254>
      }
      else
      {
        #ifdef STL_VERBOSE
          printf("Class B variable Error (main loop)\n\r");
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <STL_DoRunTimeChecks+0x2b0>)
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f004 fe41 	bl	8007b24 <iprintf>
        #endif  /* STL_VERBOSE */
        FailSafePOR();
 8002ea2:	f000 f88f 	bl	8002fc4 <FailSafePOR>
 8002ea6:	e005      	b.n	8002eb4 <STL_DoRunTimeChecks+0x254>
      }
    }
    else
    {
      #ifdef STL_VERBOSE
        printf("Class B variable Error (main loop)\n\r");
 8002ea8:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <STL_DoRunTimeChecks+0x2b0>)
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f004 fe3a 	bl	8007b24 <iprintf>
      #endif  /* STL_VERBOSE */
      FailSafePOR();
 8002eb0:	f000 f888 	bl	8002fc4 <FailSafePOR>
    }
    #if defined STL_EVAL_MODE
      /* Toggle LD3 for debug purpose */
      BSP_LED_Toggle(LED_NVM);
 8002eb4:	23a0      	movs	r3, #160	; 0xa0
 8002eb6:	05db      	lsls	r3, r3, #23
 8002eb8:	2140      	movs	r1, #64	; 0x40
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f002 f817 	bl	8004eee <HAL_GPIO_TogglePin>
    #endif  /* STL_EVAL_MODE */
  } /* End of periodic Self-test routine */
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b002      	add	sp, #8
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000040 	.word	0x20000040
 8002ecc:	aaaaaaaa 	.word	0xaaaaaaaa
 8002ed0:	20000064 	.word	0x20000064
 8002ed4:	20000030 	.word	0x20000030
 8002ed8:	0800a024 	.word	0x0800a024
 8002edc:	20000054 	.word	0x20000054
 8002ee0:	0800a040 	.word	0x0800a040
 8002ee4:	20000278 	.word	0x20000278
 8002ee8:	40004400 	.word	0x40004400
 8002eec:	0800a054 	.word	0x0800a054
 8002ef0:	0800a07c 	.word	0x0800a07c
 8002ef4:	0800a0a8 	.word	0x0800a0a8
 8002ef8:	0800a0d4 	.word	0x0800a0d4
 8002efc:	20000048 	.word	0x20000048
 8002f00:	2000006c 	.word	0x2000006c
 8002f04:	0800ad80 	.word	0x0800ad80
 8002f08:	0800a0f0 	.word	0x0800a0f0
 8002f0c:	0800a11c 	.word	0x0800a11c
 8002f10:	0800a154 	.word	0x0800a154

08002f14 <STL_CheckStack>:
  * @brief  This function verifies that Stack didn't overflow
  * @param  : None
  * @retval : ErrorStatus = (ERROR, SUCCESS)
  */
ErrorStatus STL_CheckStack(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
  ErrorStatus result = SUCCESS;
 8002f1a:	1dfb      	adds	r3, r7, #7
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
  
  CtrlFlowCnt += STACK_OVERFLOW_CALLEE;
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <STL_CheckStack+0x70>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	333b      	adds	r3, #59	; 0x3b
 8002f26:	001a      	movs	r2, r3
 8002f28:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <STL_CheckStack+0x70>)
 8002f2a:	601a      	str	r2, [r3, #0]

  if ( aStackOverFlowPtrn[0] != 0xEEEEEEEEuL )
 8002f2c:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <STL_CheckStack+0x74>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a16      	ldr	r2, [pc, #88]	; (8002f8c <STL_CheckStack+0x78>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d002      	beq.n	8002f3c <STL_CheckStack+0x28>
  {
    result = ERROR;
 8002f36:	1dfb      	adds	r3, r7, #7
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
  }
  if ( aStackOverFlowPtrn[1] != 0xCCCCCCCCuL )
 8002f3c:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <STL_CheckStack+0x74>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <STL_CheckStack+0x7c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d002      	beq.n	8002f4c <STL_CheckStack+0x38>
  {
    result = ERROR;
 8002f46:	1dfb      	adds	r3, r7, #7
 8002f48:	2201      	movs	r2, #1
 8002f4a:	701a      	strb	r2, [r3, #0]
  }
  if ( aStackOverFlowPtrn[2] != 0xBBBBBBBBuL )
 8002f4c:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <STL_CheckStack+0x74>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a10      	ldr	r2, [pc, #64]	; (8002f94 <STL_CheckStack+0x80>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d002      	beq.n	8002f5c <STL_CheckStack+0x48>
  {
    result = ERROR;
 8002f56:	1dfb      	adds	r3, r7, #7
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
  }
  if ( aStackOverFlowPtrn[3] != 0xDDDDDDDDuL )
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <STL_CheckStack+0x74>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	4a0d      	ldr	r2, [pc, #52]	; (8002f98 <STL_CheckStack+0x84>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d002      	beq.n	8002f6c <STL_CheckStack+0x58>
  {
    result = ERROR;
 8002f66:	1dfb      	adds	r3, r7, #7
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
  }

  CtrlFlowCntInv -= STACK_OVERFLOW_CALLEE;
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <STL_CheckStack+0x88>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	3b3b      	subs	r3, #59	; 0x3b
 8002f72:	001a      	movs	r2, r3
 8002f74:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <STL_CheckStack+0x88>)
 8002f76:	601a      	str	r2, [r3, #0]

  return (result);
 8002f78:	1dfb      	adds	r3, r7, #7
 8002f7a:	781b      	ldrb	r3, [r3, #0]
}
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000030 	.word	0x20000030
 8002f88:	200007b0 	.word	0x200007b0
 8002f8c:	eeeeeeee 	.word	0xeeeeeeee
 8002f90:	cccccccc 	.word	0xcccccccc
 8002f94:	bbbbbbbb 	.word	0xbbbbbbbb
 8002f98:	dddddddd 	.word	0xdddddddd
 8002f9c:	20000054 	.word	0x20000054

08002fa0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002fa4:	f3bf 8f4f 	dsb	sy
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002faa:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <__NVIC_SystemReset+0x1c>)
 8002fac:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <__NVIC_SystemReset+0x20>)
 8002fae:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002fb0:	f3bf 8f4f 	dsb	sy
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	e7fd      	b.n	8002fb6 <__NVIC_SystemReset+0x16>
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	e000ed00 	.word	0xe000ed00
 8002fc0:	05fa0004 	.word	0x05fa0004

08002fc4 <FailSafePOR>:
  *    user to keep application safe while define proper recovery operation
  * @param  : None
  * @retval : None
  */
void FailSafePOR(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* disable any checking services at SystTick interrupt */
  TickCounter = TickCounterInv = 0u;
 8002fc8:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <FailSafePOR+0x2c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <FailSafePOR+0x2c>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <FailSafePOR+0x30>)
 8002fd4:	601a      	str	r2, [r3, #0]
  
  #ifdef STL_VERBOSE_POR
    printf(" >>>>>>>>>> POR FailSafe Mode <<<<<<<<<<\n\r");
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <FailSafePOR+0x34>)
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f004 fda3 	bl	8007b24 <iprintf>
  #endif  /* STL_VERBOSE_POR */
  
  #if defined STL_EVAL_MODE
    /* LED_ERR On for debug purposes */
    BSP_LED_On(LED_ERR);
 8002fde:	23a0      	movs	r3, #160	; 0xa0
 8002fe0:	05db      	lsls	r3, r3, #23
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f001 ff64 	bl	8004eb4 <HAL_GPIO_WritePin>
  {
    #ifndef NO_RESET_AT_FAIL_MODE
      /* Generate system reset */
      HAL_NVIC_SystemReset();
    #else
      while(1)
 8002fec:	e7fe      	b.n	8002fec <FailSafePOR+0x28>
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	20000060 	.word	0x20000060
 8002ff4:	2000003c 	.word	0x2000003c
 8002ff8:	0800a17c 	.word	0x0800a17c

08002ffc <STL_StartUp>:
  * @param  : None
  *   Flash interface initialized, Systick timer ON (2ms timebase)
  * @retval : None
  */
  __attribute__((optimize(0))) void STL_StartUp(void)
{
 8002ffc:	b5b0      	push	{r4, r5, r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
  uint32_t crc_result;
  uint32_t index;
  ClockStatus clk_sts;
	
  /* block run time tests performed at SysTick interrupt */
  TickCounter= TickCounterInv= 0;
 8003002:	4beb      	ldr	r3, [pc, #940]	; (80033b0 <STL_StartUp+0x3b4>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	4be9      	ldr	r3, [pc, #932]	; (80033b0 <STL_StartUp+0x3b4>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4be9      	ldr	r3, [pc, #932]	; (80033b4 <STL_StartUp+0x3b8>)
 800300e:	601a      	str	r2, [r3, #0]
  
  /* Reset of all peripherals, Initializes the Flash interface and the Systick */
  HAL_Init();
 8003010:	f001 fa68 	bl	80044e4 <HAL_Init>

  #ifdef STL_VERBOSE_POR
    /* Update the SystemCoreClock global variable as USART Baud rate setting depends on it */
  	SystemCoreClockUpdate();
 8003014:	f001 f990 	bl	8004338 <SystemCoreClockUpdate>
    USART_Configuration();
 8003018:	f7ff fac2 	bl	80025a0 <USART_Configuration>
    printf("\n\n\r *******  Self Test Library Init  *******\n\r");
 800301c:	4be6      	ldr	r3, [pc, #920]	; (80033b8 <STL_StartUp+0x3bc>)
 800301e:	0018      	movs	r0, r3
 8003020:	f004 fd80 	bl	8007b24 <iprintf>
  #endif

  #if defined STL_EVAL_MODE
    /* init LEDs on evaluation board  to indicate phases of startup */
    BSP_LED_Init(LED_VLM);
 8003024:	2020      	movs	r0, #32
 8003026:	f7ff fa8d 	bl	8002544 <User_signal_Init>
    BSP_LED_Init(LED_NVM);
 800302a:	2040      	movs	r0, #64	; 0x40
 800302c:	f7ff fa8a 	bl	8002544 <User_signal_Init>
    BSP_LED_Init(LED_ERR);
 8003030:	2080      	movs	r0, #128	; 0x80
 8003032:	f7ff fa87 	bl	8002544 <User_signal_Init>
  /*--------------------------------------------------------------------------*/
  /*------------------- CPU registers and flags self test --------------------*/
  /*--------------------------------------------------------------------------*/

  /* Initialization of counters for control flow monitoring */
  init_control_flow();
 8003036:	4be1      	ldr	r3, [pc, #900]	; (80033bc <STL_StartUp+0x3c0>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	4bdf      	ldr	r3, [pc, #892]	; (80033bc <STL_StartUp+0x3c0>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	43da      	mvns	r2, r3
 8003042:	4bdf      	ldr	r3, [pc, #892]	; (80033c0 <STL_StartUp+0x3c4>)
 8003044:	601a      	str	r2, [r3, #0]

  control_flow_call(CPU_TEST_CALLER);
 8003046:	4bdd      	ldr	r3, [pc, #884]	; (80033bc <STL_StartUp+0x3c0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	1c9a      	adds	r2, r3, #2
 800304c:	4bdb      	ldr	r3, [pc, #876]	; (80033bc <STL_StartUp+0x3c0>)
 800304e:	601a      	str	r2, [r3, #0]
  /* WARNING: all registers destroyed when exiting this function (including
  preserved registers R4 to R11) while excluding stack pointer R13) */
  if (STL_StartUpCPUTest() != CPUTEST_SUCCESS)
 8003050:	f000 fdd0 	bl	8003bf4 <STL_StartUpCPUTest>
 8003054:	0003      	movs	r3, r0
 8003056:	2b01      	cmp	r3, #1
 8003058:	d006      	beq.n	8003068 <STL_StartUp+0x6c>
  {
    #ifdef STL_VERBOSE_POR
      printf("Start-up CPU Test Failure\n\r");
 800305a:	4bda      	ldr	r3, [pc, #872]	; (80033c4 <STL_StartUp+0x3c8>)
 800305c:	0018      	movs	r0, r3
 800305e:	f004 fd61 	bl	8007b24 <iprintf>
    #endif /* STL_VERBOSE_POR */
    
    FailSafePOR();
 8003062:	f7ff ffaf 	bl	8002fc4 <FailSafePOR>
 8003066:	e008      	b.n	800307a <STL_StartUp+0x7e>
  }
  else  /* CPU Test OK */
  {
    control_flow_resume(CPU_TEST_CALLER);
 8003068:	4bd5      	ldr	r3, [pc, #852]	; (80033c0 <STL_StartUp+0x3c4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	1e9a      	subs	r2, r3, #2
 800306e:	4bd4      	ldr	r3, [pc, #848]	; (80033c0 <STL_StartUp+0x3c4>)
 8003070:	601a      	str	r2, [r3, #0]
    
    #ifdef STL_VERBOSE_POR
      printf(" Start-up CPU Test OK\n\r");
 8003072:	4bd5      	ldr	r3, [pc, #852]	; (80033c8 <STL_StartUp+0x3cc>)
 8003074:	0018      	movs	r0, r3
 8003076:	f004 fd55 	bl	8007b24 <iprintf>

  /*--------------------------------------------------------------------------*/
  /*--------------------- WDOGs functionality self test ----------------------*/
  /*--------------------------------------------------------------------------*/

  control_flow_call(WDG_TEST_CALLER);
 800307a:	4bd0      	ldr	r3, [pc, #832]	; (80033bc <STL_StartUp+0x3c0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	1d5a      	adds	r2, r3, #5
 8003080:	4bce      	ldr	r3, [pc, #824]	; (80033bc <STL_StartUp+0x3c0>)
 8003082:	601a      	str	r2, [r3, #0]

  /* two phases IWDG & WWDG test, system reset is performed here */
  STL_WDGSelfTest();
 8003084:	f000 fa40 	bl	8003508 <STL_WDGSelfTest>
  
  control_flow_resume(WDG_TEST_CALLER);
 8003088:	4bcd      	ldr	r3, [pc, #820]	; (80033c0 <STL_StartUp+0x3c4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	1f5a      	subs	r2, r3, #5
 800308e:	4bcc      	ldr	r3, [pc, #816]	; (80033c0 <STL_StartUp+0x3c4>)
 8003090:	601a      	str	r2, [r3, #0]
  /*--------------------------------------------------------------------------*/
  /*--------------------- Switch ON PLL for maximum speed --------------------*/
  /*--------------------------------------------------------------------------*/
  #ifdef STL_VERBOSE_POR
    /* finish communication flow prior system clock change */
    while (HAL_UART_GetState(&UartHandle) == HAL_UART_STATE_BUSY_TX)
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	4bcd      	ldr	r3, [pc, #820]	; (80033cc <STL_StartUp+0x3d0>)
 8003096:	0018      	movs	r0, r3
 8003098:	f003 fc20 	bl	80068dc <HAL_UART_GetState>
 800309c:	0003      	movs	r3, r0
 800309e:	2b21      	cmp	r3, #33	; 0x21
 80030a0:	d0f8      	beq.n	8003094 <STL_StartUp+0x98>
    { }
  #endif /* STL_VERBOSE_POR */
  
  /* No Control flow check here (not safety critical) */
  /* Switch on the PLL to speed-up Flash and RAM tests */
  StartUpClock_Config();
 80030a2:	f7ff f9df 	bl	8002464 <StartUpClock_Config>

  #ifdef STL_VERBOSE_POR
    /* Re-init communication channel with modified clock setting */
    HAL_UART_DeInit(&UartHandle);
 80030a6:	4bc9      	ldr	r3, [pc, #804]	; (80033cc <STL_StartUp+0x3d0>)
 80030a8:	0018      	movs	r0, r3
 80030aa:	f003 fb25 	bl	80066f8 <HAL_UART_DeInit>
    HAL_UART_Init(&UartHandle);
 80030ae:	4bc7      	ldr	r3, [pc, #796]	; (80033cc <STL_StartUp+0x3d0>)
 80030b0:	0018      	movs	r0, r3
 80030b2:	f003 facd 	bl	8006650 <HAL_UART_Init>
  /*--------------------- Invariable memory CRC check ------------------------*/
  /*--------------------------------------------------------------------------*/
  
  #ifdef STL_EVAL_MODE
    /* init LED pins in push pull slow output mode */
    BSP_LED_Init(LED_VLM);
 80030b6:	2020      	movs	r0, #32
 80030b8:	f7ff fa44 	bl	8002544 <User_signal_Init>
    BSP_LED_Init(LED_NVM);
 80030bc:	2040      	movs	r0, #64	; 0x40
 80030be:	f7ff fa41 	bl	8002544 <User_signal_Init>
    BSP_LED_Init(LED_ERR);
 80030c2:	2080      	movs	r0, #128	; 0x80
 80030c4:	f7ff fa3e 	bl	8002544 <User_signal_Init>
    
    /* LED_NVM On for debug purposes */
    BSP_LED_On(LED_NVM);
 80030c8:	23a0      	movs	r3, #160	; 0xa0
 80030ca:	05db      	lsls	r3, r3, #23
 80030cc:	2201      	movs	r2, #1
 80030ce:	2140      	movs	r1, #64	; 0x40
 80030d0:	0018      	movs	r0, r3
 80030d2:	f001 feef 	bl	8004eb4 <HAL_GPIO_WritePin>
  #endif /* STL_EVAL_MODE */
    if (control_flow_check_point(WDG_TEST_CALLER + CPU_TEST_CALLER + CPU_TEST_CALLEE) == ERROR) {
 80030d6:	200a      	movs	r0, #10
 80030d8:	f000 fb4e 	bl	8003778 <control_flow_check_point>
 80030dc:	0003      	movs	r3, r0
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d105      	bne.n	80030ee <STL_StartUp+0xf2>
        printf("control_flow_check_point after WDG test and CPU test failed\n\r");
 80030e2:	4bbb      	ldr	r3, [pc, #748]	; (80033d0 <STL_StartUp+0x3d4>)
 80030e4:	0018      	movs	r0, r3
 80030e6:	f004 fd1d 	bl	8007b24 <iprintf>
        FailSafePOR();
 80030ea:	f7ff ff6b 	bl	8002fc4 <FailSafePOR>
    }

  control_flow_call(CRC32_TEST_CALLER);
 80030ee:	4bb3      	ldr	r3, [pc, #716]	; (80033bc <STL_StartUp+0x3c0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330b      	adds	r3, #11
 80030f4:	001a      	movs	r2, r3
 80030f6:	4bb1      	ldr	r3, [pc, #708]	; (80033bc <STL_StartUp+0x3c0>)
 80030f8:	601a      	str	r2, [r3, #0]
  /* Compute the 32-bit crc of the whole Flash by CRC unit except the checksum
     pattern stored at top of FLASH */
//  for (volatile int i = 0; i < 32000000; i++); // delay 1 sec
  __CRC_CLK_ENABLE();
 80030fa:	4bb6      	ldr	r3, [pc, #728]	; (80033d4 <STL_StartUp+0x3d8>)
 80030fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030fe:	4bb5      	ldr	r3, [pc, #724]	; (80033d4 <STL_StartUp+0x3d8>)
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	0149      	lsls	r1, r1, #5
 8003104:	430a      	orrs	r2, r1
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
 8003108:	4bb2      	ldr	r3, [pc, #712]	; (80033d4 <STL_StartUp+0x3d8>)
 800310a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	015b      	lsls	r3, r3, #5
 8003110:	4013      	ands	r3, r2
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	687b      	ldr	r3, [r7, #4]

  CrcHandle.Instance = CRC;
 8003116:	4bb0      	ldr	r3, [pc, #704]	; (80033d8 <STL_StartUp+0x3dc>)
 8003118:	4ab0      	ldr	r2, [pc, #704]	; (80033dc <STL_StartUp+0x3e0>)
 800311a:	601a      	str	r2, [r3, #0]
  #ifdef  CRC_UNIT_CONFIGURABLE
    CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_ENABLE;
 800311c:	4bae      	ldr	r3, [pc, #696]	; (80033d8 <STL_StartUp+0x3dc>)
 800311e:	2200      	movs	r2, #0
 8003120:	711a      	strb	r2, [r3, #4]
    CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_ENABLE;
 8003122:	4bad      	ldr	r3, [pc, #692]	; (80033d8 <STL_StartUp+0x3dc>)
 8003124:	2200      	movs	r2, #0
 8003126:	715a      	strb	r2, [r3, #5]
    CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 8003128:	4bab      	ldr	r3, [pc, #684]	; (80033d8 <STL_StartUp+0x3dc>)
 800312a:	2200      	movs	r2, #0
 800312c:	615a      	str	r2, [r3, #20]
    CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLED;
 800312e:	4baa      	ldr	r3, [pc, #680]	; (80033d8 <STL_StartUp+0x3dc>)
 8003130:	2200      	movs	r2, #0
 8003132:	619a      	str	r2, [r3, #24]
    CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_WORDS;
 8003134:	4ba8      	ldr	r3, [pc, #672]	; (80033d8 <STL_StartUp+0x3dc>)
 8003136:	2203      	movs	r2, #3
 8003138:	621a      	str	r2, [r3, #32]
  #endif
  HAL_CRC_Init(&CrcHandle);
 800313a:	4ba7      	ldr	r3, [pc, #668]	; (80033d8 <STL_StartUp+0x3dc>)
 800313c:	0018      	movs	r0, r3
 800313e:	f001 fb1f 	bl	8004780 <HAL_CRC_Init>

/* the next lines replaces the standard HAL function call
   crc_result = HAL_CRC_Calculate(&CrcHandle, (uint32_t *)ROM_START, (uint32_t)ROM_SIZEinWORDS);
  due to bug at IAR linker - check sum computation can't support both big & little endian  */

  for(index = 0; index < (uint32_t)ROM_SIZEinWORDS; index++)
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	e00e      	b.n	8003166 <STL_StartUp+0x16a>
  {
    CRC->DR = __REV(*((uint32_t *)ROM_START + index));
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	2280      	movs	r2, #128	; 0x80
 800314e:	0512      	lsls	r2, r2, #20
 8003150:	4694      	mov	ip, r2
 8003152:	4463      	add	r3, ip
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4ba1      	ldr	r3, [pc, #644]	; (80033dc <STL_StartUp+0x3e0>)
 8003158:	60ba      	str	r2, [r7, #8]
  return __builtin_bswap32(value);
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	ba12      	rev	r2, r2
 800315e:	601a      	str	r2, [r3, #0]
  for(index = 0; index < (uint32_t)ROM_SIZEinWORDS; index++)
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	3301      	adds	r3, #1
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	4b9e      	ldr	r3, [pc, #632]	; (80033e0 <STL_StartUp+0x3e4>)
 8003168:	22f8      	movs	r2, #248	; 0xf8
 800316a:	0612      	lsls	r2, r2, #24
 800316c:	4694      	mov	ip, r2
 800316e:	4463      	add	r3, ip
 8003170:	089b      	lsrs	r3, r3, #2
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	429a      	cmp	r2, r3
 8003176:	d3e7      	bcc.n	8003148 <STL_StartUp+0x14c>
  }
  crc_result = CRC->DR;
 8003178:	4b98      	ldr	r3, [pc, #608]	; (80033dc <STL_StartUp+0x3e0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	613b      	str	r3, [r7, #16]
  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_default=Pm088,Pm141
    /* ==============================================================================*/
  #endif  /* __IAR_SYSTEMS_ICC__ */

  control_flow_resume(CRC32_TEST_CALLER);
 800317e:	4b90      	ldr	r3, [pc, #576]	; (80033c0 <STL_StartUp+0x3c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3b0b      	subs	r3, #11
 8003184:	001a      	movs	r2, r3
 8003186:	4b8e      	ldr	r3, [pc, #568]	; (80033c0 <STL_StartUp+0x3c4>)
 8003188:	601a      	str	r2, [r3, #0]
  /* Store pattern for regular 32-bit crc computation */
  control_flow_call(CRC_TEST_CALLER);
 800318a:	4b8c      	ldr	r3, [pc, #560]	; (80033bc <STL_StartUp+0x3c0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3311      	adds	r3, #17
 8003190:	001a      	movs	r2, r3
 8003192:	4b8a      	ldr	r3, [pc, #552]	; (80033bc <STL_StartUp+0x3c0>)
 8003194:	601a      	str	r2, [r3, #0]
  #if defined(__CC_ARM) || defined(__GNUC__)             /* KEIL or GCC Compiler */
    /* Computed 32-bit crc check is temporary stored at crc_result. This value must be copied
       into __Check_Sum address placed at the end of Flash area (see file startup_stm32fxx.s)
       Condition here can be reversed for debugging */

    if(crc_result != *(uint32_t *)(&REF_CRC32))
 8003196:	4b92      	ldr	r3, [pc, #584]	; (80033e0 <STL_StartUp+0x3e4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	429a      	cmp	r2, r3
 800319e:	d006      	beq.n	80031ae <STL_StartUp+0x1b2>
  #endif  /* __CC_ARM */
    {
      #ifdef STL_VERBOSE_POR
        printf("FLASH 32-bit CRC Error at Start-up\n\r");
 80031a0:	4b90      	ldr	r3, [pc, #576]	; (80033e4 <STL_StartUp+0x3e8>)
 80031a2:	0018      	movs	r0, r3
 80031a4:	f004 fcbe 	bl	8007b24 <iprintf>
      #endif  /* STL_VERBOSE_POR */
      FailSafePOR();
 80031a8:	f7ff ff0c 	bl	8002fc4 <FailSafePOR>
 80031ac:	e009      	b.n	80031c2 <STL_StartUp+0x1c6>
    }
    else
    { /* Test OK */
      #ifdef STL_VERBOSE_POR
        printf(" Start-up FLASH 32-bit CRC OK\n\r");
 80031ae:	4b8e      	ldr	r3, [pc, #568]	; (80033e8 <STL_StartUp+0x3ec>)
 80031b0:	0018      	movs	r0, r3
 80031b2:	f004 fcb7 	bl	8007b24 <iprintf>
      #endif  /* STL_VERBOSE_POR */

      /* If else statement is not executed, it will be detected by control flow monitoring */
      control_flow_resume(CRC_TEST_CALLER);
 80031b6:	4b82      	ldr	r3, [pc, #520]	; (80033c0 <STL_StartUp+0x3c4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3b11      	subs	r3, #17
 80031bc:	001a      	movs	r2, r3
 80031be:	4b80      	ldr	r3, [pc, #512]	; (80033c0 <STL_StartUp+0x3c4>)
 80031c0:	601a      	str	r2, [r3, #0]
    }

  HAL_CRC_DeInit(&CrcHandle);
 80031c2:	4b85      	ldr	r3, [pc, #532]	; (80033d8 <STL_StartUp+0x3dc>)
 80031c4:	0018      	movs	r0, r3
 80031c6:	f001 fb41 	bl	800484c <HAL_CRC_DeInit>
  #ifdef STL_EVAL_MODE
    /* LED_NVM Off for debug purposes */
    BSP_LED_Off(LED_NVM);
 80031ca:	23a0      	movs	r3, #160	; 0xa0
 80031cc:	05db      	lsls	r3, r3, #23
 80031ce:	2200      	movs	r2, #0
 80031d0:	2140      	movs	r1, #64	; 0x40
 80031d2:	0018      	movs	r0, r3
 80031d4:	f001 fe6e 	bl	8004eb4 <HAL_GPIO_WritePin>
  #endif /* STL_EVAL_MODE */

  /*--------------------------------------------------------------------------*/
  /*   Verify Control flow before RAM init (which clears Ctrl flow counters)  */
  /*--------------------------------------------------------------------------*/
  if (control_flow_check_point(CHECKPOINT1) == ERROR)
 80031d8:	2026      	movs	r0, #38	; 0x26
 80031da:	f000 facd 	bl	8003778 <control_flow_check_point>
 80031de:	0003      	movs	r3, r0
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d106      	bne.n	80031f2 <STL_StartUp+0x1f6>
  {
     #ifdef STL_VERBOSE_POR
       printf("Control Flow Error Checkpoint 1\n\r");
 80031e4:	4b81      	ldr	r3, [pc, #516]	; (80033ec <STL_StartUp+0x3f0>)
 80031e6:	0018      	movs	r0, r3
 80031e8:	f004 fc9c 	bl	8007b24 <iprintf>
     #endif  /* STL_VERBOSE_POR */
     FailSafePOR();
 80031ec:	f7ff feea 	bl	8002fc4 <FailSafePOR>
 80031f0:	e003      	b.n	80031fa <STL_StartUp+0x1fe>
  }
  else
  {
   #ifdef STL_VERBOSE_POR
    printf(" Control Flow Checkpoint 1 OK \n\r");
 80031f2:	4b7f      	ldr	r3, [pc, #508]	; (80033f0 <STL_StartUp+0x3f4>)
 80031f4:	0018      	movs	r0, r3
 80031f6:	f004 fc95 	bl	8007b24 <iprintf>
  /*--------------------------------------------------------------------------*/
  /* --------------------- Variable memory functional test -------------------*/
  /*--------------------------------------------------------------------------*/
  #ifdef STL_EVAL_MODE
    /* LED_VLM On for debug purposes */
    BSP_LED_On(LED_VLM);
 80031fa:	23a0      	movs	r3, #160	; 0xa0
 80031fc:	05db      	lsls	r3, r3, #23
 80031fe:	2201      	movs	r2, #1
 8003200:	2120      	movs	r1, #32
 8003202:	0018      	movs	r0, r3
 8003204:	f001 fe56 	bl	8004eb4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8003208:	b672      	cpsid	i
}
 800320a:	46c0      	nop			; (mov r8, r8)
  
  /* no stack operation can be performed during the test */  
	__disable_irq();
  
  /* WARNING: Stack is zero-initialized when exiting from this routine */
  if (STL_FullRamMarchC(RAM_START, RAM_END, BCKGRND) != SUCCESS)
 800320c:	4979      	ldr	r1, [pc, #484]	; (80033f4 <STL_StartUp+0x3f8>)
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	059b      	lsls	r3, r3, #22
 8003212:	2200      	movs	r2, #0
 8003214:	0018      	movs	r0, r3
 8003216:	f000 fb45 	bl	80038a4 <STL_FullRamMarchC>
 800321a:	1e03      	subs	r3, r0, #0
 800321c:	d016      	beq.n	800324c <STL_StartUp+0x250>
  __ASM volatile ("cpsie i" : : : "memory");
 800321e:	b662      	cpsie	i
}
 8003220:	46c0      	nop			; (mov r8, r8)
  {
    #ifdef STL_VERBOSE_POR
      /* restore interrupt capability */
      __enable_irq();
      /* restore destroyed content of HAL structure for UART */
      UartHandle.Instance = USARTx;
 8003222:	4b6a      	ldr	r3, [pc, #424]	; (80033cc <STL_StartUp+0x3d0>)
 8003224:	4a74      	ldr	r2, [pc, #464]	; (80033f8 <STL_StartUp+0x3fc>)
 8003226:	601a      	str	r2, [r3, #0]
      UartHandle.ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	4b68      	ldr	r3, [pc, #416]	; (80033cc <STL_StartUp+0x3d0>)
 800322a:	2280      	movs	r2, #128	; 0x80
 800322c:	2100      	movs	r1, #0
 800322e:	5099      	str	r1, [r3, r2]
      __HAL_UART_RESET_HANDLE_STATE(&UartHandle);
 8003230:	4b66      	ldr	r3, [pc, #408]	; (80033cc <STL_StartUp+0x3d0>)
 8003232:	2200      	movs	r2, #0
 8003234:	679a      	str	r2, [r3, #120]	; 0x78
 8003236:	4b65      	ldr	r3, [pc, #404]	; (80033cc <STL_StartUp+0x3d0>)
 8003238:	2200      	movs	r2, #0
 800323a:	67da      	str	r2, [r3, #124]	; 0x7c

      #ifdef __GNUC__
      /* restore the data segment initializers from flash to SRAM (repeat  procedure from startup) */
        extern void Startup_Copy_Handler (void);
        Startup_Copy_Handler();
 800323c:	f001 f920 	bl	8004480 <Startup_Copy_Handler>
        printf("RAM Test Failure\n\r");
 8003240:	4b6e      	ldr	r3, [pc, #440]	; (80033fc <STL_StartUp+0x400>)
 8003242:	0018      	movs	r0, r3
 8003244:	f004 fc6e 	bl	8007b24 <iprintf>
      #ifdef __IAR_SYSTEMS_ICC__
        __iar_data_init3();
        printf("RAM Test Failure\n\r");
      #endif /* __IAR_SYSTEMS_ICC__ */
    #endif  /* STL_VERBOSE_POR */
    FailSafePOR();
 8003248:	f7ff febc 	bl	8002fc4 <FailSafePOR>
  __ASM volatile ("cpsie i" : : : "memory");
 800324c:	b662      	cpsie	i
}
 800324e:	46c0      	nop			; (mov r8, r8)
  }
  #ifdef STL_VERBOSE_POR
    /* restore interrupt capability */
    __enable_irq();
    /* restore destroyed content of HAL structure for UART */
    UartHandle.Instance = USARTx;
 8003250:	4b5e      	ldr	r3, [pc, #376]	; (80033cc <STL_StartUp+0x3d0>)
 8003252:	4a69      	ldr	r2, [pc, #420]	; (80033f8 <STL_StartUp+0x3fc>)
 8003254:	601a      	str	r2, [r3, #0]
    UartHandle.ErrorCode = HAL_UART_ERROR_NONE;
 8003256:	4b5d      	ldr	r3, [pc, #372]	; (80033cc <STL_StartUp+0x3d0>)
 8003258:	2280      	movs	r2, #128	; 0x80
 800325a:	2100      	movs	r1, #0
 800325c:	5099      	str	r1, [r3, r2]
    __HAL_UART_RESET_HANDLE_STATE(&UartHandle);
 800325e:	4b5b      	ldr	r3, [pc, #364]	; (80033cc <STL_StartUp+0x3d0>)
 8003260:	2200      	movs	r2, #0
 8003262:	679a      	str	r2, [r3, #120]	; 0x78
 8003264:	4b59      	ldr	r3, [pc, #356]	; (80033cc <STL_StartUp+0x3d0>)
 8003266:	2200      	movs	r2, #0
 8003268:	67da      	str	r2, [r3, #124]	; 0x7c
    
    /* restore the data segment initializers from flash to SRAM (repeat procedure from IAR & GCC startup) */
    #ifdef __GNUC__
      extern void Startup_Copy_Handler (void);
      Startup_Copy_Handler();
 800326a:	f001 f909 	bl	8004480 <Startup_Copy_Handler>
      printf(" Full RAM Test OK\n\r");
 800326e:	4b64      	ldr	r3, [pc, #400]	; (8003400 <STL_StartUp+0x404>)
 8003270:	0018      	movs	r0, r3
 8003272:	f004 fc57 	bl	8007b24 <iprintf>
  __ASM volatile ("cpsie i" : : : "memory");
 8003276:	b662      	cpsie	i
}
 8003278:	46c0      	nop			; (mov r8, r8)
  /* restore interrupt capability */
  __enable_irq();
  
  /* Initialization of counters for control flow monitoring 
     (destroyed during RAM test) */
  init_control_flow();
 800327a:	4b50      	ldr	r3, [pc, #320]	; (80033bc <STL_StartUp+0x3c0>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	4b4e      	ldr	r3, [pc, #312]	; (80033bc <STL_StartUp+0x3c0>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	43da      	mvns	r2, r3
 8003286:	4b4e      	ldr	r3, [pc, #312]	; (80033c0 <STL_StartUp+0x3c4>)
 8003288:	601a      	str	r2, [r3, #0]

      /* LED_VLM Off for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_Off(LED_VLM);
    #endif /* __IAR_SYSTEMS_ICC__ */
    #ifdef __GNUC__  /* GCC Compiler */
      Startup_Copy_Handler();
 800328a:	f001 f8f9 	bl	8004480 <Startup_Copy_Handler>
      /* LED_VLM Off for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_Off(LED_VLM);
 800328e:	23a0      	movs	r3, #160	; 0xa0
 8003290:	05db      	lsls	r3, r3, #23
 8003292:	2200      	movs	r2, #0
 8003294:	2120      	movs	r1, #32
 8003296:	0018      	movs	r0, r3
 8003298:	f001 fe0c 	bl	8004eb4 <HAL_GPIO_WritePin>


  /*--------------------------------------------------------------------------*/
  /*------------- Store reference 32-bit CRC in RAM after RAM test -----------*/
  /*--------------------------------------------------------------------------*/
  control_flow_call(CRC_STORE_CALLER);
 800329c:	4b47      	ldr	r3, [pc, #284]	; (80033bc <STL_StartUp+0x3c0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3313      	adds	r3, #19
 80032a2:	001a      	movs	r2, r3
 80032a4:	4b45      	ldr	r3, [pc, #276]	; (80033bc <STL_StartUp+0x3c0>)
 80032a6:	601a      	str	r2, [r3, #0]
  
  /* restore destroyed content of HAL structure for CRC */
  CrcHandle.Instance = CRC;
 80032a8:	4b4b      	ldr	r3, [pc, #300]	; (80033d8 <STL_StartUp+0x3dc>)
 80032aa:	4a4c      	ldr	r2, [pc, #304]	; (80033dc <STL_StartUp+0x3e0>)
 80032ac:	601a      	str	r2, [r3, #0]
  CrcHandle.State= HAL_CRC_STATE_READY;
 80032ae:	4b4a      	ldr	r3, [pc, #296]	; (80033d8 <STL_StartUp+0x3dc>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	775a      	strb	r2, [r3, #29]
  #ifdef  CRC_UNIT_CONFIGURABLE
    CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_ENABLE;
 80032b4:	4b48      	ldr	r3, [pc, #288]	; (80033d8 <STL_StartUp+0x3dc>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	711a      	strb	r2, [r3, #4]
    CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_ENABLE;
 80032ba:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <STL_StartUp+0x3dc>)
 80032bc:	2200      	movs	r2, #0
 80032be:	715a      	strb	r2, [r3, #5]
    CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 80032c0:	4b45      	ldr	r3, [pc, #276]	; (80033d8 <STL_StartUp+0x3dc>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	615a      	str	r2, [r3, #20]
    CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLED;
 80032c6:	4b44      	ldr	r3, [pc, #272]	; (80033d8 <STL_StartUp+0x3dc>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	619a      	str	r2, [r3, #24]
    CrcHandle.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 80032cc:	4b42      	ldr	r3, [pc, #264]	; (80033d8 <STL_StartUp+0x3dc>)
 80032ce:	2203      	movs	r2, #3
 80032d0:	621a      	str	r2, [r3, #32]
  #endif
  
  /* read and store content of CRC calculation result */
  RefCrc32 = HAL_CRC_Accumulate(&CrcHandle, 0u, 0u);  
 80032d2:	4b41      	ldr	r3, [pc, #260]	; (80033d8 <STL_StartUp+0x3dc>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	2100      	movs	r1, #0
 80032d8:	0018      	movs	r0, r3
 80032da:	f001 faf8 	bl	80048ce <HAL_CRC_Accumulate>
 80032de:	0002      	movs	r2, r0
 80032e0:	4b48      	ldr	r3, [pc, #288]	; (8003404 <STL_StartUp+0x408>)
 80032e2:	601a      	str	r2, [r3, #0]
  RefCrc32Inv = ~RefCrc32;
 80032e4:	4b47      	ldr	r3, [pc, #284]	; (8003404 <STL_StartUp+0x408>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	43da      	mvns	r2, r3
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <STL_StartUp+0x40c>)
 80032ec:	601a      	str	r2, [r3, #0]
  
  control_flow_resume(CRC_STORE_CALLER);  
 80032ee:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <STL_StartUp+0x3c4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3b13      	subs	r3, #19
 80032f4:	001a      	movs	r2, r3
 80032f6:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <STL_StartUp+0x3c4>)
 80032f8:	601a      	str	r2, [r3, #0]
      /* LED_NVM On for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_On(LED_NVM);
    #endif /* __IAR_SYSTEMS_ICC__ */
    #ifdef __GNUC__  /* GCC Compiler */
      /* LED_VLM On for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_On(LED_NVM);
 80032fa:	23a0      	movs	r3, #160	; 0xa0
 80032fc:	05db      	lsls	r3, r3, #23
 80032fe:	2201      	movs	r2, #1
 8003300:	2140      	movs	r1, #64	; 0x40
 8003302:	0018      	movs	r0, r3
 8003304:	f001 fdd6 	bl	8004eb4 <HAL_GPIO_WritePin>
    #endif /* __GNUC__ */
  #endif /* STL_EVAL_MODE */
    
  #ifdef STL_VERBOSE_POR
    /* finish communication flow prior system clock change */
    while (HAL_UART_GetState(&UartHandle) == HAL_UART_STATE_BUSY_TX)
 8003308:	46c0      	nop			; (mov r8, r8)
 800330a:	4b30      	ldr	r3, [pc, #192]	; (80033cc <STL_StartUp+0x3d0>)
 800330c:	0018      	movs	r0, r3
 800330e:	f003 fae5 	bl	80068dc <HAL_UART_GetState>
 8003312:	0003      	movs	r3, r0
 8003314:	2b21      	cmp	r3, #33	; 0x21
 8003316:	d0f8      	beq.n	800330a <STL_StartUp+0x30e>
    { }
  #endif /* STL_VERBOSE_POR */
  
  control_flow_call(CLOCK_TEST_CALLER);
 8003318:	4b28      	ldr	r3, [pc, #160]	; (80033bc <STL_StartUp+0x3c0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3317      	adds	r3, #23
 800331e:	001a      	movs	r2, r3
 8003320:	4b26      	ldr	r3, [pc, #152]	; (80033bc <STL_StartUp+0x3c0>)
 8003322:	601a      	str	r2, [r3, #0]
  
  /* test LSI & HSE clock systems */
  clk_sts = STL_ClockStartUpTest();
 8003324:	250f      	movs	r5, #15
 8003326:	197c      	adds	r4, r7, r5
 8003328:	f7ff fa74 	bl	8002814 <STL_ClockStartUpTest>
 800332c:	0003      	movs	r3, r0
 800332e:	7023      	strb	r3, [r4, #0]
  
  #ifdef STL_VERBOSE_POR
    /* Re-init communication channel with modified clock setting */
    UartHandle.Instance        = USARTx;
 8003330:	4b26      	ldr	r3, [pc, #152]	; (80033cc <STL_StartUp+0x3d0>)
 8003332:	4a31      	ldr	r2, [pc, #196]	; (80033f8 <STL_StartUp+0x3fc>)
 8003334:	601a      	str	r2, [r3, #0]
    HAL_UART_DeInit(&UartHandle);
 8003336:	4b25      	ldr	r3, [pc, #148]	; (80033cc <STL_StartUp+0x3d0>)
 8003338:	0018      	movs	r0, r3
 800333a:	f003 f9dd 	bl	80066f8 <HAL_UART_DeInit>
    
    UartHandle.Init.BaudRate   = 115200;
 800333e:	4b23      	ldr	r3, [pc, #140]	; (80033cc <STL_StartUp+0x3d0>)
 8003340:	22e1      	movs	r2, #225	; 0xe1
 8003342:	0252      	lsls	r2, r2, #9
 8003344:	605a      	str	r2, [r3, #4]
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8003346:	4b21      	ldr	r3, [pc, #132]	; (80033cc <STL_StartUp+0x3d0>)
 8003348:	2200      	movs	r2, #0
 800334a:	609a      	str	r2, [r3, #8]
    UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800334c:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <STL_StartUp+0x3d0>)
 800334e:	2200      	movs	r2, #0
 8003350:	60da      	str	r2, [r3, #12]
    UartHandle.Init.Parity     = UART_PARITY_NONE;
 8003352:	4b1e      	ldr	r3, [pc, #120]	; (80033cc <STL_StartUp+0x3d0>)
 8003354:	2200      	movs	r2, #0
 8003356:	611a      	str	r2, [r3, #16]
    UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8003358:	4b1c      	ldr	r3, [pc, #112]	; (80033cc <STL_StartUp+0x3d0>)
 800335a:	2200      	movs	r2, #0
 800335c:	619a      	str	r2, [r3, #24]
    UartHandle.Init.Mode       = UART_MODE_TX;
 800335e:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <STL_StartUp+0x3d0>)
 8003360:	2208      	movs	r2, #8
 8003362:	615a      	str	r2, [r3, #20]
    HAL_UART_Init(&UartHandle);
 8003364:	4b19      	ldr	r3, [pc, #100]	; (80033cc <STL_StartUp+0x3d0>)
 8003366:	0018      	movs	r0, r3
 8003368:	f003 f972 	bl	8006650 <HAL_UART_Init>
    /* print out the test result */
    switch(clk_sts)
 800336c:	197b      	adds	r3, r7, r5
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b0a      	cmp	r3, #10
 8003372:	d85c      	bhi.n	800342e <STL_StartUp+0x432>
 8003374:	009a      	lsls	r2, r3, #2
 8003376:	4b25      	ldr	r3, [pc, #148]	; (800340c <STL_StartUp+0x410>)
 8003378:	18d3      	adds	r3, r2, r3
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	469f      	mov	pc, r3
    {
      case LSI_START_FAIL:
        printf("LSI start-up failure \n\r");
 800337e:	4b24      	ldr	r3, [pc, #144]	; (8003410 <STL_StartUp+0x414>)
 8003380:	0018      	movs	r0, r3
 8003382:	f004 fbcf 	bl	8007b24 <iprintf>
        break;
 8003386:	e056      	b.n	8003436 <STL_StartUp+0x43a>
  
      case HSE_START_FAIL:
        printf("HSE start-up failure \n\r");
 8003388:	4b22      	ldr	r3, [pc, #136]	; (8003414 <STL_StartUp+0x418>)
 800338a:	0018      	movs	r0, r3
 800338c:	f004 fbca 	bl	8007b24 <iprintf>
        break;
 8003390:	e051      	b.n	8003436 <STL_StartUp+0x43a>
  
      case HSI_HSE_SWITCH_FAIL:
      case HSE_HSI_SWITCH_FAIL:
      case PLL_OFF_FAIL:
        printf("Clock switch failure \n\r");
 8003392:	4b21      	ldr	r3, [pc, #132]	; (8003418 <STL_StartUp+0x41c>)
 8003394:	0018      	movs	r0, r3
 8003396:	f004 fbc5 	bl	8007b24 <iprintf>
        break;
 800339a:	e04c      	b.n	8003436 <STL_StartUp+0x43a>
  
      case XCROSS_CONFIG_FAIL:
        printf("Clock Xcross measurement failure \n\r");
 800339c:	4b1f      	ldr	r3, [pc, #124]	; (800341c <STL_StartUp+0x420>)
 800339e:	0018      	movs	r0, r3
 80033a0:	f004 fbc0 	bl	8007b24 <iprintf>
        break;
 80033a4:	e047      	b.n	8003436 <STL_StartUp+0x43a>
  
      case EXT_SOURCE_FAIL:
        printf("HSE clock found out of range\n\r");
 80033a6:	4b1e      	ldr	r3, [pc, #120]	; (8003420 <STL_StartUp+0x424>)
 80033a8:	0018      	movs	r0, r3
 80033aa:	f004 fbbb 	bl	8007b24 <iprintf>
        break;
 80033ae:	e042      	b.n	8003436 <STL_StartUp+0x43a>
 80033b0:	20000060 	.word	0x20000060
 80033b4:	2000003c 	.word	0x2000003c
 80033b8:	0800a1a8 	.word	0x0800a1a8
 80033bc:	20000030 	.word	0x20000030
 80033c0:	20000054 	.word	0x20000054
 80033c4:	0800a1d8 	.word	0x0800a1d8
 80033c8:	0800a1f4 	.word	0x0800a1f4
 80033cc:	20000278 	.word	0x20000278
 80033d0:	0800a20c 	.word	0x0800a20c
 80033d4:	40021000 	.word	0x40021000
 80033d8:	2000036c 	.word	0x2000036c
 80033dc:	40023000 	.word	0x40023000
 80033e0:	0800ad80 	.word	0x0800ad80
 80033e4:	0800a24c 	.word	0x0800a24c
 80033e8:	0800a274 	.word	0x0800a274
 80033ec:	0800a294 	.word	0x0800a294
 80033f0:	0800a2b8 	.word	0x0800a2b8
 80033f4:	20001fff 	.word	0x20001fff
 80033f8:	40004400 	.word	0x40004400
 80033fc:	0800a2dc 	.word	0x0800a2dc
 8003400:	0800a2f0 	.word	0x0800a2f0
 8003404:	20000050 	.word	0x20000050
 8003408:	20000074 	.word	0x20000074
 800340c:	0800a714 	.word	0x0800a714
 8003410:	0800a304 	.word	0x0800a304
 8003414:	0800a31c 	.word	0x0800a31c
 8003418:	0800a334 	.word	0x0800a334
 800341c:	0800a34c 	.word	0x0800a34c
 8003420:	0800a370 	.word	0x0800a370
        
      case FREQ_OK:
        printf(" Clock frequency OK \n\r");
 8003424:	4b2c      	ldr	r3, [pc, #176]	; (80034d8 <STL_StartUp+0x4dc>)
 8003426:	0018      	movs	r0, r3
 8003428:	f004 fb7c 	bl	8007b24 <iprintf>
        break;
 800342c:	e003      	b.n	8003436 <STL_StartUp+0x43a>
        
      default:
        printf("Abnormal exit from clock test\n\r");
 800342e:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <STL_StartUp+0x4e0>)
 8003430:	0018      	movs	r0, r3
 8003432:	f004 fb77 	bl	8007b24 <iprintf>
    }
  #endif /* STL_VERBOSE_POR */
  
  if(clk_sts != FREQ_OK)
 8003436:	230f      	movs	r3, #15
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b0a      	cmp	r3, #10
 800343e:	d001      	beq.n	8003444 <STL_StartUp+0x448>
  {
      FailSafePOR();
 8003440:	f7ff fdc0 	bl	8002fc4 <FailSafePOR>
  }
    
  control_flow_resume(CLOCK_TEST_CALLER);  
 8003444:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <STL_StartUp+0x4e4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3b17      	subs	r3, #23
 800344a:	001a      	movs	r2, r3
 800344c:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <STL_StartUp+0x4e4>)
 800344e:	601a      	str	r2, [r3, #0]
      /* LED_NVM Off for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_Off(LED_NVM);
    #endif /* __IAR_SYSTEMS_ICC__ */
    #ifdef __GNUC__  /* GCC Compiler */
      /* LED_NVM Off for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_Off(LED_NVM);
 8003450:	23a0      	movs	r3, #160	; 0xa0
 8003452:	05db      	lsls	r3, r3, #23
 8003454:	2200      	movs	r2, #0
 8003456:	2140      	movs	r1, #64	; 0x40
 8003458:	0018      	movs	r0, r3
 800345a:	f001 fd2b 	bl	8004eb4 <HAL_GPIO_WritePin>

  /*--------------------------------------------------------------------------*/
  /* --------------- Initialize stack overflow pattern ---------------------- */
  /*--------------------------------------------------------------------------*/

  control_flow_call(STACK_OVERFLOW_TEST);
 800345e:	4b21      	ldr	r3, [pc, #132]	; (80034e4 <STL_StartUp+0x4e8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3335      	adds	r3, #53	; 0x35
 8003464:	001a      	movs	r2, r3
 8003466:	4b1f      	ldr	r3, [pc, #124]	; (80034e4 <STL_StartUp+0x4e8>)
 8003468:	601a      	str	r2, [r3, #0]
  
  aStackOverFlowPtrn[0] = 0xEEEEEEEEuL;
 800346a:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <STL_StartUp+0x4ec>)
 800346c:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <STL_StartUp+0x4f0>)
 800346e:	601a      	str	r2, [r3, #0]
  aStackOverFlowPtrn[1] = 0xCCCCCCCCuL;
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <STL_StartUp+0x4ec>)
 8003472:	4a1f      	ldr	r2, [pc, #124]	; (80034f0 <STL_StartUp+0x4f4>)
 8003474:	605a      	str	r2, [r3, #4]
  aStackOverFlowPtrn[2] = 0xBBBBBBBBuL;
 8003476:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <STL_StartUp+0x4ec>)
 8003478:	4a1e      	ldr	r2, [pc, #120]	; (80034f4 <STL_StartUp+0x4f8>)
 800347a:	609a      	str	r2, [r3, #8]
  aStackOverFlowPtrn[3] = 0xDDDDDDDDuL;
 800347c:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <STL_StartUp+0x4ec>)
 800347e:	4a1e      	ldr	r2, [pc, #120]	; (80034f8 <STL_StartUp+0x4fc>)
 8003480:	60da      	str	r2, [r3, #12]
  
  control_flow_resume(STACK_OVERFLOW_TEST);  
 8003482:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <STL_StartUp+0x4e4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3b35      	subs	r3, #53	; 0x35
 8003488:	001a      	movs	r2, r3
 800348a:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <STL_StartUp+0x4e4>)
 800348c:	601a      	str	r2, [r3, #0]

  /*--------------------------------------------------------------------------*/
  /* -----  Verify Control flow before Starting main program execution ------ */
  /*--------------------------------------------------------------------------*/
   
  if (control_flow_check_point(CHECKPOINT2) == ERROR)
 800348e:	207c      	movs	r0, #124	; 0x7c
 8003490:	f000 f972 	bl	8003778 <control_flow_check_point>
 8003494:	0003      	movs	r3, r0
 8003496:	2b01      	cmp	r3, #1
 8003498:	d105      	bne.n	80034a6 <STL_StartUp+0x4aa>
  {
     #ifdef STL_VERBOSE_POR
       printf("Control Flow Error Checkpoint 2\n\r");
 800349a:	4b18      	ldr	r3, [pc, #96]	; (80034fc <STL_StartUp+0x500>)
 800349c:	0018      	movs	r0, r3
 800349e:	f004 fb41 	bl	8007b24 <iprintf>
     #endif  /* STL_VERBOSE_POR */
     FailSafePOR();
 80034a2:	f7ff fd8f 	bl	8002fc4 <FailSafePOR>
   }
   #ifdef STL_VERBOSE_POR
    printf(" Control Flow Checkpoint 2 OK \n\r");
 80034a6:	4b16      	ldr	r3, [pc, #88]	; (8003500 <STL_StartUp+0x504>)
 80034a8:	0018      	movs	r0, r3
 80034aa:	f004 fb3b 	bl	8007b24 <iprintf>
  
    /* finish communication flow prior system clock change */
    while (HAL_UART_GetState(&UartHandle) == HAL_UART_STATE_BUSY_TX)
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	4b14      	ldr	r3, [pc, #80]	; (8003504 <STL_StartUp+0x508>)
 80034b2:	0018      	movs	r0, r3
 80034b4:	f003 fa12 	bl	80068dc <HAL_UART_GetState>
 80034b8:	0003      	movs	r3, r0
 80034ba:	2b21      	cmp	r3, #33	; 0x21
 80034bc:	d0f8      	beq.n	80034b0 <STL_StartUp+0x4b4>
    { }
   #endif  /* STL_VERBOSE_POR */
     
   /* startup test completed successfully - restart the application */
   GotoCompilerStartUp();
 80034be:	f000 ffdf 	bl	8004480 <Startup_Copy_Handler>
 80034c2:	f000 fefb 	bl	80042bc <SystemInit>
 80034c6:	f003 fe93 	bl	80071f0 <__libc_init_array>
 80034ca:	f7fe ff17 	bl	80022fc <main>
}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b006      	add	sp, #24
 80034d4:	bdb0      	pop	{r4, r5, r7, pc}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	0800a390 	.word	0x0800a390
 80034dc:	0800a3a8 	.word	0x0800a3a8
 80034e0:	20000054 	.word	0x20000054
 80034e4:	20000030 	.word	0x20000030
 80034e8:	200007b0 	.word	0x200007b0
 80034ec:	eeeeeeee 	.word	0xeeeeeeee
 80034f0:	cccccccc 	.word	0xcccccccc
 80034f4:	bbbbbbbb 	.word	0xbbbbbbbb
 80034f8:	dddddddd 	.word	0xdddddddd
 80034fc:	0800a3c8 	.word	0x0800a3c8
 8003500:	0800a3ec 	.word	0x0800a3ec
 8003504:	20000278 	.word	0x20000278

08003508 <STL_WDGSelfTest>:
  * @brief  Verifies the watchdog by forcing watchdog resets
  * @param  : None
  * @retval : None
  */
void STL_WDGSelfTest(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_suppress=Pm026
  #endif /* __IAR_SYSTEMS_ICC__ */

  #ifdef STL_VERBOSE_POR  
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)  != RESET) printf("Pin reset \r\n");
 800350c:	4b88      	ldr	r3, [pc, #544]	; (8003730 <STL_WDGSelfTest+0x228>)
 800350e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003510:	2380      	movs	r3, #128	; 0x80
 8003512:	04db      	lsls	r3, r3, #19
 8003514:	4013      	ands	r3, r2
 8003516:	d003      	beq.n	8003520 <STL_WDGSelfTest+0x18>
 8003518:	4b86      	ldr	r3, [pc, #536]	; (8003734 <STL_WDGSelfTest+0x22c>)
 800351a:	0018      	movs	r0, r3
 800351c:	f004 fb8e 	bl	8007c3c <puts>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)  != RESET) printf("POR reset \r\n");
 8003520:	4b83      	ldr	r3, [pc, #524]	; (8003730 <STL_WDGSelfTest+0x228>)
 8003522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	051b      	lsls	r3, r3, #20
 8003528:	4013      	ands	r3, r2
 800352a:	d003      	beq.n	8003534 <STL_WDGSelfTest+0x2c>
 800352c:	4b82      	ldr	r3, [pc, #520]	; (8003738 <STL_WDGSelfTest+0x230>)
 800352e:	0018      	movs	r0, r3
 8003530:	f004 fb84 	bl	8007c3c <puts>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)  != RESET) printf("SW reset \r\n");
 8003534:	4b7e      	ldr	r3, [pc, #504]	; (8003730 <STL_WDGSelfTest+0x228>)
 8003536:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	055b      	lsls	r3, r3, #21
 800353c:	4013      	ands	r3, r2
 800353e:	d003      	beq.n	8003548 <STL_WDGSelfTest+0x40>
 8003540:	4b7e      	ldr	r3, [pc, #504]	; (800373c <STL_WDGSelfTest+0x234>)
 8003542:	0018      	movs	r0, r3
 8003544:	f004 fb7a 	bl	8007c3c <puts>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) printf("IWDG reset \r\n");
 8003548:	4b79      	ldr	r3, [pc, #484]	; (8003730 <STL_WDGSelfTest+0x228>)
 800354a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	059b      	lsls	r3, r3, #22
 8003550:	4013      	ands	r3, r2
 8003552:	d003      	beq.n	800355c <STL_WDGSelfTest+0x54>
 8003554:	4b7a      	ldr	r3, [pc, #488]	; (8003740 <STL_WDGSelfTest+0x238>)
 8003556:	0018      	movs	r0, r3
 8003558:	f004 fb70 	bl	8007c3c <puts>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET) printf("WWDG reset \r\n");
 800355c:	4b74      	ldr	r3, [pc, #464]	; (8003730 <STL_WDGSelfTest+0x228>)
 800355e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	05db      	lsls	r3, r3, #23
 8003564:	4013      	ands	r3, r2
 8003566:	d003      	beq.n	8003570 <STL_WDGSelfTest+0x68>
 8003568:	4b76      	ldr	r3, [pc, #472]	; (8003744 <STL_WDGSelfTest+0x23c>)
 800356a:	0018      	movs	r0, r3
 800356c:	f004 fb66 	bl	8007c3c <puts>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET) printf("LP reset \r\n");
 8003570:	4b6f      	ldr	r3, [pc, #444]	; (8003730 <STL_WDGSelfTest+0x228>)
 8003572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003574:	2b00      	cmp	r3, #0
 8003576:	da03      	bge.n	8003580 <STL_WDGSelfTest+0x78>
 8003578:	4b73      	ldr	r3, [pc, #460]	; (8003748 <STL_WDGSelfTest+0x240>)
 800357a:	0018      	movs	r0, r3
 800357c:	f004 fb5e 	bl	8007c3c <puts>
  #endif /* STL_VERBOSE_POR */

  /* start watchdogs test if one of the 4 conditions below is valid */
  if ( (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)\
 8003580:	4b6b      	ldr	r3, [pc, #428]	; (8003730 <STL_WDGSelfTest+0x228>)
 8003582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	051b      	lsls	r3, r3, #20
 8003588:	4013      	ands	r3, r2
 800358a:	d11b      	bne.n	80035c4 <STL_WDGSelfTest+0xbc>
   ||  (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET)\
 800358c:	4b68      	ldr	r3, [pc, #416]	; (8003730 <STL_WDGSelfTest+0x228>)
 800358e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	055b      	lsls	r3, r3, #21
 8003594:	4013      	ands	r3, r2
 8003596:	d115      	bne.n	80035c4 <STL_WDGSelfTest+0xbc>
   ||  (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET)\
 8003598:	4b65      	ldr	r3, [pc, #404]	; (8003730 <STL_WDGSelfTest+0x228>)
 800359a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359c:	2b00      	cmp	r3, #0
 800359e:	db11      	blt.n	80035c4 <STL_WDGSelfTest+0xbc>
   || ((__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == RESET)))
 80035a0:	4b63      	ldr	r3, [pc, #396]	; (8003730 <STL_WDGSelfTest+0x228>)
 80035a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	04db      	lsls	r3, r3, #19
 80035a8:	4013      	ands	r3, r2
 80035aa:	d035      	beq.n	8003618 <STL_WDGSelfTest+0x110>
 80035ac:	4b60      	ldr	r3, [pc, #384]	; (8003730 <STL_WDGSelfTest+0x228>)
 80035ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	059b      	lsls	r3, r3, #22
 80035b4:	4013      	ands	r3, r2
 80035b6:	d12f      	bne.n	8003618 <STL_WDGSelfTest+0x110>
 80035b8:	4b5d      	ldr	r3, [pc, #372]	; (8003730 <STL_WDGSelfTest+0x228>)
 80035ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	05db      	lsls	r3, r3, #23
 80035c0:	4013      	ands	r3, r2
 80035c2:	d129      	bne.n	8003618 <STL_WDGSelfTest+0x110>
  {
    #ifdef STL_VERBOSE_POR
      printf("... Power-on or software reset, testing IWDG ... \r\n");
 80035c4:	4b61      	ldr	r3, [pc, #388]	; (800374c <STL_WDGSelfTest+0x244>)
 80035c6:	0018      	movs	r0, r3
 80035c8:	f004 fb38 	bl	8007c3c <puts>
    #endif  /* STL_VERBOSE_POR */

    #if defined(STL_EVAL_MODE)
      /* IWDG at debug mode */
      __DBGMCU_CLK_ENABLE();
 80035cc:	4b58      	ldr	r3, [pc, #352]	; (8003730 <STL_WDGSelfTest+0x228>)
 80035ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d0:	4b57      	ldr	r3, [pc, #348]	; (8003730 <STL_WDGSelfTest+0x228>)
 80035d2:	2180      	movs	r1, #128	; 0x80
 80035d4:	03c9      	lsls	r1, r1, #15
 80035d6:	430a      	orrs	r2, r1
 80035d8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_FREEZE_IWDG_DBGMCU();
 80035da:	4b5d      	ldr	r3, [pc, #372]	; (8003750 <STL_WDGSelfTest+0x248>)
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	4b5c      	ldr	r3, [pc, #368]	; (8003750 <STL_WDGSelfTest+0x248>)
 80035e0:	2180      	movs	r1, #128	; 0x80
 80035e2:	0149      	lsls	r1, r1, #5
 80035e4:	430a      	orrs	r2, r1
 80035e6:	609a      	str	r2, [r3, #8]
    #endif  /* STL_EVAL_MODE */

    /* Clear all flags before resuming test */
    __HAL_RCC_CLEAR_FLAG();
 80035e8:	4b51      	ldr	r3, [pc, #324]	; (8003730 <STL_WDGSelfTest+0x228>)
 80035ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035ec:	4b50      	ldr	r3, [pc, #320]	; (8003730 <STL_WDGSelfTest+0x228>)
 80035ee:	2180      	movs	r1, #128	; 0x80
 80035f0:	0409      	lsls	r1, r1, #16
 80035f2:	430a      	orrs	r2, r1
 80035f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Setup IWDG to minimum period */
    IwdgHandle.Instance = IWDG;
 80035f6:	4b57      	ldr	r3, [pc, #348]	; (8003754 <STL_WDGSelfTest+0x24c>)
 80035f8:	4a57      	ldr	r2, [pc, #348]	; (8003758 <STL_WDGSelfTest+0x250>)
 80035fa:	601a      	str	r2, [r3, #0]
    IwdgHandle.Init.Prescaler = IWDG_PRESCALER_4;
 80035fc:	4b55      	ldr	r3, [pc, #340]	; (8003754 <STL_WDGSelfTest+0x24c>)
 80035fe:	2200      	movs	r2, #0
 8003600:	605a      	str	r2, [r3, #4]
    IwdgHandle.Init.Reload = 1U;
 8003602:	4b54      	ldr	r3, [pc, #336]	; (8003754 <STL_WDGSelfTest+0x24c>)
 8003604:	2201      	movs	r2, #1
 8003606:	609a      	str	r2, [r3, #8]
    #ifdef IWDG_FEATURES_BY_WINDOW_OPTION
      IwdgHandle.Init.Window = IWDG_WINDOW_DISABLE;
 8003608:	4b52      	ldr	r3, [pc, #328]	; (8003754 <STL_WDGSelfTest+0x24c>)
 800360a:	4a54      	ldr	r2, [pc, #336]	; (800375c <STL_WDGSelfTest+0x254>)
 800360c:	60da      	str	r2, [r3, #12]
    #endif /* IWDG_FEATURES_BY_WINDOW_OPTION */
    /* Initialization */
    HAL_IWDG_Init(&IwdgHandle);
 800360e:	4b51      	ldr	r3, [pc, #324]	; (8003754 <STL_WDGSelfTest+0x24c>)
 8003610:	0018      	movs	r0, r3
 8003612:	f001 fc87 	bl	8004f24 <HAL_IWDG_Init>

    /* Wait for an independent watchdog reset */
    while(1)
 8003616:	e7fe      	b.n	8003616 <STL_WDGSelfTest+0x10e>
    { }
  }
  else  /* Watchdog test or software reset triggered by application failure */
  {
    /* If WWDG only was set, re-start the complete test (indicates a reset triggered by safety routines */
    if ((__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)  != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET))
 8003618:	4b45      	ldr	r3, [pc, #276]	; (8003730 <STL_WDGSelfTest+0x228>)
 800361a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	04db      	lsls	r3, r3, #19
 8003620:	4013      	ands	r3, r2
 8003622:	d018      	beq.n	8003656 <STL_WDGSelfTest+0x14e>
 8003624:	4b42      	ldr	r3, [pc, #264]	; (8003730 <STL_WDGSelfTest+0x228>)
 8003626:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	059b      	lsls	r3, r3, #22
 800362c:	4013      	ands	r3, r2
 800362e:	d112      	bne.n	8003656 <STL_WDGSelfTest+0x14e>
 8003630:	4b3f      	ldr	r3, [pc, #252]	; (8003730 <STL_WDGSelfTest+0x228>)
 8003632:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	05db      	lsls	r3, r3, #23
 8003638:	4013      	ands	r3, r2
 800363a:	d00c      	beq.n	8003656 <STL_WDGSelfTest+0x14e>
    {
      __HAL_RCC_CLEAR_FLAG();
 800363c:	4b3c      	ldr	r3, [pc, #240]	; (8003730 <STL_WDGSelfTest+0x228>)
 800363e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003640:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <STL_WDGSelfTest+0x228>)
 8003642:	2180      	movs	r1, #128	; 0x80
 8003644:	0409      	lsls	r1, r1, #16
 8003646:	430a      	orrs	r2, r1
 8003648:	651a      	str	r2, [r3, #80]	; 0x50
      #ifdef STL_VERBOSE_POR
        printf("... WWDG reset, re-start WDG test ... \r\n");
 800364a:	4b45      	ldr	r3, [pc, #276]	; (8003760 <STL_WDGSelfTest+0x258>)
 800364c:	0018      	movs	r0, r3
 800364e:	f004 faf5 	bl	8007c3c <puts>
      #endif  /* STL_VERBOSE_POR */
      NVIC_SystemReset();
 8003652:	f7ff fca5 	bl	8002fa0 <__NVIC_SystemReset>
    }
    else  /* If IWDG only was set, continue the test with WWDG test*/
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)  != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == RESET))
 8003656:	4b36      	ldr	r3, [pc, #216]	; (8003730 <STL_WDGSelfTest+0x228>)
 8003658:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800365a:	2380      	movs	r3, #128	; 0x80
 800365c:	04db      	lsls	r3, r3, #19
 800365e:	4013      	ands	r3, r2
 8003660:	d038      	beq.n	80036d4 <STL_WDGSelfTest+0x1cc>
 8003662:	4b33      	ldr	r3, [pc, #204]	; (8003730 <STL_WDGSelfTest+0x228>)
 8003664:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	059b      	lsls	r3, r3, #22
 800366a:	4013      	ands	r3, r2
 800366c:	d032      	beq.n	80036d4 <STL_WDGSelfTest+0x1cc>
 800366e:	4b30      	ldr	r3, [pc, #192]	; (8003730 <STL_WDGSelfTest+0x228>)
 8003670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	05db      	lsls	r3, r3, #23
 8003676:	4013      	ands	r3, r2
 8003678:	d12c      	bne.n	80036d4 <STL_WDGSelfTest+0x1cc>
      { /* If IWDG only was set, test WWDG*/
        #ifdef STL_VERBOSE_POR
          printf("... IWDG reset from test or application, testing WWDG\r\n");
 800367a:	4b3a      	ldr	r3, [pc, #232]	; (8003764 <STL_WDGSelfTest+0x25c>)
 800367c:	0018      	movs	r0, r3
 800367e:	f004 fadd 	bl	8007c3c <puts>
        #endif  /* STL_VERBOSE_POR */
          
        #if defined(STL_EVAL_MODE)
          /* WWDG at debug mode */
          __DBGMCU_CLK_ENABLE();
 8003682:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <STL_WDGSelfTest+0x228>)
 8003684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003686:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <STL_WDGSelfTest+0x228>)
 8003688:	2180      	movs	r1, #128	; 0x80
 800368a:	03c9      	lsls	r1, r1, #15
 800368c:	430a      	orrs	r2, r1
 800368e:	635a      	str	r2, [r3, #52]	; 0x34
          __HAL_FREEZE_WWDG_DBGMCU();
 8003690:	4b2f      	ldr	r3, [pc, #188]	; (8003750 <STL_WDGSelfTest+0x248>)
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <STL_WDGSelfTest+0x248>)
 8003696:	2180      	movs	r1, #128	; 0x80
 8003698:	0109      	lsls	r1, r1, #4
 800369a:	430a      	orrs	r2, r1
 800369c:	609a      	str	r2, [r3, #8]
        #endif  /* STL_EVAL_MODE */
          
         /* Setup WWDG to minimum period */
        __WWDG_CLK_ENABLE();
 800369e:	4b24      	ldr	r3, [pc, #144]	; (8003730 <STL_WDGSelfTest+0x228>)
 80036a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a2:	4b23      	ldr	r3, [pc, #140]	; (8003730 <STL_WDGSelfTest+0x228>)
 80036a4:	2180      	movs	r1, #128	; 0x80
 80036a6:	0109      	lsls	r1, r1, #4
 80036a8:	430a      	orrs	r2, r1
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38
        WwdgHandle.Instance = WWDG;
 80036ac:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <STL_WDGSelfTest+0x260>)
 80036ae:	4a2f      	ldr	r2, [pc, #188]	; (800376c <STL_WDGSelfTest+0x264>)
 80036b0:	601a      	str	r2, [r3, #0]
        WwdgHandle.Init.Prescaler = WWDG_PRESCALER_1;
 80036b2:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <STL_WDGSelfTest+0x260>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	605a      	str	r2, [r3, #4]
        WwdgHandle.Init.Counter = 64U;
 80036b8:	4b2b      	ldr	r3, [pc, #172]	; (8003768 <STL_WDGSelfTest+0x260>)
 80036ba:	2240      	movs	r2, #64	; 0x40
 80036bc:	60da      	str	r2, [r3, #12]
        WwdgHandle.Init.Window = 63U;
 80036be:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <STL_WDGSelfTest+0x260>)
 80036c0:	223f      	movs	r2, #63	; 0x3f
 80036c2:	609a      	str	r2, [r3, #8]
        WwdgHandle.Init.EWIMode = WWDG_EWI_DISABLE;
 80036c4:	4b28      	ldr	r3, [pc, #160]	; (8003768 <STL_WDGSelfTest+0x260>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
        HAL_WWDG_Init(&WwdgHandle);
 80036ca:	4b27      	ldr	r3, [pc, #156]	; (8003768 <STL_WDGSelfTest+0x260>)
 80036cc:	0018      	movs	r0, r3
 80036ce:	f003 fd5b 	bl	8007188 <HAL_WWDG_Init>

        while(1)
 80036d2:	e7fe      	b.n	80036d2 <STL_WDGSelfTest+0x1ca>
        { }
      }
      else  /* If both flags IWDG & WWDG flags are set, means that watchdog test is completed */
      {
        if ((__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)  != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET))
 80036d4:	4b16      	ldr	r3, [pc, #88]	; (8003730 <STL_WDGSelfTest+0x228>)
 80036d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	04db      	lsls	r3, r3, #19
 80036dc:	4013      	ands	r3, r2
 80036de:	d017      	beq.n	8003710 <STL_WDGSelfTest+0x208>
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <STL_WDGSelfTest+0x228>)
 80036e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	059b      	lsls	r3, r3, #22
 80036e8:	4013      	ands	r3, r2
 80036ea:	d011      	beq.n	8003710 <STL_WDGSelfTest+0x208>
 80036ec:	4b10      	ldr	r3, [pc, #64]	; (8003730 <STL_WDGSelfTest+0x228>)
 80036ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	05db      	lsls	r3, r3, #23
 80036f4:	4013      	ands	r3, r2
 80036f6:	d00b      	beq.n	8003710 <STL_WDGSelfTest+0x208>
        {
          __HAL_RCC_CLEAR_FLAG();
 80036f8:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <STL_WDGSelfTest+0x228>)
 80036fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <STL_WDGSelfTest+0x228>)
 80036fe:	2180      	movs	r1, #128	; 0x80
 8003700:	0409      	lsls	r1, r1, #16
 8003702:	430a      	orrs	r2, r1
 8003704:	651a      	str	r2, [r3, #80]	; 0x50
          #ifdef STL_VERBOSE_POR
            printf("... WWDG reset, WDG test completed ... \r\n");
 8003706:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <STL_WDGSelfTest+0x268>)
 8003708:	0018      	movs	r0, r3
 800370a:	f004 fa97 	bl	8007c3c <puts>

  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_default=Pm026
  #endif /* __IAR_SYSTEMS_ICC__ */
  /* ==============================================================================*/
}
 800370e:	e00c      	b.n	800372a <STL_WDGSelfTest+0x222>
          __HAL_RCC_CLEAR_FLAG();
 8003710:	4b07      	ldr	r3, [pc, #28]	; (8003730 <STL_WDGSelfTest+0x228>)
 8003712:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <STL_WDGSelfTest+0x228>)
 8003716:	2180      	movs	r1, #128	; 0x80
 8003718:	0409      	lsls	r1, r1, #16
 800371a:	430a      	orrs	r2, r1
 800371c:	651a      	str	r2, [r3, #80]	; 0x50
            printf("...Unexpected Flag configuration, re-start WDG test... \r\n");
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <STL_WDGSelfTest+0x26c>)
 8003720:	0018      	movs	r0, r3
 8003722:	f004 fa8b 	bl	8007c3c <puts>
        NVIC_SystemReset();
 8003726:	f7ff fc3b 	bl	8002fa0 <__NVIC_SystemReset>
}
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	40021000 	.word	0x40021000
 8003734:	0800a410 	.word	0x0800a410
 8003738:	0800a41c 	.word	0x0800a41c
 800373c:	0800a428 	.word	0x0800a428
 8003740:	0800a434 	.word	0x0800a434
 8003744:	0800a444 	.word	0x0800a444
 8003748:	0800a454 	.word	0x0800a454
 800374c:	0800a460 	.word	0x0800a460
 8003750:	40015800 	.word	0x40015800
 8003754:	20000348 	.word	0x20000348
 8003758:	40003000 	.word	0x40003000
 800375c:	00000fff 	.word	0x00000fff
 8003760:	0800a494 	.word	0x0800a494
 8003764:	0800a4bc 	.word	0x0800a4bc
 8003768:	20000358 	.word	0x20000358
 800376c:	40002c00 	.word	0x40002c00
 8003770:	0800a4f4 	.word	0x0800a4f4
 8003774:	0800a520 	.word	0x0800a520

08003778 <control_flow_check_point>:
  * @brief  Verifies the consistency and value of control flow counters
  * @param  : check value of the positive counter
  * @retval : ErrorStatus (SUCCESS, ERROR)
  */
ErrorStatus control_flow_check_point(uint32_t chck)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  ErrorStatus Result= SUCCESS;
 8003780:	210f      	movs	r1, #15
 8003782:	187b      	adds	r3, r7, r1
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
  
//  if ((CtrlFlowCnt != (chck)) || ((CtrlFlowCnt ^ CtrlFlowCntInv) != 0xFFFFFFFFuL))
//  {
//    Result= ERROR;
//  }
  return(Result);
 8003788:	187b      	adds	r3, r7, r1
 800378a:	781b      	ldrb	r3, [r3, #0]
}
 800378c:	0018      	movs	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	b004      	add	sp, #16
 8003792:	bd80      	pop	{r7, pc}

08003794 <STL_TranspMarchInit>:
  *   transparent functional test.
  * @param  : None
  * @retval : None
  */
void STL_TranspMarchInit(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* start address of the test has to be aligned to 16 address range */	  
   pRunTimeRamChk = (uint32_t *)((uint32_t)CLASS_B_START & 0xFFFFFFFCuL);
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <STL_TranspMarchInit+0x1c>)
 800379a:	4a06      	ldr	r2, [pc, #24]	; (80037b4 <STL_TranspMarchInit+0x20>)
 800379c:	601a      	str	r2, [r3, #0]
   pRunTimeRamChkInv = (uint32_t *)(uint32_t)(~(uint32_t)pRunTimeRamChk);
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <STL_TranspMarchInit+0x1c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	001a      	movs	r2, r3
 80037a6:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <STL_TranspMarchInit+0x24>)
 80037a8:	601a      	str	r2, [r3, #0]
}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000020 	.word	0x20000020
 80037b4:	20000030 	.word	0x20000030
 80037b8:	20000024 	.word	0x20000024

080037bc <STL_TranspMarch>:
  * @param  : None
  * @retval : ClassBTestStatus (TEST_RUNNING, CLASS_B_DATA_FAIL,
  *   TEST_FAILURE, TEST_OK)
  */
ClassBTestStatus STL_TranspMarch(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
  ClassBTestStatus result = TEST_RUNNING;
 80037c2:	1dfb      	adds	r3, r7, #7
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
  
  /* Check Class B var integrity */
  if ((((uint32_t)pRunTimeRamChk) ^ ((uint32_t)pRunTimeRamChkInv)) == 0xFFFFFFFFuL)
 80037c8:	4b23      	ldr	r3, [pc, #140]	; (8003858 <STL_TranspMarch+0x9c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	001a      	movs	r2, r3
 80037ce:	4b23      	ldr	r3, [pc, #140]	; (800385c <STL_TranspMarch+0xa0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4053      	eors	r3, r2
 80037d4:	3301      	adds	r3, #1
 80037d6:	d136      	bne.n	8003846 <STL_TranspMarch+0x8a>
  {
    if (pRunTimeRamChk >= CLASS_B_END)
 80037d8:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <STL_TranspMarch+0x9c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a20      	ldr	r2, [pc, #128]	; (8003860 <STL_TranspMarch+0xa4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d916      	bls.n	8003810 <STL_TranspMarch+0x54>
    {
      /*------------- March test applied on the RAM Buffer itself --------------- */
      if (STL_TranspRamMarchCXStep(&aRunTimeRamBuf[0], &aRunTimeRamBuf[0], BCKGRND) == MARCH_STEP_SUCCESS)         
 80037e2:	4920      	ldr	r1, [pc, #128]	; (8003864 <STL_TranspMarch+0xa8>)
 80037e4:	4b1f      	ldr	r3, [pc, #124]	; (8003864 <STL_TranspMarch+0xa8>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 f8c7 	bl	800397c <STL_TranspRamMarchCXStep>
 80037ee:	0003      	movs	r3, r0
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d103      	bne.n	80037fc <STL_TranspMarch+0x40>
      {
        /* All the RAM test is completed successfully */
        result = TEST_OK;
 80037f4:	1dfb      	adds	r3, r7, #7
 80037f6:	2204      	movs	r2, #4
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	e002      	b.n	8003802 <STL_TranspMarch+0x46>
      }
      else  /* Buffer is not functional */
      {
        result = TEST_FAILURE;
 80037fc:	1dfb      	adds	r3, r7, #7
 80037fe:	2203      	movs	r2, #3
 8003800:	701a      	strb	r2, [r3, #0]
      }
      /* Init next cycle of the transparent RAM test starting from the begin of the Class B area */
      pRunTimeRamChk = CLASS_B_START;
 8003802:	4b15      	ldr	r3, [pc, #84]	; (8003858 <STL_TranspMarch+0x9c>)
 8003804:	4a18      	ldr	r2, [pc, #96]	; (8003868 <STL_TranspMarch+0xac>)
 8003806:	601a      	str	r2, [r3, #0]
      pRunTimeRamChkInv = ((uint32_t *)~((uint32_t)CLASS_B_START));
 8003808:	4b14      	ldr	r3, [pc, #80]	; (800385c <STL_TranspMarch+0xa0>)
 800380a:	4a18      	ldr	r2, [pc, #96]	; (800386c <STL_TranspMarch+0xb0>)
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e01d      	b.n	800384c <STL_TranspMarch+0x90>
    }
    else
    { /* ------------- March test applied on Class B data area ------------------ */
      /* !!! Application has to ensure that no write or read operation
               is performed within Class B RAM area during this test !!!      */
      if (STL_TranspRamMarchCXStep(pRunTimeRamChk, &aRunTimeRamBuf[1], BCKGRND) == MARCH_STEP_SUCCESS)         
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <STL_TranspMarch+0x9c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4916      	ldr	r1, [pc, #88]	; (8003870 <STL_TranspMarch+0xb4>)
 8003816:	2200      	movs	r2, #0
 8003818:	0018      	movs	r0, r3
 800381a:	f000 f8af 	bl	800397c <STL_TranspRamMarchCXStep>
 800381e:	0003      	movs	r3, r0
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10c      	bne.n	800383e <STL_TranspMarch+0x82>
      {
        /* Prepare next Row Transparent RAM test */
        pRunTimeRamChk += RT_RAM_BLOCKSIZE - (2u * RT_RAM_BLOCK_OVERLAP);
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <STL_TranspMarch+0x9c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3310      	adds	r3, #16
 800382a:	001a      	movs	r2, r3
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <STL_TranspMarch+0x9c>)
 800382e:	601a      	str	r2, [r3, #0]
        pRunTimeRamChkInv = (uint32_t *)(uint32_t)(~(uint32_t)pRunTimeRamChk);
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <STL_TranspMarch+0x9c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	43db      	mvns	r3, r3
 8003836:	001a      	movs	r2, r3
 8003838:	4b08      	ldr	r3, [pc, #32]	; (800385c <STL_TranspMarch+0xa0>)
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	e006      	b.n	800384c <STL_TranspMarch+0x90>
      }
      else
      {
        result = TEST_FAILURE;  /* Word line under test was not functional */
 800383e:	1dfb      	adds	r3, r7, #7
 8003840:	2203      	movs	r2, #3
 8003842:	701a      	strb	r2, [r3, #0]
 8003844:	e002      	b.n	800384c <STL_TranspMarch+0x90>
      }
    }
  }
  else  /* Class B error on pRunTimeRamChk */
  {
    result = CLASS_B_DATA_FAIL;
 8003846:	1dfb      	adds	r3, r7, #7
 8003848:	2201      	movs	r2, #1
 800384a:	701a      	strb	r2, [r3, #0]
  }
  return (result);  
 800384c:	1dfb      	adds	r3, r7, #7
 800384e:	781b      	ldrb	r3, [r3, #0]
}
 8003850:	0018      	movs	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	b002      	add	sp, #8
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20000020 	.word	0x20000020
 800385c:	20000024 	.word	0x20000024
 8003860:	2000007a 	.word	0x2000007a
 8003864:	20000000 	.word	0x20000000
 8003868:	20000030 	.word	0x20000030
 800386c:	dfffffcf 	.word	0xdfffffcf
 8003870:	20000004 	.word	0x20000004
	...

08003880 <__ARTISAN_RAM_ORDER>:
 8003880:	fffffff8 00000000 00000004 0000000c     ................
 8003890:	00000008 00000010 00000014 0000001c     ................
 80038a0:	00000018                                ....

080038a4 <STL_FullRamMarchC>:
  .section  .text.STL_FullRamMarchC
  .type  STL_FullRamMarchC, %function
  .size  STL_FullRamMarchC, .-STL_FullRamMarchC

STL_FullRamMarchC:
  MOVS  R4, #0x1       /* Test success status by default */
 80038a4:	2401      	movs	r4, #1
  
  MOVS  R3,R2          /* setup inverted background pattern */
 80038a6:	0013      	movs	r3, r2
  RSBS  R3, R3, #0
 80038a8:	425b      	negs	r3, r3
  SUBS  R3,R3, #1
 80038aa:	3b01      	subs	r3, #1
  
/* *** Step 1 *** */
/* Write background pattern with addresses increasing */
  MOVS  R5,R0
 80038ac:	0005      	movs	r5, r0

080038ae <__FULL1_LOOP>:
__FULL1_LOOP:
  CMP   R5,R1
 80038ae:	428d      	cmp	r5, r1
  BHI   __FULLSTEP_2
 80038b0:	d802      	bhi.n	80038b8 <__FULLSTEP_2>
  STR   R2,[R5, #+0]
 80038b2:	602a      	str	r2, [r5, #0]
  ADDS  R5,R5,#+4
 80038b4:	3504      	adds	r5, #4
  B     __FULL1_LOOP
 80038b6:	e7fa      	b.n	80038ae <__FULL1_LOOP>

080038b8 <__FULLSTEP_2>:
    
/* *** Step 2 *** */
/* Verify background and write inverted background with addresses increasing */
__FULLSTEP_2:
  MOVS  R5,R0
 80038b8:	0005      	movs	r5, r0

080038ba <__FULL2_LOOP>:
__FULL2_LOOP:
  CMP   R5,R1
 80038ba:	428d      	cmp	r5, r1
  BHI   __FULLSTEP_3
 80038bc:	d811      	bhi.n	80038e2 <__FULLSTEP_3>
  LDR   R6,[R5,#+0]
 80038be:	682e      	ldr	r6, [r5, #0]
  CMP   R6,R2
 80038c0:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 80038c2:	d157      	bne.n	8003974 <__FULL_ERR>
  STR   R3,[R5,#+0]
 80038c4:	602b      	str	r3, [r5, #0]
  LDR   R6,[R5,#+4]
 80038c6:	686e      	ldr	r6, [r5, #4]
  CMP   R6,R2
 80038c8:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 80038ca:	d153      	bne.n	8003974 <__FULL_ERR>
  STR   R3,[R5,#+4]
 80038cc:	606b      	str	r3, [r5, #4]
#ifdef ARTISAN
  LDR   R6,[R5,#+12]
 80038ce:	68ee      	ldr	r6, [r5, #12]
  CMP   R6,R2
 80038d0:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 80038d2:	d14f      	bne.n	8003974 <__FULL_ERR>
  STR   R3,[R5,#+12]
 80038d4:	60eb      	str	r3, [r5, #12]
  LDR   R6,[R5,#+8]
 80038d6:	68ae      	ldr	r6, [r5, #8]
  CMP   R6,R2
 80038d8:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 80038da:	d14b      	bne.n	8003974 <__FULL_ERR>
  STR   R3,[R5,#+8]
 80038dc:	60ab      	str	r3, [r5, #8]
  LDR   R6,[R5,#+12]
  CMP   R6,R2
  BNE   __FULL_ERR
  STR   R3,[R5,#+12]
 #endif /* ARTISAN */
  ADDS  R5,R5,#+16
 80038de:	3510      	adds	r5, #16
  B     __FULL2_LOOP
 80038e0:	e7eb      	b.n	80038ba <__FULL2_LOOP>

080038e2 <__FULLSTEP_3>:
  
/* *** Step 3 *** */
/* Verify inverted background and write background with addresses increasing   */
__FULLSTEP_3:
  MOVS  R5,R0
 80038e2:	0005      	movs	r5, r0

080038e4 <__FULL3_LOOP>:
__FULL3_LOOP:
  CMP   R5,R1
 80038e4:	428d      	cmp	r5, r1
  BHI   __FULLSTEP_4  
 80038e6:	d811      	bhi.n	800390c <__FULLSTEP_4>
  LDR   R6,[R5,#+0]
 80038e8:	682e      	ldr	r6, [r5, #0]
  CMP   R6,R3
 80038ea:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 80038ec:	d142      	bne.n	8003974 <__FULL_ERR>
  STR   R2,[R5,#+0]
 80038ee:	602a      	str	r2, [r5, #0]
  LDR   R6,[R5,#+4]
 80038f0:	686e      	ldr	r6, [r5, #4]
  CMP   R6,R3
 80038f2:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 80038f4:	d13e      	bne.n	8003974 <__FULL_ERR>
  STR   R2,[R5,#+4]
 80038f6:	606a      	str	r2, [r5, #4]
#ifdef ARTISAN
  LDR   R6,[R5,#+12]
 80038f8:	68ee      	ldr	r6, [r5, #12]
  CMP   R6,R3
 80038fa:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 80038fc:	d13a      	bne.n	8003974 <__FULL_ERR>
  STR   R2,[R5,#+12]
 80038fe:	60ea      	str	r2, [r5, #12]
  LDR   R6,[R5,#+8]
 8003900:	68ae      	ldr	r6, [r5, #8]
  CMP   R6,R3
 8003902:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 8003904:	d136      	bne.n	8003974 <__FULL_ERR>
  STR   R2,[R5,#+8]
 8003906:	60aa      	str	r2, [r5, #8]
  LDR   R6,[R5,#+12]
  CMP   R6,R3
  BNE   __FULL_ERR
  STR   R2,[R5,#+12]
#endif /* ARTISAN */
  ADDS  R5,R5,#+16
 8003908:	3510      	adds	r5, #16
  B     __FULL3_LOOP
 800390a:	e7eb      	b.n	80038e4 <__FULL3_LOOP>

0800390c <__FULLSTEP_4>:

/* *** Step 4 *** */
/* Verify background and write inverted background with addresses decreasing */
__FULLSTEP_4:
  MOVS  R5,R1
 800390c:	000d      	movs	r5, r1
  SUBS  R5,R5,#+15
 800390e:	3d0f      	subs	r5, #15

08003910 <__FULL4_LOOP>:
__FULL4_LOOP:
  CMP   R5,R0
 8003910:	4285      	cmp	r5, r0
  BLO   __FULLSTEP_5
 8003912:	d311      	bcc.n	8003938 <__FULLSTEP_5>
#ifdef ARTISAN
  LDR   R6,[R5,#+8]
 8003914:	68ae      	ldr	r6, [r5, #8]
  CMP   R6,R2
 8003916:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 8003918:	d12c      	bne.n	8003974 <__FULL_ERR>
  STR   R3,[R5,#+8]
 800391a:	60ab      	str	r3, [r5, #8]
  LDR   R6,[R5,#+12]
 800391c:	68ee      	ldr	r6, [r5, #12]
  CMP   R6,R2
 800391e:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 8003920:	d128      	bne.n	8003974 <__FULL_ERR>
  STR   R3,[R5,#+12]
 8003922:	60eb      	str	r3, [r5, #12]
  LDR   R6,[R5,#+8]
  CMP   R6,R2
  BNE   __FULL_ERR
  STR   R3,[R5,#+8]
 #endif /* ARTISAN */
  LDR   R6,[R5,#+4]
 8003924:	686e      	ldr	r6, [r5, #4]
  CMP   R6,R2
 8003926:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 8003928:	d124      	bne.n	8003974 <__FULL_ERR>
  STR   R3,[R5,#+4]
 800392a:	606b      	str	r3, [r5, #4]
  LDR   R6,[R5,#+0]
 800392c:	682e      	ldr	r6, [r5, #0]
  CMP   R6,R2
 800392e:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 8003930:	d120      	bne.n	8003974 <__FULL_ERR>
  STR   R3,[R5,#+0]
 8003932:	602b      	str	r3, [r5, #0]
  SUBS  R5,R5,#+16
 8003934:	3d10      	subs	r5, #16
  B     __FULL4_LOOP
 8003936:	e7eb      	b.n	8003910 <__FULL4_LOOP>

08003938 <__FULLSTEP_5>:
  
/* *** Step 5 *** */
/* Verify inverted background and write background with addresses decreasing */
__FULLSTEP_5:
  MOVS  R5,R1
 8003938:	000d      	movs	r5, r1
  SUBS  R5,R5,#+15
 800393a:	3d0f      	subs	r5, #15

0800393c <__FULL5_LOOP>:
__FULL5_LOOP:
  CMP   R5,R0
 800393c:	4285      	cmp	r5, r0
  BLO   __FULLSTEP_6
 800393e:	d311      	bcc.n	8003964 <__FULLSTEP_6>
#ifdef ARTISAN
  LDR   R6,[R5,#+8]
 8003940:	68ae      	ldr	r6, [r5, #8]
  CMP   R6,R3
 8003942:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 8003944:	d116      	bne.n	8003974 <__FULL_ERR>
  STR   R2,[R5,#+8]
 8003946:	60aa      	str	r2, [r5, #8]
  LDR   R6,[R5,#+12]
 8003948:	68ee      	ldr	r6, [r5, #12]
  CMP   R6,R3
 800394a:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 800394c:	d112      	bne.n	8003974 <__FULL_ERR>
  STR   R2,[R5,#+12]
 800394e:	60ea      	str	r2, [r5, #12]
  LDR   R6,[R5,#+8]
  CMP   R6,R3
  BNE   __FULL_ERR
  STR   R2,[R5,#+8]
 #endif /* ARTISAN */
  LDR   R6,[R5,#+4]
 8003950:	686e      	ldr	r6, [r5, #4]
  CMP   R6,R3
 8003952:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 8003954:	d10e      	bne.n	8003974 <__FULL_ERR>
  STR   R2,[R5,#+4]
 8003956:	606a      	str	r2, [r5, #4]
  LDR   R6,[R5,#+0]
 8003958:	682e      	ldr	r6, [r5, #0]
  CMP   R6,R3
 800395a:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 800395c:	d10a      	bne.n	8003974 <__FULL_ERR>
  STR   R2,[R5,#+0]
 800395e:	602a      	str	r2, [r5, #0]
  SUBS  R5,R5,#+16
 8003960:	3d10      	subs	r5, #16
  B     __FULL5_LOOP
 8003962:	e7eb      	b.n	800393c <__FULL5_LOOP>

08003964 <__FULLSTEP_6>:

/* *** Step 6 *** */
/* Verify background with addresses increasing */
__FULLSTEP_6:
  MOVS  R5,R0
 8003964:	0005      	movs	r5, r0

08003966 <__FULL6_LOOP>:
__FULL6_LOOP:
  CMP   R5,R1
 8003966:	428d      	cmp	r5, r1
  BHI   __FULL_RET
 8003968:	d805      	bhi.n	8003976 <__FULL_RET>
  LDR   R6,[R5,#+0]
 800396a:	682e      	ldr	r6, [r5, #0]
  CMP   R6,R2
 800396c:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 800396e:	d101      	bne.n	8003974 <__FULL_ERR>
  ADDS  R5,R5,#+4
 8003970:	3504      	adds	r5, #4
  B     __FULL6_LOOP
 8003972:	e7f8      	b.n	8003966 <__FULL6_LOOP>

08003974 <__FULL_ERR>:

__FULL_ERR:
  MOVS  R4,#0       /* error result */
 8003974:	2400      	movs	r4, #0

08003976 <__FULL_RET>:

__FULL_RET:
  MOVS  R0,R4
 8003976:	0020      	movs	r0, r4
  BX    LR          /* return to the caller */
 8003978:	4770      	bx	lr
	...

0800397c <STL_TranspRamMarchCXStep>:
  .section  .text.STL_TranspRamMarchCXStep
  .type  STL_TranspRamMarchCXStep, %function
  .size  STL_TranspRamMarchCXStep, .-STL_TranspRamMarchCXStep

STL_TranspRamMarchCXStep:
  PUSH  {R4-R7}
 800397c:	b4f0      	push	{r4, r5, r6, r7}

  LDR   R5,=ISRCtrlFlowCnt  /* Control flow control */
 800397e:	4d31      	ldr	r5, [pc, #196]	; (8003a44 <__STEP_RET+0x4>)
  LDR   R6,[R5]
 8003980:	682e      	ldr	r6, [r5, #0]
  ADDS  R6,R6,#11
 8003982:	360b      	adds	r6, #11
  STR   R6,[R5]
 8003984:	602e      	str	r6, [r5, #0]
  
  MOVS  R3,R2               /* setup inverted background pattern (R3) */
 8003986:	0013      	movs	r3, r2
  RSBS  R3, R3, #0
 8003988:	425b      	negs	r3, r3
  SUBS  R3,R3, #1  
 800398a:	3b01      	subs	r3, #1

#ifdef ARTISAN
  LDR   R4, =__ARTISAN_RAM_ORDER /* setup pointer to physical order of the addresses (R4) */
 800398c:	4c2e      	ldr	r4, [pc, #184]	; (8003a48 <__STEP_RET+0x8>)
#else
  LDR   R4, =__STANDARD_RAM_ORDER
#endif /* ARTISAN */

  MOVS  R5,R0       /* backup buffer to be tested? */
 800398e:	0005      	movs	r5, r0
  CMP   R5,R1
 8003990:	428d      	cmp	r5, r1
  BEQ   __BUFF_TEST
 8003992:	d02e      	beq.n	80039f2 <__BUFF_TEST>
  
/* ***************** test of the RAM slice ********************* */
  MOVS  R5, #0       /* NO - save content of the RAM slice into the backup buffer */
 8003994:	2500      	movs	r5, #0

08003996 <__SAVE_LOOP>:
__SAVE_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 8003996:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* load data from RAM */
 8003998:	5987      	ldr	r7, [r0, r6]
  ADDS  R5,R5,#4     /* original data are stored starting from second item of the buffer */
 800399a:	3504      	adds	r5, #4
  STR   R7,[R1, R5]  /* (first and last items are used for testing purpose exclusively) */
 800399c:	514f      	str	r7, [r1, r5]
  CMP   R5, #20
 800399e:	2d14      	cmp	r5, #20
  BLE   __SAVE_LOOP
 80039a0:	ddf9      	ble.n	8003996 <__SAVE_LOOP>
  
/* *** Step 1 *** */
/* Write background pattern with addresses increasing */
  MOVS  R5, #0
 80039a2:	2500      	movs	r5, #0

080039a4 <__STEP1_LOOP>:
__STEP1_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 80039a4:	5966      	ldr	r6, [r4, r5]
  STR   R2,[R0, R6]  /* store background pattern */
 80039a6:	5182      	str	r2, [r0, r6]
  ADDS  R5,R5,#4
 80039a8:	3504      	adds	r5, #4
  CMP   R5, #20
 80039aa:	2d14      	cmp	r5, #20
  BLE   __STEP1_LOOP
 80039ac:	ddfa      	ble.n	80039a4 <__STEP1_LOOP>
  
/* *** Step 2 *** */
/* Verify background and write inverted background with addresses increasing */
  MOVS  R5, #0
 80039ae:	2500      	movs	r5, #0

080039b0 <__STEP2_LOOP>:
__STEP2_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 80039b0:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify background pattern */
 80039b2:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R2
 80039b4:	4297      	cmp	r7, r2
  BNE   __STEP_ERR
 80039b6:	d142      	bne.n	8003a3e <__STEP_ERR>
  STR   R3,[R0, R6]  /* store inverted background pattern */
 80039b8:	5183      	str	r3, [r0, r6]
  ADDS  R5,R5,#4
 80039ba:	3504      	adds	r5, #4
  CMP   R5, #20
 80039bc:	2d14      	cmp	r5, #20
  BLE   __STEP2_LOOP
 80039be:	ddf7      	ble.n	80039b0 <__STEP2_LOOP>
  BHI   __STEP4_LOOP
#endif /* March-X  */
  
/* *** Step 5 *** */
/* Verify inverted background and write background with addresses decreasing  */
  MOVS  R5, #24
 80039c0:	2518      	movs	r5, #24

080039c2 <__STEP5_LOOP>:
__STEP5_LOOP:
  SUBS  R5,R5,#4
 80039c2:	3d04      	subs	r5, #4
  LDR   R6,[R4, R5]  /* load data offset */
 80039c4:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify inverted background pattern */
 80039c6:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R3
 80039c8:	429f      	cmp	r7, r3
  BNE   __STEP_ERR
 80039ca:	d138      	bne.n	8003a3e <__STEP_ERR>
  STR   R2,[R0, R6]  /* store background pattrern */
 80039cc:	5182      	str	r2, [r0, r6]
  CMP   R5, #0
 80039ce:	2d00      	cmp	r5, #0
  BHI   __STEP5_LOOP
 80039d0:	d8f7      	bhi.n	80039c2 <__STEP5_LOOP>

/* *** Step 6 *** */
/* Verify background with addresses increasing */
  MOVS  R5, #0
 80039d2:	2500      	movs	r5, #0

080039d4 <__STEP6_LOOP>:
__STEP6_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 80039d4:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify background pattern */
 80039d6:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R2
 80039d8:	4297      	cmp	r7, r2
  BNE   __STEP_ERR
 80039da:	d130      	bne.n	8003a3e <__STEP_ERR>
  ADDS  R5,R5,#4
 80039dc:	3504      	adds	r5, #4
  CMP   R5, #20
 80039de:	2d14      	cmp	r5, #20
  BLE   __STEP6_LOOP
 80039e0:	ddf8      	ble.n	80039d4 <__STEP6_LOOP>

  MOVS  R5, #24      /* restore content of the RAM slice back from the backup buffer */
 80039e2:	2518      	movs	r5, #24

080039e4 <__RESTORE_LOOP>:
__RESTORE_LOOP:
  LDR   R7,[R1, R5]  /* (first and last items are used for testing purpose exclusively) */
 80039e4:	594f      	ldr	r7, [r1, r5]
  SUBS  R5,R5,#4     /* original data are stored starting from second item of the buffer */
 80039e6:	3d04      	subs	r5, #4
  LDR   R6,[R4, R5]  /* load data offset */
 80039e8:	5966      	ldr	r6, [r4, r5]
  STR   R7,[R0, R6]  /* load data from RAM */
 80039ea:	5187      	str	r7, [r0, r6]
  CMP   R5, #0
 80039ec:	2d00      	cmp	r5, #0
  BHI   __RESTORE_LOOP
 80039ee:	d8f9      	bhi.n	80039e4 <__RESTORE_LOOP>
  
  B     __MARCH_RET
 80039f0:	e01f      	b.n	8003a32 <__MARCH_RET>

080039f2 <__BUFF_TEST>:

/* ************** test of the buffer itself ******************** */
__BUFF_TEST:
/* *** Step 1 ***  */
/* Write background pattern with addresses increasing */
  MOVS  R5, #4
 80039f2:	2504      	movs	r5, #4

080039f4 <__BUFF1_LOOP>:
__BUFF1_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 80039f4:	5966      	ldr	r6, [r4, r5]
  STR   R2,[R0, R6]  /* store background pattern */
 80039f6:	5182      	str	r2, [r0, r6]
  ADDS   R5,R5,#4
 80039f8:	3504      	adds	r5, #4
  CMP   R5, #32
 80039fa:	2d20      	cmp	r5, #32
  BLE   __BUFF1_LOOP
 80039fc:	ddfa      	ble.n	80039f4 <__BUFF1_LOOP>
  
/* *** Step 2 *** */
/* Verify background and write inverted background with addresses increasing */
  MOVS  R5, #4
 80039fe:	2504      	movs	r5, #4

08003a00 <__BUFF2_LOOP>:
__BUFF2_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 8003a00:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify background pattern */
 8003a02:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R2
 8003a04:	4297      	cmp	r7, r2
  BNE   __STEP_ERR
 8003a06:	d11a      	bne.n	8003a3e <__STEP_ERR>
  STR   R3,[R0, R6]  /* store inverted background pattern */
 8003a08:	5183      	str	r3, [r0, r6]
  ADDS  R5,R5,#4
 8003a0a:	3504      	adds	r5, #4
  CMP   R5, #32
 8003a0c:	2d20      	cmp	r5, #32
  BLE   __BUFF2_LOOP
 8003a0e:	ddf7      	ble.n	8003a00 <__BUFF2_LOOP>
  BHI   __BUFF4_LOOP
#endif /* March-X  */

/* *** Step 5 *** */
/* Verify inverted background and write background with addresses decreasing */
  MOVS  R5, #36
 8003a10:	2524      	movs	r5, #36	; 0x24

08003a12 <__BUFF5_LOOP>:
__BUFF5_LOOP:
  SUBS  R5,R5,#4
 8003a12:	3d04      	subs	r5, #4
  LDR   R6,[R4, R5]  /* load data offset  */
 8003a14:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify inverted background pattern */
 8003a16:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R3
 8003a18:	429f      	cmp	r7, r3
  BNE   __STEP_ERR
 8003a1a:	d110      	bne.n	8003a3e <__STEP_ERR>
  STR   R2,[R0, R6]  /* store background pattrern */
 8003a1c:	5182      	str	r2, [r0, r6]
  CMP   R5, #4
 8003a1e:	2d04      	cmp	r5, #4
  BHI   __BUFF5_LOOP
 8003a20:	d8f7      	bhi.n	8003a12 <__BUFF5_LOOP>

/* *** Step 6 *** */
/* Verify background with addresses increasing */
  MOVS  R5, #4
 8003a22:	2504      	movs	r5, #4

08003a24 <__BUFF6_LOOP>:
__BUFF6_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 8003a24:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify background pattern */
 8003a26:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R2
 8003a28:	4297      	cmp	r7, r2
  BNE   __STEP_ERR
 8003a2a:	d108      	bne.n	8003a3e <__STEP_ERR>
  ADDS  R5,R5,#4
 8003a2c:	3504      	adds	r5, #4
  CMP   R5, #32
 8003a2e:	2d20      	cmp	r5, #32
  BLE   __BUFF6_LOOP
 8003a30:	ddf8      	ble.n	8003a24 <__BUFF6_LOOP>

08003a32 <__MARCH_RET>:

__MARCH_RET:
  LDR   R4,=ISRCtrlFlowCntInv  /* Control flow control */
 8003a32:	4c06      	ldr	r4, [pc, #24]	; (8003a4c <__STEP_RET+0xc>)
  LDR   R5,[R4]
 8003a34:	6825      	ldr	r5, [r4, #0]
  SUBS  R5,R5,#11
 8003a36:	3d0b      	subs	r5, #11
  STR   R5,[R4]
 8003a38:	6025      	str	r5, [r4, #0]
  
  MOVS  R0, #1       /* Correct return */
 8003a3a:	2001      	movs	r0, #1
  B     __STEP_RET
 8003a3c:	e000      	b.n	8003a40 <__STEP_RET>

08003a3e <__STEP_ERR>:
  
__STEP_ERR:
  MOVS  R0, #0       /* error result */
 8003a3e:	2000      	movs	r0, #0

08003a40 <__STEP_RET>:
  
__STEP_RET:
  POP   {R4-R7}
 8003a40:	bcf0      	pop	{r4, r5, r6, r7}
  BX    LR           /* return to the caller */
 8003a42:	4770      	bx	lr
  LDR   R5,=ISRCtrlFlowCnt  /* Control flow control */
 8003a44:	20000034 	.word	0x20000034
  LDR   R4, =__ARTISAN_RAM_ORDER /* setup pointer to physical order of the addresses (R4) */
 8003a48:	08003880 	.word	0x08003880
  LDR   R4,=ISRCtrlFlowCntInv  /* Control flow control */
 8003a4c:	20000058 	.word	0x20000058

08003a50 <STL_RunTimeCPUTest>:
  .section  .text.STL_RunTimeCPUTest
  .type  STL_RunTimeCPUTest, %function
  .size  STL_RunTimeCPUTest, .-STL_RunTimeCPUTest

STL_RunTimeCPUTest:
    PUSH {R4-R7}       // Safe critical registers
 8003a50:	b4f0      	push	{r4, r5, r6, r7}

    MOV R4,R8
 8003a52:	4644      	mov	r4, r8

    MOV R5,R9
 8003a54:	464d      	mov	r5, r9

    MOV R6,R10
 8003a56:	4656      	mov	r6, sl

    MOV R7,R11
 8003a58:	465f      	mov	r7, fp

    PUSH {R4-R7}    //STMDB SP!, {R4, R5, R6, R7, R8, R9, R10, R11}
 8003a5a:	b4f0      	push	{r4, r5, r6, r7}
    //STMDB SP!, {R4-R11}
    /* PUSH {R4, R5, R6, R7, R8, R9, R10, R11} */
    //PUSH {R8-R11, !SP}
    /* This is for control flow test (ENTRY point) */
    LDR R0,=CtrlFlowCnt
 8003a5c:	485a      	ldr	r0, [pc, #360]	; (8003bc8 <CPUTstCont+0xac>)
    /* Assumes R1 OK   If not, error will be detected by R1 test and Ctrl flow test later on */
    LDR R1,[R0]
 8003a5e:	6801      	ldr	r1, [r0, #0]
    ADDS R1,R1,#0x3	    /* CtrlFlowCnt += OxO3 */
 8003a60:	3103      	adds	r1, #3
    STR R1,[R0]
 8003a62:	6001      	str	r1, [r0, #0]

    /* Register R1 */
    LDR R0, =conAA
 8003a64:	4859      	ldr	r0, [pc, #356]	; (8003bcc <CPUTstCont+0xb0>)
    LDR R1,[R0]
 8003a66:	6801      	ldr	r1, [r0, #0]
    LDR R0,[R0]
 8003a68:	6800      	ldr	r0, [r0, #0]
    CMP R0,R1
 8003a6a:	4288      	cmp	r0, r1
    BNE CPUTestFail
 8003a6c:	d154      	bne.n	8003b18 <CPUTestFail>
    LDR R0, =con55
 8003a6e:	4858      	ldr	r0, [pc, #352]	; (8003bd0 <CPUTstCont+0xb4>)
    LDR R1,[R0]
 8003a70:	6801      	ldr	r1, [r0, #0]
    LDR R0,[R0]
 8003a72:	6800      	ldr	r0, [r0, #0]
    CMP R0,R1
 8003a74:	4288      	cmp	r0, r1
    BNE CPUTestFail
 8003a76:	d14f      	bne.n	8003b18 <CPUTestFail>
    MOVS R1, #0x1        /* For ramp test */
 8003a78:	2101      	movs	r1, #1

    /* Register R2 */
    LDR R0, =conAA
 8003a7a:	4854      	ldr	r0, [pc, #336]	; (8003bcc <CPUTstCont+0xb0>)
    LDR R2,[R0]
 8003a7c:	6802      	ldr	r2, [r0, #0]
    LDR R0,[R0]
 8003a7e:	6800      	ldr	r0, [r0, #0]
    CMP R0,R2
 8003a80:	4290      	cmp	r0, r2
    BNE CPUTestFail
 8003a82:	d149      	bne.n	8003b18 <CPUTestFail>
    LDR R0, =con55
 8003a84:	4852      	ldr	r0, [pc, #328]	; (8003bd0 <CPUTstCont+0xb4>)
    LDR R2,[R0]
 8003a86:	6802      	ldr	r2, [r0, #0]
    LDR R0,[R0]
 8003a88:	6800      	ldr	r0, [r0, #0]
    CMP R0,R2
 8003a8a:	4290      	cmp	r0, r2
    BNE CPUTestFail
 8003a8c:	d144      	bne.n	8003b18 <CPUTestFail>
    MOVS R2, #0x2          /* For ramp test */
 8003a8e:	2202      	movs	r2, #2

    /* Register R3 */
    LDR R0, =conAA
 8003a90:	484e      	ldr	r0, [pc, #312]	; (8003bcc <CPUTstCont+0xb0>)
    LDR R3,[R0]
 8003a92:	6803      	ldr	r3, [r0, #0]
    LDR R0,[R0]
 8003a94:	6800      	ldr	r0, [r0, #0]
    CMP R0,R3
 8003a96:	4298      	cmp	r0, r3
    BNE CPUTestFail
 8003a98:	d13e      	bne.n	8003b18 <CPUTestFail>
    LDR R0, =con55
 8003a9a:	484d      	ldr	r0, [pc, #308]	; (8003bd0 <CPUTstCont+0xb4>)
    LDR R3,[R0]
 8003a9c:	6803      	ldr	r3, [r0, #0]
    LDR R0,[R0]
 8003a9e:	6800      	ldr	r0, [r0, #0]
    CMP R0,R3
 8003aa0:	4298      	cmp	r0, r3
    BNE CPUTestFail
 8003aa2:	d139      	bne.n	8003b18 <CPUTestFail>
    MOVS R3, #0x3          /* For ramp test */
 8003aa4:	2303      	movs	r3, #3

    /* Register R4 */
    LDR R0, =conAA
 8003aa6:	4849      	ldr	r0, [pc, #292]	; (8003bcc <CPUTstCont+0xb0>)
    LDR R4,[R0]
 8003aa8:	6804      	ldr	r4, [r0, #0]
    LDR R0,[R0]
 8003aaa:	6800      	ldr	r0, [r0, #0]
    CMP R0,R4
 8003aac:	42a0      	cmp	r0, r4
    BNE CPUTestFail
 8003aae:	d133      	bne.n	8003b18 <CPUTestFail>
    LDR R0, =con55
 8003ab0:	4847      	ldr	r0, [pc, #284]	; (8003bd0 <CPUTstCont+0xb4>)
    LDR R4,[R0]
 8003ab2:	6804      	ldr	r4, [r0, #0]
    LDR R0,[R0]
 8003ab4:	6800      	ldr	r0, [r0, #0]
    CMP R0,R4
 8003ab6:	42a0      	cmp	r0, r4
    BNE CPUTestFail
 8003ab8:	d12e      	bne.n	8003b18 <CPUTestFail>
    MOVS R4, #0x4           /* For ramp test */
 8003aba:	2404      	movs	r4, #4

    /* Register R5 */
    LDR R0, =conAA
 8003abc:	4843      	ldr	r0, [pc, #268]	; (8003bcc <CPUTstCont+0xb0>)
    LDR R5,[R0]
 8003abe:	6805      	ldr	r5, [r0, #0]
    LDR R0,[R0]
 8003ac0:	6800      	ldr	r0, [r0, #0]
    CMP R0,R5
 8003ac2:	42a8      	cmp	r0, r5
    BNE CPUTestFail
 8003ac4:	d128      	bne.n	8003b18 <CPUTestFail>
    LDR R0, =con55
 8003ac6:	4842      	ldr	r0, [pc, #264]	; (8003bd0 <CPUTstCont+0xb4>)
    LDR R5,[R0]
 8003ac8:	6805      	ldr	r5, [r0, #0]
    LDR R0,[R0]
 8003aca:	6800      	ldr	r0, [r0, #0]
    CMP R0,R5
 8003acc:	42a8      	cmp	r0, r5
    BNE CPUTestFail
 8003ace:	d123      	bne.n	8003b18 <CPUTestFail>
    MOVS R5, #0x5           /* For ramp test */
 8003ad0:	2505      	movs	r5, #5

    /* Register R6 */
    LDR R0, =conAA
 8003ad2:	483e      	ldr	r0, [pc, #248]	; (8003bcc <CPUTstCont+0xb0>)
    LDR R6,[R0]
 8003ad4:	6806      	ldr	r6, [r0, #0]
    LDR R0,[R0]
 8003ad6:	6800      	ldr	r0, [r0, #0]
    CMP R0,R6
 8003ad8:	42b0      	cmp	r0, r6
    BNE CPUTestFail
 8003ada:	d11d      	bne.n	8003b18 <CPUTestFail>
    LDR R0, =con55
 8003adc:	483c      	ldr	r0, [pc, #240]	; (8003bd0 <CPUTstCont+0xb4>)
    LDR R6,[R0]
 8003ade:	6806      	ldr	r6, [r0, #0]
    LDR R0,[R0]
 8003ae0:	6800      	ldr	r0, [r0, #0]
    CMP R0,R6
 8003ae2:	42b0      	cmp	r0, r6
    BNE CPUTestFail
 8003ae4:	d118      	bne.n	8003b18 <CPUTestFail>
    MOVS R6, #0x6            /* For ramp test */
 8003ae6:	2606      	movs	r6, #6

    /* Register R7 */
    LDR R0, =conAA
 8003ae8:	4838      	ldr	r0, [pc, #224]	; (8003bcc <CPUTstCont+0xb0>)
    LDR R7,[R0]
 8003aea:	6807      	ldr	r7, [r0, #0]
    LDR R0,[R0]
 8003aec:	6800      	ldr	r0, [r0, #0]
    CMP R0,R7
 8003aee:	42b8      	cmp	r0, r7
    BNE CPUTestFail
 8003af0:	d112      	bne.n	8003b18 <CPUTestFail>
    LDR R0, =con55
 8003af2:	4837      	ldr	r0, [pc, #220]	; (8003bd0 <CPUTstCont+0xb4>)
    LDR R7,[R0]
 8003af4:	6807      	ldr	r7, [r0, #0]
    LDR R0,[R0]
 8003af6:	6800      	ldr	r0, [r0, #0]
    CMP R0,R7
 8003af8:	42b8      	cmp	r0, r7
    BNE CPUTestFail
 8003afa:	d10d      	bne.n	8003b18 <CPUTestFail>
    MOVS R7, #0x7            /* For ramp test */
 8003afc:	2707      	movs	r7, #7

    /* Register R8 */
    LDR R0, =conAA
 8003afe:	4833      	ldr	r0, [pc, #204]	; (8003bcc <CPUTstCont+0xb0>)
    LDR R0,[R0]
 8003b00:	6800      	ldr	r0, [r0, #0]
    MOV R8,R0
 8003b02:	4680      	mov	r8, r0
    CMP R0,R8
 8003b04:	4540      	cmp	r0, r8
    BNE CPUTestFail
 8003b06:	d107      	bne.n	8003b18 <CPUTestFail>
    LDR R0, =con55
 8003b08:	4831      	ldr	r0, [pc, #196]	; (8003bd0 <CPUTstCont+0xb4>)
    LDR R0,[R0]
 8003b0a:	6800      	ldr	r0, [r0, #0]
    MOV R8,R0
 8003b0c:	4680      	mov	r8, r0
    CMP R0,R8
 8003b0e:	4540      	cmp	r0, r8
    BNE CPUTestFail
 8003b10:	d102      	bne.n	8003b18 <CPUTestFail>
    MOVS R0, #0x08           /* For ramp test */
 8003b12:	2008      	movs	r0, #8
    MOV	R8,R0
 8003b14:	4680      	mov	r8, r0

    BAL CPUTstCont
 8003b16:	e001      	b.n	8003b1c <CPUTstCont>

08003b18 <CPUTestFail>:

CPUTestFail:
    BLAL FailSafePOR
 8003b18:	f7ff fa54 	bl	8002fc4 <FailSafePOR>

08003b1c <CPUTstCont>:

CPUTstCont:
    /* Register R9 */
    LDR R0, =conAA
 8003b1c:	482b      	ldr	r0, [pc, #172]	; (8003bcc <CPUTstCont+0xb0>)
    LDR R0,[R0]
 8003b1e:	6800      	ldr	r0, [r0, #0]
    MOV R9,R0
 8003b20:	4681      	mov	r9, r0
    CMP R0,R9
 8003b22:	4548      	cmp	r0, r9
    BNE CPUTestFail
 8003b24:	d1f8      	bne.n	8003b18 <CPUTestFail>
    LDR R0, =con55
 8003b26:	482a      	ldr	r0, [pc, #168]	; (8003bd0 <CPUTstCont+0xb4>)
    LDR R0,[R0]
 8003b28:	6800      	ldr	r0, [r0, #0]
    MOV R9,R0
 8003b2a:	4681      	mov	r9, r0
    CMP R0,R9
 8003b2c:	4548      	cmp	r0, r9
    BNE CPUTestFail
 8003b2e:	d1f3      	bne.n	8003b18 <CPUTestFail>
    MOVS R0, #0x09            /* For ramp test */
 8003b30:	2009      	movs	r0, #9
    MOV	R9,R0
 8003b32:	4681      	mov	r9, r0

    /* Register R10 */
    LDR R0, =conAA
 8003b34:	4825      	ldr	r0, [pc, #148]	; (8003bcc <CPUTstCont+0xb0>)
    LDR R0,[R0]
 8003b36:	6800      	ldr	r0, [r0, #0]
    MOV R10,R0
 8003b38:	4682      	mov	sl, r0
    CMP R0,R10
 8003b3a:	4550      	cmp	r0, sl
    BNE CPUTestFail
 8003b3c:	d1ec      	bne.n	8003b18 <CPUTestFail>
    LDR R0, =con55
 8003b3e:	4824      	ldr	r0, [pc, #144]	; (8003bd0 <CPUTstCont+0xb4>)
    LDR R0,[R0]
 8003b40:	6800      	ldr	r0, [r0, #0]
    MOV R10,R0
 8003b42:	4682      	mov	sl, r0
    CMP R0,R10
 8003b44:	4550      	cmp	r0, sl
    BNE CPUTestFail
 8003b46:	d1e7      	bne.n	8003b18 <CPUTestFail>
    MOVS R0, #0x0A           /* For ramp test */
 8003b48:	200a      	movs	r0, #10
    MOV	R10,R0
 8003b4a:	4682      	mov	sl, r0

    /* Register R11 */
    LDR R0, =conAA
 8003b4c:	481f      	ldr	r0, [pc, #124]	; (8003bcc <CPUTstCont+0xb0>)
    LDR R0,[R0]
 8003b4e:	6800      	ldr	r0, [r0, #0]
    MOV R11,R0
 8003b50:	4683      	mov	fp, r0
    CMP R0,R11
 8003b52:	4558      	cmp	r0, fp
    BNE CPUTestFail
 8003b54:	d1e0      	bne.n	8003b18 <CPUTestFail>
    LDR R0, =con55
 8003b56:	481e      	ldr	r0, [pc, #120]	; (8003bd0 <CPUTstCont+0xb4>)
    LDR R0,[R0]
 8003b58:	6800      	ldr	r0, [r0, #0]
    MOV R11,R0
 8003b5a:	4683      	mov	fp, r0
    CMP R0,R11
 8003b5c:	4558      	cmp	r0, fp
    BNE CPUTestFail
 8003b5e:	d1db      	bne.n	8003b18 <CPUTestFail>
    MOVS R0, #0x0B           /* For ramp test */
 8003b60:	200b      	movs	r0, #11
    MOV	R11,R0
 8003b62:	4683      	mov	fp, r0

    /* Register R12 */
    LDR R0, =conAA
 8003b64:	4819      	ldr	r0, [pc, #100]	; (8003bcc <CPUTstCont+0xb0>)
    LDR R0,[R0]
 8003b66:	6800      	ldr	r0, [r0, #0]
    MOV R12,R0
 8003b68:	4684      	mov	ip, r0
    CMP R0,R12
 8003b6a:	4560      	cmp	r0, ip
    BNE CPUTestFail
 8003b6c:	d1d4      	bne.n	8003b18 <CPUTestFail>
    LDR R0, =con55
 8003b6e:	4818      	ldr	r0, [pc, #96]	; (8003bd0 <CPUTstCont+0xb4>)
    LDR R0,[R0]
 8003b70:	6800      	ldr	r0, [r0, #0]
    MOV R12,R0
 8003b72:	4684      	mov	ip, r0
    CMP R0,R12
 8003b74:	4560      	cmp	r0, ip
    BNE CPUTestFail
 8003b76:	d1cf      	bne.n	8003b18 <CPUTestFail>
    MOVS R0, #0x0C            /* For ramp test */
 8003b78:	200c      	movs	r0, #12
    MOV	R12,R0
 8003b7a:	4684      	mov	ip, r0
    LDR R0, =CPUTstCont
 8003b7c:	4815      	ldr	r0, [pc, #84]	; (8003bd4 <CPUTstCont+0xb8>)

    /* Link register R14	cannot be tested an error should be detected by	Ctrl flow test later */

    /* Ramp pattern verification	(R0 is not tested) */
    CMP R1, #0x01
 8003b7e:	2901      	cmp	r1, #1
    BNE CPUTestFail
 8003b80:	d1ca      	bne.n	8003b18 <CPUTestFail>
    CMP R2, #0x02
 8003b82:	2a02      	cmp	r2, #2
    BNE CPUTestFail
 8003b84:	d1c8      	bne.n	8003b18 <CPUTestFail>
    CMP R3, #0x03
 8003b86:	2b03      	cmp	r3, #3
    BNE CPUTestFail
 8003b88:	d1c6      	bne.n	8003b18 <CPUTestFail>
    CMP R4, #0x04
 8003b8a:	2c04      	cmp	r4, #4
    BNE CPUTestFail
 8003b8c:	d1c4      	bne.n	8003b18 <CPUTestFail>
    CMP R5, #0x05
 8003b8e:	2d05      	cmp	r5, #5
    BNE CPUTestFail
 8003b90:	d1c2      	bne.n	8003b18 <CPUTestFail>
    CMP R6, #0x06
 8003b92:	2e06      	cmp	r6, #6
    BNE CPUTestFail
 8003b94:	d1c0      	bne.n	8003b18 <CPUTestFail>
    CMP R7, #0x07
 8003b96:	2f07      	cmp	r7, #7
    BNE CPUTestFail
 8003b98:	d1be      	bne.n	8003b18 <CPUTestFail>
    MOVS R0, #0x08
 8003b9a:	2008      	movs	r0, #8
    CMP R0,R8
 8003b9c:	4540      	cmp	r0, r8
    BNE CPUTestFail
 8003b9e:	d1bb      	bne.n	8003b18 <CPUTestFail>
    MOVS R0, #0x09
 8003ba0:	2009      	movs	r0, #9
    CMP R0,R9
 8003ba2:	4548      	cmp	r0, r9
    BNE CPUTestFail
 8003ba4:	d1b8      	bne.n	8003b18 <CPUTestFail>
    MOVS R0, #0x0A
 8003ba6:	200a      	movs	r0, #10
    CMP R0,R10
 8003ba8:	4550      	cmp	r0, sl
    BNE CPUTestFail
 8003baa:	d1b5      	bne.n	8003b18 <CPUTestFail>
    MOVS R0, #0x0B
 8003bac:	200b      	movs	r0, #11
    CMP R0,R11
 8003bae:	4558      	cmp	r0, fp
    BNE CPUTestFail
 8003bb0:	d1b2      	bne.n	8003b18 <CPUTestFail>
    MOVS R0, #0x0C
 8003bb2:	200c      	movs	r0, #12
    CMP R0,R12
 8003bb4:	4560      	cmp	r0, ip
    BNE CPUTestFail
 8003bb6:	d1af      	bne.n	8003b18 <CPUTestFail>

    /* Control flow test (EXIT point) */
    LDR R0,=CtrlFlowCntInv
 8003bb8:	4807      	ldr	r0, [pc, #28]	; (8003bd8 <CPUTstCont+0xbc>)
    LDR R1,[R0]
 8003bba:	6801      	ldr	r1, [r0, #0]
    SUBS R1,R1,#0x3	    /* CtrlFlowCntInv -= OxO3 */
 8003bbc:	3903      	subs	r1, #3
    STR R1,[R0]
 8003bbe:	6001      	str	r1, [r0, #0]

    POP {R4-R7}         /* Restore registers */
 8003bc0:	bcf0      	pop	{r4, r5, r6, r7}

    MOVS R0, #0x1       /* CPUTEST_SUCCESS */
 8003bc2:	2001      	movs	r0, #1

    /*LDMIA SP!, {R4, R5, R6, R7, R8, R9, R10, R11} */
    /* POP {R4, R5, R6, R7, R8, R9, R10, R11} */
    //POP {R8-R11}
    BX LR               /* return to the caller */
 8003bc4:	4770      	bx	lr
 8003bc6:	0000      	.short	0x0000
    LDR R0,=CtrlFlowCnt
 8003bc8:	20000030 	.word	0x20000030
    LDR R0, =conAA
 8003bcc:	08003be0 	.word	0x08003be0
    LDR R0, =con55
 8003bd0:	08003be4 	.word	0x08003be4
    LDR R0, =CPUTstCont
 8003bd4:	08003b1c 	.word	0x08003b1c
    LDR R0,=CtrlFlowCntInv
 8003bd8:	20000054 	.word	0x20000054
 8003bdc:	00000000 	.word	0x00000000

08003be0 <__TEST_PATTERNS>:
 8003be0:	aaaaaaaa                                ....

08003be4 <con55>:
 8003be4:	55555555 	.word	0x55555555

08003be8 <con80>:
 8003be8:	80000000 	.word	0x80000000

08003bec <conA8>:
 8003bec:	aaaaaaa8 	.word	0xaaaaaaa8

08003bf0 <con54>:
 8003bf0:	55555554 	.word	0x55555554

08003bf4 <STL_StartUpCPUTest>:
  .section  .text.STL_StartUpCPUTest
  .type  STL_StartUpCPUTest, %function
  .size  STL_StartUpCPUTest, .-STL_StartUpCPUTest

STL_StartUpCPUTest:
    PUSH {R4-R6}               /* Safe critical registers */
 8003bf4:	b470      	push	{r4, r5, r6}

    MOVS R0, #0x00      	  
 8003bf6:	2000      	movs	r0, #0
    UXTB R0,R0
 8003bf8:	b2c0      	uxtb	r0, r0
    ADDS R0,#0				   /* Set Z(ero) Flag */
 8003bfa:	3000      	adds	r0, #0
    BNE CPUTestFail            /* Fails if Z clear */
 8003bfc:	d168      	bne.n	8003cd0 <CPUTestFail>
    BMI CPUTestFail            /* Fails if N is set */
 8003bfe:	d467      	bmi.n	8003cd0 <CPUTestFail>
    SUBS R0,#1                 /* Set N(egative) Flag */
 8003c00:	3801      	subs	r0, #1
    BPL CPUTestFail            /* Fails if N clear */
 8003c02:	d565      	bpl.n	8003cd0 <CPUTestFail>
    ADDS R0,#2                 /* Set C(arry) Flag and do not set Z */
 8003c04:	3002      	adds	r0, #2
    BCC CPUTestFail            /* Fails if C clear */
 8003c06:	d363      	bcc.n	8003cd0 <CPUTestFail>
    BEQ CPUTestFail            /* Fails if Z is set */
 8003c08:	d062      	beq.n	8003cd0 <CPUTestFail>
    BMI CPUTestFail            /* Fails if N is set */
 8003c0a:	d461      	bmi.n	8003cd0 <CPUTestFail>

    LDR R0,=con80      	  	   /* Prepares Overflow test */
 8003c0c:	4870      	ldr	r0, [pc, #448]	; (8003dd0 <CPUTstCont+0xfc>)
    LDR R0,[R0]
 8003c0e:	6800      	ldr	r0, [r0, #0]
    ADDS R0, R0, R0            /* Set V(overflow) Flag */
 8003c10:	1800      	adds	r0, r0, r0
    BVC CPUTestFail            /* Fails if V clear */
 8003c12:	d75d      	bvc.n	8003cd0 <CPUTestFail>

    /*  This is for control flow test (ENTRY point) */
    LDR R0,=CtrlFlowCnt
 8003c14:	486f      	ldr	r0, [pc, #444]	; (8003dd4 <CPUTstCont+0x100>)
    /* Assumes R1 OK If not, error will be detected by R1 test and Ctrl flow test later on */
    LDR R1,[R0]
 8003c16:	6801      	ldr	r1, [r0, #0]
    ADDS R1,R1,#0x3	           /* CtrlFlowCnt += OxO3 */
 8003c18:	3103      	adds	r1, #3
    STR R1,[R0]
 8003c1a:	6001      	str	r1, [r0, #0]

    /* Register R1 */
    LDR R0, =conAA
 8003c1c:	486e      	ldr	r0, [pc, #440]	; (8003dd8 <CPUTstCont+0x104>)
    LDR R1,[R0]
 8003c1e:	6801      	ldr	r1, [r0, #0]
    LDR R0,[R0]
 8003c20:	6800      	ldr	r0, [r0, #0]
    CMP R0,R1
 8003c22:	4288      	cmp	r0, r1
    BNE CPUTestFail
 8003c24:	d154      	bne.n	8003cd0 <CPUTestFail>
    LDR R0, =con55
 8003c26:	486d      	ldr	r0, [pc, #436]	; (8003ddc <CPUTstCont+0x108>)
    LDR R1,[R0]
 8003c28:	6801      	ldr	r1, [r0, #0]
    LDR R0,[R0]
 8003c2a:	6800      	ldr	r0, [r0, #0]
    CMP R0,R1
 8003c2c:	4288      	cmp	r0, r1
    BNE CPUTestFail
 8003c2e:	d14f      	bne.n	8003cd0 <CPUTestFail>
    MOVS R1, #0x1              /* For ramp test */
 8003c30:	2101      	movs	r1, #1

    /* Register R2 */
    LDR R0, =conAA
 8003c32:	4869      	ldr	r0, [pc, #420]	; (8003dd8 <CPUTstCont+0x104>)
    LDR R2,[R0]
 8003c34:	6802      	ldr	r2, [r0, #0]
    LDR R0,[R0]
 8003c36:	6800      	ldr	r0, [r0, #0]
    CMP R0,R2
 8003c38:	4290      	cmp	r0, r2
    BNE CPUTestFail
 8003c3a:	d149      	bne.n	8003cd0 <CPUTestFail>
    LDR R0, =con55
 8003c3c:	4867      	ldr	r0, [pc, #412]	; (8003ddc <CPUTstCont+0x108>)
    LDR R2,[R0]
 8003c3e:	6802      	ldr	r2, [r0, #0]
    LDR R0,[R0]
 8003c40:	6800      	ldr	r0, [r0, #0]
    CMP R0,R2
 8003c42:	4290      	cmp	r0, r2
    BNE CPUTestFail
 8003c44:	d144      	bne.n	8003cd0 <CPUTestFail>
    MOVS R2, #0x2              /* For ramp test */
 8003c46:	2202      	movs	r2, #2

    /* Register R3 */
    LDR R0, =conAA
 8003c48:	4863      	ldr	r0, [pc, #396]	; (8003dd8 <CPUTstCont+0x104>)
    LDR R3,[R0]
 8003c4a:	6803      	ldr	r3, [r0, #0]
    LDR R0,[R0]
 8003c4c:	6800      	ldr	r0, [r0, #0]
    CMP R0,R3
 8003c4e:	4298      	cmp	r0, r3
    BNE CPUTestFail
 8003c50:	d13e      	bne.n	8003cd0 <CPUTestFail>
    LDR R0, =con55
 8003c52:	4862      	ldr	r0, [pc, #392]	; (8003ddc <CPUTstCont+0x108>)
    LDR R3,[R0]
 8003c54:	6803      	ldr	r3, [r0, #0]
    LDR R0,[R0]
 8003c56:	6800      	ldr	r0, [r0, #0]
    CMP R0,R3
 8003c58:	4298      	cmp	r0, r3
    BNE CPUTestFail
 8003c5a:	d139      	bne.n	8003cd0 <CPUTestFail>
    MOVS R3, #0x3              /* For ramp test */
 8003c5c:	2303      	movs	r3, #3

    /* Register R4 */
    LDR R0, =conAA
 8003c5e:	485e      	ldr	r0, [pc, #376]	; (8003dd8 <CPUTstCont+0x104>)
    LDR R4,[R0]
 8003c60:	6804      	ldr	r4, [r0, #0]
    LDR R0,[R0]
 8003c62:	6800      	ldr	r0, [r0, #0]
    CMP R0,R4
 8003c64:	42a0      	cmp	r0, r4
    BNE CPUTestFail
 8003c66:	d133      	bne.n	8003cd0 <CPUTestFail>
    LDR R0, =con55
 8003c68:	485c      	ldr	r0, [pc, #368]	; (8003ddc <CPUTstCont+0x108>)
    LDR R4,[R0]
 8003c6a:	6804      	ldr	r4, [r0, #0]
    LDR R0,[R0]
 8003c6c:	6800      	ldr	r0, [r0, #0]
    CMP R0,R4
 8003c6e:	42a0      	cmp	r0, r4
    BNE CPUTestFail
 8003c70:	d12e      	bne.n	8003cd0 <CPUTestFail>
    MOVS R4, #0x4              /* For ramp test */
 8003c72:	2404      	movs	r4, #4

    /* Register R5 */
    LDR R0, =conAA
 8003c74:	4858      	ldr	r0, [pc, #352]	; (8003dd8 <CPUTstCont+0x104>)
    LDR R5,[R0]
 8003c76:	6805      	ldr	r5, [r0, #0]
    LDR R0,[R0]
 8003c78:	6800      	ldr	r0, [r0, #0]
    CMP R0,R5
 8003c7a:	42a8      	cmp	r0, r5
    BNE CPUTestFail
 8003c7c:	d128      	bne.n	8003cd0 <CPUTestFail>
    LDR R0, =con55
 8003c7e:	4857      	ldr	r0, [pc, #348]	; (8003ddc <CPUTstCont+0x108>)
    LDR R5,[R0]
 8003c80:	6805      	ldr	r5, [r0, #0]
    LDR R0,[R0]
 8003c82:	6800      	ldr	r0, [r0, #0]
    CMP R0,R5
 8003c84:	42a8      	cmp	r0, r5
    BNE CPUTestFail
 8003c86:	d123      	bne.n	8003cd0 <CPUTestFail>
    MOVS R5, #0x5              /* For ramp test */
 8003c88:	2505      	movs	r5, #5

    /* Register R6 */
    LDR R0, =conAA
 8003c8a:	4853      	ldr	r0, [pc, #332]	; (8003dd8 <CPUTstCont+0x104>)
    LDR R6,[R0]
 8003c8c:	6806      	ldr	r6, [r0, #0]
    LDR R0,[R0]
 8003c8e:	6800      	ldr	r0, [r0, #0]
    CMP R0,R6
 8003c90:	42b0      	cmp	r0, r6
    BNE CPUTestFail
 8003c92:	d11d      	bne.n	8003cd0 <CPUTestFail>
    LDR R0, =con55
 8003c94:	4851      	ldr	r0, [pc, #324]	; (8003ddc <CPUTstCont+0x108>)
    LDR R6,[R0]
 8003c96:	6806      	ldr	r6, [r0, #0]
    LDR R0,[R0]
 8003c98:	6800      	ldr	r0, [r0, #0]
    CMP R0,R6
 8003c9a:	42b0      	cmp	r0, r6
    BNE CPUTestFail
 8003c9c:	d118      	bne.n	8003cd0 <CPUTestFail>
    MOVS R6, #0x6              /* For ramp test */
 8003c9e:	2606      	movs	r6, #6

    /* Register R7 */
    LDR R0, =conAA
 8003ca0:	484d      	ldr	r0, [pc, #308]	; (8003dd8 <CPUTstCont+0x104>)
    LDR R7,[R0]
 8003ca2:	6807      	ldr	r7, [r0, #0]
    LDR R0,[R0]
 8003ca4:	6800      	ldr	r0, [r0, #0]
    CMP R0,R7
 8003ca6:	42b8      	cmp	r0, r7
    BNE CPUTestFail
 8003ca8:	d112      	bne.n	8003cd0 <CPUTestFail>
    LDR R0, =con55
 8003caa:	484c      	ldr	r0, [pc, #304]	; (8003ddc <CPUTstCont+0x108>)
    LDR R7,[R0]
 8003cac:	6807      	ldr	r7, [r0, #0]
    LDR R0,[R0]
 8003cae:	6800      	ldr	r0, [r0, #0]
    CMP R0,R7
 8003cb0:	42b8      	cmp	r0, r7
    BNE CPUTestFail
 8003cb2:	d10d      	bne.n	8003cd0 <CPUTestFail>
    MOVS R7, #0x7              /* For ramp test */
 8003cb4:	2707      	movs	r7, #7

    /* Register R8 */
    LDR R0, =conAA
 8003cb6:	4848      	ldr	r0, [pc, #288]	; (8003dd8 <CPUTstCont+0x104>)
    LDR R0,[R0]
 8003cb8:	6800      	ldr	r0, [r0, #0]
    MOV R8,R0
 8003cba:	4680      	mov	r8, r0
    CMP R0,R8
 8003cbc:	4540      	cmp	r0, r8
    BNE CPUTestFail
 8003cbe:	d107      	bne.n	8003cd0 <CPUTestFail>
    LDR R0, =con55
 8003cc0:	4846      	ldr	r0, [pc, #280]	; (8003ddc <CPUTstCont+0x108>)
    LDR R0,[R0]
 8003cc2:	6800      	ldr	r0, [r0, #0]
    MOV R8,R0
 8003cc4:	4680      	mov	r8, r0
    CMP R0,R8
 8003cc6:	4540      	cmp	r0, r8
    BNE CPUTestFail
 8003cc8:	d102      	bne.n	8003cd0 <CPUTestFail>
    MOVS R0, #0x08             /* For ramp test */
 8003cca:	2008      	movs	r0, #8
    MOV	R8,R0
 8003ccc:	4680      	mov	r8, r0

    BAL CPUTstCont
 8003cce:	e001      	b.n	8003cd4 <CPUTstCont>

08003cd0 <CPUTestFail>:

CPUTestFail:
    BLAL FailSafePOR
 8003cd0:	f7ff f978 	bl	8002fc4 <FailSafePOR>

08003cd4 <CPUTstCont>:

CPUTstCont:
    /* Register R9 */
    LDR R0, =conAA
 8003cd4:	4840      	ldr	r0, [pc, #256]	; (8003dd8 <CPUTstCont+0x104>)
    LDR R0,[R0]
 8003cd6:	6800      	ldr	r0, [r0, #0]
    MOV R9,R0
 8003cd8:	4681      	mov	r9, r0
    CMP R0,R9
 8003cda:	4548      	cmp	r0, r9
    BNE CPUTestFail
 8003cdc:	d1f8      	bne.n	8003cd0 <CPUTestFail>
    LDR R0, =con55
 8003cde:	483f      	ldr	r0, [pc, #252]	; (8003ddc <CPUTstCont+0x108>)
    LDR R0,[R0]
 8003ce0:	6800      	ldr	r0, [r0, #0]
    MOV R9,R0
 8003ce2:	4681      	mov	r9, r0
    CMP R0,R9
 8003ce4:	4548      	cmp	r0, r9
    BNE CPUTestFail
 8003ce6:	d1f3      	bne.n	8003cd0 <CPUTestFail>
    MOVS R0, #0x09             /* For ramp test */
 8003ce8:	2009      	movs	r0, #9
    MOV	R9,R0
 8003cea:	4681      	mov	r9, r0

    /* Register R10 */
    LDR R0, =conAA
 8003cec:	483a      	ldr	r0, [pc, #232]	; (8003dd8 <CPUTstCont+0x104>)
    LDR R0,[R0]
 8003cee:	6800      	ldr	r0, [r0, #0]
    MOV R10,R0
 8003cf0:	4682      	mov	sl, r0
    CMP R0,R10
 8003cf2:	4550      	cmp	r0, sl
    BNE CPUTestFail
 8003cf4:	d1ec      	bne.n	8003cd0 <CPUTestFail>
    LDR R0, =con55
 8003cf6:	4839      	ldr	r0, [pc, #228]	; (8003ddc <CPUTstCont+0x108>)
    LDR R0,[R0]
 8003cf8:	6800      	ldr	r0, [r0, #0]
    MOV R10,R0
 8003cfa:	4682      	mov	sl, r0
    CMP R0,R10
 8003cfc:	4550      	cmp	r0, sl
    BNE CPUTestFail
 8003cfe:	d1e7      	bne.n	8003cd0 <CPUTestFail>
    MOVS R0, #0x0A             /* For ramp test */
 8003d00:	200a      	movs	r0, #10
    MOV	R10,R0
 8003d02:	4682      	mov	sl, r0

    /* Register R11 */
    LDR R0, =conAA
 8003d04:	4834      	ldr	r0, [pc, #208]	; (8003dd8 <CPUTstCont+0x104>)
    LDR R0,[R0]
 8003d06:	6800      	ldr	r0, [r0, #0]
    MOV R11,R0
 8003d08:	4683      	mov	fp, r0
    CMP R0,R11
 8003d0a:	4558      	cmp	r0, fp
    BNE CPUTestFail
 8003d0c:	d1e0      	bne.n	8003cd0 <CPUTestFail>
    LDR R0, =con55
 8003d0e:	4833      	ldr	r0, [pc, #204]	; (8003ddc <CPUTstCont+0x108>)
    LDR R0,[R0]
 8003d10:	6800      	ldr	r0, [r0, #0]
    MOV R11,R0
 8003d12:	4683      	mov	fp, r0
    CMP R0,R11
 8003d14:	4558      	cmp	r0, fp
    BNE CPUTestFail
 8003d16:	d1db      	bne.n	8003cd0 <CPUTestFail>
    MOVS R0, #0x0B             /* For ramp test */
 8003d18:	200b      	movs	r0, #11
    MOV	R11,R0
 8003d1a:	4683      	mov	fp, r0

    /* Register R12 */
    LDR R0, =conAA
 8003d1c:	482e      	ldr	r0, [pc, #184]	; (8003dd8 <CPUTstCont+0x104>)
    LDR R0,[R0]
 8003d1e:	6800      	ldr	r0, [r0, #0]
    MOV R12,R0
 8003d20:	4684      	mov	ip, r0
    CMP R0,R12
 8003d22:	4560      	cmp	r0, ip
    BNE CPUTestFail
 8003d24:	d1d4      	bne.n	8003cd0 <CPUTestFail>
    LDR R0, =con55
 8003d26:	482d      	ldr	r0, [pc, #180]	; (8003ddc <CPUTstCont+0x108>)
    LDR R0,[R0]
 8003d28:	6800      	ldr	r0, [r0, #0]
    MOV R12,R0
 8003d2a:	4684      	mov	ip, r0
    CMP R0,R12
 8003d2c:	4560      	cmp	r0, ip
    BNE CPUTestFail
 8003d2e:	d1cf      	bne.n	8003cd0 <CPUTestFail>
    MOVS R0, #0x0C             /* For ramp test */
 8003d30:	200c      	movs	r0, #12
    MOV	R12,R0
 8003d32:	4684      	mov	ip, r0
    LDR R0, =CPUTstCont
 8003d34:	482a      	ldr	r0, [pc, #168]	; (8003de0 <CPUTstCont+0x10c>)

    /* Ramp pattern verification	(R0 is not tested) */
    CMP R1, #0x01
 8003d36:	2901      	cmp	r1, #1
    BNE CPUTestFail
 8003d38:	d1ca      	bne.n	8003cd0 <CPUTestFail>
    CMP R2, #0x02
 8003d3a:	2a02      	cmp	r2, #2
    BNE CPUTestFail
 8003d3c:	d1c8      	bne.n	8003cd0 <CPUTestFail>
    CMP R3, #0x03
 8003d3e:	2b03      	cmp	r3, #3
    BNE CPUTestFail
 8003d40:	d1c6      	bne.n	8003cd0 <CPUTestFail>
    CMP R4, #0x04
 8003d42:	2c04      	cmp	r4, #4
    BNE CPUTestFail
 8003d44:	d1c4      	bne.n	8003cd0 <CPUTestFail>
    CMP R5, #0x05
 8003d46:	2d05      	cmp	r5, #5
    BNE CPUTestFail
 8003d48:	d1c2      	bne.n	8003cd0 <CPUTestFail>
    CMP R6, #0x06
 8003d4a:	2e06      	cmp	r6, #6
    BNE CPUTestFail
 8003d4c:	d1c0      	bne.n	8003cd0 <CPUTestFail>
    CMP R7, #0x07
 8003d4e:	2f07      	cmp	r7, #7
    BNE CPUTestFail
 8003d50:	d1be      	bne.n	8003cd0 <CPUTestFail>
    MOVS R0, #0x08
 8003d52:	2008      	movs	r0, #8
    CMP R0,R8
 8003d54:	4540      	cmp	r0, r8
    BNE CPUTestFail
 8003d56:	d1bb      	bne.n	8003cd0 <CPUTestFail>
    MOVS R0, #0x09
 8003d58:	2009      	movs	r0, #9
    CMP R0,R9
 8003d5a:	4548      	cmp	r0, r9
    BNE CPUTestFail
 8003d5c:	d1b8      	bne.n	8003cd0 <CPUTestFail>
    MOVS R0, #0x0A
 8003d5e:	200a      	movs	r0, #10
    CMP R0,R10
 8003d60:	4550      	cmp	r0, sl
    BNE CPUTestFail
 8003d62:	d1b5      	bne.n	8003cd0 <CPUTestFail>
    MOVS R0, #0x0B
 8003d64:	200b      	movs	r0, #11
    CMP R0,R11
 8003d66:	4558      	cmp	r0, fp
    BNE CPUTestFail
 8003d68:	d1b2      	bne.n	8003cd0 <CPUTestFail>
    MOVS R0, #0x0C
 8003d6a:	200c      	movs	r0, #12
    CMP R0,R12
 8003d6c:	4560      	cmp	r0, ip
    BNE CPUTestFail
 8003d6e:	d1af      	bne.n	8003cd0 <CPUTestFail>

    /* Process Stack pointer (banked Register R13) */
    MRS R0,PSP           /* Save process stack value */
 8003d70:	f3ef 8009 	mrs	r0, PSP
    LDR R1, =conA8       /* Test is different (PSP is word aligned, 2 LSB cleared) */
 8003d74:	491b      	ldr	r1, [pc, #108]	; (8003de4 <CPUTstCont+0x110>)
    LDR R1,[R1]
 8003d76:	6809      	ldr	r1, [r1, #0]
    MSR PSP,R1           /* load process stack value */
 8003d78:	f381 8809 	msr	PSP, r1
    MRS R2,PSP           /* Get back process stack value */
 8003d7c:	f3ef 8209 	mrs	r2, PSP
    CMP R2,R1            /* Verify value */
 8003d80:	428a      	cmp	r2, r1
    BNE CPUTestFail
 8003d82:	d1a5      	bne.n	8003cd0 <CPUTestFail>
    LDR R1, =con54       /* Test is different (PSP is word aligned, 2 LSB cleared) */
 8003d84:	4918      	ldr	r1, [pc, #96]	; (8003de8 <CPUTstCont+0x114>)
    LDR R1,[R1]
 8003d86:	6809      	ldr	r1, [r1, #0]
    MSR PSP,R1           /* load process stack value */
 8003d88:	f381 8809 	msr	PSP, r1
    MRS R2,PSP           /* Get back process stack value */
 8003d8c:	f3ef 8209 	mrs	r2, PSP
    CMP R2,R1            /* Verify value */
 8003d90:	428a      	cmp	r2, r1
    BNE CPUTestFail
 8003d92:	d19d      	bne.n	8003cd0 <CPUTestFail>
    MSR PSP, R0          /* Restore process stack value */
 8003d94:	f380 8809 	msr	PSP, r0

    /* Stack pointer (Register R13) */
    MRS R0,MSP           /* Save stack pointer value */
 8003d98:	f3ef 8008 	mrs	r0, MSP
    LDR R1, =conA8       /* Test is different (SP is word aligned, 2 LSB cleared) */
 8003d9c:	4911      	ldr	r1, [pc, #68]	; (8003de4 <CPUTstCont+0x110>)
    LDR R1,[R1]
 8003d9e:	6809      	ldr	r1, [r1, #0]
    MSR MSP,R1			 /* load SP value */
 8003da0:	f381 8808 	msr	MSP, r1
    MRS R2,MSP			 /* Get back SP value */
 8003da4:	f3ef 8208 	mrs	r2, MSP
    CMP R2,R1			 /* Verify value */
 8003da8:	428a      	cmp	r2, r1
    BNE CPUTestFail
 8003daa:	d191      	bne.n	8003cd0 <CPUTestFail>
    LDR R1, =con54
 8003dac:	490e      	ldr	r1, [pc, #56]	; (8003de8 <CPUTstCont+0x114>)
    LDR R1,[R1]			 /* load SP value */
 8003dae:	6809      	ldr	r1, [r1, #0]
    MSR MSP,R1			 /* Get back SP value */
 8003db0:	f381 8808 	msr	MSP, r1
    MRS R2,MSP			 /* Verify value */
 8003db4:	f3ef 8208 	mrs	r2, MSP
    CMP R2,R1
 8003db8:	428a      	cmp	r2, r1
    BNE CPUTestFail
 8003dba:	d189      	bne.n	8003cd0 <CPUTestFail>
    MSR MSP,R0			 /* Restore stack pointer value */
 8003dbc:	f380 8808 	msr	MSP, r0

    /* Link register R14	cannot be tested an error should be detected by	Ctrl flow test later */

    /* Control flow test (EXIT point) */
    LDR R0,=CtrlFlowCntInv
 8003dc0:	480a      	ldr	r0, [pc, #40]	; (8003dec <CPUTstCont+0x118>)
    LDR R1,[R0]
 8003dc2:	6801      	ldr	r1, [r0, #0]
    SUBS R1,R1,#0x3	     /* CtrlFlowCntInv -= OxO3 */
 8003dc4:	3903      	subs	r1, #3
    STR R1,[R0]
 8003dc6:	6001      	str	r1, [r0, #0]

    POP {R4-R6}			 /* Restore critical registers */
 8003dc8:	bc70      	pop	{r4, r5, r6}

    /* If next instruction is not executed, R0 will hold a value different from 0 */
    MOVS R0, #0x1        /* CPUTEST_SUCCESS */
 8003dca:	2001      	movs	r0, #1
    BX LR                /* return to the caller */
 8003dcc:	4770      	bx	lr
 8003dce:	0000      	.short	0x0000
    LDR R0,=con80      	  	   /* Prepares Overflow test */
 8003dd0:	08003be8 	.word	0x08003be8
    LDR R0,=CtrlFlowCnt
 8003dd4:	20000030 	.word	0x20000030
    LDR R0, =conAA
 8003dd8:	08003be0 	.word	0x08003be0
    LDR R0, =con55
 8003ddc:	08003be4 	.word	0x08003be4
    LDR R0, =CPUTstCont
 8003de0:	08003cd4 	.word	0x08003cd4
    LDR R1, =conA8       /* Test is different (PSP is word aligned, 2 LSB cleared) */
 8003de4:	08003bec 	.word	0x08003bec
    LDR R1, =con54       /* Test is different (PSP is word aligned, 2 LSB cleared) */
 8003de8:	08003bf0 	.word	0x08003bf0
    LDR R0,=CtrlFlowCntInv
 8003dec:	20000054 	.word	0x20000054

08003df0 <HAL_MspInit>:
  * @brief  Initializes the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually  
            modified by the user
   */ 
}
 8003df4:	46c0      	nop			; (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  : None
  * @retval : None
  */
void NMI_Handler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
#ifdef STL_VERBOSE
  if (__HAL_RCC_GET_IT_SOURCE(RCC_IT_CSS))
 8003e00:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <NMI_Handler+0x54>)
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	401a      	ands	r2, r3
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d10e      	bne.n	8003e30 <NMI_Handler+0x34>
  {
    while(__HAL_USART_GET_FLAG(&UartHandle, USART_FLAG_TC) == 0)
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	4b0f      	ldr	r3, [pc, #60]	; (8003e54 <NMI_Handler+0x58>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	2240      	movs	r2, #64	; 0x40
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	2b40      	cmp	r3, #64	; 0x40
 8003e20:	d1f8      	bne.n	8003e14 <NMI_Handler+0x18>
    {   /* Wait previous transmission completion */
    }
    /* Re-configure USART baud rate to have 115200 bds with HSI clock (8MHz) */
    USART_Configuration();
 8003e22:	f7fe fbbd 	bl	80025a0 <USART_Configuration>
    printf("\n\r Clock Source failure (Clock Security System)\n\r");
 8003e26:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <NMI_Handler+0x5c>)
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f003 fe7b 	bl	8007b24 <iprintf>
 8003e2e:	e003      	b.n	8003e38 <NMI_Handler+0x3c>
  }
  else
  {
    printf("\n\r NMI Exception\n\r");
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <NMI_Handler+0x60>)
 8003e32:	0018      	movs	r0, r3
 8003e34:	f003 fe76 	bl	8007b24 <iprintf>
  }
#endif /* STL_VERBOSE */

#if defined STL_EVAL_MODE
  /* LED_ERR Off for debug purposes */
  BSP_LED_Off(LED_ERR);
 8003e38:	23a0      	movs	r3, #160	; 0xa0
 8003e3a:	05db      	lsls	r3, r3, #23
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2180      	movs	r1, #128	; 0x80
 8003e40:	0018      	movs	r0, r3
 8003e42:	f001 f837 	bl	8004eb4 <HAL_GPIO_WritePin>
#endif  /* STL_EVAL_MODE */

  FailSafePOR();
 8003e46:	f7ff f8bd 	bl	8002fc4 <FailSafePOR>
}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40021000 	.word	0x40021000
 8003e54:	20000278 	.word	0x20000278
 8003e58:	0800a55c 	.word	0x0800a55c
 8003e5c:	0800a590 	.word	0x0800a590

08003e60 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  : None
  * @retval : None
  */
void HardFault_Handler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
#ifdef STL_VERBOSE
  printf("\n\r Hard fault Exception \n\r");
 8003e64:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <HardFault_Handler+0x24>)
 8003e66:	0018      	movs	r0, r3
 8003e68:	f003 fe5c 	bl	8007b24 <iprintf>
#endif /* STL_VERBOSE */

#if defined STL_EVAL_MODE
  /* LED_ERR Off for debug purposes */
  BSP_LED_Off(LED_ERR);
 8003e6c:	23a0      	movs	r3, #160	; 0xa0
 8003e6e:	05db      	lsls	r3, r3, #23
 8003e70:	2200      	movs	r2, #0
 8003e72:	2180      	movs	r1, #128	; 0x80
 8003e74:	0018      	movs	r0, r3
 8003e76:	f001 f81d 	bl	8004eb4 <HAL_GPIO_WritePin>
#endif  /* STL_EVAL_MODE */

  FailSafePOR();
 8003e7a:	f7ff f8a3 	bl	8002fc4 <FailSafePOR>
}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	0800a5a4 	.word	0x0800a5a4

08003e88 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  : None
  * @retval : None
  */
void SVC_Handler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
#ifdef STL_VERBOSE
  printf("\n\r SVCall Exception \n\r");
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <SVC_Handler+0x18>)
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f003 fe48 	bl	8007b24 <iprintf>
#endif /* STL_VERBOSE */

  FailSafePOR();
 8003e94:	f7ff f896 	bl	8002fc4 <FailSafePOR>
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	0800a5c0 	.word	0x0800a5c0

08003ea4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  : None
  * @retval : None
  */
void PendSV_Handler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
#ifdef STL_VERBOSE
  printf("\n\r PendSVC Exception \n\r");
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <PendSV_Handler+0x18>)
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f003 fe3a 	bl	8007b24 <iprintf>
#endif /* STL_VERBOSE */

  FailSafePOR();
 8003eb0:	f7ff f888 	bl	8002fc4 <FailSafePOR>
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	0800a5f8 	.word	0x0800a5f8

08003ec0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  : None
  * @retval : None
  */
void SysTick_Handler(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8003ec6:	f000 fb61 	bl	800458c <HAL_IncTick>
    
  /* Verify TickCounter integrity */
  if ((TickCounter ^ TickCounterInv) == 0xFFFFFFFFuL)
 8003eca:	4b40      	ldr	r3, [pc, #256]	; (8003fcc <SysTick_Handler+0x10c>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4b40      	ldr	r3, [pc, #256]	; (8003fd0 <SysTick_Handler+0x110>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4053      	eors	r3, r2
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	d000      	beq.n	8003eda <SysTick_Handler+0x1a>
 8003ed8:	e073      	b.n	8003fc2 <SysTick_Handler+0x102>
  {
    TickCounter++;
 8003eda:	4b3c      	ldr	r3, [pc, #240]	; (8003fcc <SysTick_Handler+0x10c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	4b3a      	ldr	r3, [pc, #232]	; (8003fcc <SysTick_Handler+0x10c>)
 8003ee2:	601a      	str	r2, [r3, #0]
    TickCounterInv = ~TickCounter;
 8003ee4:	4b39      	ldr	r3, [pc, #228]	; (8003fcc <SysTick_Handler+0x10c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	43da      	mvns	r2, r3
 8003eea:	4b39      	ldr	r3, [pc, #228]	; (8003fd0 <SysTick_Handler+0x110>)
 8003eec:	601a      	str	r2, [r3, #0]

    if (TickCounter >= SYSTICK_10ms_TB)
 8003eee:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <SysTick_Handler+0x10c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b09      	cmp	r3, #9
 8003ef4:	d965      	bls.n	8003fc2 <SysTick_Handler+0x102>
    {
      uint32_t RamTestResult;

      #if defined STL_EVAL_MODE
        /* Toggle LED_VLM for debug purposes */
        BSP_LED_Toggle(LED_VLM);
 8003ef6:	23a0      	movs	r3, #160	; 0xa0
 8003ef8:	05db      	lsls	r3, r3, #23
 8003efa:	2120      	movs	r1, #32
 8003efc:	0018      	movs	r0, r3
 8003efe:	f000 fff6 	bl	8004eee <HAL_GPIO_TogglePin>
      #endif  /* STL_EVAL_MODE */

      /* Reset timebase counter */
      TickCounter = 0u;
 8003f02:	4b32      	ldr	r3, [pc, #200]	; (8003fcc <SysTick_Handler+0x10c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
      TickCounterInv = 0xFFFFFFFFuL;
 8003f08:	4b31      	ldr	r3, [pc, #196]	; (8003fd0 <SysTick_Handler+0x110>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	4252      	negs	r2, r2
 8003f0e:	601a      	str	r2, [r3, #0]

      /* Set Flag read in main loop */
      TimeBaseFlag = 0xAAAAAAAAuL;
 8003f10:	4b30      	ldr	r3, [pc, #192]	; (8003fd4 <SysTick_Handler+0x114>)
 8003f12:	4a31      	ldr	r2, [pc, #196]	; (8003fd8 <SysTick_Handler+0x118>)
 8003f14:	601a      	str	r2, [r3, #0]
      TimeBaseFlagInv = 0x55555555uL;
 8003f16:	4b31      	ldr	r3, [pc, #196]	; (8003fdc <SysTick_Handler+0x11c>)
 8003f18:	4a31      	ldr	r2, [pc, #196]	; (8003fe0 <SysTick_Handler+0x120>)
 8003f1a:	601a      	str	r2, [r3, #0]

      ISRCtrlFlowCnt += RAM_MARCHC_ISR_CALLER;
 8003f1c:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <SysTick_Handler+0x124>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	1dda      	adds	r2, r3, #7
 8003f22:	4b30      	ldr	r3, [pc, #192]	; (8003fe4 <SysTick_Handler+0x124>)
 8003f24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f26:	b672      	cpsid	i
}
 8003f28:	46c0      	nop			; (mov r8, r8)
			__disable_irq();
      RamTestResult = STL_TranspMarch();
 8003f2a:	f7ff fc47 	bl	80037bc <STL_TranspMarch>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f32:	b662      	cpsie	i
}
 8003f34:	46c0      	nop			; (mov r8, r8)
			__enable_irq();
      ISRCtrlFlowCntInv -= RAM_MARCHC_ISR_CALLER;
 8003f36:	4b2c      	ldr	r3, [pc, #176]	; (8003fe8 <SysTick_Handler+0x128>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	1fda      	subs	r2, r3, #7
 8003f3c:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <SysTick_Handler+0x128>)
 8003f3e:	601a      	str	r2, [r3, #0]

      switch ( RamTestResult )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d013      	beq.n	8003f6e <SysTick_Handler+0xae>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d109      	bne.n	8003f60 <SysTick_Handler+0xa0>
          #ifdef STL_VERBOSE
          /* avoid any long string output here in the interrupt, '#' marks ram test completed ok */
            #ifndef __GNUC__
              putchar((int16_t)'#');
            #else
              __io_putchar((int16_t)'#');
 8003f4c:	2023      	movs	r0, #35	; 0x23
 8003f4e:	f7fe fbab 	bl	80026a8 <__io_putchar>
            #endif /* __GNUC__ */
          #endif  /* STL_VERBOSE */
          #ifdef STL_EVAL_MODE
            /* Toggle LED_VLM for debug purposes */
            BSP_LED_Toggle(LED_VLM);
 8003f52:	23a0      	movs	r3, #160	; 0xa0
 8003f54:	05db      	lsls	r3, r3, #23
 8003f56:	2120      	movs	r1, #32
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f000 ffc8 	bl	8004eee <HAL_GPIO_TogglePin>
          #endif /* STL_EVAL_MODE */
          #if defined(STL_EVAL_LCD)
            ++MyRAMCounter;
          #endif /* STL_EVAL_LCD */
          break;
 8003f5e:	e007      	b.n	8003f70 <SysTick_Handler+0xb0>
        case TEST_FAILURE:
        case CLASS_B_DATA_FAIL:
        default:
          #ifdef STL_VERBOSE
            printf("\n\r >>>>>>>>>>>>>>>>>>>  RAM Error (March C- Run-time check)\n\r");
 8003f60:	4b22      	ldr	r3, [pc, #136]	; (8003fec <SysTick_Handler+0x12c>)
 8003f62:	0018      	movs	r0, r3
 8003f64:	f003 fdde 	bl	8007b24 <iprintf>
          #endif  /* STL_VERBOSE */
          FailSafePOR();
 8003f68:	f7ff f82c 	bl	8002fc4 <FailSafePOR>
          break;
 8003f6c:	e000      	b.n	8003f70 <SysTick_Handler+0xb0>
          break;
 8003f6e:	46c0      	nop			; (mov r8, r8)
      } /* End of the switch */

      /* Do we reached the end of RAM test? */
      /* Verify 1st ISRCtrlFlowCnt integrity */
      if ((ISRCtrlFlowCnt ^ ISRCtrlFlowCntInv) == 0xFFFFFFFFuL)
 8003f70:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <SysTick_Handler+0x124>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <SysTick_Handler+0x128>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4053      	eors	r3, r2
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	d115      	bne.n	8003faa <SysTick_Handler+0xea>
      {
        if (RamTestResult == TEST_OK)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d118      	bne.n	8003fb6 <SysTick_Handler+0xf6>
  /* ==============================================================================*/
  /* MISRA violation of rule 17.4 - pointer arithmetic is used to check RAM test control flow */
	#ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
		#pragma diag_suppress=Pm088
	#endif /* __IAR_SYSTEMS_ICC__ */
          if (ISRCtrlFlowCnt != RAM_TEST_COMPLETED)
 8003f84:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <SysTick_Handler+0x124>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b6c      	cmp	r3, #108	; 0x6c
 8003f8a:	d006      	beq.n	8003f9a <SysTick_Handler+0xda>
		#pragma diag_default=Pm088
	#endif /* __IAR_SYSTEMS_ICC__ */
  /* ==============================================================================*/
          {
          #ifdef STL_VERBOSE
            printf("\n\r Control Flow error (RAM test) \n\r");
 8003f8c:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <SysTick_Handler+0x130>)
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f003 fdc8 	bl	8007b24 <iprintf>
          #endif  /* STL_VERBOSE */
          FailSafePOR();
 8003f94:	f7ff f816 	bl	8002fc4 <FailSafePOR>
 8003f98:	e00d      	b.n	8003fb6 <SysTick_Handler+0xf6>
          }
          else  /* Full RAM was scanned */
          {
            ISRCtrlFlowCnt = 0u;
 8003f9a:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <SysTick_Handler+0x124>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
            ISRCtrlFlowCntInv = 0xFFFFFFFFuL;
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <SysTick_Handler+0x128>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	4252      	negs	r2, r2
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e005      	b.n	8003fb6 <SysTick_Handler+0xf6>
        } /* End of RAM completed if*/
      } /* End of control flow monitoring */
      else
      {
      #ifdef STL_VERBOSE
        printf("\n\r Control Flow error in ISR \n\r");
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <SysTick_Handler+0x134>)
 8003fac:	0018      	movs	r0, r3
 8003fae:	f003 fdb9 	bl	8007b24 <iprintf>
      #endif  /* STL_VERBOSE */
      FailSafePOR();
 8003fb2:	f7ff f807 	bl	8002fc4 <FailSafePOR>
      }
      #if defined STL_EVAL_MODE
        /* Toggle LED_VLM for debug purposes */
        BSP_LED_Toggle(LED_VLM);
 8003fb6:	23a0      	movs	r3, #160	; 0xa0
 8003fb8:	05db      	lsls	r3, r3, #23
 8003fba:	2120      	movs	r1, #32
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f000 ff96 	bl	8004eee <HAL_GPIO_TogglePin>
      #endif  /* STL_EVAL_MODE */
    } /* End of the 10 ms timebase interrupt */
  }  
}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b002      	add	sp, #8
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	2000003c 	.word	0x2000003c
 8003fd0:	20000060 	.word	0x20000060
 8003fd4:	20000040 	.word	0x20000040
 8003fd8:	aaaaaaaa 	.word	0xaaaaaaaa
 8003fdc:	20000064 	.word	0x20000064
 8003fe0:	55555555 	.word	0x55555555
 8003fe4:	20000034 	.word	0x20000034
 8003fe8:	20000058 	.word	0x20000058
 8003fec:	0800a610 	.word	0x0800a610
 8003ff0:	0800a650 	.word	0x0800a650
 8003ff4:	0800a674 	.word	0x0800a674

08003ff8 <TIM21_IRQHandler>:
  * @brief  This function handles TIM21 global interrupt request.
  * @param  : None
  * @retval : None
  */
void TIM21_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
  uint16_t tmpCC1_last_cpy;
   
  if ((TIM21->SR & TIM_SR_CC1IF) != 0u )
 8003ffe:	4b1c      	ldr	r3, [pc, #112]	; (8004070 <TIM21_IRQHandler+0x78>)
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2202      	movs	r2, #2
 8004004:	4013      	ands	r3, r2
 8004006:	d02e      	beq.n	8004066 <TIM21_IRQHandler+0x6e>
  {
    /* store previous captured value */
    tmpCC1_last_cpy = tmpCC1_last; 
 8004008:	1dbb      	adds	r3, r7, #6
 800400a:	4a1a      	ldr	r2, [pc, #104]	; (8004074 <TIM21_IRQHandler+0x7c>)
 800400c:	8812      	ldrh	r2, [r2, #0]
 800400e:	801a      	strh	r2, [r3, #0]
    /* get currently captured value */
    tmpCC1_last = (uint16_t)(TIM21->CCR1);
 8004010:	4b17      	ldr	r3, [pc, #92]	; (8004070 <TIM21_IRQHandler+0x78>)
 8004012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004014:	b29a      	uxth	r2, r3
 8004016:	4b17      	ldr	r3, [pc, #92]	; (8004074 <TIM21_IRQHandler+0x7c>)
 8004018:	801a      	strh	r2, [r3, #0]
    /* The CC4IF flag is already cleared here be reading CCR4 register */

    /* overight results only in case the data is required */
    if (LSIPeriodFlag == 0u)
 800401a:	4b17      	ldr	r3, [pc, #92]	; (8004078 <TIM21_IRQHandler+0x80>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d121      	bne.n	8004066 <TIM21_IRQHandler+0x6e>
    {
      /* take correct measurement only */
      if ((TIM21->SR & TIM_SR_CC1OF) == 0u)
 8004022:	4b13      	ldr	r3, [pc, #76]	; (8004070 <TIM21_IRQHandler+0x78>)
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4013      	ands	r3, r2
 800402c:	d115      	bne.n	800405a <TIM21_IRQHandler+0x62>
      {
        /* Compute period length */
        PeriodValue = ((uint32_t)(tmpCC1_last) - (uint32_t)(tmpCC1_last_cpy)) & 0xFFFFuL;
 800402e:	4b11      	ldr	r3, [pc, #68]	; (8004074 <TIM21_IRQHandler+0x7c>)
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	b29a      	uxth	r2, r3
 8004034:	1dbb      	adds	r3, r7, #6
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	b29b      	uxth	r3, r3
 800403c:	001a      	movs	r2, r3
 800403e:	4b0f      	ldr	r3, [pc, #60]	; (800407c <TIM21_IRQHandler+0x84>)
 8004040:	601a      	str	r2, [r3, #0]
        PeriodValueInv = ~PeriodValue;
 8004042:	4b0e      	ldr	r3, [pc, #56]	; (800407c <TIM21_IRQHandler+0x84>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	43da      	mvns	r2, r3
 8004048:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <TIM21_IRQHandler+0x88>)
 800404a:	601a      	str	r2, [r3, #0]
              
        /* Set Flag tested at main loop */
        LSIPeriodFlag = 0xAAAAAAAAuL;
 800404c:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <TIM21_IRQHandler+0x80>)
 800404e:	4a0d      	ldr	r2, [pc, #52]	; (8004084 <TIM21_IRQHandler+0x8c>)
 8004050:	601a      	str	r2, [r3, #0]
        LSIPeriodFlagInv = 0x55555555uL;
 8004052:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <TIM21_IRQHandler+0x90>)
 8004054:	4a0d      	ldr	r2, [pc, #52]	; (800408c <TIM21_IRQHandler+0x94>)
 8004056:	601a      	str	r2, [r3, #0]
        TIM21->SR &= (uint16_t)(~TIM_SR_CC1OF);
      }
    }
    /* ignore computation in case data is not required */
  }
}
 8004058:	e005      	b.n	8004066 <TIM21_IRQHandler+0x6e>
        TIM21->SR &= (uint16_t)(~TIM_SR_CC1OF);
 800405a:	4b05      	ldr	r3, [pc, #20]	; (8004070 <TIM21_IRQHandler+0x78>)
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	4b04      	ldr	r3, [pc, #16]	; (8004070 <TIM21_IRQHandler+0x78>)
 8004060:	490b      	ldr	r1, [pc, #44]	; (8004090 <TIM21_IRQHandler+0x98>)
 8004062:	400a      	ands	r2, r1
 8004064:	611a      	str	r2, [r3, #16]
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	46bd      	mov	sp, r7
 800406a:	b002      	add	sp, #8
 800406c:	bd80      	pop	{r7, pc}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	40010800 	.word	0x40010800
 8004074:	20000390 	.word	0x20000390
 8004078:	20000044 	.word	0x20000044
 800407c:	20000038 	.word	0x20000038
 8004080:	2000005c 	.word	0x2000005c
 8004084:	aaaaaaaa 	.word	0xaaaaaaaa
 8004088:	20000068 	.word	0x20000068
 800408c:	55555555 	.word	0x55555555
 8004090:	0000fdff 	.word	0x0000fdff

08004094 <STL_InitClock_Xcross_Measurement>:
  * @brief Configure TIM21 to measure LSI period
  * @param  : None
  * @retval : ErrorStatus = (ERROR, SUCCESS)
  */
ErrorStatus STL_InitClock_Xcross_Measurement(void)
{
 8004094:	b590      	push	{r4, r7, lr}
 8004096:	b097      	sub	sp, #92	; 0x5c
 8004098:	af00      	add	r7, sp, #0
  ErrorStatus result = SUCCESS;
 800409a:	2457      	movs	r4, #87	; 0x57
 800409c:	193b      	adds	r3, r7, r4
 800409e:	2200      	movs	r2, #0
 80040a0:	701a      	strb	r2, [r3, #0]
  TIM_HandleTypeDef  tim_capture_handle;
  TIM_IC_InitTypeDef tim_input_config;
  
  /*## Enable peripherals and GPIO Clocks ####################################*/
  /* TIMx Peripheral clock enable */
  __TIM21_CLK_ENABLE();
 80040a2:	4b32      	ldr	r3, [pc, #200]	; (800416c <STL_InitClock_Xcross_Measurement+0xd8>)
 80040a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a6:	4b31      	ldr	r3, [pc, #196]	; (800416c <STL_InitClock_Xcross_Measurement+0xd8>)
 80040a8:	2104      	movs	r1, #4
 80040aa:	430a      	orrs	r2, r1
 80040ac:	635a      	str	r2, [r3, #52]	; 0x34
  
  /*## Configure the NVIC for TIMx ###########################################*/
  HAL_NVIC_SetPriority(TIM21_IRQn, 0u, 0u);
 80040ae:	2200      	movs	r2, #0
 80040b0:	2100      	movs	r1, #0
 80040b2:	2014      	movs	r0, #20
 80040b4:	f000 fb32 	bl	800471c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM21 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80040b8:	2014      	movs	r0, #20
 80040ba:	f000 fb44 	bl	8004746 <HAL_NVIC_EnableIRQ>
  /* TIM21 configuration: Input Capture mode ---------------------
  The LSI oscillator is connected to TIM21 CH1.
  The Rising edge is used as active edge, ICC input divided by 8
  The TIM21 CCR1 is used to compute the frequency value. 
  ------------------------------------------------------------ */
  tim_capture_handle.Instance = TIM21;
 80040be:	2014      	movs	r0, #20
 80040c0:	183b      	adds	r3, r7, r0
 80040c2:	4a2b      	ldr	r2, [pc, #172]	; (8004170 <STL_InitClock_Xcross_Measurement+0xdc>)
 80040c4:	601a      	str	r2, [r3, #0]
  tim_capture_handle.Init.Prescaler         = 0u; 
 80040c6:	183b      	adds	r3, r7, r0
 80040c8:	2200      	movs	r2, #0
 80040ca:	605a      	str	r2, [r3, #4]
  tim_capture_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;  
 80040cc:	183b      	adds	r3, r7, r0
 80040ce:	2200      	movs	r2, #0
 80040d0:	609a      	str	r2, [r3, #8]
  tim_capture_handle.Init.Period            = 0xFFFFFFFFul; 
 80040d2:	183b      	adds	r3, r7, r0
 80040d4:	2201      	movs	r2, #1
 80040d6:	4252      	negs	r2, r2
 80040d8:	60da      	str	r2, [r3, #12]
  tim_capture_handle.Init.ClockDivision     = 0u;     
 80040da:	183b      	adds	r3, r7, r0
 80040dc:	2200      	movs	r2, #0
 80040de:	611a      	str	r2, [r3, #16]
  /* define internal HAL driver status here as handle structure is defined locally */
  __HAL_RESET_HANDLE_STATE(&tim_capture_handle);
 80040e0:	183b      	adds	r3, r7, r0
 80040e2:	2239      	movs	r2, #57	; 0x39
 80040e4:	2100      	movs	r1, #0
 80040e6:	5499      	strb	r1, [r3, r2]
  if(HAL_TIM_IC_Init(&tim_capture_handle) != HAL_OK)
 80040e8:	183b      	adds	r3, r7, r0
 80040ea:	0018      	movs	r0, r3
 80040ec:	f001 ff4a 	bl	8005f84 <HAL_TIM_IC_Init>
 80040f0:	1e03      	subs	r3, r0, #0
 80040f2:	d002      	beq.n	80040fa <STL_InitClock_Xcross_Measurement+0x66>
  {
    /* Initialization Error */
    result = ERROR;
 80040f4:	193b      	adds	r3, r7, r4
 80040f6:	2201      	movs	r2, #1
 80040f8:	701a      	strb	r2, [r3, #0]
  }
  /* Connect internally the TIM21_CH1 Input Capture to the LSI clock output */
  HAL_TIMEx_RemapConfig(&tim_capture_handle, TIM21_TI1_LSI);
 80040fa:	2414      	movs	r4, #20
 80040fc:	193b      	adds	r3, r7, r4
 80040fe:	2114      	movs	r1, #20
 8004100:	0018      	movs	r0, r3
 8004102:	f002 fa88 	bl	8006616 <HAL_TIMEx_RemapConfig>
  
  /* Configure the TIM21 Input Capture of channel 1 */
  tim_input_config.ICPolarity  = TIM_ICPOLARITY_RISING;
 8004106:	1d3b      	adds	r3, r7, #4
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
  tim_input_config.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800410c:	1d3b      	adds	r3, r7, #4
 800410e:	2201      	movs	r2, #1
 8004110:	605a      	str	r2, [r3, #4]
  tim_input_config.ICPrescaler = TIM_ICPSC_DIV8;
 8004112:	1d3b      	adds	r3, r7, #4
 8004114:	220c      	movs	r2, #12
 8004116:	609a      	str	r2, [r3, #8]
  tim_input_config.ICFilter    = 0u;
 8004118:	1d3b      	adds	r3, r7, #4
 800411a:	2200      	movs	r2, #0
 800411c:	60da      	str	r2, [r3, #12]
  if(HAL_TIM_IC_ConfigChannel(&tim_capture_handle, &tim_input_config, TIM_CHANNEL_1) != HAL_OK)
 800411e:	1d39      	adds	r1, r7, #4
 8004120:	193b      	adds	r3, r7, r4
 8004122:	2200      	movs	r2, #0
 8004124:	0018      	movs	r0, r3
 8004126:	f002 f83d 	bl	80061a4 <HAL_TIM_IC_ConfigChannel>
 800412a:	1e03      	subs	r3, r0, #0
 800412c:	d003      	beq.n	8004136 <STL_InitClock_Xcross_Measurement+0xa2>
  {
    /* Initialization Error */
    result = ERROR;
 800412e:	2357      	movs	r3, #87	; 0x57
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	2201      	movs	r2, #1
 8004134:	701a      	strb	r2, [r3, #0]
  }
  
  /* Reset the flags */
  tim_capture_handle.Instance->SR = 0u;
 8004136:	2114      	movs	r1, #20
 8004138:	187b      	adds	r3, r7, r1
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2200      	movs	r2, #0
 800413e:	611a      	str	r2, [r3, #16]
  LSIPeriodFlag = 0u;
 8004140:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <STL_InitClock_Xcross_Measurement+0xe0>)
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
  
  /* Start the TIM Input Capture measurement in interrupt mode */
  if(HAL_TIM_IC_Start_IT(&tim_capture_handle, TIM_CHANNEL_1) != HAL_OK)
 8004146:	187b      	adds	r3, r7, r1
 8004148:	2100      	movs	r1, #0
 800414a:	0018      	movs	r0, r3
 800414c:	f001 ff62 	bl	8006014 <HAL_TIM_IC_Start_IT>
 8004150:	1e03      	subs	r3, r0, #0
 8004152:	d003      	beq.n	800415c <STL_InitClock_Xcross_Measurement+0xc8>
  {
    /* Initialization Error */
    result = ERROR;
 8004154:	2357      	movs	r3, #87	; 0x57
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	2201      	movs	r2, #1
 800415a:	701a      	strb	r2, [r3, #0]
  }
  return(result);
 800415c:	2357      	movs	r3, #87	; 0x57
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	781b      	ldrb	r3, [r3, #0]
}
 8004162:	0018      	movs	r0, r3
 8004164:	46bd      	mov	sp, r7
 8004166:	b017      	add	sp, #92	; 0x5c
 8004168:	bd90      	pop	{r4, r7, pc}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	40021000 	.word	0x40021000
 8004170:	40010800 	.word	0x40010800
 8004174:	20000044 	.word	0x20000044

08004178 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  return 1;
 800417c:	2301      	movs	r3, #1
}
 800417e:	0018      	movs	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <_kill>:

int _kill(int pid, int sig)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800418e:	f003 f829 	bl	80071e4 <__errno>
 8004192:	0003      	movs	r3, r0
 8004194:	2216      	movs	r2, #22
 8004196:	601a      	str	r2, [r3, #0]
  return -1;
 8004198:	2301      	movs	r3, #1
 800419a:	425b      	negs	r3, r3
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	b002      	add	sp, #8
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <_exit>:

void _exit (int status)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041ac:	2301      	movs	r3, #1
 80041ae:	425a      	negs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	0011      	movs	r1, r2
 80041b4:	0018      	movs	r0, r3
 80041b6:	f7ff ffe5 	bl	8004184 <_kill>
  while (1) {}    /* Make sure we hang here */
 80041ba:	e7fe      	b.n	80041ba <_exit+0x16>

080041bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	e00a      	b.n	80041e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041ce:	e000      	b.n	80041d2 <_read+0x16>
 80041d0:	bf00      	nop
 80041d2:	0001      	movs	r1, r0
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	60ba      	str	r2, [r7, #8]
 80041da:	b2ca      	uxtb	r2, r1
 80041dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	3301      	adds	r3, #1
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	dbf0      	blt.n	80041ce <_read+0x12>
  }

  return len;
 80041ec:	687b      	ldr	r3, [r7, #4]
}
 80041ee:	0018      	movs	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b006      	add	sp, #24
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80041fe:	2301      	movs	r3, #1
 8004200:	425b      	negs	r3, r3
}
 8004202:	0018      	movs	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	b002      	add	sp, #8
 8004208:	bd80      	pop	{r7, pc}

0800420a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2280      	movs	r2, #128	; 0x80
 8004218:	0192      	lsls	r2, r2, #6
 800421a:	605a      	str	r2, [r3, #4]
  return 0;
 800421c:	2300      	movs	r3, #0
}
 800421e:	0018      	movs	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	b002      	add	sp, #8
 8004224:	bd80      	pop	{r7, pc}

08004226 <_isatty>:

int _isatty(int file)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800422e:	2301      	movs	r3, #1
}
 8004230:	0018      	movs	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	b002      	add	sp, #8
 8004236:	bd80      	pop	{r7, pc}

08004238 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004244:	2300      	movs	r3, #0
}
 8004246:	0018      	movs	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	b004      	add	sp, #16
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004258:	4a14      	ldr	r2, [pc, #80]	; (80042ac <_sbrk+0x5c>)
 800425a:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <_sbrk+0x60>)
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004264:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <_sbrk+0x64>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d102      	bne.n	8004272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800426c:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <_sbrk+0x64>)
 800426e:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <_sbrk+0x68>)
 8004270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <_sbrk+0x64>)
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	18d3      	adds	r3, r2, r3
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	429a      	cmp	r2, r3
 800427e:	d207      	bcs.n	8004290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004280:	f002 ffb0 	bl	80071e4 <__errno>
 8004284:	0003      	movs	r3, r0
 8004286:	220c      	movs	r2, #12
 8004288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800428a:	2301      	movs	r3, #1
 800428c:	425b      	negs	r3, r3
 800428e:	e009      	b.n	80042a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004290:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <_sbrk+0x64>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004296:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <_sbrk+0x64>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	18d2      	adds	r2, r2, r3
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <_sbrk+0x64>)
 80042a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80042a2:	68fb      	ldr	r3, [r7, #12]
}
 80042a4:	0018      	movs	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b006      	add	sp, #24
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20002000 	.word	0x20002000
 80042b0:	00000800 	.word	0x00000800
 80042b4:	20000394 	.word	0x20000394
 80042b8:	200003b0 	.word	0x200003b0

080042bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80042c0:	4b17      	ldr	r3, [pc, #92]	; (8004320 <SystemInit+0x64>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b16      	ldr	r3, [pc, #88]	; (8004320 <SystemInit+0x64>)
 80042c6:	2180      	movs	r1, #128	; 0x80
 80042c8:	0049      	lsls	r1, r1, #1
 80042ca:	430a      	orrs	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80042ce:	4b14      	ldr	r3, [pc, #80]	; (8004320 <SystemInit+0x64>)
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	4b13      	ldr	r3, [pc, #76]	; (8004320 <SystemInit+0x64>)
 80042d4:	4913      	ldr	r1, [pc, #76]	; (8004324 <SystemInit+0x68>)
 80042d6:	400a      	ands	r2, r1
 80042d8:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80042da:	4b11      	ldr	r3, [pc, #68]	; (8004320 <SystemInit+0x64>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4b10      	ldr	r3, [pc, #64]	; (8004320 <SystemInit+0x64>)
 80042e0:	4911      	ldr	r1, [pc, #68]	; (8004328 <SystemInit+0x6c>)
 80042e2:	400a      	ands	r2, r1
 80042e4:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80042e6:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <SystemInit+0x64>)
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <SystemInit+0x64>)
 80042ec:	2101      	movs	r1, #1
 80042ee:	438a      	bics	r2, r1
 80042f0:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80042f2:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <SystemInit+0x64>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <SystemInit+0x64>)
 80042f8:	490c      	ldr	r1, [pc, #48]	; (800432c <SystemInit+0x70>)
 80042fa:	400a      	ands	r2, r1
 80042fc:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80042fe:	4b08      	ldr	r3, [pc, #32]	; (8004320 <SystemInit+0x64>)
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	4b07      	ldr	r3, [pc, #28]	; (8004320 <SystemInit+0x64>)
 8004304:	490a      	ldr	r1, [pc, #40]	; (8004330 <SystemInit+0x74>)
 8004306:	400a      	ands	r2, r1
 8004308:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <SystemInit+0x64>)
 800430c:	2200      	movs	r2, #0
 800430e:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004310:	4b08      	ldr	r3, [pc, #32]	; (8004334 <SystemInit+0x78>)
 8004312:	2280      	movs	r2, #128	; 0x80
 8004314:	0512      	lsls	r2, r2, #20
 8004316:	609a      	str	r2, [r3, #8]
#endif
}
 8004318:	46c0      	nop			; (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	40021000 	.word	0x40021000
 8004324:	88ff400c 	.word	0x88ff400c
 8004328:	fef6fff6 	.word	0xfef6fff6
 800432c:	fffbffff 	.word	0xfffbffff
 8004330:	ff02ffff 	.word	0xff02ffff
 8004334:	e000ed00 	.word	0xe000ed00

08004338 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmul = 0U, plldiv = 0U, pllsource = 0U, msirange = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	2300      	movs	r3, #0
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	2300      	movs	r3, #0
 8004350:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004352:	4b45      	ldr	r3, [pc, #276]	; (8004468 <SystemCoreClockUpdate+0x130>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	220c      	movs	r2, #12
 8004358:	4013      	ands	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2b0c      	cmp	r3, #12
 8004360:	d025      	beq.n	80043ae <SystemCoreClockUpdate+0x76>
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b0c      	cmp	r3, #12
 8004366:	d85e      	bhi.n	8004426 <SystemCoreClockUpdate+0xee>
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2b08      	cmp	r3, #8
 800436c:	d01b      	beq.n	80043a6 <SystemCoreClockUpdate+0x6e>
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d858      	bhi.n	8004426 <SystemCoreClockUpdate+0xee>
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <SystemCoreClockUpdate+0x4a>
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b04      	cmp	r3, #4
 800437e:	d00e      	beq.n	800439e <SystemCoreClockUpdate+0x66>
 8004380:	e051      	b.n	8004426 <SystemCoreClockUpdate+0xee>
  {
    case 0x00U:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13U;
 8004382:	4b39      	ldr	r3, [pc, #228]	; (8004468 <SystemCoreClockUpdate+0x130>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	0b5b      	lsrs	r3, r3, #13
 8004388:	2207      	movs	r2, #7
 800438a:	4013      	ands	r3, r2
 800438c:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3301      	adds	r3, #1
 8004392:	2280      	movs	r2, #128	; 0x80
 8004394:	0212      	lsls	r2, r2, #8
 8004396:	409a      	lsls	r2, r3
 8004398:	4b34      	ldr	r3, [pc, #208]	; (800446c <SystemCoreClockUpdate+0x134>)
 800439a:	601a      	str	r2, [r3, #0]
      break;
 800439c:	e051      	b.n	8004442 <SystemCoreClockUpdate+0x10a>
    case 0x04U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800439e:	4b33      	ldr	r3, [pc, #204]	; (800446c <SystemCoreClockUpdate+0x134>)
 80043a0:	4a33      	ldr	r2, [pc, #204]	; (8004470 <SystemCoreClockUpdate+0x138>)
 80043a2:	601a      	str	r2, [r3, #0]
      break;
 80043a4:	e04d      	b.n	8004442 <SystemCoreClockUpdate+0x10a>
    case 0x08U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80043a6:	4b31      	ldr	r3, [pc, #196]	; (800446c <SystemCoreClockUpdate+0x134>)
 80043a8:	4a32      	ldr	r2, [pc, #200]	; (8004474 <SystemCoreClockUpdate+0x13c>)
 80043aa:	601a      	str	r2, [r3, #0]
      break;
 80043ac:	e049      	b.n	8004442 <SystemCoreClockUpdate+0x10a>
    case 0x0CU:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80043ae:	4b2e      	ldr	r3, [pc, #184]	; (8004468 <SystemCoreClockUpdate+0x130>)
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	23f0      	movs	r3, #240	; 0xf0
 80043b4:	039b      	lsls	r3, r3, #14
 80043b6:	4013      	ands	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80043ba:	4b2b      	ldr	r3, [pc, #172]	; (8004468 <SystemCoreClockUpdate+0x130>)
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	23c0      	movs	r3, #192	; 0xc0
 80043c0:	041b      	lsls	r3, r3, #16
 80043c2:	4013      	ands	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18U)];
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	0c9b      	lsrs	r3, r3, #18
 80043ca:	4a2b      	ldr	r2, [pc, #172]	; (8004478 <SystemCoreClockUpdate+0x140>)
 80043cc:	5cd3      	ldrb	r3, [r2, r3]
 80043ce:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22U) + 1U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	0d9b      	lsrs	r3, r3, #22
 80043d4:	3301      	adds	r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80043d8:	4b23      	ldr	r3, [pc, #140]	; (8004468 <SystemCoreClockUpdate+0x130>)
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	025b      	lsls	r3, r3, #9
 80043e0:	4013      	ands	r3, r2
 80043e2:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00U)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d111      	bne.n	800440e <SystemCoreClockUpdate+0xd6>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 80043ea:	6939      	ldr	r1, [r7, #16]
 80043ec:	000a      	movs	r2, r1
 80043ee:	0152      	lsls	r2, r2, #5
 80043f0:	1a52      	subs	r2, r2, r1
 80043f2:	0193      	lsls	r3, r2, #6
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	185b      	adds	r3, r3, r1
 80043fa:	029b      	lsls	r3, r3, #10
 80043fc:	68f9      	ldr	r1, [r7, #12]
 80043fe:	0018      	movs	r0, r3
 8004400:	f7fb fe9e 	bl	8000140 <__udivsi3>
 8004404:	0003      	movs	r3, r0
 8004406:	001a      	movs	r2, r3
 8004408:	4b18      	ldr	r3, [pc, #96]	; (800446c <SystemCoreClockUpdate+0x134>)
 800440a:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 800440c:	e019      	b.n	8004442 <SystemCoreClockUpdate+0x10a>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	4a18      	ldr	r2, [pc, #96]	; (8004474 <SystemCoreClockUpdate+0x13c>)
 8004412:	4353      	muls	r3, r2
 8004414:	68f9      	ldr	r1, [r7, #12]
 8004416:	0018      	movs	r0, r3
 8004418:	f7fb fe92 	bl	8000140 <__udivsi3>
 800441c:	0003      	movs	r3, r0
 800441e:	001a      	movs	r2, r3
 8004420:	4b12      	ldr	r3, [pc, #72]	; (800446c <SystemCoreClockUpdate+0x134>)
 8004422:	601a      	str	r2, [r3, #0]
      break;
 8004424:	e00d      	b.n	8004442 <SystemCoreClockUpdate+0x10a>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13U;
 8004426:	4b10      	ldr	r3, [pc, #64]	; (8004468 <SystemCoreClockUpdate+0x130>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	0b5b      	lsrs	r3, r3, #13
 800442c:	2207      	movs	r2, #7
 800442e:	4013      	ands	r3, r2
 8004430:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3301      	adds	r3, #1
 8004436:	2280      	movs	r2, #128	; 0x80
 8004438:	0212      	lsls	r2, r2, #8
 800443a:	409a      	lsls	r2, r3
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <SystemCoreClockUpdate+0x134>)
 800443e:	601a      	str	r2, [r3, #0]
      break;
 8004440:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8004442:	4b09      	ldr	r3, [pc, #36]	; (8004468 <SystemCoreClockUpdate+0x130>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	091b      	lsrs	r3, r3, #4
 8004448:	220f      	movs	r2, #15
 800444a:	4013      	ands	r3, r2
 800444c:	4a0b      	ldr	r2, [pc, #44]	; (800447c <SystemCoreClockUpdate+0x144>)
 800444e:	5cd3      	ldrb	r3, [r2, r3]
 8004450:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8004452:	4b06      	ldr	r3, [pc, #24]	; (800446c <SystemCoreClockUpdate+0x134>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	40da      	lsrs	r2, r3
 800445a:	4b04      	ldr	r3, [pc, #16]	; (800446c <SystemCoreClockUpdate+0x134>)
 800445c:	601a      	str	r2, [r3, #0]
}
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	46bd      	mov	sp, r7
 8004462:	b006      	add	sp, #24
 8004464:	bd80      	pop	{r7, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	40021000 	.word	0x40021000
 800446c:	20000080 	.word	0x20000080
 8004470:	00f42400 	.word	0x00f42400
 8004474:	0030d400 	.word	0x0030d400
 8004478:	0800a758 	.word	0x0800a758
 800447c:	0800a740 	.word	0x0800a740

08004480 <Startup_Copy_Handler>:
  .section  .text.Copy_Handler
  .weak  Startup_Copy_Handler
  .type  Startup_Copy_Handler, %function
Startup_Copy_Handler:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004480:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004482:	e003      	b.n	800448c <LoopCopyDataInit>

08004484 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004484:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <LoopFillZerobss+0x8>)
  ldr  r3, [r3, r1]
 8004486:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004488:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800448a:	3104      	adds	r1, #4

0800448c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800448c:	4807      	ldr	r0, [pc, #28]	; (80044ac <LoopFillZerobss+0xc>)
  ldr  r3, =_edata
 800448e:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <LoopFillZerobss+0x10>)
  adds  r2, r0, r1
 8004490:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004492:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004494:	d3f6      	bcc.n	8004484 <CopyDataInit>
  ldr  r2, =_sbss
 8004496:	4a07      	ldr	r2, [pc, #28]	; (80044b4 <LoopFillZerobss+0x14>)
  b  LoopFillZerobss
 8004498:	e002      	b.n	80044a0 <LoopFillZerobss>

0800449a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800449a:	2300      	movs	r3, #0
  str  r3, [r2]
 800449c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800449e:	3204      	adds	r2, #4

080044a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <LoopFillZerobss+0x18>)
  cmp  r2, r3
 80044a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80044a4:	d3f9      	bcc.n	800449a <FillZerobss>
  bx  lr    
 80044a6:	4770      	bx	lr
  ldr  r3, =_sidata
 80044a8:	0800ab94 	.word	0x0800ab94
  ldr  r0, =_sdata
 80044ac:	20000080 	.word	0x20000080
  ldr  r3, =_edata
 80044b0:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 80044b4:	2000025c 	.word	0x2000025c
  ldr  r3, = _ebss
 80044b8:	200003ac 	.word	0x200003ac

080044bc <Reset_Handler>:
*/
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80044bc:	4806      	ldr	r0, [pc, #24]	; (80044d8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80044be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  bl   Startup_Copy_Handler
 80044c0:	f7ff ffde 	bl	8004480 <Startup_Copy_Handler>

/* implement STL start-up procedures - it calls appli entry point when resume */
  ldr  r0, =STL_StartUp
 80044c4:	4805      	ldr	r0, [pc, #20]	; (80044dc <LoopForever+0x8>)
  bx   r0
 80044c6:	4700      	bx	r0

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80044c8:	f7ff fef8 	bl	80042bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044cc:	f002 fe90 	bl	80071f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044d0:	f7fd ff14 	bl	80022fc <main>

080044d4 <LoopForever>:

LoopForever:
    b LoopForever
 80044d4:	e7fe      	b.n	80044d4 <LoopForever>
 80044d6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80044d8:	20002000 	.word	0x20002000
  ldr  r0, =STL_StartUp
 80044dc:	08002ffd 	.word	0x08002ffd

080044e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044e0:	e7fe      	b.n	80044e0 <ADC1_COMP_IRQHandler>
	...

080044e4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80044ea:	1dfb      	adds	r3, r7, #7
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <HAL_Init+0x3c>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <HAL_Init+0x3c>)
 80044f6:	2140      	movs	r1, #64	; 0x40
 80044f8:	430a      	orrs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044fc:	2003      	movs	r0, #3
 80044fe:	f000 f811 	bl	8004524 <HAL_InitTick>
 8004502:	1e03      	subs	r3, r0, #0
 8004504:	d003      	beq.n	800450e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004506:	1dfb      	adds	r3, r7, #7
 8004508:	2201      	movs	r2, #1
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e001      	b.n	8004512 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800450e:	f7ff fc6f 	bl	8003df0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004512:	1dfb      	adds	r3, r7, #7
 8004514:	781b      	ldrb	r3, [r3, #0]
}
 8004516:	0018      	movs	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	b002      	add	sp, #8
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	40022000 	.word	0x40022000

08004524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004524:	b590      	push	{r4, r7, lr}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800452c:	4b14      	ldr	r3, [pc, #80]	; (8004580 <HAL_InitTick+0x5c>)
 800452e:	681c      	ldr	r4, [r3, #0]
 8004530:	4b14      	ldr	r3, [pc, #80]	; (8004584 <HAL_InitTick+0x60>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	0019      	movs	r1, r3
 8004536:	23fa      	movs	r3, #250	; 0xfa
 8004538:	0098      	lsls	r0, r3, #2
 800453a:	f7fb fe01 	bl	8000140 <__udivsi3>
 800453e:	0003      	movs	r3, r0
 8004540:	0019      	movs	r1, r3
 8004542:	0020      	movs	r0, r4
 8004544:	f7fb fdfc 	bl	8000140 <__udivsi3>
 8004548:	0003      	movs	r3, r0
 800454a:	0018      	movs	r0, r3
 800454c:	f000 f90b 	bl	8004766 <HAL_SYSTICK_Config>
 8004550:	1e03      	subs	r3, r0, #0
 8004552:	d001      	beq.n	8004558 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e00f      	b.n	8004578 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b03      	cmp	r3, #3
 800455c:	d80b      	bhi.n	8004576 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	2301      	movs	r3, #1
 8004562:	425b      	negs	r3, r3
 8004564:	2200      	movs	r2, #0
 8004566:	0018      	movs	r0, r3
 8004568:	f000 f8d8 	bl	800471c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_InitTick+0x64>)
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	e000      	b.n	8004578 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
}
 8004578:	0018      	movs	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	b003      	add	sp, #12
 800457e:	bd90      	pop	{r4, r7, pc}
 8004580:	20000080 	.word	0x20000080
 8004584:	20000088 	.word	0x20000088
 8004588:	20000084 	.word	0x20000084

0800458c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <HAL_IncTick+0x1c>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	001a      	movs	r2, r3
 8004596:	4b05      	ldr	r3, [pc, #20]	; (80045ac <HAL_IncTick+0x20>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	18d2      	adds	r2, r2, r3
 800459c:	4b03      	ldr	r3, [pc, #12]	; (80045ac <HAL_IncTick+0x20>)
 800459e:	601a      	str	r2, [r3, #0]
}
 80045a0:	46c0      	nop			; (mov r8, r8)
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	20000088 	.word	0x20000088
 80045ac:	20000398 	.word	0x20000398

080045b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  return uwTick;
 80045b4:	4b02      	ldr	r3, [pc, #8]	; (80045c0 <HAL_GetTick+0x10>)
 80045b6:	681b      	ldr	r3, [r3, #0]
}
 80045b8:	0018      	movs	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	20000398 	.word	0x20000398

080045c4 <__NVIC_EnableIRQ>:
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	0002      	movs	r2, r0
 80045cc:	1dfb      	adds	r3, r7, #7
 80045ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80045d0:	1dfb      	adds	r3, r7, #7
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b7f      	cmp	r3, #127	; 0x7f
 80045d6:	d809      	bhi.n	80045ec <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045d8:	1dfb      	adds	r3, r7, #7
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	001a      	movs	r2, r3
 80045de:	231f      	movs	r3, #31
 80045e0:	401a      	ands	r2, r3
 80045e2:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <__NVIC_EnableIRQ+0x30>)
 80045e4:	2101      	movs	r1, #1
 80045e6:	4091      	lsls	r1, r2
 80045e8:	000a      	movs	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]
}
 80045ec:	46c0      	nop			; (mov r8, r8)
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b002      	add	sp, #8
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	e000e100 	.word	0xe000e100

080045f8 <__NVIC_SetPriority>:
{
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	0002      	movs	r2, r0
 8004600:	6039      	str	r1, [r7, #0]
 8004602:	1dfb      	adds	r3, r7, #7
 8004604:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004606:	1dfb      	adds	r3, r7, #7
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b7f      	cmp	r3, #127	; 0x7f
 800460c:	d828      	bhi.n	8004660 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800460e:	4a2f      	ldr	r2, [pc, #188]	; (80046cc <__NVIC_SetPriority+0xd4>)
 8004610:	1dfb      	adds	r3, r7, #7
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	b25b      	sxtb	r3, r3
 8004616:	089b      	lsrs	r3, r3, #2
 8004618:	33c0      	adds	r3, #192	; 0xc0
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	589b      	ldr	r3, [r3, r2]
 800461e:	1dfa      	adds	r2, r7, #7
 8004620:	7812      	ldrb	r2, [r2, #0]
 8004622:	0011      	movs	r1, r2
 8004624:	2203      	movs	r2, #3
 8004626:	400a      	ands	r2, r1
 8004628:	00d2      	lsls	r2, r2, #3
 800462a:	21ff      	movs	r1, #255	; 0xff
 800462c:	4091      	lsls	r1, r2
 800462e:	000a      	movs	r2, r1
 8004630:	43d2      	mvns	r2, r2
 8004632:	401a      	ands	r2, r3
 8004634:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	019b      	lsls	r3, r3, #6
 800463a:	22ff      	movs	r2, #255	; 0xff
 800463c:	401a      	ands	r2, r3
 800463e:	1dfb      	adds	r3, r7, #7
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	0018      	movs	r0, r3
 8004644:	2303      	movs	r3, #3
 8004646:	4003      	ands	r3, r0
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800464c:	481f      	ldr	r0, [pc, #124]	; (80046cc <__NVIC_SetPriority+0xd4>)
 800464e:	1dfb      	adds	r3, r7, #7
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	b25b      	sxtb	r3, r3
 8004654:	089b      	lsrs	r3, r3, #2
 8004656:	430a      	orrs	r2, r1
 8004658:	33c0      	adds	r3, #192	; 0xc0
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	501a      	str	r2, [r3, r0]
}
 800465e:	e031      	b.n	80046c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004660:	4a1b      	ldr	r2, [pc, #108]	; (80046d0 <__NVIC_SetPriority+0xd8>)
 8004662:	1dfb      	adds	r3, r7, #7
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	0019      	movs	r1, r3
 8004668:	230f      	movs	r3, #15
 800466a:	400b      	ands	r3, r1
 800466c:	3b08      	subs	r3, #8
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	3306      	adds	r3, #6
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	18d3      	adds	r3, r2, r3
 8004676:	3304      	adds	r3, #4
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	1dfa      	adds	r2, r7, #7
 800467c:	7812      	ldrb	r2, [r2, #0]
 800467e:	0011      	movs	r1, r2
 8004680:	2203      	movs	r2, #3
 8004682:	400a      	ands	r2, r1
 8004684:	00d2      	lsls	r2, r2, #3
 8004686:	21ff      	movs	r1, #255	; 0xff
 8004688:	4091      	lsls	r1, r2
 800468a:	000a      	movs	r2, r1
 800468c:	43d2      	mvns	r2, r2
 800468e:	401a      	ands	r2, r3
 8004690:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	019b      	lsls	r3, r3, #6
 8004696:	22ff      	movs	r2, #255	; 0xff
 8004698:	401a      	ands	r2, r3
 800469a:	1dfb      	adds	r3, r7, #7
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	0018      	movs	r0, r3
 80046a0:	2303      	movs	r3, #3
 80046a2:	4003      	ands	r3, r0
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046a8:	4809      	ldr	r0, [pc, #36]	; (80046d0 <__NVIC_SetPriority+0xd8>)
 80046aa:	1dfb      	adds	r3, r7, #7
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	001c      	movs	r4, r3
 80046b0:	230f      	movs	r3, #15
 80046b2:	4023      	ands	r3, r4
 80046b4:	3b08      	subs	r3, #8
 80046b6:	089b      	lsrs	r3, r3, #2
 80046b8:	430a      	orrs	r2, r1
 80046ba:	3306      	adds	r3, #6
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	18c3      	adds	r3, r0, r3
 80046c0:	3304      	adds	r3, #4
 80046c2:	601a      	str	r2, [r3, #0]
}
 80046c4:	46c0      	nop			; (mov r8, r8)
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b003      	add	sp, #12
 80046ca:	bd90      	pop	{r4, r7, pc}
 80046cc:	e000e100 	.word	0xe000e100
 80046d0:	e000ed00 	.word	0xe000ed00

080046d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	1e5a      	subs	r2, r3, #1
 80046e0:	2380      	movs	r3, #128	; 0x80
 80046e2:	045b      	lsls	r3, r3, #17
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d301      	bcc.n	80046ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046e8:	2301      	movs	r3, #1
 80046ea:	e010      	b.n	800470e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ec:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <SysTick_Config+0x44>)
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	3a01      	subs	r2, #1
 80046f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046f4:	2301      	movs	r3, #1
 80046f6:	425b      	negs	r3, r3
 80046f8:	2103      	movs	r1, #3
 80046fa:	0018      	movs	r0, r3
 80046fc:	f7ff ff7c 	bl	80045f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004700:	4b05      	ldr	r3, [pc, #20]	; (8004718 <SysTick_Config+0x44>)
 8004702:	2200      	movs	r2, #0
 8004704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004706:	4b04      	ldr	r3, [pc, #16]	; (8004718 <SysTick_Config+0x44>)
 8004708:	2207      	movs	r2, #7
 800470a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800470c:	2300      	movs	r3, #0
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b002      	add	sp, #8
 8004714:	bd80      	pop	{r7, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	e000e010 	.word	0xe000e010

0800471c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	210f      	movs	r1, #15
 8004728:	187b      	adds	r3, r7, r1
 800472a:	1c02      	adds	r2, r0, #0
 800472c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	187b      	adds	r3, r7, r1
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	b25b      	sxtb	r3, r3
 8004736:	0011      	movs	r1, r2
 8004738:	0018      	movs	r0, r3
 800473a:	f7ff ff5d 	bl	80045f8 <__NVIC_SetPriority>
}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	46bd      	mov	sp, r7
 8004742:	b004      	add	sp, #16
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	0002      	movs	r2, r0
 800474e:	1dfb      	adds	r3, r7, #7
 8004750:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004752:	1dfb      	adds	r3, r7, #7
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	b25b      	sxtb	r3, r3
 8004758:	0018      	movs	r0, r3
 800475a:	f7ff ff33 	bl	80045c4 <__NVIC_EnableIRQ>
}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	46bd      	mov	sp, r7
 8004762:	b002      	add	sp, #8
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0018      	movs	r0, r3
 8004772:	f7ff ffaf 	bl	80046d4 <SysTick_Config>
 8004776:	0003      	movs	r3, r0
}
 8004778:	0018      	movs	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	b002      	add	sp, #8
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e056      	b.n	8004840 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	7f5b      	ldrb	r3, [r3, #29]
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d106      	bne.n	80047aa <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	0018      	movs	r0, r3
 80047a6:	f000 f882 	bl	80048ae <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2202      	movs	r2, #2
 80047ae:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	791b      	ldrb	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10c      	bne.n	80047d2 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a22      	ldr	r2, [pc, #136]	; (8004848 <HAL_CRC_Init+0xc8>)
 80047be:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2118      	movs	r1, #24
 80047cc:	438a      	bics	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]
 80047d0:	e00b      	b.n	80047ea <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6899      	ldr	r1, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	0018      	movs	r0, r3
 80047de:	f000 f985 	bl	8004aec <HAL_CRCEx_Polynomial_Set>
 80047e2:	1e03      	subs	r3, r0, #0
 80047e4:	d001      	beq.n	80047ea <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e02a      	b.n	8004840 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	795b      	ldrb	r3, [r3, #5]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d105      	bne.n	80047fe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2201      	movs	r2, #1
 80047f8:	4252      	negs	r2, r2
 80047fa:	611a      	str	r2, [r3, #16]
 80047fc:	e004      	b.n	8004808 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6912      	ldr	r2, [r2, #16]
 8004806:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2260      	movs	r2, #96	; 0x60
 8004810:	4393      	bics	r3, r2
 8004812:	0019      	movs	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	695a      	ldr	r2, [r3, #20]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2280      	movs	r2, #128	; 0x80
 8004828:	4393      	bics	r3, r2
 800482a:	0019      	movs	r1, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	0018      	movs	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	b002      	add	sp, #8
 8004846:	bd80      	pop	{r7, pc}
 8004848:	04c11db7 	.word	0x04c11db7

0800484c <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e023      	b.n	80048a6 <HAL_CRC_DeInit+0x5a>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	7f5b      	ldrb	r3, [r3, #29]
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d101      	bne.n	800486c <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8004868:	2302      	movs	r3, #2
 800486a:	e01c      	b.n	80048a6 <HAL_CRC_DeInit+0x5a>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	775a      	strb	r2, [r3, #29]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2101      	movs	r1, #1
 800487e:	430a      	orrs	r2, r1
 8004880:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	791b      	ldrb	r3, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2200      	movs	r2, #0
 800488e:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	0018      	movs	r0, r3
 8004894:	f000 f813 	bl	80048be <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	775a      	strb	r2, [r3, #29]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	0018      	movs	r0, r3
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b002      	add	sp, #8
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_CRC_MspInit>:
  * @brief  Initializes the CRC MSP.
  * @param  hcrc CRC handle
  * @retval None
  */
__weak void HAL_CRC_MspInit(CRC_HandleTypeDef *hcrc)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcrc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CRC_MspInit can be implemented in the user file
   */
}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b002      	add	sp, #8
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_CRC_MspDeInit>:
  * @brief  DeInitialize the CRC MSP.
  * @param  hcrc CRC handle
  * @retval None
  */
__weak void HAL_CRC_MspDeInit(CRC_HandleTypeDef *hcrc)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcrc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CRC_MspDeInit can be implemented in the user file
   */
}
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	46bd      	mov	sp, r7
 80048ca:	b002      	add	sp, #8
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b086      	sub	sp, #24
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80048da:	2300      	movs	r3, #0
 80048dc:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2202      	movs	r2, #2
 80048e2:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d005      	beq.n	80048f8 <HAL_CRC_Accumulate+0x2a>
 80048ec:	d82d      	bhi.n	800494a <HAL_CRC_Accumulate+0x7c>
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d019      	beq.n	8004926 <HAL_CRC_Accumulate+0x58>
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d020      	beq.n	8004938 <HAL_CRC_Accumulate+0x6a>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 80048f6:	e028      	b.n	800494a <HAL_CRC_Accumulate+0x7c>
      for (index = 0U; index < BufferLength; index++)
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e00a      	b.n	8004914 <HAL_CRC_Accumulate+0x46>
        hcrc->Instance->DR = pBuffer[index];
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	18d2      	adds	r2, r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	3301      	adds	r3, #1
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	429a      	cmp	r2, r3
 800491a:	d3f0      	bcc.n	80048fe <HAL_CRC_Accumulate+0x30>
      temp = hcrc->Instance->DR;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	613b      	str	r3, [r7, #16]
      break;
 8004924:	e012      	b.n	800494c <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	0018      	movs	r0, r3
 800492e:	f000 f815 	bl	800495c <CRC_Handle_8>
 8004932:	0003      	movs	r3, r0
 8004934:	613b      	str	r3, [r7, #16]
      break;
 8004936:	e009      	b.n	800494c <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	0018      	movs	r0, r3
 8004940:	f000 f89d 	bl	8004a7e <CRC_Handle_16>
 8004944:	0003      	movs	r3, r0
 8004946:	613b      	str	r3, [r7, #16]
      break;
 8004948:	e000      	b.n	800494c <HAL_CRC_Accumulate+0x7e>
      break;
 800494a:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2201      	movs	r2, #1
 8004950:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8004952:	693b      	ldr	r3, [r7, #16]
}
 8004954:	0018      	movs	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	b006      	add	sp, #24
 800495a:	bd80      	pop	{r7, pc}

0800495c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004968:	2300      	movs	r3, #0
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	e023      	b.n	80049b6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	18d3      	adds	r3, r2, r3
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	3301      	adds	r3, #1
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	18cb      	adds	r3, r1, r3
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004988:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	3302      	adds	r3, #2
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	18cb      	adds	r3, r1, r3
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004998:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	3303      	adds	r3, #3
 80049a0:	68b9      	ldr	r1, [r7, #8]
 80049a2:	18cb      	adds	r3, r1, r3
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80049ac:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80049ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	3301      	adds	r3, #1
 80049b4:	61fb      	str	r3, [r7, #28]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	089b      	lsrs	r3, r3, #2
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d3d6      	bcc.n	800496e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2203      	movs	r2, #3
 80049c4:	4013      	ands	r3, r2
 80049c6:	d053      	beq.n	8004a70 <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2203      	movs	r2, #3
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d107      	bne.n	80049e2 <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	18d2      	adds	r2, r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	7812      	ldrb	r2, [r2, #0]
 80049e0:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2203      	movs	r2, #3
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d119      	bne.n	8004a20 <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	18d3      	adds	r3, r2, r3
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	021b      	lsls	r3, r3, #8
 80049f8:	b21a      	sxth	r2, r3
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	3301      	adds	r3, #1
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	18cb      	adds	r3, r1, r3
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	b21b      	sxth	r3, r3
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	b21a      	sxth	r2, r3
 8004a0c:	211a      	movs	r1, #26
 8004a0e:	187b      	adds	r3, r7, r1
 8004a10:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	187a      	adds	r2, r7, r1
 8004a1c:	8812      	ldrh	r2, [r2, #0]
 8004a1e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2203      	movs	r2, #3
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d122      	bne.n	8004a70 <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	18d3      	adds	r3, r2, r3
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	021b      	lsls	r3, r3, #8
 8004a36:	b21a      	sxth	r2, r3
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	18cb      	adds	r3, r1, r3
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	b21b      	sxth	r3, r3
 8004a46:	4313      	orrs	r3, r2
 8004a48:	b21a      	sxth	r2, r3
 8004a4a:	211a      	movs	r1, #26
 8004a4c:	187b      	adds	r3, r7, r1
 8004a4e:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	187a      	adds	r2, r7, r1
 8004a5a:	8812      	ldrh	r2, [r2, #0]
 8004a5c:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	3302      	adds	r3, #2
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	18d2      	adds	r2, r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	7812      	ldrb	r2, [r2, #0]
 8004a6e:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
}
 8004a76:	0018      	movs	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b008      	add	sp, #32
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b086      	sub	sp, #24
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	e013      	b.n	8004ab8 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	18d3      	adds	r3, r2, r3
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	041a      	lsls	r2, r3, #16
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	3302      	adds	r3, #2
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	18cb      	adds	r3, r1, r3
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	0019      	movs	r1, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d3e6      	bcc.n	8004a90 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d009      	beq.n	8004ade <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	18d3      	adds	r3, r2, r3
 8004ad8:	881a      	ldrh	r2, [r3, #0]
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b006      	add	sp, #24
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af8:	2317      	movs	r3, #23
 8004afa:	18fb      	adds	r3, r7, r3
 8004afc:	2200      	movs	r2, #0
 8004afe:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004b00:	231f      	movs	r3, #31
 8004b02:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004b04:	46c0      	nop			; (mov r8, r8)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1e5a      	subs	r2, r3, #1
 8004b0a:	613a      	str	r2, [r7, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <HAL_CRCEx_Polynomial_Set+0x36>
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	221f      	movs	r2, #31
 8004b14:	4013      	ands	r3, r2
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	40da      	lsrs	r2, r3
 8004b1a:	0013      	movs	r3, r2
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d0f1      	beq.n	8004b06 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b18      	cmp	r3, #24
 8004b26:	d00f      	beq.n	8004b48 <HAL_CRCEx_Polynomial_Set+0x5c>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b18      	cmp	r3, #24
 8004b2c:	d824      	bhi.n	8004b78 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b10      	cmp	r3, #16
 8004b32:	d011      	beq.n	8004b58 <HAL_CRCEx_Polynomial_Set+0x6c>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b10      	cmp	r3, #16
 8004b38:	d81e      	bhi.n	8004b78 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d020      	beq.n	8004b82 <HAL_CRCEx_Polynomial_Set+0x96>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	d010      	beq.n	8004b68 <HAL_CRCEx_Polynomial_Set+0x7c>
 8004b46:	e017      	b.n	8004b78 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	2b06      	cmp	r3, #6
 8004b4c:	d91b      	bls.n	8004b86 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8004b4e:	2317      	movs	r3, #23
 8004b50:	18fb      	adds	r3, r7, r3
 8004b52:	2201      	movs	r2, #1
 8004b54:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004b56:	e016      	b.n	8004b86 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	2b07      	cmp	r3, #7
 8004b5c:	d915      	bls.n	8004b8a <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8004b5e:	2317      	movs	r3, #23
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	2201      	movs	r2, #1
 8004b64:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004b66:	e010      	b.n	8004b8a <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b0f      	cmp	r3, #15
 8004b6c:	d90f      	bls.n	8004b8e <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8004b6e:	2317      	movs	r3, #23
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	2201      	movs	r2, #1
 8004b74:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004b76:	e00a      	b.n	8004b8e <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004b78:	2317      	movs	r3, #23
 8004b7a:	18fb      	adds	r3, r7, r3
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	701a      	strb	r2, [r3, #0]
      break;
 8004b80:	e006      	b.n	8004b90 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	e004      	b.n	8004b90 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	e002      	b.n	8004b90 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	e000      	b.n	8004b90 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004b8e:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8004b90:	2317      	movs	r3, #23
 8004b92:	18fb      	adds	r3, r7, r3
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10e      	bne.n	8004bb8 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2218      	movs	r2, #24
 8004baa:	4393      	bics	r3, r2
 8004bac:	0019      	movs	r1, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004bb8:	2317      	movs	r3, #23
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	781b      	ldrb	r3, [r3, #0]
}
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b006      	add	sp, #24
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004bde:	e14f      	b.n	8004e80 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2101      	movs	r1, #1
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4091      	lsls	r1, r2
 8004bea:	000a      	movs	r2, r1
 8004bec:	4013      	ands	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d100      	bne.n	8004bf8 <HAL_GPIO_Init+0x30>
 8004bf6:	e140      	b.n	8004e7a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2203      	movs	r2, #3
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d005      	beq.n	8004c10 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2203      	movs	r2, #3
 8004c0a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d130      	bne.n	8004c72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	409a      	lsls	r2, r3
 8004c1e:	0013      	movs	r3, r2
 8004c20:	43da      	mvns	r2, r3
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4013      	ands	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	409a      	lsls	r2, r3
 8004c32:	0013      	movs	r3, r2
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c46:	2201      	movs	r2, #1
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	0013      	movs	r3, r2
 8004c4e:	43da      	mvns	r2, r3
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4013      	ands	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	401a      	ands	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	409a      	lsls	r2, r3
 8004c64:	0013      	movs	r3, r2
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2203      	movs	r2, #3
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d017      	beq.n	8004cae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	2203      	movs	r2, #3
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	0013      	movs	r3, r2
 8004c8e:	43da      	mvns	r2, r3
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4013      	ands	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	0013      	movs	r3, r2
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2203      	movs	r2, #3
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d123      	bne.n	8004d02 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	08da      	lsrs	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3208      	adds	r2, #8
 8004cc2:	0092      	lsls	r2, r2, #2
 8004cc4:	58d3      	ldr	r3, [r2, r3]
 8004cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2207      	movs	r2, #7
 8004ccc:	4013      	ands	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	220f      	movs	r2, #15
 8004cd2:	409a      	lsls	r2, r3
 8004cd4:	0013      	movs	r3, r2
 8004cd6:	43da      	mvns	r2, r3
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2107      	movs	r1, #7
 8004ce6:	400b      	ands	r3, r1
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	409a      	lsls	r2, r3
 8004cec:	0013      	movs	r3, r2
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	08da      	lsrs	r2, r3, #3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3208      	adds	r2, #8
 8004cfc:	0092      	lsls	r2, r2, #2
 8004cfe:	6939      	ldr	r1, [r7, #16]
 8004d00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	409a      	lsls	r2, r3
 8004d10:	0013      	movs	r3, r2
 8004d12:	43da      	mvns	r2, r3
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4013      	ands	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2203      	movs	r2, #3
 8004d20:	401a      	ands	r2, r3
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	409a      	lsls	r2, r3
 8004d28:	0013      	movs	r3, r2
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	23c0      	movs	r3, #192	; 0xc0
 8004d3c:	029b      	lsls	r3, r3, #10
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d100      	bne.n	8004d44 <HAL_GPIO_Init+0x17c>
 8004d42:	e09a      	b.n	8004e7a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d44:	4b54      	ldr	r3, [pc, #336]	; (8004e98 <HAL_GPIO_Init+0x2d0>)
 8004d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d48:	4b53      	ldr	r3, [pc, #332]	; (8004e98 <HAL_GPIO_Init+0x2d0>)
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d50:	4a52      	ldr	r2, [pc, #328]	; (8004e9c <HAL_GPIO_Init+0x2d4>)
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	089b      	lsrs	r3, r3, #2
 8004d56:	3302      	adds	r3, #2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	589b      	ldr	r3, [r3, r2]
 8004d5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2203      	movs	r2, #3
 8004d62:	4013      	ands	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	220f      	movs	r2, #15
 8004d68:	409a      	lsls	r2, r3
 8004d6a:	0013      	movs	r3, r2
 8004d6c:	43da      	mvns	r2, r3
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	4013      	ands	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	23a0      	movs	r3, #160	; 0xa0
 8004d78:	05db      	lsls	r3, r3, #23
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d019      	beq.n	8004db2 <HAL_GPIO_Init+0x1ea>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a47      	ldr	r2, [pc, #284]	; (8004ea0 <HAL_GPIO_Init+0x2d8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d013      	beq.n	8004dae <HAL_GPIO_Init+0x1e6>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a46      	ldr	r2, [pc, #280]	; (8004ea4 <HAL_GPIO_Init+0x2dc>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00d      	beq.n	8004daa <HAL_GPIO_Init+0x1e2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a45      	ldr	r2, [pc, #276]	; (8004ea8 <HAL_GPIO_Init+0x2e0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <HAL_GPIO_Init+0x1de>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a44      	ldr	r2, [pc, #272]	; (8004eac <HAL_GPIO_Init+0x2e4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d101      	bne.n	8004da2 <HAL_GPIO_Init+0x1da>
 8004d9e:	2305      	movs	r3, #5
 8004da0:	e008      	b.n	8004db4 <HAL_GPIO_Init+0x1ec>
 8004da2:	2306      	movs	r3, #6
 8004da4:	e006      	b.n	8004db4 <HAL_GPIO_Init+0x1ec>
 8004da6:	2303      	movs	r3, #3
 8004da8:	e004      	b.n	8004db4 <HAL_GPIO_Init+0x1ec>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e002      	b.n	8004db4 <HAL_GPIO_Init+0x1ec>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <HAL_GPIO_Init+0x1ec>
 8004db2:	2300      	movs	r3, #0
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	2103      	movs	r1, #3
 8004db8:	400a      	ands	r2, r1
 8004dba:	0092      	lsls	r2, r2, #2
 8004dbc:	4093      	lsls	r3, r2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dc4:	4935      	ldr	r1, [pc, #212]	; (8004e9c <HAL_GPIO_Init+0x2d4>)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	089b      	lsrs	r3, r3, #2
 8004dca:	3302      	adds	r3, #2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dd2:	4b37      	ldr	r3, [pc, #220]	; (8004eb0 <HAL_GPIO_Init+0x2e8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	43da      	mvns	r2, r3
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	4013      	ands	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	2380      	movs	r3, #128	; 0x80
 8004de8:	025b      	lsls	r3, r3, #9
 8004dea:	4013      	ands	r3, r2
 8004dec:	d003      	beq.n	8004df6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004df6:	4b2e      	ldr	r3, [pc, #184]	; (8004eb0 <HAL_GPIO_Init+0x2e8>)
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004dfc:	4b2c      	ldr	r3, [pc, #176]	; (8004eb0 <HAL_GPIO_Init+0x2e8>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	43da      	mvns	r2, r3
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	2380      	movs	r3, #128	; 0x80
 8004e12:	029b      	lsls	r3, r3, #10
 8004e14:	4013      	ands	r3, r2
 8004e16:	d003      	beq.n	8004e20 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e20:	4b23      	ldr	r3, [pc, #140]	; (8004eb0 <HAL_GPIO_Init+0x2e8>)
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e26:	4b22      	ldr	r3, [pc, #136]	; (8004eb0 <HAL_GPIO_Init+0x2e8>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	43da      	mvns	r2, r3
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	4013      	ands	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	2380      	movs	r3, #128	; 0x80
 8004e3c:	035b      	lsls	r3, r3, #13
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d003      	beq.n	8004e4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e4a:	4b19      	ldr	r3, [pc, #100]	; (8004eb0 <HAL_GPIO_Init+0x2e8>)
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004e50:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <HAL_GPIO_Init+0x2e8>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	43da      	mvns	r2, r3
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	2380      	movs	r3, #128	; 0x80
 8004e66:	039b      	lsls	r3, r3, #14
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d003      	beq.n	8004e74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004e74:	4b0e      	ldr	r3, [pc, #56]	; (8004eb0 <HAL_GPIO_Init+0x2e8>)
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	40da      	lsrs	r2, r3
 8004e88:	1e13      	subs	r3, r2, #0
 8004e8a:	d000      	beq.n	8004e8e <HAL_GPIO_Init+0x2c6>
 8004e8c:	e6a8      	b.n	8004be0 <HAL_GPIO_Init+0x18>
  }
}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	46c0      	nop			; (mov r8, r8)
 8004e92:	46bd      	mov	sp, r7
 8004e94:	b006      	add	sp, #24
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	40010000 	.word	0x40010000
 8004ea0:	50000400 	.word	0x50000400
 8004ea4:	50000800 	.word	0x50000800
 8004ea8:	50000c00 	.word	0x50000c00
 8004eac:	50001c00 	.word	0x50001c00
 8004eb0:	40010400 	.word	0x40010400

08004eb4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	0008      	movs	r0, r1
 8004ebe:	0011      	movs	r1, r2
 8004ec0:	1cbb      	adds	r3, r7, #2
 8004ec2:	1c02      	adds	r2, r0, #0
 8004ec4:	801a      	strh	r2, [r3, #0]
 8004ec6:	1c7b      	adds	r3, r7, #1
 8004ec8:	1c0a      	adds	r2, r1, #0
 8004eca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ecc:	1c7b      	adds	r3, r7, #1
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d004      	beq.n	8004ede <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ed4:	1cbb      	adds	r3, r7, #2
 8004ed6:	881a      	ldrh	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004edc:	e003      	b.n	8004ee6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004ede:	1cbb      	adds	r3, r7, #2
 8004ee0:	881a      	ldrh	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b002      	add	sp, #8
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	000a      	movs	r2, r1
 8004ef8:	1cbb      	adds	r3, r7, #2
 8004efa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f02:	1cbb      	adds	r3, r7, #2
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	041a      	lsls	r2, r3, #16
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	1cb9      	adds	r1, r7, #2
 8004f12:	8809      	ldrh	r1, [r1, #0]
 8004f14:	400b      	ands	r3, r1
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	619a      	str	r2, [r3, #24]
}
 8004f1c:	46c0      	nop			; (mov r8, r8)
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	b004      	add	sp, #16
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e03d      	b.n	8004fb2 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a20      	ldr	r2, [pc, #128]	; (8004fbc <HAL_IWDG_Init+0x98>)
 8004f3c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1f      	ldr	r2, [pc, #124]	; (8004fc0 <HAL_IWDG_Init+0x9c>)
 8004f44:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6852      	ldr	r2, [r2, #4]
 8004f4e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6892      	ldr	r2, [r2, #8]
 8004f58:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004f5a:	f7ff fb29 	bl	80045b0 <HAL_GetTick>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004f62:	e00e      	b.n	8004f82 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004f64:	f7ff fb24 	bl	80045b0 <HAL_GetTick>
 8004f68:	0002      	movs	r2, r0
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f70:	d907      	bls.n	8004f82 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	2207      	movs	r2, #7
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d001      	beq.n	8004f82 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e017      	b.n	8004fb2 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	2207      	movs	r2, #7
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	d1ea      	bne.n	8004f64 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d005      	beq.n	8004fa8 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	68d2      	ldr	r2, [r2, #12]
 8004fa4:	611a      	str	r2, [r3, #16]
 8004fa6:	e003      	b.n	8004fb0 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a05      	ldr	r2, [pc, #20]	; (8004fc4 <HAL_IWDG_Init+0xa0>)
 8004fae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b004      	add	sp, #16
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	0000cccc 	.word	0x0000cccc
 8004fc0:	00005555 	.word	0x00005555
 8004fc4:	0000aaaa 	.word	0x0000aaaa

08004fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc8:	b5b0      	push	{r4, r5, r7, lr}
 8004fca:	b08a      	sub	sp, #40	; 0x28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d102      	bne.n	8004fdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f000 fbaf 	bl	800573a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fdc:	4bcf      	ldr	r3, [pc, #828]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	220c      	movs	r2, #12
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fe6:	4bcd      	ldr	r3, [pc, #820]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	2380      	movs	r3, #128	; 0x80
 8004fec:	025b      	lsls	r3, r3, #9
 8004fee:	4013      	ands	r3, r2
 8004ff0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d100      	bne.n	8004ffe <HAL_RCC_OscConfig+0x36>
 8004ffc:	e07e      	b.n	80050fc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	2b08      	cmp	r3, #8
 8005002:	d007      	beq.n	8005014 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	2b0c      	cmp	r3, #12
 8005008:	d112      	bne.n	8005030 <HAL_RCC_OscConfig+0x68>
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	2380      	movs	r3, #128	; 0x80
 800500e:	025b      	lsls	r3, r3, #9
 8005010:	429a      	cmp	r2, r3
 8005012:	d10d      	bne.n	8005030 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005014:	4bc1      	ldr	r3, [pc, #772]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	2380      	movs	r3, #128	; 0x80
 800501a:	029b      	lsls	r3, r3, #10
 800501c:	4013      	ands	r3, r2
 800501e:	d100      	bne.n	8005022 <HAL_RCC_OscConfig+0x5a>
 8005020:	e06b      	b.n	80050fa <HAL_RCC_OscConfig+0x132>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d167      	bne.n	80050fa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f000 fb85 	bl	800573a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	2380      	movs	r3, #128	; 0x80
 8005036:	025b      	lsls	r3, r3, #9
 8005038:	429a      	cmp	r2, r3
 800503a:	d107      	bne.n	800504c <HAL_RCC_OscConfig+0x84>
 800503c:	4bb7      	ldr	r3, [pc, #732]	; (800531c <HAL_RCC_OscConfig+0x354>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4bb6      	ldr	r3, [pc, #728]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005042:	2180      	movs	r1, #128	; 0x80
 8005044:	0249      	lsls	r1, r1, #9
 8005046:	430a      	orrs	r2, r1
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e027      	b.n	800509c <HAL_RCC_OscConfig+0xd4>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	23a0      	movs	r3, #160	; 0xa0
 8005052:	02db      	lsls	r3, r3, #11
 8005054:	429a      	cmp	r2, r3
 8005056:	d10e      	bne.n	8005076 <HAL_RCC_OscConfig+0xae>
 8005058:	4bb0      	ldr	r3, [pc, #704]	; (800531c <HAL_RCC_OscConfig+0x354>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	4baf      	ldr	r3, [pc, #700]	; (800531c <HAL_RCC_OscConfig+0x354>)
 800505e:	2180      	movs	r1, #128	; 0x80
 8005060:	02c9      	lsls	r1, r1, #11
 8005062:	430a      	orrs	r2, r1
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	4bad      	ldr	r3, [pc, #692]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4bac      	ldr	r3, [pc, #688]	; (800531c <HAL_RCC_OscConfig+0x354>)
 800506c:	2180      	movs	r1, #128	; 0x80
 800506e:	0249      	lsls	r1, r1, #9
 8005070:	430a      	orrs	r2, r1
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e012      	b.n	800509c <HAL_RCC_OscConfig+0xd4>
 8005076:	4ba9      	ldr	r3, [pc, #676]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4ba8      	ldr	r3, [pc, #672]	; (800531c <HAL_RCC_OscConfig+0x354>)
 800507c:	49a8      	ldr	r1, [pc, #672]	; (8005320 <HAL_RCC_OscConfig+0x358>)
 800507e:	400a      	ands	r2, r1
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	4ba6      	ldr	r3, [pc, #664]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	2380      	movs	r3, #128	; 0x80
 8005088:	025b      	lsls	r3, r3, #9
 800508a:	4013      	ands	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4ba2      	ldr	r3, [pc, #648]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4ba1      	ldr	r3, [pc, #644]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005096:	49a3      	ldr	r1, [pc, #652]	; (8005324 <HAL_RCC_OscConfig+0x35c>)
 8005098:	400a      	ands	r2, r1
 800509a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d015      	beq.n	80050d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a4:	f7ff fa84 	bl	80045b0 <HAL_GetTick>
 80050a8:	0003      	movs	r3, r0
 80050aa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050ac:	e009      	b.n	80050c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050ae:	f7ff fa7f 	bl	80045b0 <HAL_GetTick>
 80050b2:	0002      	movs	r2, r0
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b64      	cmp	r3, #100	; 0x64
 80050ba:	d902      	bls.n	80050c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	f000 fb3c 	bl	800573a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050c2:	4b96      	ldr	r3, [pc, #600]	; (800531c <HAL_RCC_OscConfig+0x354>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	2380      	movs	r3, #128	; 0x80
 80050c8:	029b      	lsls	r3, r3, #10
 80050ca:	4013      	ands	r3, r2
 80050cc:	d0ef      	beq.n	80050ae <HAL_RCC_OscConfig+0xe6>
 80050ce:	e015      	b.n	80050fc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d0:	f7ff fa6e 	bl	80045b0 <HAL_GetTick>
 80050d4:	0003      	movs	r3, r0
 80050d6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050da:	f7ff fa69 	bl	80045b0 <HAL_GetTick>
 80050de:	0002      	movs	r2, r0
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b64      	cmp	r3, #100	; 0x64
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e326      	b.n	800573a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050ec:	4b8b      	ldr	r3, [pc, #556]	; (800531c <HAL_RCC_OscConfig+0x354>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	2380      	movs	r3, #128	; 0x80
 80050f2:	029b      	lsls	r3, r3, #10
 80050f4:	4013      	ands	r3, r2
 80050f6:	d1f0      	bne.n	80050da <HAL_RCC_OscConfig+0x112>
 80050f8:	e000      	b.n	80050fc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2202      	movs	r2, #2
 8005102:	4013      	ands	r3, r2
 8005104:	d100      	bne.n	8005108 <HAL_RCC_OscConfig+0x140>
 8005106:	e08b      	b.n	8005220 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	2b04      	cmp	r3, #4
 8005112:	d005      	beq.n	8005120 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	2b0c      	cmp	r3, #12
 8005118:	d13e      	bne.n	8005198 <HAL_RCC_OscConfig+0x1d0>
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d13b      	bne.n	8005198 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005120:	4b7e      	ldr	r3, [pc, #504]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2204      	movs	r2, #4
 8005126:	4013      	ands	r3, r2
 8005128:	d004      	beq.n	8005134 <HAL_RCC_OscConfig+0x16c>
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e302      	b.n	800573a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005134:	4b79      	ldr	r3, [pc, #484]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	4a7b      	ldr	r2, [pc, #492]	; (8005328 <HAL_RCC_OscConfig+0x360>)
 800513a:	4013      	ands	r3, r2
 800513c:	0019      	movs	r1, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	021a      	lsls	r2, r3, #8
 8005144:	4b75      	ldr	r3, [pc, #468]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005146:	430a      	orrs	r2, r1
 8005148:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800514a:	4b74      	ldr	r3, [pc, #464]	; (800531c <HAL_RCC_OscConfig+0x354>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2209      	movs	r2, #9
 8005150:	4393      	bics	r3, r2
 8005152:	0019      	movs	r1, r3
 8005154:	4b71      	ldr	r3, [pc, #452]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	430a      	orrs	r2, r1
 800515a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800515c:	f000 fcd2 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8005160:	0001      	movs	r1, r0
 8005162:	4b6e      	ldr	r3, [pc, #440]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	091b      	lsrs	r3, r3, #4
 8005168:	220f      	movs	r2, #15
 800516a:	4013      	ands	r3, r2
 800516c:	4a6f      	ldr	r2, [pc, #444]	; (800532c <HAL_RCC_OscConfig+0x364>)
 800516e:	5cd3      	ldrb	r3, [r2, r3]
 8005170:	000a      	movs	r2, r1
 8005172:	40da      	lsrs	r2, r3
 8005174:	4b6e      	ldr	r3, [pc, #440]	; (8005330 <HAL_RCC_OscConfig+0x368>)
 8005176:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005178:	4b6e      	ldr	r3, [pc, #440]	; (8005334 <HAL_RCC_OscConfig+0x36c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2513      	movs	r5, #19
 800517e:	197c      	adds	r4, r7, r5
 8005180:	0018      	movs	r0, r3
 8005182:	f7ff f9cf 	bl	8004524 <HAL_InitTick>
 8005186:	0003      	movs	r3, r0
 8005188:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800518a:	197b      	adds	r3, r7, r5
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d046      	beq.n	8005220 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8005192:	197b      	adds	r3, r7, r5
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	e2d0      	b.n	800573a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d027      	beq.n	80051ee <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800519e:	4b5f      	ldr	r3, [pc, #380]	; (800531c <HAL_RCC_OscConfig+0x354>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2209      	movs	r2, #9
 80051a4:	4393      	bics	r3, r2
 80051a6:	0019      	movs	r1, r3
 80051a8:	4b5c      	ldr	r3, [pc, #368]	; (800531c <HAL_RCC_OscConfig+0x354>)
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b0:	f7ff f9fe 	bl	80045b0 <HAL_GetTick>
 80051b4:	0003      	movs	r3, r0
 80051b6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ba:	f7ff f9f9 	bl	80045b0 <HAL_GetTick>
 80051be:	0002      	movs	r2, r0
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e2b6      	b.n	800573a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051cc:	4b53      	ldr	r3, [pc, #332]	; (800531c <HAL_RCC_OscConfig+0x354>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2204      	movs	r2, #4
 80051d2:	4013      	ands	r3, r2
 80051d4:	d0f1      	beq.n	80051ba <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d6:	4b51      	ldr	r3, [pc, #324]	; (800531c <HAL_RCC_OscConfig+0x354>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	4a53      	ldr	r2, [pc, #332]	; (8005328 <HAL_RCC_OscConfig+0x360>)
 80051dc:	4013      	ands	r3, r2
 80051de:	0019      	movs	r1, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	021a      	lsls	r2, r3, #8
 80051e6:	4b4d      	ldr	r3, [pc, #308]	; (800531c <HAL_RCC_OscConfig+0x354>)
 80051e8:	430a      	orrs	r2, r1
 80051ea:	605a      	str	r2, [r3, #4]
 80051ec:	e018      	b.n	8005220 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ee:	4b4b      	ldr	r3, [pc, #300]	; (800531c <HAL_RCC_OscConfig+0x354>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b4a      	ldr	r3, [pc, #296]	; (800531c <HAL_RCC_OscConfig+0x354>)
 80051f4:	2101      	movs	r1, #1
 80051f6:	438a      	bics	r2, r1
 80051f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fa:	f7ff f9d9 	bl	80045b0 <HAL_GetTick>
 80051fe:	0003      	movs	r3, r0
 8005200:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005204:	f7ff f9d4 	bl	80045b0 <HAL_GetTick>
 8005208:	0002      	movs	r2, r0
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e291      	b.n	800573a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005216:	4b41      	ldr	r3, [pc, #260]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2204      	movs	r2, #4
 800521c:	4013      	ands	r3, r2
 800521e:	d1f1      	bne.n	8005204 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2210      	movs	r2, #16
 8005226:	4013      	ands	r3, r2
 8005228:	d100      	bne.n	800522c <HAL_RCC_OscConfig+0x264>
 800522a:	e0a1      	b.n	8005370 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d140      	bne.n	80052b4 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005232:	4b3a      	ldr	r3, [pc, #232]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	2380      	movs	r3, #128	; 0x80
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4013      	ands	r3, r2
 800523c:	d005      	beq.n	800524a <HAL_RCC_OscConfig+0x282>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e277      	b.n	800573a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800524a:	4b34      	ldr	r3, [pc, #208]	; (800531c <HAL_RCC_OscConfig+0x354>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	4a3a      	ldr	r2, [pc, #232]	; (8005338 <HAL_RCC_OscConfig+0x370>)
 8005250:	4013      	ands	r3, r2
 8005252:	0019      	movs	r1, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005258:	4b30      	ldr	r3, [pc, #192]	; (800531c <HAL_RCC_OscConfig+0x354>)
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800525e:	4b2f      	ldr	r3, [pc, #188]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	0a19      	lsrs	r1, r3, #8
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	061a      	lsls	r2, r3, #24
 800526c:	4b2b      	ldr	r3, [pc, #172]	; (800531c <HAL_RCC_OscConfig+0x354>)
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	0b5b      	lsrs	r3, r3, #13
 8005278:	3301      	adds	r3, #1
 800527a:	2280      	movs	r2, #128	; 0x80
 800527c:	0212      	lsls	r2, r2, #8
 800527e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005280:	4b26      	ldr	r3, [pc, #152]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	210f      	movs	r1, #15
 8005288:	400b      	ands	r3, r1
 800528a:	4928      	ldr	r1, [pc, #160]	; (800532c <HAL_RCC_OscConfig+0x364>)
 800528c:	5ccb      	ldrb	r3, [r1, r3]
 800528e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005290:	4b27      	ldr	r3, [pc, #156]	; (8005330 <HAL_RCC_OscConfig+0x368>)
 8005292:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005294:	4b27      	ldr	r3, [pc, #156]	; (8005334 <HAL_RCC_OscConfig+0x36c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2513      	movs	r5, #19
 800529a:	197c      	adds	r4, r7, r5
 800529c:	0018      	movs	r0, r3
 800529e:	f7ff f941 	bl	8004524 <HAL_InitTick>
 80052a2:	0003      	movs	r3, r0
 80052a4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80052a6:	197b      	adds	r3, r7, r5
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d060      	beq.n	8005370 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80052ae:	197b      	adds	r3, r7, r5
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	e242      	b.n	800573a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d03f      	beq.n	800533c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80052bc:	4b17      	ldr	r3, [pc, #92]	; (800531c <HAL_RCC_OscConfig+0x354>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b16      	ldr	r3, [pc, #88]	; (800531c <HAL_RCC_OscConfig+0x354>)
 80052c2:	2180      	movs	r1, #128	; 0x80
 80052c4:	0049      	lsls	r1, r1, #1
 80052c6:	430a      	orrs	r2, r1
 80052c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ca:	f7ff f971 	bl	80045b0 <HAL_GetTick>
 80052ce:	0003      	movs	r3, r0
 80052d0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052d4:	f7ff f96c 	bl	80045b0 <HAL_GetTick>
 80052d8:	0002      	movs	r2, r0
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e229      	b.n	800573a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80052e6:	4b0d      	ldr	r3, [pc, #52]	; (800531c <HAL_RCC_OscConfig+0x354>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	2380      	movs	r3, #128	; 0x80
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4013      	ands	r3, r2
 80052f0:	d0f0      	beq.n	80052d4 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052f2:	4b0a      	ldr	r3, [pc, #40]	; (800531c <HAL_RCC_OscConfig+0x354>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	4a10      	ldr	r2, [pc, #64]	; (8005338 <HAL_RCC_OscConfig+0x370>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	0019      	movs	r1, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005300:	4b06      	ldr	r3, [pc, #24]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	0a19      	lsrs	r1, r3, #8
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	061a      	lsls	r2, r3, #24
 8005314:	4b01      	ldr	r3, [pc, #4]	; (800531c <HAL_RCC_OscConfig+0x354>)
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
 800531a:	e029      	b.n	8005370 <HAL_RCC_OscConfig+0x3a8>
 800531c:	40021000 	.word	0x40021000
 8005320:	fffeffff 	.word	0xfffeffff
 8005324:	fffbffff 	.word	0xfffbffff
 8005328:	ffffe0ff 	.word	0xffffe0ff
 800532c:	0800a740 	.word	0x0800a740
 8005330:	20000080 	.word	0x20000080
 8005334:	20000084 	.word	0x20000084
 8005338:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800533c:	4bbd      	ldr	r3, [pc, #756]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4bbc      	ldr	r3, [pc, #752]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 8005342:	49bd      	ldr	r1, [pc, #756]	; (8005638 <HAL_RCC_OscConfig+0x670>)
 8005344:	400a      	ands	r2, r1
 8005346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005348:	f7ff f932 	bl	80045b0 <HAL_GetTick>
 800534c:	0003      	movs	r3, r0
 800534e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005352:	f7ff f92d 	bl	80045b0 <HAL_GetTick>
 8005356:	0002      	movs	r2, r0
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e1ea      	b.n	800573a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005364:	4bb3      	ldr	r3, [pc, #716]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	2380      	movs	r3, #128	; 0x80
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4013      	ands	r3, r2
 800536e:	d1f0      	bne.n	8005352 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2208      	movs	r2, #8
 8005376:	4013      	ands	r3, r2
 8005378:	d036      	beq.n	80053e8 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d019      	beq.n	80053b6 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005382:	4bac      	ldr	r3, [pc, #688]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 8005384:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005386:	4bab      	ldr	r3, [pc, #684]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 8005388:	2101      	movs	r1, #1
 800538a:	430a      	orrs	r2, r1
 800538c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800538e:	f7ff f90f 	bl	80045b0 <HAL_GetTick>
 8005392:	0003      	movs	r3, r0
 8005394:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005398:	f7ff f90a 	bl	80045b0 <HAL_GetTick>
 800539c:	0002      	movs	r2, r0
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e1c7      	b.n	800573a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053aa:	4ba2      	ldr	r3, [pc, #648]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80053ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ae:	2202      	movs	r2, #2
 80053b0:	4013      	ands	r3, r2
 80053b2:	d0f1      	beq.n	8005398 <HAL_RCC_OscConfig+0x3d0>
 80053b4:	e018      	b.n	80053e8 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053b6:	4b9f      	ldr	r3, [pc, #636]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80053b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053ba:	4b9e      	ldr	r3, [pc, #632]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80053bc:	2101      	movs	r1, #1
 80053be:	438a      	bics	r2, r1
 80053c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c2:	f7ff f8f5 	bl	80045b0 <HAL_GetTick>
 80053c6:	0003      	movs	r3, r0
 80053c8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053cc:	f7ff f8f0 	bl	80045b0 <HAL_GetTick>
 80053d0:	0002      	movs	r2, r0
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e1ad      	b.n	800573a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053de:	4b95      	ldr	r3, [pc, #596]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	2202      	movs	r2, #2
 80053e4:	4013      	ands	r3, r2
 80053e6:	d1f1      	bne.n	80053cc <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2204      	movs	r2, #4
 80053ee:	4013      	ands	r3, r2
 80053f0:	d100      	bne.n	80053f4 <HAL_RCC_OscConfig+0x42c>
 80053f2:	e0ae      	b.n	8005552 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053f4:	2027      	movs	r0, #39	; 0x27
 80053f6:	183b      	adds	r3, r7, r0
 80053f8:	2200      	movs	r2, #0
 80053fa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053fc:	4b8d      	ldr	r3, [pc, #564]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80053fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	055b      	lsls	r3, r3, #21
 8005404:	4013      	ands	r3, r2
 8005406:	d109      	bne.n	800541c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005408:	4b8a      	ldr	r3, [pc, #552]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 800540a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800540c:	4b89      	ldr	r3, [pc, #548]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 800540e:	2180      	movs	r1, #128	; 0x80
 8005410:	0549      	lsls	r1, r1, #21
 8005412:	430a      	orrs	r2, r1
 8005414:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005416:	183b      	adds	r3, r7, r0
 8005418:	2201      	movs	r2, #1
 800541a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800541c:	4b87      	ldr	r3, [pc, #540]	; (800563c <HAL_RCC_OscConfig+0x674>)
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	4013      	ands	r3, r2
 8005426:	d11a      	bne.n	800545e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005428:	4b84      	ldr	r3, [pc, #528]	; (800563c <HAL_RCC_OscConfig+0x674>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	4b83      	ldr	r3, [pc, #524]	; (800563c <HAL_RCC_OscConfig+0x674>)
 800542e:	2180      	movs	r1, #128	; 0x80
 8005430:	0049      	lsls	r1, r1, #1
 8005432:	430a      	orrs	r2, r1
 8005434:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005436:	f7ff f8bb 	bl	80045b0 <HAL_GetTick>
 800543a:	0003      	movs	r3, r0
 800543c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005440:	f7ff f8b6 	bl	80045b0 <HAL_GetTick>
 8005444:	0002      	movs	r2, r0
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	; 0x64
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e173      	b.n	800573a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005452:	4b7a      	ldr	r3, [pc, #488]	; (800563c <HAL_RCC_OscConfig+0x674>)
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	2380      	movs	r3, #128	; 0x80
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	4013      	ands	r3, r2
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	2380      	movs	r3, #128	; 0x80
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	429a      	cmp	r2, r3
 8005468:	d107      	bne.n	800547a <HAL_RCC_OscConfig+0x4b2>
 800546a:	4b72      	ldr	r3, [pc, #456]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 800546c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800546e:	4b71      	ldr	r3, [pc, #452]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 8005470:	2180      	movs	r1, #128	; 0x80
 8005472:	0049      	lsls	r1, r1, #1
 8005474:	430a      	orrs	r2, r1
 8005476:	651a      	str	r2, [r3, #80]	; 0x50
 8005478:	e031      	b.n	80054de <HAL_RCC_OscConfig+0x516>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10c      	bne.n	800549c <HAL_RCC_OscConfig+0x4d4>
 8005482:	4b6c      	ldr	r3, [pc, #432]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 8005484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005486:	4b6b      	ldr	r3, [pc, #428]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 8005488:	496b      	ldr	r1, [pc, #428]	; (8005638 <HAL_RCC_OscConfig+0x670>)
 800548a:	400a      	ands	r2, r1
 800548c:	651a      	str	r2, [r3, #80]	; 0x50
 800548e:	4b69      	ldr	r3, [pc, #420]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 8005490:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005492:	4b68      	ldr	r3, [pc, #416]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 8005494:	496a      	ldr	r1, [pc, #424]	; (8005640 <HAL_RCC_OscConfig+0x678>)
 8005496:	400a      	ands	r2, r1
 8005498:	651a      	str	r2, [r3, #80]	; 0x50
 800549a:	e020      	b.n	80054de <HAL_RCC_OscConfig+0x516>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	23a0      	movs	r3, #160	; 0xa0
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d10e      	bne.n	80054c6 <HAL_RCC_OscConfig+0x4fe>
 80054a8:	4b62      	ldr	r3, [pc, #392]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80054aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ac:	4b61      	ldr	r3, [pc, #388]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80054ae:	2180      	movs	r1, #128	; 0x80
 80054b0:	00c9      	lsls	r1, r1, #3
 80054b2:	430a      	orrs	r2, r1
 80054b4:	651a      	str	r2, [r3, #80]	; 0x50
 80054b6:	4b5f      	ldr	r3, [pc, #380]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80054b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ba:	4b5e      	ldr	r3, [pc, #376]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80054bc:	2180      	movs	r1, #128	; 0x80
 80054be:	0049      	lsls	r1, r1, #1
 80054c0:	430a      	orrs	r2, r1
 80054c2:	651a      	str	r2, [r3, #80]	; 0x50
 80054c4:	e00b      	b.n	80054de <HAL_RCC_OscConfig+0x516>
 80054c6:	4b5b      	ldr	r3, [pc, #364]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80054c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ca:	4b5a      	ldr	r3, [pc, #360]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80054cc:	495a      	ldr	r1, [pc, #360]	; (8005638 <HAL_RCC_OscConfig+0x670>)
 80054ce:	400a      	ands	r2, r1
 80054d0:	651a      	str	r2, [r3, #80]	; 0x50
 80054d2:	4b58      	ldr	r3, [pc, #352]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80054d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054d6:	4b57      	ldr	r3, [pc, #348]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80054d8:	4959      	ldr	r1, [pc, #356]	; (8005640 <HAL_RCC_OscConfig+0x678>)
 80054da:	400a      	ands	r2, r1
 80054dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d015      	beq.n	8005512 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e6:	f7ff f863 	bl	80045b0 <HAL_GetTick>
 80054ea:	0003      	movs	r3, r0
 80054ec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054ee:	e009      	b.n	8005504 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054f0:	f7ff f85e 	bl	80045b0 <HAL_GetTick>
 80054f4:	0002      	movs	r2, r0
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	4a52      	ldr	r2, [pc, #328]	; (8005644 <HAL_RCC_OscConfig+0x67c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e11a      	b.n	800573a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005504:	4b4b      	ldr	r3, [pc, #300]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 8005506:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4013      	ands	r3, r2
 800550e:	d0ef      	beq.n	80054f0 <HAL_RCC_OscConfig+0x528>
 8005510:	e014      	b.n	800553c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005512:	f7ff f84d 	bl	80045b0 <HAL_GetTick>
 8005516:	0003      	movs	r3, r0
 8005518:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800551a:	e009      	b.n	8005530 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800551c:	f7ff f848 	bl	80045b0 <HAL_GetTick>
 8005520:	0002      	movs	r2, r0
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	4a47      	ldr	r2, [pc, #284]	; (8005644 <HAL_RCC_OscConfig+0x67c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e104      	b.n	800573a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005530:	4b40      	ldr	r3, [pc, #256]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 8005532:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005534:	2380      	movs	r3, #128	; 0x80
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4013      	ands	r3, r2
 800553a:	d1ef      	bne.n	800551c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800553c:	2327      	movs	r3, #39	; 0x27
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d105      	bne.n	8005552 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005546:	4b3b      	ldr	r3, [pc, #236]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 8005548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800554a:	4b3a      	ldr	r3, [pc, #232]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 800554c:	493e      	ldr	r1, [pc, #248]	; (8005648 <HAL_RCC_OscConfig+0x680>)
 800554e:	400a      	ands	r2, r1
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2220      	movs	r2, #32
 8005558:	4013      	ands	r3, r2
 800555a:	d049      	beq.n	80055f0 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d026      	beq.n	80055b2 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005564:	4b33      	ldr	r3, [pc, #204]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	4b32      	ldr	r3, [pc, #200]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 800556a:	2101      	movs	r1, #1
 800556c:	430a      	orrs	r2, r1
 800556e:	609a      	str	r2, [r3, #8]
 8005570:	4b30      	ldr	r3, [pc, #192]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 8005572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005574:	4b2f      	ldr	r3, [pc, #188]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 8005576:	2101      	movs	r1, #1
 8005578:	430a      	orrs	r2, r1
 800557a:	635a      	str	r2, [r3, #52]	; 0x34
 800557c:	4b33      	ldr	r3, [pc, #204]	; (800564c <HAL_RCC_OscConfig+0x684>)
 800557e:	6a1a      	ldr	r2, [r3, #32]
 8005580:	4b32      	ldr	r3, [pc, #200]	; (800564c <HAL_RCC_OscConfig+0x684>)
 8005582:	2180      	movs	r1, #128	; 0x80
 8005584:	0189      	lsls	r1, r1, #6
 8005586:	430a      	orrs	r2, r1
 8005588:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800558a:	f7ff f811 	bl	80045b0 <HAL_GetTick>
 800558e:	0003      	movs	r3, r0
 8005590:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005594:	f7ff f80c 	bl	80045b0 <HAL_GetTick>
 8005598:	0002      	movs	r2, r0
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e0c9      	b.n	800573a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055a6:	4b23      	ldr	r3, [pc, #140]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2202      	movs	r2, #2
 80055ac:	4013      	ands	r3, r2
 80055ae:	d0f1      	beq.n	8005594 <HAL_RCC_OscConfig+0x5cc>
 80055b0:	e01e      	b.n	80055f0 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80055b2:	4b20      	ldr	r3, [pc, #128]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	4b1f      	ldr	r3, [pc, #124]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80055b8:	2101      	movs	r1, #1
 80055ba:	438a      	bics	r2, r1
 80055bc:	609a      	str	r2, [r3, #8]
 80055be:	4b23      	ldr	r3, [pc, #140]	; (800564c <HAL_RCC_OscConfig+0x684>)
 80055c0:	6a1a      	ldr	r2, [r3, #32]
 80055c2:	4b22      	ldr	r3, [pc, #136]	; (800564c <HAL_RCC_OscConfig+0x684>)
 80055c4:	4922      	ldr	r1, [pc, #136]	; (8005650 <HAL_RCC_OscConfig+0x688>)
 80055c6:	400a      	ands	r2, r1
 80055c8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ca:	f7fe fff1 	bl	80045b0 <HAL_GetTick>
 80055ce:	0003      	movs	r3, r0
 80055d0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055d4:	f7fe ffec 	bl	80045b0 <HAL_GetTick>
 80055d8:	0002      	movs	r2, r0
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e0a9      	b.n	800573a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055e6:	4b13      	ldr	r3, [pc, #76]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2202      	movs	r2, #2
 80055ec:	4013      	ands	r3, r2
 80055ee:	d1f1      	bne.n	80055d4 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d100      	bne.n	80055fa <HAL_RCC_OscConfig+0x632>
 80055f8:	e09e      	b.n	8005738 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	d100      	bne.n	8005602 <HAL_RCC_OscConfig+0x63a>
 8005600:	e077      	b.n	80056f2 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005606:	2b02      	cmp	r3, #2
 8005608:	d158      	bne.n	80056bc <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560a:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	4b09      	ldr	r3, [pc, #36]	; (8005634 <HAL_RCC_OscConfig+0x66c>)
 8005610:	4910      	ldr	r1, [pc, #64]	; (8005654 <HAL_RCC_OscConfig+0x68c>)
 8005612:	400a      	ands	r2, r1
 8005614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005616:	f7fe ffcb 	bl	80045b0 <HAL_GetTick>
 800561a:	0003      	movs	r3, r0
 800561c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800561e:	e01b      	b.n	8005658 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005620:	f7fe ffc6 	bl	80045b0 <HAL_GetTick>
 8005624:	0002      	movs	r2, r0
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d914      	bls.n	8005658 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e083      	b.n	800573a <HAL_RCC_OscConfig+0x772>
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	40021000 	.word	0x40021000
 8005638:	fffffeff 	.word	0xfffffeff
 800563c:	40007000 	.word	0x40007000
 8005640:	fffffbff 	.word	0xfffffbff
 8005644:	00001388 	.word	0x00001388
 8005648:	efffffff 	.word	0xefffffff
 800564c:	40010000 	.word	0x40010000
 8005650:	ffffdfff 	.word	0xffffdfff
 8005654:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005658:	4b3a      	ldr	r3, [pc, #232]	; (8005744 <HAL_RCC_OscConfig+0x77c>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	2380      	movs	r3, #128	; 0x80
 800565e:	049b      	lsls	r3, r3, #18
 8005660:	4013      	ands	r3, r2
 8005662:	d1dd      	bne.n	8005620 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005664:	4b37      	ldr	r3, [pc, #220]	; (8005744 <HAL_RCC_OscConfig+0x77c>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4a37      	ldr	r2, [pc, #220]	; (8005748 <HAL_RCC_OscConfig+0x780>)
 800566a:	4013      	ands	r3, r2
 800566c:	0019      	movs	r1, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567c:	431a      	orrs	r2, r3
 800567e:	4b31      	ldr	r3, [pc, #196]	; (8005744 <HAL_RCC_OscConfig+0x77c>)
 8005680:	430a      	orrs	r2, r1
 8005682:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005684:	4b2f      	ldr	r3, [pc, #188]	; (8005744 <HAL_RCC_OscConfig+0x77c>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4b2e      	ldr	r3, [pc, #184]	; (8005744 <HAL_RCC_OscConfig+0x77c>)
 800568a:	2180      	movs	r1, #128	; 0x80
 800568c:	0449      	lsls	r1, r1, #17
 800568e:	430a      	orrs	r2, r1
 8005690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005692:	f7fe ff8d 	bl	80045b0 <HAL_GetTick>
 8005696:	0003      	movs	r3, r0
 8005698:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800569a:	e008      	b.n	80056ae <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800569c:	f7fe ff88 	bl	80045b0 <HAL_GetTick>
 80056a0:	0002      	movs	r2, r0
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e045      	b.n	800573a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80056ae:	4b25      	ldr	r3, [pc, #148]	; (8005744 <HAL_RCC_OscConfig+0x77c>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	2380      	movs	r3, #128	; 0x80
 80056b4:	049b      	lsls	r3, r3, #18
 80056b6:	4013      	ands	r3, r2
 80056b8:	d0f0      	beq.n	800569c <HAL_RCC_OscConfig+0x6d4>
 80056ba:	e03d      	b.n	8005738 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056bc:	4b21      	ldr	r3, [pc, #132]	; (8005744 <HAL_RCC_OscConfig+0x77c>)
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	4b20      	ldr	r3, [pc, #128]	; (8005744 <HAL_RCC_OscConfig+0x77c>)
 80056c2:	4922      	ldr	r1, [pc, #136]	; (800574c <HAL_RCC_OscConfig+0x784>)
 80056c4:	400a      	ands	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c8:	f7fe ff72 	bl	80045b0 <HAL_GetTick>
 80056cc:	0003      	movs	r3, r0
 80056ce:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d2:	f7fe ff6d 	bl	80045b0 <HAL_GetTick>
 80056d6:	0002      	movs	r2, r0
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e02a      	b.n	800573a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80056e4:	4b17      	ldr	r3, [pc, #92]	; (8005744 <HAL_RCC_OscConfig+0x77c>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	2380      	movs	r3, #128	; 0x80
 80056ea:	049b      	lsls	r3, r3, #18
 80056ec:	4013      	ands	r3, r2
 80056ee:	d1f0      	bne.n	80056d2 <HAL_RCC_OscConfig+0x70a>
 80056f0:	e022      	b.n	8005738 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e01d      	b.n	800573a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80056fe:	4b11      	ldr	r3, [pc, #68]	; (8005744 <HAL_RCC_OscConfig+0x77c>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	2380      	movs	r3, #128	; 0x80
 8005708:	025b      	lsls	r3, r3, #9
 800570a:	401a      	ands	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	429a      	cmp	r2, r3
 8005712:	d10f      	bne.n	8005734 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	23f0      	movs	r3, #240	; 0xf0
 8005718:	039b      	lsls	r3, r3, #14
 800571a:	401a      	ands	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005720:	429a      	cmp	r2, r3
 8005722:	d107      	bne.n	8005734 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	23c0      	movs	r3, #192	; 0xc0
 8005728:	041b      	lsls	r3, r3, #16
 800572a:	401a      	ands	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005730:	429a      	cmp	r2, r3
 8005732:	d001      	beq.n	8005738 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	0018      	movs	r0, r3
 800573c:	46bd      	mov	sp, r7
 800573e:	b00a      	add	sp, #40	; 0x28
 8005740:	bdb0      	pop	{r4, r5, r7, pc}
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	40021000 	.word	0x40021000
 8005748:	ff02ffff 	.word	0xff02ffff
 800574c:	feffffff 	.word	0xfeffffff

08005750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005750:	b5b0      	push	{r4, r5, r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e128      	b.n	80059b6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005764:	4b96      	ldr	r3, [pc, #600]	; (80059c0 <HAL_RCC_ClockConfig+0x270>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2201      	movs	r2, #1
 800576a:	4013      	ands	r3, r2
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d91e      	bls.n	80057b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005772:	4b93      	ldr	r3, [pc, #588]	; (80059c0 <HAL_RCC_ClockConfig+0x270>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2201      	movs	r2, #1
 8005778:	4393      	bics	r3, r2
 800577a:	0019      	movs	r1, r3
 800577c:	4b90      	ldr	r3, [pc, #576]	; (80059c0 <HAL_RCC_ClockConfig+0x270>)
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005784:	f7fe ff14 	bl	80045b0 <HAL_GetTick>
 8005788:	0003      	movs	r3, r0
 800578a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800578c:	e009      	b.n	80057a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800578e:	f7fe ff0f 	bl	80045b0 <HAL_GetTick>
 8005792:	0002      	movs	r2, r0
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	4a8a      	ldr	r2, [pc, #552]	; (80059c4 <HAL_RCC_ClockConfig+0x274>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e109      	b.n	80059b6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a2:	4b87      	ldr	r3, [pc, #540]	; (80059c0 <HAL_RCC_ClockConfig+0x270>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2201      	movs	r2, #1
 80057a8:	4013      	ands	r3, r2
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d1ee      	bne.n	800578e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2202      	movs	r2, #2
 80057b6:	4013      	ands	r3, r2
 80057b8:	d009      	beq.n	80057ce <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ba:	4b83      	ldr	r3, [pc, #524]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	22f0      	movs	r2, #240	; 0xf0
 80057c0:	4393      	bics	r3, r2
 80057c2:	0019      	movs	r1, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	4b7f      	ldr	r3, [pc, #508]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 80057ca:	430a      	orrs	r2, r1
 80057cc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2201      	movs	r2, #1
 80057d4:	4013      	ands	r3, r2
 80057d6:	d100      	bne.n	80057da <HAL_RCC_ClockConfig+0x8a>
 80057d8:	e089      	b.n	80058ee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d107      	bne.n	80057f2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057e2:	4b79      	ldr	r3, [pc, #484]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	2380      	movs	r3, #128	; 0x80
 80057e8:	029b      	lsls	r3, r3, #10
 80057ea:	4013      	ands	r3, r2
 80057ec:	d120      	bne.n	8005830 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e0e1      	b.n	80059b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d107      	bne.n	800580a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057fa:	4b73      	ldr	r3, [pc, #460]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	2380      	movs	r3, #128	; 0x80
 8005800:	049b      	lsls	r3, r3, #18
 8005802:	4013      	ands	r3, r2
 8005804:	d114      	bne.n	8005830 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e0d5      	b.n	80059b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d106      	bne.n	8005820 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005812:	4b6d      	ldr	r3, [pc, #436]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2204      	movs	r2, #4
 8005818:	4013      	ands	r3, r2
 800581a:	d109      	bne.n	8005830 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0ca      	b.n	80059b6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005820:	4b69      	ldr	r3, [pc, #420]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	2380      	movs	r3, #128	; 0x80
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4013      	ands	r3, r2
 800582a:	d101      	bne.n	8005830 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e0c2      	b.n	80059b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005830:	4b65      	ldr	r3, [pc, #404]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	2203      	movs	r2, #3
 8005836:	4393      	bics	r3, r2
 8005838:	0019      	movs	r1, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	4b62      	ldr	r3, [pc, #392]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 8005840:	430a      	orrs	r2, r1
 8005842:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005844:	f7fe feb4 	bl	80045b0 <HAL_GetTick>
 8005848:	0003      	movs	r3, r0
 800584a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d111      	bne.n	8005878 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005854:	e009      	b.n	800586a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005856:	f7fe feab 	bl	80045b0 <HAL_GetTick>
 800585a:	0002      	movs	r2, r0
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	4a58      	ldr	r2, [pc, #352]	; (80059c4 <HAL_RCC_ClockConfig+0x274>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d901      	bls.n	800586a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e0a5      	b.n	80059b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800586a:	4b57      	ldr	r3, [pc, #348]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	220c      	movs	r2, #12
 8005870:	4013      	ands	r3, r2
 8005872:	2b08      	cmp	r3, #8
 8005874:	d1ef      	bne.n	8005856 <HAL_RCC_ClockConfig+0x106>
 8005876:	e03a      	b.n	80058ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b03      	cmp	r3, #3
 800587e:	d111      	bne.n	80058a4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005880:	e009      	b.n	8005896 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005882:	f7fe fe95 	bl	80045b0 <HAL_GetTick>
 8005886:	0002      	movs	r2, r0
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	4a4d      	ldr	r2, [pc, #308]	; (80059c4 <HAL_RCC_ClockConfig+0x274>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e08f      	b.n	80059b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005896:	4b4c      	ldr	r3, [pc, #304]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	220c      	movs	r2, #12
 800589c:	4013      	ands	r3, r2
 800589e:	2b0c      	cmp	r3, #12
 80058a0:	d1ef      	bne.n	8005882 <HAL_RCC_ClockConfig+0x132>
 80058a2:	e024      	b.n	80058ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d11b      	bne.n	80058e4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80058ac:	e009      	b.n	80058c2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ae:	f7fe fe7f 	bl	80045b0 <HAL_GetTick>
 80058b2:	0002      	movs	r2, r0
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	4a42      	ldr	r2, [pc, #264]	; (80059c4 <HAL_RCC_ClockConfig+0x274>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e079      	b.n	80059b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80058c2:	4b41      	ldr	r3, [pc, #260]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	220c      	movs	r2, #12
 80058c8:	4013      	ands	r3, r2
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d1ef      	bne.n	80058ae <HAL_RCC_ClockConfig+0x15e>
 80058ce:	e00e      	b.n	80058ee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058d0:	f7fe fe6e 	bl	80045b0 <HAL_GetTick>
 80058d4:	0002      	movs	r2, r0
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	4a3a      	ldr	r2, [pc, #232]	; (80059c4 <HAL_RCC_ClockConfig+0x274>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e068      	b.n	80059b6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80058e4:	4b38      	ldr	r3, [pc, #224]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	220c      	movs	r2, #12
 80058ea:	4013      	ands	r3, r2
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058ee:	4b34      	ldr	r3, [pc, #208]	; (80059c0 <HAL_RCC_ClockConfig+0x270>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2201      	movs	r2, #1
 80058f4:	4013      	ands	r3, r2
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d21e      	bcs.n	800593a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058fc:	4b30      	ldr	r3, [pc, #192]	; (80059c0 <HAL_RCC_ClockConfig+0x270>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2201      	movs	r2, #1
 8005902:	4393      	bics	r3, r2
 8005904:	0019      	movs	r1, r3
 8005906:	4b2e      	ldr	r3, [pc, #184]	; (80059c0 <HAL_RCC_ClockConfig+0x270>)
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800590e:	f7fe fe4f 	bl	80045b0 <HAL_GetTick>
 8005912:	0003      	movs	r3, r0
 8005914:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005916:	e009      	b.n	800592c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005918:	f7fe fe4a 	bl	80045b0 <HAL_GetTick>
 800591c:	0002      	movs	r2, r0
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	4a28      	ldr	r2, [pc, #160]	; (80059c4 <HAL_RCC_ClockConfig+0x274>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d901      	bls.n	800592c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e044      	b.n	80059b6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800592c:	4b24      	ldr	r3, [pc, #144]	; (80059c0 <HAL_RCC_ClockConfig+0x270>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2201      	movs	r2, #1
 8005932:	4013      	ands	r3, r2
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d1ee      	bne.n	8005918 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2204      	movs	r2, #4
 8005940:	4013      	ands	r3, r2
 8005942:	d009      	beq.n	8005958 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005944:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	4a20      	ldr	r2, [pc, #128]	; (80059cc <HAL_RCC_ClockConfig+0x27c>)
 800594a:	4013      	ands	r3, r2
 800594c:	0019      	movs	r1, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 8005954:	430a      	orrs	r2, r1
 8005956:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2208      	movs	r2, #8
 800595e:	4013      	ands	r3, r2
 8005960:	d00a      	beq.n	8005978 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005962:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	4a1a      	ldr	r2, [pc, #104]	; (80059d0 <HAL_RCC_ClockConfig+0x280>)
 8005968:	4013      	ands	r3, r2
 800596a:	0019      	movs	r1, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	00da      	lsls	r2, r3, #3
 8005972:	4b15      	ldr	r3, [pc, #84]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 8005974:	430a      	orrs	r2, r1
 8005976:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005978:	f000 f8c4 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 800597c:	0001      	movs	r1, r0
 800597e:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <HAL_RCC_ClockConfig+0x278>)
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	091b      	lsrs	r3, r3, #4
 8005984:	220f      	movs	r2, #15
 8005986:	4013      	ands	r3, r2
 8005988:	4a12      	ldr	r2, [pc, #72]	; (80059d4 <HAL_RCC_ClockConfig+0x284>)
 800598a:	5cd3      	ldrb	r3, [r2, r3]
 800598c:	000a      	movs	r2, r1
 800598e:	40da      	lsrs	r2, r3
 8005990:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <HAL_RCC_ClockConfig+0x288>)
 8005992:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005994:	4b11      	ldr	r3, [pc, #68]	; (80059dc <HAL_RCC_ClockConfig+0x28c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	250b      	movs	r5, #11
 800599a:	197c      	adds	r4, r7, r5
 800599c:	0018      	movs	r0, r3
 800599e:	f7fe fdc1 	bl	8004524 <HAL_InitTick>
 80059a2:	0003      	movs	r3, r0
 80059a4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80059a6:	197b      	adds	r3, r7, r5
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80059ae:	197b      	adds	r3, r7, r5
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	e000      	b.n	80059b6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	0018      	movs	r0, r3
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b004      	add	sp, #16
 80059bc:	bdb0      	pop	{r4, r5, r7, pc}
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	40022000 	.word	0x40022000
 80059c4:	00001388 	.word	0x00001388
 80059c8:	40021000 	.word	0x40021000
 80059cc:	fffff8ff 	.word	0xfffff8ff
 80059d0:	ffffc7ff 	.word	0xffffc7ff
 80059d4:	0800a740 	.word	0x0800a740
 80059d8:	20000080 	.word	0x20000080
 80059dc:	20000084 	.word	0x20000084

080059e0 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80059e0:	b590      	push	{r4, r7, lr}
 80059e2:	b08d      	sub	sp, #52	; 0x34
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 80059ec:	241c      	movs	r4, #28
 80059ee:	193b      	adds	r3, r7, r4
 80059f0:	0018      	movs	r0, r3
 80059f2:	2314      	movs	r3, #20
 80059f4:	001a      	movs	r2, r3
 80059f6:	2100      	movs	r1, #0
 80059f8:	f001 fc1e 	bl	8007238 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80059fc:	0020      	movs	r0, r4
 80059fe:	183b      	adds	r3, r7, r0
 8005a00:	2202      	movs	r2, #2
 8005a02:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005a04:	183b      	adds	r3, r7, r0
 8005a06:	2202      	movs	r2, #2
 8005a08:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 8005a0a:	183b      	adds	r3, r7, r0
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d11a      	bne.n	8005a4c <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 8005a16:	183b      	adds	r3, r7, r0
 8005a18:	2280      	movs	r2, #128	; 0x80
 8005a1a:	0052      	lsls	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8005a1e:	183b      	adds	r3, r7, r0
 8005a20:	2200      	movs	r2, #0
 8005a22:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005a24:	4b2d      	ldr	r3, [pc, #180]	; (8005adc <HAL_RCC_MCOConfig+0xfc>)
 8005a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a28:	4b2c      	ldr	r3, [pc, #176]	; (8005adc <HAL_RCC_MCOConfig+0xfc>)
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a30:	4b2a      	ldr	r3, [pc, #168]	; (8005adc <HAL_RCC_MCOConfig+0xfc>)
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	2201      	movs	r2, #1
 8005a36:	4013      	ands	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8005a3c:	183a      	adds	r2, r7, r0
 8005a3e:	23a0      	movs	r3, #160	; 0xa0
 8005a40:	05db      	lsls	r3, r3, #23
 8005a42:	0011      	movs	r1, r2
 8005a44:	0018      	movs	r0, r3
 8005a46:	f7ff f8bf 	bl	8004bc8 <HAL_GPIO_Init>
 8005a4a:	e038      	b.n	8005abe <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d11a      	bne.n	8005a88 <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 8005a52:	201c      	movs	r0, #28
 8005a54:	183b      	adds	r3, r7, r0
 8005a56:	2280      	movs	r2, #128	; 0x80
 8005a58:	0192      	lsls	r2, r2, #6
 8005a5a:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 8005a5c:	183b      	adds	r3, r7, r0
 8005a5e:	2200      	movs	r2, #0
 8005a60:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 8005a62:	4b1e      	ldr	r3, [pc, #120]	; (8005adc <HAL_RCC_MCOConfig+0xfc>)
 8005a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a66:	4b1d      	ldr	r3, [pc, #116]	; (8005adc <HAL_RCC_MCOConfig+0xfc>)
 8005a68:	2102      	movs	r1, #2
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a6e:	4b1b      	ldr	r3, [pc, #108]	; (8005adc <HAL_RCC_MCOConfig+0xfc>)
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	2202      	movs	r2, #2
 8005a74:	4013      	ands	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 8005a7a:	183b      	adds	r3, r7, r0
 8005a7c:	4a18      	ldr	r2, [pc, #96]	; (8005ae0 <HAL_RCC_MCOConfig+0x100>)
 8005a7e:	0019      	movs	r1, r3
 8005a80:	0010      	movs	r0, r2
 8005a82:	f7ff f8a1 	bl	8004bc8 <HAL_GPIO_Init>
 8005a86:	e01a      	b.n	8005abe <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 8005a88:	201c      	movs	r0, #28
 8005a8a:	183b      	adds	r3, r7, r0
 8005a8c:	2280      	movs	r2, #128	; 0x80
 8005a8e:	0092      	lsls	r2, r2, #2
 8005a90:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8005a92:	183b      	adds	r3, r7, r0
 8005a94:	2200      	movs	r2, #0
 8005a96:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 8005a98:	4b10      	ldr	r3, [pc, #64]	; (8005adc <HAL_RCC_MCOConfig+0xfc>)
 8005a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9c:	4b0f      	ldr	r3, [pc, #60]	; (8005adc <HAL_RCC_MCOConfig+0xfc>)
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	62da      	str	r2, [r3, #44]	; 0x2c
 8005aa4:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <HAL_RCC_MCOConfig+0xfc>)
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	4013      	ands	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 8005ab0:	183a      	adds	r2, r7, r0
 8005ab2:	23a0      	movs	r3, #160	; 0xa0
 8005ab4:	05db      	lsls	r3, r3, #23
 8005ab6:	0011      	movs	r1, r2
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f7ff f885 	bl	8004bc8 <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8005abe:	4b07      	ldr	r3, [pc, #28]	; (8005adc <HAL_RCC_MCOConfig+0xfc>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	4a08      	ldr	r2, [pc, #32]	; (8005ae4 <HAL_RCC_MCOConfig+0x104>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	0019      	movs	r1, r3
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	431a      	orrs	r2, r3
 8005ace:	4b03      	ldr	r3, [pc, #12]	; (8005adc <HAL_RCC_MCOConfig+0xfc>)
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	60da      	str	r2, [r3, #12]
}
 8005ad4:	46c0      	nop			; (mov r8, r8)
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b00d      	add	sp, #52	; 0x34
 8005ada:	bd90      	pop	{r4, r7, pc}
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	50000400 	.word	0x50000400
 8005ae4:	80ffffff 	.word	0x80ffffff

08005ae8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005aec:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <HAL_RCC_EnableCSS+0x18>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b03      	ldr	r3, [pc, #12]	; (8005b00 <HAL_RCC_EnableCSS+0x18>)
 8005af2:	2180      	movs	r1, #128	; 0x80
 8005af4:	0309      	lsls	r1, r1, #12
 8005af6:	430a      	orrs	r2, r1
 8005af8:	601a      	str	r2, [r3, #0]
}
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40021000 	.word	0x40021000

08005b04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b04:	b5b0      	push	{r4, r5, r7, lr}
 8005b06:	b08e      	sub	sp, #56	; 0x38
 8005b08:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005b0a:	4b4c      	ldr	r3, [pc, #304]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b12:	230c      	movs	r3, #12
 8005b14:	4013      	ands	r3, r2
 8005b16:	2b0c      	cmp	r3, #12
 8005b18:	d014      	beq.n	8005b44 <HAL_RCC_GetSysClockFreq+0x40>
 8005b1a:	d900      	bls.n	8005b1e <HAL_RCC_GetSysClockFreq+0x1a>
 8005b1c:	e07b      	b.n	8005c16 <HAL_RCC_GetSysClockFreq+0x112>
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d002      	beq.n	8005b28 <HAL_RCC_GetSysClockFreq+0x24>
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d00b      	beq.n	8005b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8005b26:	e076      	b.n	8005c16 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005b28:	4b44      	ldr	r3, [pc, #272]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2210      	movs	r2, #16
 8005b2e:	4013      	ands	r3, r2
 8005b30:	d002      	beq.n	8005b38 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005b32:	4b43      	ldr	r3, [pc, #268]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005b34:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005b36:	e07c      	b.n	8005c32 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005b38:	4b42      	ldr	r3, [pc, #264]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x140>)
 8005b3a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b3c:	e079      	b.n	8005c32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b3e:	4b42      	ldr	r3, [pc, #264]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x144>)
 8005b40:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b42:	e076      	b.n	8005c32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b46:	0c9a      	lsrs	r2, r3, #18
 8005b48:	230f      	movs	r3, #15
 8005b4a:	401a      	ands	r2, r3
 8005b4c:	4b3f      	ldr	r3, [pc, #252]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x148>)
 8005b4e:	5c9b      	ldrb	r3, [r3, r2]
 8005b50:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b54:	0d9a      	lsrs	r2, r3, #22
 8005b56:	2303      	movs	r3, #3
 8005b58:	4013      	ands	r3, r2
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b5e:	4b37      	ldr	r3, [pc, #220]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	2380      	movs	r3, #128	; 0x80
 8005b64:	025b      	lsls	r3, r3, #9
 8005b66:	4013      	ands	r3, r2
 8005b68:	d01a      	beq.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	61bb      	str	r3, [r7, #24]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61fb      	str	r3, [r7, #28]
 8005b72:	4a35      	ldr	r2, [pc, #212]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x144>)
 8005b74:	2300      	movs	r3, #0
 8005b76:	69b8      	ldr	r0, [r7, #24]
 8005b78:	69f9      	ldr	r1, [r7, #28]
 8005b7a:	f7fa fcb5 	bl	80004e8 <__aeabi_lmul>
 8005b7e:	0002      	movs	r2, r0
 8005b80:	000b      	movs	r3, r1
 8005b82:	0010      	movs	r0, r2
 8005b84:	0019      	movs	r1, r3
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f7fa fc89 	bl	80004a8 <__aeabi_uldivmod>
 8005b96:	0002      	movs	r2, r0
 8005b98:	000b      	movs	r3, r1
 8005b9a:	0013      	movs	r3, r2
 8005b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b9e:	e037      	b.n	8005c10 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005ba0:	4b26      	ldr	r3, [pc, #152]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2210      	movs	r2, #16
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	d01a      	beq.n	8005be0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	60bb      	str	r3, [r7, #8]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	4a23      	ldr	r2, [pc, #140]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	68b8      	ldr	r0, [r7, #8]
 8005bb8:	68f9      	ldr	r1, [r7, #12]
 8005bba:	f7fa fc95 	bl	80004e8 <__aeabi_lmul>
 8005bbe:	0002      	movs	r2, r0
 8005bc0:	000b      	movs	r3, r1
 8005bc2:	0010      	movs	r0, r2
 8005bc4:	0019      	movs	r1, r3
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	603b      	str	r3, [r7, #0]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	607b      	str	r3, [r7, #4]
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f7fa fc69 	bl	80004a8 <__aeabi_uldivmod>
 8005bd6:	0002      	movs	r2, r0
 8005bd8:	000b      	movs	r3, r1
 8005bda:	0013      	movs	r3, r2
 8005bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8005bde:	e017      	b.n	8005c10 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	0018      	movs	r0, r3
 8005be4:	2300      	movs	r3, #0
 8005be6:	0019      	movs	r1, r3
 8005be8:	4a16      	ldr	r2, [pc, #88]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x140>)
 8005bea:	2300      	movs	r3, #0
 8005bec:	f7fa fc7c 	bl	80004e8 <__aeabi_lmul>
 8005bf0:	0002      	movs	r2, r0
 8005bf2:	000b      	movs	r3, r1
 8005bf4:	0010      	movs	r0, r2
 8005bf6:	0019      	movs	r1, r3
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	001c      	movs	r4, r3
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	001d      	movs	r5, r3
 8005c00:	0022      	movs	r2, r4
 8005c02:	002b      	movs	r3, r5
 8005c04:	f7fa fc50 	bl	80004a8 <__aeabi_uldivmod>
 8005c08:	0002      	movs	r2, r0
 8005c0a:	000b      	movs	r3, r1
 8005c0c:	0013      	movs	r3, r2
 8005c0e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c12:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005c14:	e00d      	b.n	8005c32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005c16:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	0b5b      	lsrs	r3, r3, #13
 8005c1c:	2207      	movs	r2, #7
 8005c1e:	4013      	ands	r3, r2
 8005c20:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	3301      	adds	r3, #1
 8005c26:	2280      	movs	r2, #128	; 0x80
 8005c28:	0212      	lsls	r2, r2, #8
 8005c2a:	409a      	lsls	r2, r3
 8005c2c:	0013      	movs	r3, r2
 8005c2e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005c30:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005c34:	0018      	movs	r0, r3
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b00e      	add	sp, #56	; 0x38
 8005c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	003d0900 	.word	0x003d0900
 8005c44:	00f42400 	.word	0x00f42400
 8005c48:	0030d400 	.word	0x0030d400
 8005c4c:	0800a758 	.word	0x0800a758

08005c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c54:	4b02      	ldr	r3, [pc, #8]	; (8005c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c56:	681b      	ldr	r3, [r3, #0]
}
 8005c58:	0018      	movs	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	46c0      	nop			; (mov r8, r8)
 8005c60:	20000080 	.word	0x20000080

08005c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c68:	f7ff fff2 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c6c:	0001      	movs	r1, r0
 8005c6e:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	0a1b      	lsrs	r3, r3, #8
 8005c74:	2207      	movs	r2, #7
 8005c76:	4013      	ands	r3, r2
 8005c78:	4a04      	ldr	r2, [pc, #16]	; (8005c8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c7a:	5cd3      	ldrb	r3, [r2, r3]
 8005c7c:	40d9      	lsrs	r1, r3
 8005c7e:	000b      	movs	r3, r1
}
 8005c80:	0018      	movs	r0, r3
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	0800a750 	.word	0x0800a750

08005c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c94:	f7ff ffdc 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c98:	0001      	movs	r1, r0
 8005c9a:	4b06      	ldr	r3, [pc, #24]	; (8005cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	0adb      	lsrs	r3, r3, #11
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	4a04      	ldr	r2, [pc, #16]	; (8005cb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ca6:	5cd3      	ldrb	r3, [r2, r3]
 8005ca8:	40d9      	lsrs	r1, r3
 8005caa:	000b      	movs	r3, r1
}
 8005cac:	0018      	movs	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	0800a750 	.word	0x0800a750

08005cbc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005cc4:	2317      	movs	r3, #23
 8005cc6:	18fb      	adds	r3, r7, r3
 8005cc8:	2200      	movs	r2, #0
 8005cca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d106      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d100      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005ce2:	e0d9      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ce4:	4b9c      	ldr	r3, [pc, #624]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce8:	2380      	movs	r3, #128	; 0x80
 8005cea:	055b      	lsls	r3, r3, #21
 8005cec:	4013      	ands	r3, r2
 8005cee:	d10a      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cf0:	4b99      	ldr	r3, [pc, #612]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cf4:	4b98      	ldr	r3, [pc, #608]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005cf6:	2180      	movs	r1, #128	; 0x80
 8005cf8:	0549      	lsls	r1, r1, #21
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005cfe:	2317      	movs	r3, #23
 8005d00:	18fb      	adds	r3, r7, r3
 8005d02:	2201      	movs	r2, #1
 8005d04:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d06:	4b95      	ldr	r3, [pc, #596]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	2380      	movs	r3, #128	; 0x80
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d11a      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d12:	4b92      	ldr	r3, [pc, #584]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	4b91      	ldr	r3, [pc, #580]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005d18:	2180      	movs	r1, #128	; 0x80
 8005d1a:	0049      	lsls	r1, r1, #1
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d20:	f7fe fc46 	bl	80045b0 <HAL_GetTick>
 8005d24:	0003      	movs	r3, r0
 8005d26:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d28:	e008      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d2a:	f7fe fc41 	bl	80045b0 <HAL_GetTick>
 8005d2e:	0002      	movs	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b64      	cmp	r3, #100	; 0x64
 8005d36:	d901      	bls.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e108      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3c:	4b87      	ldr	r3, [pc, #540]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	2380      	movs	r3, #128	; 0x80
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	4013      	ands	r3, r2
 8005d46:	d0f0      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005d48:	4b83      	ldr	r3, [pc, #524]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	23c0      	movs	r3, #192	; 0xc0
 8005d4e:	039b      	lsls	r3, r3, #14
 8005d50:	4013      	ands	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	23c0      	movs	r3, #192	; 0xc0
 8005d5a:	039b      	lsls	r3, r3, #14
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d107      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	23c0      	movs	r3, #192	; 0xc0
 8005d6a:	039b      	lsls	r3, r3, #14
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d013      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	23c0      	movs	r3, #192	; 0xc0
 8005d7a:	029b      	lsls	r3, r3, #10
 8005d7c:	401a      	ands	r2, r3
 8005d7e:	23c0      	movs	r3, #192	; 0xc0
 8005d80:	029b      	lsls	r3, r3, #10
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d10a      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d86:	4b74      	ldr	r3, [pc, #464]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	2380      	movs	r3, #128	; 0x80
 8005d8c:	029b      	lsls	r3, r3, #10
 8005d8e:	401a      	ands	r2, r3
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	029b      	lsls	r3, r3, #10
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d101      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e0d8      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005d9c:	4b6e      	ldr	r3, [pc, #440]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005da0:	23c0      	movs	r3, #192	; 0xc0
 8005da2:	029b      	lsls	r3, r3, #10
 8005da4:	4013      	ands	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d049      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	23c0      	movs	r3, #192	; 0xc0
 8005db4:	029b      	lsls	r3, r3, #10
 8005db6:	4013      	ands	r3, r2
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d004      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	d10d      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	23c0      	movs	r3, #192	; 0xc0
 8005dce:	029b      	lsls	r3, r3, #10
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d034      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	2380      	movs	r3, #128	; 0x80
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	4013      	ands	r3, r2
 8005de2:	d02e      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005de4:	4b5c      	ldr	r3, [pc, #368]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de8:	4a5d      	ldr	r2, [pc, #372]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dee:	4b5a      	ldr	r3, [pc, #360]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005df2:	4b59      	ldr	r3, [pc, #356]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005df4:	2180      	movs	r1, #128	; 0x80
 8005df6:	0309      	lsls	r1, r1, #12
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dfc:	4b56      	ldr	r3, [pc, #344]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005dfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e00:	4b55      	ldr	r3, [pc, #340]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e02:	4958      	ldr	r1, [pc, #352]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005e04:	400a      	ands	r2, r1
 8005e06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005e08:	4b53      	ldr	r3, [pc, #332]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	2380      	movs	r3, #128	; 0x80
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	4013      	ands	r3, r2
 8005e16:	d014      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e18:	f7fe fbca 	bl	80045b0 <HAL_GetTick>
 8005e1c:	0003      	movs	r3, r0
 8005e1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e20:	e009      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e22:	f7fe fbc5 	bl	80045b0 <HAL_GetTick>
 8005e26:	0002      	movs	r2, r0
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	4a4e      	ldr	r2, [pc, #312]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e08b      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e36:	4b48      	ldr	r3, [pc, #288]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e3a:	2380      	movs	r3, #128	; 0x80
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d0ef      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	23c0      	movs	r3, #192	; 0xc0
 8005e48:	029b      	lsls	r3, r3, #10
 8005e4a:	401a      	ands	r2, r3
 8005e4c:	23c0      	movs	r3, #192	; 0xc0
 8005e4e:	029b      	lsls	r3, r3, #10
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d10c      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005e54:	4b40      	ldr	r3, [pc, #256]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a44      	ldr	r2, [pc, #272]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	0019      	movs	r1, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	23c0      	movs	r3, #192	; 0xc0
 8005e64:	039b      	lsls	r3, r3, #14
 8005e66:	401a      	ands	r2, r3
 8005e68:	4b3b      	ldr	r3, [pc, #236]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	4b3a      	ldr	r3, [pc, #232]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e70:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	23c0      	movs	r3, #192	; 0xc0
 8005e78:	029b      	lsls	r3, r3, #10
 8005e7a:	401a      	ands	r2, r3
 8005e7c:	4b36      	ldr	r3, [pc, #216]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e82:	2317      	movs	r3, #23
 8005e84:	18fb      	adds	r3, r7, r3
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d105      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e8c:	4b32      	ldr	r3, [pc, #200]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e90:	4b31      	ldr	r3, [pc, #196]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e92:	4937      	ldr	r1, [pc, #220]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005e94:	400a      	ands	r2, r1
 8005e96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ea2:	4b2d      	ldr	r3, [pc, #180]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	4393      	bics	r3, r2
 8005eaa:	0019      	movs	r1, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	4b29      	ldr	r3, [pc, #164]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	d009      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ec0:	4b25      	ldr	r3, [pc, #148]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec4:	220c      	movs	r2, #12
 8005ec6:	4393      	bics	r3, r2
 8005ec8:	0019      	movs	r1, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	4b22      	ldr	r3, [pc, #136]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2204      	movs	r2, #4
 8005eda:	4013      	ands	r3, r2
 8005edc:	d009      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ede:	4b1e      	ldr	r3, [pc, #120]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee2:	4a24      	ldr	r2, [pc, #144]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	0019      	movs	r1, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	695a      	ldr	r2, [r3, #20]
 8005eec:	4b1a      	ldr	r3, [pc, #104]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2208      	movs	r2, #8
 8005ef8:	4013      	ands	r3, r2
 8005efa:	d009      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005efc:	4b16      	ldr	r3, [pc, #88]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f00:	4a1d      	ldr	r2, [pc, #116]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	0019      	movs	r1, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	4b13      	ldr	r3, [pc, #76]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2240      	movs	r2, #64	; 0x40
 8005f16:	4013      	ands	r3, r2
 8005f18:	d009      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f1a:	4b0f      	ldr	r3, [pc, #60]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f1e:	4a17      	ldr	r2, [pc, #92]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	0019      	movs	r1, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1a      	ldr	r2, [r3, #32]
 8005f28:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2280      	movs	r2, #128	; 0x80
 8005f34:	4013      	ands	r3, r2
 8005f36:	d009      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005f38:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3c:	4a10      	ldr	r2, [pc, #64]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	0019      	movs	r1, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69da      	ldr	r2, [r3, #28]
 8005f46:	4b04      	ldr	r3, [pc, #16]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	0018      	movs	r0, r3
 8005f50:	46bd      	mov	sp, r7
 8005f52:	b006      	add	sp, #24
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	40007000 	.word	0x40007000
 8005f60:	fffcffff 	.word	0xfffcffff
 8005f64:	fff7ffff 	.word	0xfff7ffff
 8005f68:	00001388 	.word	0x00001388
 8005f6c:	ffcfffff 	.word	0xffcfffff
 8005f70:	efffffff 	.word	0xefffffff
 8005f74:	fffff3ff 	.word	0xfffff3ff
 8005f78:	ffffcfff 	.word	0xffffcfff
 8005f7c:	fbffffff 	.word	0xfbffffff
 8005f80:	fff3ffff 	.word	0xfff3ffff

08005f84 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e032      	b.n	8005ffc <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2239      	movs	r2, #57	; 0x39
 8005f9a:	5c9b      	ldrb	r3, [r3, r2]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d107      	bne.n	8005fb2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2238      	movs	r2, #56	; 0x38
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	0018      	movs	r0, r3
 8005fae:	f000 f829 	bl	8006004 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2239      	movs	r2, #57	; 0x39
 8005fb6:	2102      	movs	r1, #2
 8005fb8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	0010      	movs	r0, r2
 8005fc6:	f000 f991 	bl	80062ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	223e      	movs	r2, #62	; 0x3e
 8005fce:	2101      	movs	r1, #1
 8005fd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	223a      	movs	r2, #58	; 0x3a
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	5499      	strb	r1, [r3, r2]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	223b      	movs	r2, #59	; 0x3b
 8005fde:	2101      	movs	r1, #1
 8005fe0:	5499      	strb	r1, [r3, r2]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	223c      	movs	r2, #60	; 0x3c
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	5499      	strb	r1, [r3, r2]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	223d      	movs	r2, #61	; 0x3d
 8005fee:	2101      	movs	r1, #1
 8005ff0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2239      	movs	r2, #57	; 0x39
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	46bd      	mov	sp, r7
 8006000:	b002      	add	sp, #8
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800600c:	46c0      	nop			; (mov r8, r8)
 800600e:	46bd      	mov	sp, r7
 8006010:	b002      	add	sp, #8
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800601e:	230f      	movs	r3, #15
 8006020:	18fb      	adds	r3, r7, r3
 8006022:	2200      	movs	r2, #0
 8006024:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d104      	bne.n	8006036 <HAL_TIM_IC_Start_IT+0x22>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	223a      	movs	r2, #58	; 0x3a
 8006030:	5c9b      	ldrb	r3, [r3, r2]
 8006032:	b2db      	uxtb	r3, r3
 8006034:	e013      	b.n	800605e <HAL_TIM_IC_Start_IT+0x4a>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b04      	cmp	r3, #4
 800603a:	d104      	bne.n	8006046 <HAL_TIM_IC_Start_IT+0x32>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	223b      	movs	r2, #59	; 0x3b
 8006040:	5c9b      	ldrb	r3, [r3, r2]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	e00b      	b.n	800605e <HAL_TIM_IC_Start_IT+0x4a>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b08      	cmp	r3, #8
 800604a:	d104      	bne.n	8006056 <HAL_TIM_IC_Start_IT+0x42>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	223c      	movs	r2, #60	; 0x3c
 8006050:	5c9b      	ldrb	r3, [r3, r2]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	e003      	b.n	800605e <HAL_TIM_IC_Start_IT+0x4a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	223d      	movs	r2, #61	; 0x3d
 800605a:	5c9b      	ldrb	r3, [r3, r2]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	210e      	movs	r1, #14
 8006060:	187a      	adds	r2, r7, r1
 8006062:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006064:	187b      	adds	r3, r7, r1
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d001      	beq.n	8006070 <HAL_TIM_IC_Start_IT+0x5c>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e090      	b.n	8006192 <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d104      	bne.n	8006080 <HAL_TIM_IC_Start_IT+0x6c>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	223a      	movs	r2, #58	; 0x3a
 800607a:	2102      	movs	r1, #2
 800607c:	5499      	strb	r1, [r3, r2]
 800607e:	e013      	b.n	80060a8 <HAL_TIM_IC_Start_IT+0x94>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b04      	cmp	r3, #4
 8006084:	d104      	bne.n	8006090 <HAL_TIM_IC_Start_IT+0x7c>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	223b      	movs	r2, #59	; 0x3b
 800608a:	2102      	movs	r1, #2
 800608c:	5499      	strb	r1, [r3, r2]
 800608e:	e00b      	b.n	80060a8 <HAL_TIM_IC_Start_IT+0x94>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b08      	cmp	r3, #8
 8006094:	d104      	bne.n	80060a0 <HAL_TIM_IC_Start_IT+0x8c>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	223c      	movs	r2, #60	; 0x3c
 800609a:	2102      	movs	r1, #2
 800609c:	5499      	strb	r1, [r3, r2]
 800609e:	e003      	b.n	80060a8 <HAL_TIM_IC_Start_IT+0x94>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	223d      	movs	r2, #61	; 0x3d
 80060a4:	2102      	movs	r1, #2
 80060a6:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2b0c      	cmp	r3, #12
 80060ac:	d02a      	beq.n	8006104 <HAL_TIM_IC_Start_IT+0xf0>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b0c      	cmp	r3, #12
 80060b2:	d830      	bhi.n	8006116 <HAL_TIM_IC_Start_IT+0x102>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b08      	cmp	r3, #8
 80060b8:	d01b      	beq.n	80060f2 <HAL_TIM_IC_Start_IT+0xde>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d82a      	bhi.n	8006116 <HAL_TIM_IC_Start_IT+0x102>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_TIM_IC_Start_IT+0xba>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	d009      	beq.n	80060e0 <HAL_TIM_IC_Start_IT+0xcc>
 80060cc:	e023      	b.n	8006116 <HAL_TIM_IC_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2102      	movs	r1, #2
 80060da:	430a      	orrs	r2, r1
 80060dc:	60da      	str	r2, [r3, #12]
      break;
 80060de:	e01f      	b.n	8006120 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2104      	movs	r1, #4
 80060ec:	430a      	orrs	r2, r1
 80060ee:	60da      	str	r2, [r3, #12]
      break;
 80060f0:	e016      	b.n	8006120 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2108      	movs	r1, #8
 80060fe:	430a      	orrs	r2, r1
 8006100:	60da      	str	r2, [r3, #12]
      break;
 8006102:	e00d      	b.n	8006120 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2110      	movs	r1, #16
 8006110:	430a      	orrs	r2, r1
 8006112:	60da      	str	r2, [r3, #12]
      break;
 8006114:	e004      	b.n	8006120 <HAL_TIM_IC_Start_IT+0x10c>
    }

    default:
      status = HAL_ERROR;
 8006116:	230f      	movs	r3, #15
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	2201      	movs	r2, #1
 800611c:	701a      	strb	r2, [r3, #0]
      break;
 800611e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8006120:	230f      	movs	r3, #15
 8006122:	18fb      	adds	r3, r7, r3
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d130      	bne.n	800618c <HAL_TIM_IC_Start_IT+0x178>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	2201      	movs	r2, #1
 8006132:	0018      	movs	r0, r3
 8006134:	f000 fa4c 	bl	80065d0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	2380      	movs	r3, #128	; 0x80
 800613e:	05db      	lsls	r3, r3, #23
 8006140:	429a      	cmp	r2, r3
 8006142:	d009      	beq.n	8006158 <HAL_TIM_IC_Start_IT+0x144>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a14      	ldr	r2, [pc, #80]	; (800619c <HAL_TIM_IC_Start_IT+0x188>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d004      	beq.n	8006158 <HAL_TIM_IC_Start_IT+0x144>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a13      	ldr	r2, [pc, #76]	; (80061a0 <HAL_TIM_IC_Start_IT+0x18c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d111      	bne.n	800617c <HAL_TIM_IC_Start_IT+0x168>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	2207      	movs	r2, #7
 8006160:	4013      	ands	r3, r2
 8006162:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b06      	cmp	r3, #6
 8006168:	d010      	beq.n	800618c <HAL_TIM_IC_Start_IT+0x178>
      {
        __HAL_TIM_ENABLE(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2101      	movs	r1, #1
 8006176:	430a      	orrs	r2, r1
 8006178:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617a:	e007      	b.n	800618c <HAL_TIM_IC_Start_IT+0x178>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2101      	movs	r1, #1
 8006188:	430a      	orrs	r2, r1
 800618a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800618c:	230f      	movs	r3, #15
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	781b      	ldrb	r3, [r3, #0]
}
 8006192:	0018      	movs	r0, r3
 8006194:	46bd      	mov	sp, r7
 8006196:	b004      	add	sp, #16
 8006198:	bd80      	pop	{r7, pc}
 800619a:	46c0      	nop			; (mov r8, r8)
 800619c:	40010800 	.word	0x40010800
 80061a0:	40011400 	.word	0x40011400

080061a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061b0:	2317      	movs	r3, #23
 80061b2:	18fb      	adds	r3, r7, r3
 80061b4:	2200      	movs	r2, #0
 80061b6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2238      	movs	r2, #56	; 0x38
 80061bc:	5c9b      	ldrb	r3, [r3, r2]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_TIM_IC_ConfigChannel+0x22>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e08c      	b.n	80062e0 <HAL_TIM_IC_ConfigChannel+0x13c>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2238      	movs	r2, #56	; 0x38
 80061ca:	2101      	movs	r1, #1
 80061cc:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d11b      	bne.n	800620c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6818      	ldr	r0, [r3, #0]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	6819      	ldr	r1, [r3, #0]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f000 f8d6 	bl	8006394 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	210c      	movs	r1, #12
 80061f4:	438a      	bics	r2, r1
 80061f6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6999      	ldr	r1, [r3, #24]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	689a      	ldr	r2, [r3, #8]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	619a      	str	r2, [r3, #24]
 800620a:	e062      	b.n	80062d2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b04      	cmp	r3, #4
 8006210:	d11c      	bne.n	800624c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	6819      	ldr	r1, [r3, #0]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f000 f90d 	bl	8006440 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	699a      	ldr	r2, [r3, #24]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	492d      	ldr	r1, [pc, #180]	; (80062e8 <HAL_TIM_IC_ConfigChannel+0x144>)
 8006232:	400a      	ands	r2, r1
 8006234:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6999      	ldr	r1, [r3, #24]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	021a      	lsls	r2, r3, #8
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	619a      	str	r2, [r3, #24]
 800624a:	e042      	b.n	80062d2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b08      	cmp	r3, #8
 8006250:	d11b      	bne.n	800628a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6818      	ldr	r0, [r3, #0]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	6819      	ldr	r1, [r3, #0]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f000 f92f 	bl	80064c4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69da      	ldr	r2, [r3, #28]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	210c      	movs	r1, #12
 8006272:	438a      	bics	r2, r1
 8006274:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69d9      	ldr	r1, [r3, #28]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	61da      	str	r2, [r3, #28]
 8006288:	e023      	b.n	80062d2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b0c      	cmp	r3, #12
 800628e:	d11c      	bne.n	80062ca <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	6819      	ldr	r1, [r3, #0]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f000 f950 	bl	8006544 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	69da      	ldr	r2, [r3, #28]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	490e      	ldr	r1, [pc, #56]	; (80062e8 <HAL_TIM_IC_ConfigChannel+0x144>)
 80062b0:	400a      	ands	r2, r1
 80062b2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	69d9      	ldr	r1, [r3, #28]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	021a      	lsls	r2, r3, #8
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	61da      	str	r2, [r3, #28]
 80062c8:	e003      	b.n	80062d2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80062ca:	2317      	movs	r3, #23
 80062cc:	18fb      	adds	r3, r7, r3
 80062ce:	2201      	movs	r2, #1
 80062d0:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2238      	movs	r2, #56	; 0x38
 80062d6:	2100      	movs	r1, #0
 80062d8:	5499      	strb	r1, [r3, r2]

  return status;
 80062da:	2317      	movs	r3, #23
 80062dc:	18fb      	adds	r3, r7, r3
 80062de:	781b      	ldrb	r3, [r3, #0]
}
 80062e0:	0018      	movs	r0, r3
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b006      	add	sp, #24
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	fffff3ff 	.word	0xfffff3ff

080062ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	2380      	movs	r3, #128	; 0x80
 8006300:	05db      	lsls	r3, r3, #23
 8006302:	429a      	cmp	r2, r3
 8006304:	d007      	beq.n	8006316 <TIM_Base_SetConfig+0x2a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a1f      	ldr	r2, [pc, #124]	; (8006388 <TIM_Base_SetConfig+0x9c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d003      	beq.n	8006316 <TIM_Base_SetConfig+0x2a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a1e      	ldr	r2, [pc, #120]	; (800638c <TIM_Base_SetConfig+0xa0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d108      	bne.n	8006328 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2270      	movs	r2, #112	; 0x70
 800631a:	4393      	bics	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	2380      	movs	r3, #128	; 0x80
 800632c:	05db      	lsls	r3, r3, #23
 800632e:	429a      	cmp	r2, r3
 8006330:	d007      	beq.n	8006342 <TIM_Base_SetConfig+0x56>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a14      	ldr	r2, [pc, #80]	; (8006388 <TIM_Base_SetConfig+0x9c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d003      	beq.n	8006342 <TIM_Base_SetConfig+0x56>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a13      	ldr	r2, [pc, #76]	; (800638c <TIM_Base_SetConfig+0xa0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d108      	bne.n	8006354 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4a12      	ldr	r2, [pc, #72]	; (8006390 <TIM_Base_SetConfig+0xa4>)
 8006346:	4013      	ands	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	4313      	orrs	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2280      	movs	r2, #128	; 0x80
 8006358:	4393      	bics	r3, r2
 800635a:	001a      	movs	r2, r3
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	615a      	str	r2, [r3, #20]
}
 8006380:	46c0      	nop			; (mov r8, r8)
 8006382:	46bd      	mov	sp, r7
 8006384:	b004      	add	sp, #16
 8006386:	bd80      	pop	{r7, pc}
 8006388:	40010800 	.word	0x40010800
 800638c:	40011400 	.word	0x40011400
 8006390:	fffffcff 	.word	0xfffffcff

08006394 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	2201      	movs	r2, #1
 80063a8:	4393      	bics	r3, r2
 80063aa:	001a      	movs	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	2380      	movs	r3, #128	; 0x80
 80063c0:	05db      	lsls	r3, r3, #23
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d007      	beq.n	80063d6 <TIM_TI1_SetConfig+0x42>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4a1b      	ldr	r2, [pc, #108]	; (8006438 <TIM_TI1_SetConfig+0xa4>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d003      	beq.n	80063d6 <TIM_TI1_SetConfig+0x42>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4a1a      	ldr	r2, [pc, #104]	; (800643c <TIM_TI1_SetConfig+0xa8>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d101      	bne.n	80063da <TIM_TI1_SetConfig+0x46>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <TIM_TI1_SetConfig+0x48>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d008      	beq.n	80063f2 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2203      	movs	r2, #3
 80063e4:	4393      	bics	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	e003      	b.n	80063fa <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2201      	movs	r2, #1
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	22f0      	movs	r2, #240	; 0xf0
 80063fe:	4393      	bics	r3, r2
 8006400:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	011b      	lsls	r3, r3, #4
 8006406:	22ff      	movs	r2, #255	; 0xff
 8006408:	4013      	ands	r3, r2
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	220a      	movs	r2, #10
 8006414:	4393      	bics	r3, r2
 8006416:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	220a      	movs	r2, #10
 800641c:	4013      	ands	r3, r2
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	4313      	orrs	r3, r2
 8006422:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	621a      	str	r2, [r3, #32]
}
 8006430:	46c0      	nop			; (mov r8, r8)
 8006432:	46bd      	mov	sp, r7
 8006434:	b006      	add	sp, #24
 8006436:	bd80      	pop	{r7, pc}
 8006438:	40010800 	.word	0x40010800
 800643c:	40011400 	.word	0x40011400

08006440 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	2210      	movs	r2, #16
 8006454:	4393      	bics	r3, r2
 8006456:	001a      	movs	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	4a14      	ldr	r2, [pc, #80]	; (80064bc <TIM_TI2_SetConfig+0x7c>)
 800646c:	4013      	ands	r3, r2
 800646e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	021b      	lsls	r3, r3, #8
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	4a10      	ldr	r2, [pc, #64]	; (80064c0 <TIM_TI2_SetConfig+0x80>)
 800647e:	4013      	ands	r3, r2
 8006480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	031b      	lsls	r3, r3, #12
 8006486:	041b      	lsls	r3, r3, #16
 8006488:	0c1b      	lsrs	r3, r3, #16
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	4313      	orrs	r3, r2
 800648e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	22a0      	movs	r2, #160	; 0xa0
 8006494:	4393      	bics	r3, r2
 8006496:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	22a0      	movs	r2, #160	; 0xa0
 800649e:	4013      	ands	r3, r2
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	621a      	str	r2, [r3, #32]
}
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	46bd      	mov	sp, r7
 80064b6:	b006      	add	sp, #24
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	46c0      	nop			; (mov r8, r8)
 80064bc:	fffffcff 	.word	0xfffffcff
 80064c0:	ffff0fff 	.word	0xffff0fff

080064c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	4a19      	ldr	r2, [pc, #100]	; (800653c <TIM_TI3_SetConfig+0x78>)
 80064d8:	401a      	ands	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2203      	movs	r2, #3
 80064ee:	4393      	bics	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	22f0      	movs	r2, #240	; 0xf0
 80064fe:	4393      	bics	r3, r2
 8006500:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	011b      	lsls	r3, r3, #4
 8006506:	22ff      	movs	r2, #255	; 0xff
 8006508:	4013      	ands	r3, r2
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	4313      	orrs	r3, r2
 800650e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	4a0b      	ldr	r2, [pc, #44]	; (8006540 <TIM_TI3_SetConfig+0x7c>)
 8006514:	4013      	ands	r3, r2
 8006516:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	021a      	lsls	r2, r3, #8
 800651c:	23a0      	movs	r3, #160	; 0xa0
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	4013      	ands	r3, r2
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	621a      	str	r2, [r3, #32]
}
 8006534:	46c0      	nop			; (mov r8, r8)
 8006536:	46bd      	mov	sp, r7
 8006538:	b006      	add	sp, #24
 800653a:	bd80      	pop	{r7, pc}
 800653c:	fffffeff 	.word	0xfffffeff
 8006540:	fffff5ff 	.word	0xfffff5ff

08006544 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	4a1a      	ldr	r2, [pc, #104]	; (80065c0 <TIM_TI4_SetConfig+0x7c>)
 8006558:	401a      	ands	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	4a15      	ldr	r2, [pc, #84]	; (80065c4 <TIM_TI4_SetConfig+0x80>)
 800656e:	4013      	ands	r3, r2
 8006570:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	021b      	lsls	r3, r3, #8
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4313      	orrs	r3, r2
 800657a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	4a12      	ldr	r2, [pc, #72]	; (80065c8 <TIM_TI4_SetConfig+0x84>)
 8006580:	4013      	ands	r3, r2
 8006582:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	031b      	lsls	r3, r3, #12
 8006588:	041b      	lsls	r3, r3, #16
 800658a:	0c1b      	lsrs	r3, r3, #16
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	4a0d      	ldr	r2, [pc, #52]	; (80065cc <TIM_TI4_SetConfig+0x88>)
 8006596:	4013      	ands	r3, r2
 8006598:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	031a      	lsls	r2, r3, #12
 800659e:	23a0      	movs	r3, #160	; 0xa0
 80065a0:	021b      	lsls	r3, r3, #8
 80065a2:	4013      	ands	r3, r2
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	621a      	str	r2, [r3, #32]
}
 80065b6:	46c0      	nop			; (mov r8, r8)
 80065b8:	46bd      	mov	sp, r7
 80065ba:	b006      	add	sp, #24
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	ffffefff 	.word	0xffffefff
 80065c4:	fffffcff 	.word	0xfffffcff
 80065c8:	ffff0fff 	.word	0xffff0fff
 80065cc:	ffff5fff 	.word	0xffff5fff

080065d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	221f      	movs	r2, #31
 80065e0:	4013      	ands	r3, r2
 80065e2:	2201      	movs	r2, #1
 80065e4:	409a      	lsls	r2, r3
 80065e6:	0013      	movs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	43d2      	mvns	r2, r2
 80065f2:	401a      	ands	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a1a      	ldr	r2, [r3, #32]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	211f      	movs	r1, #31
 8006600:	400b      	ands	r3, r1
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	4099      	lsls	r1, r3
 8006606:	000b      	movs	r3, r1
 8006608:	431a      	orrs	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	621a      	str	r2, [r3, #32]
}
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	46bd      	mov	sp, r7
 8006612:	b006      	add	sp, #24
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2238      	movs	r2, #56	; 0x38
 8006624:	5c9b      	ldrb	r3, [r3, r2]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <HAL_TIMEx_RemapConfig+0x18>
 800662a:	2302      	movs	r3, #2
 800662c:	e00c      	b.n	8006648 <HAL_TIMEx_RemapConfig+0x32>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2238      	movs	r2, #56	; 0x38
 8006632:	2101      	movs	r1, #1
 8006634:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2238      	movs	r2, #56	; 0x38
 8006642:	2100      	movs	r1, #0
 8006644:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	0018      	movs	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	b002      	add	sp, #8
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e044      	b.n	80066ec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006666:	2b00      	cmp	r3, #0
 8006668:	d107      	bne.n	800667a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2274      	movs	r2, #116	; 0x74
 800666e:	2100      	movs	r1, #0
 8006670:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	0018      	movs	r0, r3
 8006676:	f000 f879 	bl	800676c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2224      	movs	r2, #36	; 0x24
 800667e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2101      	movs	r1, #1
 800668c:	438a      	bics	r2, r1
 800668e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	0018      	movs	r0, r3
 8006694:	f000 f934 	bl	8006900 <UART_SetConfig>
 8006698:	0003      	movs	r3, r0
 800669a:	2b01      	cmp	r3, #1
 800669c:	d101      	bne.n	80066a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e024      	b.n	80066ec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	0018      	movs	r0, r3
 80066ae:	f000 fbab 	bl	8006e08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	490d      	ldr	r1, [pc, #52]	; (80066f4 <HAL_UART_Init+0xa4>)
 80066be:	400a      	ands	r2, r1
 80066c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	212a      	movs	r1, #42	; 0x2a
 80066ce:	438a      	bics	r2, r1
 80066d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2101      	movs	r1, #1
 80066de:	430a      	orrs	r2, r1
 80066e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	0018      	movs	r0, r3
 80066e6:	f000 fc43 	bl	8006f70 <UART_CheckIdleState>
 80066ea:	0003      	movs	r3, r0
}
 80066ec:	0018      	movs	r0, r3
 80066ee:	46bd      	mov	sp, r7
 80066f0:	b002      	add	sp, #8
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	ffffb7ff 	.word	0xffffb7ff

080066f8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e02c      	b.n	8006764 <HAL_UART_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2224      	movs	r2, #36	; 0x24
 800670e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2101      	movs	r1, #1
 800671c:	438a      	bics	r2, r1
 800671e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2200      	movs	r2, #0
 800672e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2200      	movs	r2, #0
 8006736:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	0018      	movs	r0, r3
 800673c:	f000 f81e 	bl	800677c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2280      	movs	r2, #128	; 0x80
 8006744:	2100      	movs	r1, #0
 8006746:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2274      	movs	r2, #116	; 0x74
 800675e:	2100      	movs	r1, #0
 8006760:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	0018      	movs	r0, r3
 8006766:	46bd      	mov	sp, r7
 8006768:	b002      	add	sp, #8
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006774:	46c0      	nop			; (mov r8, r8)
 8006776:	46bd      	mov	sp, r7
 8006778:	b002      	add	sp, #8
 800677a:	bd80      	pop	{r7, pc}

0800677c <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8006784:	46c0      	nop			; (mov r8, r8)
 8006786:	46bd      	mov	sp, r7
 8006788:	b002      	add	sp, #8
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08a      	sub	sp, #40	; 0x28
 8006790:	af02      	add	r7, sp, #8
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	603b      	str	r3, [r7, #0]
 8006798:	1dbb      	adds	r3, r7, #6
 800679a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d000      	beq.n	80067a6 <HAL_UART_Transmit+0x1a>
 80067a4:	e095      	b.n	80068d2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <HAL_UART_Transmit+0x28>
 80067ac:	1dbb      	adds	r3, r7, #6
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e08d      	b.n	80068d4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	2380      	movs	r3, #128	; 0x80
 80067be:	015b      	lsls	r3, r3, #5
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d109      	bne.n	80067d8 <HAL_UART_Transmit+0x4c>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d105      	bne.n	80067d8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2201      	movs	r2, #1
 80067d0:	4013      	ands	r3, r2
 80067d2:	d001      	beq.n	80067d8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e07d      	b.n	80068d4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2274      	movs	r2, #116	; 0x74
 80067dc:	5c9b      	ldrb	r3, [r3, r2]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <HAL_UART_Transmit+0x5a>
 80067e2:	2302      	movs	r3, #2
 80067e4:	e076      	b.n	80068d4 <HAL_UART_Transmit+0x148>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2274      	movs	r2, #116	; 0x74
 80067ea:	2101      	movs	r1, #1
 80067ec:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2280      	movs	r2, #128	; 0x80
 80067f2:	2100      	movs	r1, #0
 80067f4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2221      	movs	r2, #33	; 0x21
 80067fa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067fc:	f7fd fed8 	bl	80045b0 <HAL_GetTick>
 8006800:	0003      	movs	r3, r0
 8006802:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	1dba      	adds	r2, r7, #6
 8006808:	2150      	movs	r1, #80	; 0x50
 800680a:	8812      	ldrh	r2, [r2, #0]
 800680c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	1dba      	adds	r2, r7, #6
 8006812:	2152      	movs	r1, #82	; 0x52
 8006814:	8812      	ldrh	r2, [r2, #0]
 8006816:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	2380      	movs	r3, #128	; 0x80
 800681e:	015b      	lsls	r3, r3, #5
 8006820:	429a      	cmp	r2, r3
 8006822:	d108      	bne.n	8006836 <HAL_UART_Transmit+0xaa>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800682c:	2300      	movs	r3, #0
 800682e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	61bb      	str	r3, [r7, #24]
 8006834:	e003      	b.n	800683e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800683a:	2300      	movs	r3, #0
 800683c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2274      	movs	r2, #116	; 0x74
 8006842:	2100      	movs	r1, #0
 8006844:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006846:	e02c      	b.n	80068a2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	0013      	movs	r3, r2
 8006852:	2200      	movs	r2, #0
 8006854:	2180      	movs	r1, #128	; 0x80
 8006856:	f000 fbd3 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 800685a:	1e03      	subs	r3, r0, #0
 800685c:	d001      	beq.n	8006862 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e038      	b.n	80068d4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10b      	bne.n	8006880 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	001a      	movs	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	05d2      	lsls	r2, r2, #23
 8006874:	0dd2      	lsrs	r2, r2, #23
 8006876:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	3302      	adds	r3, #2
 800687c:	61bb      	str	r3, [r7, #24]
 800687e:	e007      	b.n	8006890 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	781a      	ldrb	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	3301      	adds	r3, #1
 800688e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2252      	movs	r2, #82	; 0x52
 8006894:	5a9b      	ldrh	r3, [r3, r2]
 8006896:	b29b      	uxth	r3, r3
 8006898:	3b01      	subs	r3, #1
 800689a:	b299      	uxth	r1, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2252      	movs	r2, #82	; 0x52
 80068a0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2252      	movs	r2, #82	; 0x52
 80068a6:	5a9b      	ldrh	r3, [r3, r2]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1cc      	bne.n	8006848 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	0013      	movs	r3, r2
 80068b8:	2200      	movs	r2, #0
 80068ba:	2140      	movs	r1, #64	; 0x40
 80068bc:	f000 fba0 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 80068c0:	1e03      	subs	r3, r0, #0
 80068c2:	d001      	beq.n	80068c8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e005      	b.n	80068d4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2220      	movs	r2, #32
 80068cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	e000      	b.n	80068d4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80068d2:	2302      	movs	r3, #2
  }
}
 80068d4:	0018      	movs	r0, r3
 80068d6:	46bd      	mov	sp, r7
 80068d8:	b008      	add	sp, #32
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068e8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ee:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	4313      	orrs	r3, r2
}
 80068f6:	0018      	movs	r0, r3
 80068f8:	46bd      	mov	sp, r7
 80068fa:	b004      	add	sp, #16
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006900:	b5b0      	push	{r4, r5, r7, lr}
 8006902:	b08e      	sub	sp, #56	; 0x38
 8006904:	af00      	add	r7, sp, #0
 8006906:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006908:	231a      	movs	r3, #26
 800690a:	2218      	movs	r2, #24
 800690c:	189b      	adds	r3, r3, r2
 800690e:	19db      	adds	r3, r3, r7
 8006910:	2200      	movs	r2, #0
 8006912:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	431a      	orrs	r2, r3
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	431a      	orrs	r2, r3
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	4313      	orrs	r3, r2
 800692a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4ac6      	ldr	r2, [pc, #792]	; (8006c4c <UART_SetConfig+0x34c>)
 8006934:	4013      	ands	r3, r2
 8006936:	0019      	movs	r1, r3
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800693e:	430a      	orrs	r2, r1
 8006940:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	4ac1      	ldr	r2, [pc, #772]	; (8006c50 <UART_SetConfig+0x350>)
 800694a:	4013      	ands	r3, r2
 800694c:	0019      	movs	r1, r3
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4abb      	ldr	r2, [pc, #748]	; (8006c54 <UART_SetConfig+0x354>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d004      	beq.n	8006974 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006970:	4313      	orrs	r3, r2
 8006972:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	4ab7      	ldr	r2, [pc, #732]	; (8006c58 <UART_SetConfig+0x358>)
 800697c:	4013      	ands	r3, r2
 800697e:	0019      	movs	r1, r3
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006986:	430a      	orrs	r2, r1
 8006988:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4ab3      	ldr	r2, [pc, #716]	; (8006c5c <UART_SetConfig+0x35c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d131      	bne.n	80069f8 <UART_SetConfig+0xf8>
 8006994:	4bb2      	ldr	r3, [pc, #712]	; (8006c60 <UART_SetConfig+0x360>)
 8006996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006998:	2203      	movs	r2, #3
 800699a:	4013      	ands	r3, r2
 800699c:	2b03      	cmp	r3, #3
 800699e:	d01d      	beq.n	80069dc <UART_SetConfig+0xdc>
 80069a0:	d823      	bhi.n	80069ea <UART_SetConfig+0xea>
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d00c      	beq.n	80069c0 <UART_SetConfig+0xc0>
 80069a6:	d820      	bhi.n	80069ea <UART_SetConfig+0xea>
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <UART_SetConfig+0xb2>
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d00e      	beq.n	80069ce <UART_SetConfig+0xce>
 80069b0:	e01b      	b.n	80069ea <UART_SetConfig+0xea>
 80069b2:	231b      	movs	r3, #27
 80069b4:	2218      	movs	r2, #24
 80069b6:	189b      	adds	r3, r3, r2
 80069b8:	19db      	adds	r3, r3, r7
 80069ba:	2201      	movs	r2, #1
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	e09c      	b.n	8006afa <UART_SetConfig+0x1fa>
 80069c0:	231b      	movs	r3, #27
 80069c2:	2218      	movs	r2, #24
 80069c4:	189b      	adds	r3, r3, r2
 80069c6:	19db      	adds	r3, r3, r7
 80069c8:	2202      	movs	r2, #2
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	e095      	b.n	8006afa <UART_SetConfig+0x1fa>
 80069ce:	231b      	movs	r3, #27
 80069d0:	2218      	movs	r2, #24
 80069d2:	189b      	adds	r3, r3, r2
 80069d4:	19db      	adds	r3, r3, r7
 80069d6:	2204      	movs	r2, #4
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	e08e      	b.n	8006afa <UART_SetConfig+0x1fa>
 80069dc:	231b      	movs	r3, #27
 80069de:	2218      	movs	r2, #24
 80069e0:	189b      	adds	r3, r3, r2
 80069e2:	19db      	adds	r3, r3, r7
 80069e4:	2208      	movs	r2, #8
 80069e6:	701a      	strb	r2, [r3, #0]
 80069e8:	e087      	b.n	8006afa <UART_SetConfig+0x1fa>
 80069ea:	231b      	movs	r3, #27
 80069ec:	2218      	movs	r2, #24
 80069ee:	189b      	adds	r3, r3, r2
 80069f0:	19db      	adds	r3, r3, r7
 80069f2:	2210      	movs	r2, #16
 80069f4:	701a      	strb	r2, [r3, #0]
 80069f6:	e080      	b.n	8006afa <UART_SetConfig+0x1fa>
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a99      	ldr	r2, [pc, #612]	; (8006c64 <UART_SetConfig+0x364>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d131      	bne.n	8006a66 <UART_SetConfig+0x166>
 8006a02:	4b97      	ldr	r3, [pc, #604]	; (8006c60 <UART_SetConfig+0x360>)
 8006a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a06:	220c      	movs	r2, #12
 8006a08:	4013      	ands	r3, r2
 8006a0a:	2b0c      	cmp	r3, #12
 8006a0c:	d01d      	beq.n	8006a4a <UART_SetConfig+0x14a>
 8006a0e:	d823      	bhi.n	8006a58 <UART_SetConfig+0x158>
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d00c      	beq.n	8006a2e <UART_SetConfig+0x12e>
 8006a14:	d820      	bhi.n	8006a58 <UART_SetConfig+0x158>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <UART_SetConfig+0x120>
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d00e      	beq.n	8006a3c <UART_SetConfig+0x13c>
 8006a1e:	e01b      	b.n	8006a58 <UART_SetConfig+0x158>
 8006a20:	231b      	movs	r3, #27
 8006a22:	2218      	movs	r2, #24
 8006a24:	189b      	adds	r3, r3, r2
 8006a26:	19db      	adds	r3, r3, r7
 8006a28:	2200      	movs	r2, #0
 8006a2a:	701a      	strb	r2, [r3, #0]
 8006a2c:	e065      	b.n	8006afa <UART_SetConfig+0x1fa>
 8006a2e:	231b      	movs	r3, #27
 8006a30:	2218      	movs	r2, #24
 8006a32:	189b      	adds	r3, r3, r2
 8006a34:	19db      	adds	r3, r3, r7
 8006a36:	2202      	movs	r2, #2
 8006a38:	701a      	strb	r2, [r3, #0]
 8006a3a:	e05e      	b.n	8006afa <UART_SetConfig+0x1fa>
 8006a3c:	231b      	movs	r3, #27
 8006a3e:	2218      	movs	r2, #24
 8006a40:	189b      	adds	r3, r3, r2
 8006a42:	19db      	adds	r3, r3, r7
 8006a44:	2204      	movs	r2, #4
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	e057      	b.n	8006afa <UART_SetConfig+0x1fa>
 8006a4a:	231b      	movs	r3, #27
 8006a4c:	2218      	movs	r2, #24
 8006a4e:	189b      	adds	r3, r3, r2
 8006a50:	19db      	adds	r3, r3, r7
 8006a52:	2208      	movs	r2, #8
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	e050      	b.n	8006afa <UART_SetConfig+0x1fa>
 8006a58:	231b      	movs	r3, #27
 8006a5a:	2218      	movs	r2, #24
 8006a5c:	189b      	adds	r3, r3, r2
 8006a5e:	19db      	adds	r3, r3, r7
 8006a60:	2210      	movs	r2, #16
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	e049      	b.n	8006afa <UART_SetConfig+0x1fa>
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a7a      	ldr	r2, [pc, #488]	; (8006c54 <UART_SetConfig+0x354>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d13e      	bne.n	8006aee <UART_SetConfig+0x1ee>
 8006a70:	4b7b      	ldr	r3, [pc, #492]	; (8006c60 <UART_SetConfig+0x360>)
 8006a72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a74:	23c0      	movs	r3, #192	; 0xc0
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	4013      	ands	r3, r2
 8006a7a:	22c0      	movs	r2, #192	; 0xc0
 8006a7c:	0112      	lsls	r2, r2, #4
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d027      	beq.n	8006ad2 <UART_SetConfig+0x1d2>
 8006a82:	22c0      	movs	r2, #192	; 0xc0
 8006a84:	0112      	lsls	r2, r2, #4
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d82a      	bhi.n	8006ae0 <UART_SetConfig+0x1e0>
 8006a8a:	2280      	movs	r2, #128	; 0x80
 8006a8c:	0112      	lsls	r2, r2, #4
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d011      	beq.n	8006ab6 <UART_SetConfig+0x1b6>
 8006a92:	2280      	movs	r2, #128	; 0x80
 8006a94:	0112      	lsls	r2, r2, #4
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d822      	bhi.n	8006ae0 <UART_SetConfig+0x1e0>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d004      	beq.n	8006aa8 <UART_SetConfig+0x1a8>
 8006a9e:	2280      	movs	r2, #128	; 0x80
 8006aa0:	00d2      	lsls	r2, r2, #3
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00e      	beq.n	8006ac4 <UART_SetConfig+0x1c4>
 8006aa6:	e01b      	b.n	8006ae0 <UART_SetConfig+0x1e0>
 8006aa8:	231b      	movs	r3, #27
 8006aaa:	2218      	movs	r2, #24
 8006aac:	189b      	adds	r3, r3, r2
 8006aae:	19db      	adds	r3, r3, r7
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	e021      	b.n	8006afa <UART_SetConfig+0x1fa>
 8006ab6:	231b      	movs	r3, #27
 8006ab8:	2218      	movs	r2, #24
 8006aba:	189b      	adds	r3, r3, r2
 8006abc:	19db      	adds	r3, r3, r7
 8006abe:	2202      	movs	r2, #2
 8006ac0:	701a      	strb	r2, [r3, #0]
 8006ac2:	e01a      	b.n	8006afa <UART_SetConfig+0x1fa>
 8006ac4:	231b      	movs	r3, #27
 8006ac6:	2218      	movs	r2, #24
 8006ac8:	189b      	adds	r3, r3, r2
 8006aca:	19db      	adds	r3, r3, r7
 8006acc:	2204      	movs	r2, #4
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	e013      	b.n	8006afa <UART_SetConfig+0x1fa>
 8006ad2:	231b      	movs	r3, #27
 8006ad4:	2218      	movs	r2, #24
 8006ad6:	189b      	adds	r3, r3, r2
 8006ad8:	19db      	adds	r3, r3, r7
 8006ada:	2208      	movs	r2, #8
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	e00c      	b.n	8006afa <UART_SetConfig+0x1fa>
 8006ae0:	231b      	movs	r3, #27
 8006ae2:	2218      	movs	r2, #24
 8006ae4:	189b      	adds	r3, r3, r2
 8006ae6:	19db      	adds	r3, r3, r7
 8006ae8:	2210      	movs	r2, #16
 8006aea:	701a      	strb	r2, [r3, #0]
 8006aec:	e005      	b.n	8006afa <UART_SetConfig+0x1fa>
 8006aee:	231b      	movs	r3, #27
 8006af0:	2218      	movs	r2, #24
 8006af2:	189b      	adds	r3, r3, r2
 8006af4:	19db      	adds	r3, r3, r7
 8006af6:	2210      	movs	r2, #16
 8006af8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a55      	ldr	r2, [pc, #340]	; (8006c54 <UART_SetConfig+0x354>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d000      	beq.n	8006b06 <UART_SetConfig+0x206>
 8006b04:	e084      	b.n	8006c10 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b06:	231b      	movs	r3, #27
 8006b08:	2218      	movs	r2, #24
 8006b0a:	189b      	adds	r3, r3, r2
 8006b0c:	19db      	adds	r3, r3, r7
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d01d      	beq.n	8006b50 <UART_SetConfig+0x250>
 8006b14:	dc20      	bgt.n	8006b58 <UART_SetConfig+0x258>
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d015      	beq.n	8006b46 <UART_SetConfig+0x246>
 8006b1a:	dc1d      	bgt.n	8006b58 <UART_SetConfig+0x258>
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <UART_SetConfig+0x226>
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d005      	beq.n	8006b30 <UART_SetConfig+0x230>
 8006b24:	e018      	b.n	8006b58 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b26:	f7ff f89d 	bl	8005c64 <HAL_RCC_GetPCLK1Freq>
 8006b2a:	0003      	movs	r3, r0
 8006b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b2e:	e01c      	b.n	8006b6a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b30:	4b4b      	ldr	r3, [pc, #300]	; (8006c60 <UART_SetConfig+0x360>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2210      	movs	r2, #16
 8006b36:	4013      	ands	r3, r2
 8006b38:	d002      	beq.n	8006b40 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006b3a:	4b4b      	ldr	r3, [pc, #300]	; (8006c68 <UART_SetConfig+0x368>)
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b3e:	e014      	b.n	8006b6a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8006b40:	4b4a      	ldr	r3, [pc, #296]	; (8006c6c <UART_SetConfig+0x36c>)
 8006b42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b44:	e011      	b.n	8006b6a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b46:	f7fe ffdd 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8006b4a:	0003      	movs	r3, r0
 8006b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b4e:	e00c      	b.n	8006b6a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b50:	2380      	movs	r3, #128	; 0x80
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b56:	e008      	b.n	8006b6a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b5c:	231a      	movs	r3, #26
 8006b5e:	2218      	movs	r2, #24
 8006b60:	189b      	adds	r3, r3, r2
 8006b62:	19db      	adds	r3, r3, r7
 8006b64:	2201      	movs	r2, #1
 8006b66:	701a      	strb	r2, [r3, #0]
        break;
 8006b68:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d100      	bne.n	8006b72 <UART_SetConfig+0x272>
 8006b70:	e133      	b.n	8006dda <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	0013      	movs	r3, r2
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	189b      	adds	r3, r3, r2
 8006b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d305      	bcc.n	8006b8e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d906      	bls.n	8006b9c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8006b8e:	231a      	movs	r3, #26
 8006b90:	2218      	movs	r2, #24
 8006b92:	189b      	adds	r3, r3, r2
 8006b94:	19db      	adds	r3, r3, r7
 8006b96:	2201      	movs	r2, #1
 8006b98:	701a      	strb	r2, [r3, #0]
 8006b9a:	e11e      	b.n	8006dda <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9e:	613b      	str	r3, [r7, #16]
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	617b      	str	r3, [r7, #20]
 8006ba4:	6939      	ldr	r1, [r7, #16]
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	000b      	movs	r3, r1
 8006baa:	0e1b      	lsrs	r3, r3, #24
 8006bac:	0010      	movs	r0, r2
 8006bae:	0205      	lsls	r5, r0, #8
 8006bb0:	431d      	orrs	r5, r3
 8006bb2:	000b      	movs	r3, r1
 8006bb4:	021c      	lsls	r4, r3, #8
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	085b      	lsrs	r3, r3, #1
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]
 8006bc2:	68b8      	ldr	r0, [r7, #8]
 8006bc4:	68f9      	ldr	r1, [r7, #12]
 8006bc6:	1900      	adds	r0, r0, r4
 8006bc8:	4169      	adcs	r1, r5
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	607b      	str	r3, [r7, #4]
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f7f9 fc66 	bl	80004a8 <__aeabi_uldivmod>
 8006bdc:	0002      	movs	r2, r0
 8006bde:	000b      	movs	r3, r1
 8006be0:	0013      	movs	r3, r2
 8006be2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006be6:	23c0      	movs	r3, #192	; 0xc0
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d309      	bcc.n	8006c02 <UART_SetConfig+0x302>
 8006bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bf0:	2380      	movs	r3, #128	; 0x80
 8006bf2:	035b      	lsls	r3, r3, #13
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d204      	bcs.n	8006c02 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bfe:	60da      	str	r2, [r3, #12]
 8006c00:	e0eb      	b.n	8006dda <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 8006c02:	231a      	movs	r3, #26
 8006c04:	2218      	movs	r2, #24
 8006c06:	189b      	adds	r3, r3, r2
 8006c08:	19db      	adds	r3, r3, r7
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	e0e4      	b.n	8006dda <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	69da      	ldr	r2, [r3, #28]
 8006c14:	2380      	movs	r3, #128	; 0x80
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d000      	beq.n	8006c1e <UART_SetConfig+0x31e>
 8006c1c:	e086      	b.n	8006d2c <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 8006c1e:	231b      	movs	r3, #27
 8006c20:	2218      	movs	r2, #24
 8006c22:	189b      	adds	r3, r3, r2
 8006c24:	19db      	adds	r3, r3, r7
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d837      	bhi.n	8006c9c <UART_SetConfig+0x39c>
 8006c2c:	009a      	lsls	r2, r3, #2
 8006c2e:	4b10      	ldr	r3, [pc, #64]	; (8006c70 <UART_SetConfig+0x370>)
 8006c30:	18d3      	adds	r3, r2, r3
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c36:	f7ff f815 	bl	8005c64 <HAL_RCC_GetPCLK1Freq>
 8006c3a:	0003      	movs	r3, r0
 8006c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c3e:	e036      	b.n	8006cae <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c40:	f7ff f826 	bl	8005c90 <HAL_RCC_GetPCLK2Freq>
 8006c44:	0003      	movs	r3, r0
 8006c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c48:	e031      	b.n	8006cae <UART_SetConfig+0x3ae>
 8006c4a:	46c0      	nop			; (mov r8, r8)
 8006c4c:	efff69f3 	.word	0xefff69f3
 8006c50:	ffffcfff 	.word	0xffffcfff
 8006c54:	40004800 	.word	0x40004800
 8006c58:	fffff4ff 	.word	0xfffff4ff
 8006c5c:	40013800 	.word	0x40013800
 8006c60:	40021000 	.word	0x40021000
 8006c64:	40004400 	.word	0x40004400
 8006c68:	003d0900 	.word	0x003d0900
 8006c6c:	00f42400 	.word	0x00f42400
 8006c70:	0800a764 	.word	0x0800a764
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c74:	4b60      	ldr	r3, [pc, #384]	; (8006df8 <UART_SetConfig+0x4f8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2210      	movs	r2, #16
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	d002      	beq.n	8006c84 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006c7e:	4b5f      	ldr	r3, [pc, #380]	; (8006dfc <UART_SetConfig+0x4fc>)
 8006c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c82:	e014      	b.n	8006cae <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8006c84:	4b5e      	ldr	r3, [pc, #376]	; (8006e00 <UART_SetConfig+0x500>)
 8006c86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c88:	e011      	b.n	8006cae <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c8a:	f7fe ff3b 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8006c8e:	0003      	movs	r3, r0
 8006c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c92:	e00c      	b.n	8006cae <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c94:	2380      	movs	r3, #128	; 0x80
 8006c96:	021b      	lsls	r3, r3, #8
 8006c98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c9a:	e008      	b.n	8006cae <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006ca0:	231a      	movs	r3, #26
 8006ca2:	2218      	movs	r2, #24
 8006ca4:	189b      	adds	r3, r3, r2
 8006ca6:	19db      	adds	r3, r3, r7
 8006ca8:	2201      	movs	r2, #1
 8006caa:	701a      	strb	r2, [r3, #0]
        break;
 8006cac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d100      	bne.n	8006cb6 <UART_SetConfig+0x3b6>
 8006cb4:	e091      	b.n	8006dda <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	005a      	lsls	r2, r3, #1
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	085b      	lsrs	r3, r3, #1
 8006cc0:	18d2      	adds	r2, r2, r3
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	0019      	movs	r1, r3
 8006cc8:	0010      	movs	r0, r2
 8006cca:	f7f9 fa39 	bl	8000140 <__udivsi3>
 8006cce:	0003      	movs	r3, r0
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	2b0f      	cmp	r3, #15
 8006cd8:	d921      	bls.n	8006d1e <UART_SetConfig+0x41e>
 8006cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cdc:	2380      	movs	r3, #128	; 0x80
 8006cde:	025b      	lsls	r3, r3, #9
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d21c      	bcs.n	8006d1e <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	200e      	movs	r0, #14
 8006cea:	2418      	movs	r4, #24
 8006cec:	1903      	adds	r3, r0, r4
 8006cee:	19db      	adds	r3, r3, r7
 8006cf0:	210f      	movs	r1, #15
 8006cf2:	438a      	bics	r2, r1
 8006cf4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf8:	085b      	lsrs	r3, r3, #1
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2207      	movs	r2, #7
 8006cfe:	4013      	ands	r3, r2
 8006d00:	b299      	uxth	r1, r3
 8006d02:	1903      	adds	r3, r0, r4
 8006d04:	19db      	adds	r3, r3, r7
 8006d06:	1902      	adds	r2, r0, r4
 8006d08:	19d2      	adds	r2, r2, r7
 8006d0a:	8812      	ldrh	r2, [r2, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	1902      	adds	r2, r0, r4
 8006d16:	19d2      	adds	r2, r2, r7
 8006d18:	8812      	ldrh	r2, [r2, #0]
 8006d1a:	60da      	str	r2, [r3, #12]
 8006d1c:	e05d      	b.n	8006dda <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8006d1e:	231a      	movs	r3, #26
 8006d20:	2218      	movs	r2, #24
 8006d22:	189b      	adds	r3, r3, r2
 8006d24:	19db      	adds	r3, r3, r7
 8006d26:	2201      	movs	r2, #1
 8006d28:	701a      	strb	r2, [r3, #0]
 8006d2a:	e056      	b.n	8006dda <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d2c:	231b      	movs	r3, #27
 8006d2e:	2218      	movs	r2, #24
 8006d30:	189b      	adds	r3, r3, r2
 8006d32:	19db      	adds	r3, r3, r7
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b08      	cmp	r3, #8
 8006d38:	d822      	bhi.n	8006d80 <UART_SetConfig+0x480>
 8006d3a:	009a      	lsls	r2, r3, #2
 8006d3c:	4b31      	ldr	r3, [pc, #196]	; (8006e04 <UART_SetConfig+0x504>)
 8006d3e:	18d3      	adds	r3, r2, r3
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d44:	f7fe ff8e 	bl	8005c64 <HAL_RCC_GetPCLK1Freq>
 8006d48:	0003      	movs	r3, r0
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d4c:	e021      	b.n	8006d92 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d4e:	f7fe ff9f 	bl	8005c90 <HAL_RCC_GetPCLK2Freq>
 8006d52:	0003      	movs	r3, r0
 8006d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d56:	e01c      	b.n	8006d92 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d58:	4b27      	ldr	r3, [pc, #156]	; (8006df8 <UART_SetConfig+0x4f8>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2210      	movs	r2, #16
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d002      	beq.n	8006d68 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006d62:	4b26      	ldr	r3, [pc, #152]	; (8006dfc <UART_SetConfig+0x4fc>)
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d66:	e014      	b.n	8006d92 <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 8006d68:	4b25      	ldr	r3, [pc, #148]	; (8006e00 <UART_SetConfig+0x500>)
 8006d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d6c:	e011      	b.n	8006d92 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d6e:	f7fe fec9 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8006d72:	0003      	movs	r3, r0
 8006d74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d76:	e00c      	b.n	8006d92 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d78:	2380      	movs	r3, #128	; 0x80
 8006d7a:	021b      	lsls	r3, r3, #8
 8006d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d7e:	e008      	b.n	8006d92 <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006d84:	231a      	movs	r3, #26
 8006d86:	2218      	movs	r2, #24
 8006d88:	189b      	adds	r3, r3, r2
 8006d8a:	19db      	adds	r3, r3, r7
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	701a      	strb	r2, [r3, #0]
        break;
 8006d90:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d020      	beq.n	8006dda <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	085a      	lsrs	r2, r3, #1
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	18d2      	adds	r2, r2, r3
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	0019      	movs	r1, r3
 8006da8:	0010      	movs	r0, r2
 8006daa:	f7f9 f9c9 	bl	8000140 <__udivsi3>
 8006dae:	0003      	movs	r3, r0
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	2b0f      	cmp	r3, #15
 8006db8:	d909      	bls.n	8006dce <UART_SetConfig+0x4ce>
 8006dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dbc:	2380      	movs	r3, #128	; 0x80
 8006dbe:	025b      	lsls	r3, r3, #9
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d204      	bcs.n	8006dce <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dca:	60da      	str	r2, [r3, #12]
 8006dcc:	e005      	b.n	8006dda <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8006dce:	231a      	movs	r3, #26
 8006dd0:	2218      	movs	r2, #24
 8006dd2:	189b      	adds	r3, r3, r2
 8006dd4:	19db      	adds	r3, r3, r7
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	2200      	movs	r2, #0
 8006de4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006de6:	231a      	movs	r3, #26
 8006de8:	2218      	movs	r2, #24
 8006dea:	189b      	adds	r3, r3, r2
 8006dec:	19db      	adds	r3, r3, r7
 8006dee:	781b      	ldrb	r3, [r3, #0]
}
 8006df0:	0018      	movs	r0, r3
 8006df2:	46bd      	mov	sp, r7
 8006df4:	b00e      	add	sp, #56	; 0x38
 8006df6:	bdb0      	pop	{r4, r5, r7, pc}
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	003d0900 	.word	0x003d0900
 8006e00:	00f42400 	.word	0x00f42400
 8006e04:	0800a788 	.word	0x0800a788

08006e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	2201      	movs	r2, #1
 8006e16:	4013      	ands	r3, r2
 8006e18:	d00b      	beq.n	8006e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	4a4a      	ldr	r2, [pc, #296]	; (8006f4c <UART_AdvFeatureConfig+0x144>)
 8006e22:	4013      	ands	r3, r2
 8006e24:	0019      	movs	r1, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	2202      	movs	r2, #2
 8006e38:	4013      	ands	r3, r2
 8006e3a:	d00b      	beq.n	8006e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	4a43      	ldr	r2, [pc, #268]	; (8006f50 <UART_AdvFeatureConfig+0x148>)
 8006e44:	4013      	ands	r3, r2
 8006e46:	0019      	movs	r1, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	2204      	movs	r2, #4
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	d00b      	beq.n	8006e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	4a3b      	ldr	r2, [pc, #236]	; (8006f54 <UART_AdvFeatureConfig+0x14c>)
 8006e66:	4013      	ands	r3, r2
 8006e68:	0019      	movs	r1, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	2208      	movs	r2, #8
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	d00b      	beq.n	8006e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	4a34      	ldr	r2, [pc, #208]	; (8006f58 <UART_AdvFeatureConfig+0x150>)
 8006e88:	4013      	ands	r3, r2
 8006e8a:	0019      	movs	r1, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	2210      	movs	r2, #16
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	d00b      	beq.n	8006eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	4a2c      	ldr	r2, [pc, #176]	; (8006f5c <UART_AdvFeatureConfig+0x154>)
 8006eaa:	4013      	ands	r3, r2
 8006eac:	0019      	movs	r1, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	d00b      	beq.n	8006edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	4a25      	ldr	r2, [pc, #148]	; (8006f60 <UART_AdvFeatureConfig+0x158>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	0019      	movs	r1, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	2240      	movs	r2, #64	; 0x40
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	d01d      	beq.n	8006f22 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	4a1d      	ldr	r2, [pc, #116]	; (8006f64 <UART_AdvFeatureConfig+0x15c>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	0019      	movs	r1, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f02:	2380      	movs	r3, #128	; 0x80
 8006f04:	035b      	lsls	r3, r3, #13
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d10b      	bne.n	8006f22 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	4a15      	ldr	r2, [pc, #84]	; (8006f68 <UART_AdvFeatureConfig+0x160>)
 8006f12:	4013      	ands	r3, r2
 8006f14:	0019      	movs	r1, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	2280      	movs	r2, #128	; 0x80
 8006f28:	4013      	ands	r3, r2
 8006f2a:	d00b      	beq.n	8006f44 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	4a0e      	ldr	r2, [pc, #56]	; (8006f6c <UART_AdvFeatureConfig+0x164>)
 8006f34:	4013      	ands	r3, r2
 8006f36:	0019      	movs	r1, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	605a      	str	r2, [r3, #4]
  }
}
 8006f44:	46c0      	nop			; (mov r8, r8)
 8006f46:	46bd      	mov	sp, r7
 8006f48:	b002      	add	sp, #8
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	fffdffff 	.word	0xfffdffff
 8006f50:	fffeffff 	.word	0xfffeffff
 8006f54:	fffbffff 	.word	0xfffbffff
 8006f58:	ffff7fff 	.word	0xffff7fff
 8006f5c:	ffffefff 	.word	0xffffefff
 8006f60:	ffffdfff 	.word	0xffffdfff
 8006f64:	ffefffff 	.word	0xffefffff
 8006f68:	ff9fffff 	.word	0xff9fffff
 8006f6c:	fff7ffff 	.word	0xfff7ffff

08006f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af02      	add	r7, sp, #8
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2280      	movs	r2, #128	; 0x80
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f80:	f7fd fb16 	bl	80045b0 <HAL_GetTick>
 8006f84:	0003      	movs	r3, r0
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2208      	movs	r2, #8
 8006f90:	4013      	ands	r3, r2
 8006f92:	2b08      	cmp	r3, #8
 8006f94:	d10c      	bne.n	8006fb0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2280      	movs	r2, #128	; 0x80
 8006f9a:	0391      	lsls	r1, r2, #14
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	4a17      	ldr	r2, [pc, #92]	; (8006ffc <UART_CheckIdleState+0x8c>)
 8006fa0:	9200      	str	r2, [sp, #0]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f000 f82c 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006fa8:	1e03      	subs	r3, r0, #0
 8006faa:	d001      	beq.n	8006fb0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e021      	b.n	8006ff4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2204      	movs	r2, #4
 8006fb8:	4013      	ands	r3, r2
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	d10c      	bne.n	8006fd8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2280      	movs	r2, #128	; 0x80
 8006fc2:	03d1      	lsls	r1, r2, #15
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	4a0d      	ldr	r2, [pc, #52]	; (8006ffc <UART_CheckIdleState+0x8c>)
 8006fc8:	9200      	str	r2, [sp, #0]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f000 f818 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006fd0:	1e03      	subs	r3, r0, #0
 8006fd2:	d001      	beq.n	8006fd8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e00d      	b.n	8006ff4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2274      	movs	r2, #116	; 0x74
 8006fee:	2100      	movs	r1, #0
 8006ff0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	b004      	add	sp, #16
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	01ffffff 	.word	0x01ffffff

08007000 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b094      	sub	sp, #80	; 0x50
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	1dfb      	adds	r3, r7, #7
 800700e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007010:	e0a3      	b.n	800715a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007014:	3301      	adds	r3, #1
 8007016:	d100      	bne.n	800701a <UART_WaitOnFlagUntilTimeout+0x1a>
 8007018:	e09f      	b.n	800715a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701a:	f7fd fac9 	bl	80045b0 <HAL_GetTick>
 800701e:	0002      	movs	r2, r0
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007026:	429a      	cmp	r2, r3
 8007028:	d302      	bcc.n	8007030 <UART_WaitOnFlagUntilTimeout+0x30>
 800702a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800702c:	2b00      	cmp	r3, #0
 800702e:	d13d      	bne.n	80070ac <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007030:	f3ef 8310 	mrs	r3, PRIMASK
 8007034:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007036:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007038:	647b      	str	r3, [r7, #68]	; 0x44
 800703a:	2301      	movs	r3, #1
 800703c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007040:	f383 8810 	msr	PRIMASK, r3
}
 8007044:	46c0      	nop			; (mov r8, r8)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	494c      	ldr	r1, [pc, #304]	; (8007184 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007052:	400a      	ands	r2, r1
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007058:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	f383 8810 	msr	PRIMASK, r3
}
 8007060:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007062:	f3ef 8310 	mrs	r3, PRIMASK
 8007066:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706a:	643b      	str	r3, [r7, #64]	; 0x40
 800706c:	2301      	movs	r3, #1
 800706e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007072:	f383 8810 	msr	PRIMASK, r3
}
 8007076:	46c0      	nop			; (mov r8, r8)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2101      	movs	r1, #1
 8007084:	438a      	bics	r2, r1
 8007086:	609a      	str	r2, [r3, #8]
 8007088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800708a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800708c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708e:	f383 8810 	msr	PRIMASK, r3
}
 8007092:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2220      	movs	r2, #32
 8007098:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2220      	movs	r2, #32
 800709e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2274      	movs	r2, #116	; 0x74
 80070a4:	2100      	movs	r1, #0
 80070a6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e067      	b.n	800717c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2204      	movs	r2, #4
 80070b4:	4013      	ands	r3, r2
 80070b6:	d050      	beq.n	800715a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	69da      	ldr	r2, [r3, #28]
 80070be:	2380      	movs	r3, #128	; 0x80
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	401a      	ands	r2, r3
 80070c4:	2380      	movs	r3, #128	; 0x80
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d146      	bne.n	800715a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2280      	movs	r2, #128	; 0x80
 80070d2:	0112      	lsls	r2, r2, #4
 80070d4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d6:	f3ef 8310 	mrs	r3, PRIMASK
 80070da:	613b      	str	r3, [r7, #16]
  return(result);
 80070dc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070e0:	2301      	movs	r3, #1
 80070e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f383 8810 	msr	PRIMASK, r3
}
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4923      	ldr	r1, [pc, #140]	; (8007184 <UART_WaitOnFlagUntilTimeout+0x184>)
 80070f8:	400a      	ands	r2, r1
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	f383 8810 	msr	PRIMASK, r3
}
 8007106:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007108:	f3ef 8310 	mrs	r3, PRIMASK
 800710c:	61fb      	str	r3, [r7, #28]
  return(result);
 800710e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007110:	64bb      	str	r3, [r7, #72]	; 0x48
 8007112:	2301      	movs	r3, #1
 8007114:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	f383 8810 	msr	PRIMASK, r3
}
 800711c:	46c0      	nop			; (mov r8, r8)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2101      	movs	r1, #1
 800712a:	438a      	bics	r2, r1
 800712c:	609a      	str	r2, [r3, #8]
 800712e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007130:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	f383 8810 	msr	PRIMASK, r3
}
 8007138:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2220      	movs	r2, #32
 800713e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2220      	movs	r2, #32
 8007144:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2280      	movs	r2, #128	; 0x80
 800714a:	2120      	movs	r1, #32
 800714c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2274      	movs	r2, #116	; 0x74
 8007152:	2100      	movs	r1, #0
 8007154:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e010      	b.n	800717c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	4013      	ands	r3, r2
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	425a      	negs	r2, r3
 800716a:	4153      	adcs	r3, r2
 800716c:	b2db      	uxtb	r3, r3
 800716e:	001a      	movs	r2, r3
 8007170:	1dfb      	adds	r3, r7, #7
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	429a      	cmp	r2, r3
 8007176:	d100      	bne.n	800717a <UART_WaitOnFlagUntilTimeout+0x17a>
 8007178:	e74b      	b.n	8007012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	0018      	movs	r0, r3
 800717e:	46bd      	mov	sp, r7
 8007180:	b014      	add	sp, #80	; 0x50
 8007182:	bd80      	pop	{r7, pc}
 8007184:	fffffe5f 	.word	0xfffffe5f

08007188 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e017      	b.n	80071ca <HAL_WWDG_Init+0x42>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	0018      	movs	r0, r3
 800719e:	f000 f818 	bl	80071d2 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2180      	movs	r1, #128	; 0x80
 80071ac:	430a      	orrs	r2, r1
 80071ae:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691a      	ldr	r2, [r3, #16]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	431a      	orrs	r2, r3
 80071ba:	0011      	movs	r1, r2
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	430a      	orrs	r2, r1
 80071c6:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	0018      	movs	r0, r3
 80071cc:	46bd      	mov	sp, r7
 80071ce:	b002      	add	sp, #8
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <HAL_WWDG_MspInit>:
  *         to avoid multiple initialize when HAL_WWDG_Init function is called
  *         again to change parameters.
  * @retval None
  */
__weak void HAL_WWDG_MspInit(WWDG_HandleTypeDef *hwwdg)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b082      	sub	sp, #8
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_MspInit could be implemented in the user file
   */
}
 80071da:	46c0      	nop			; (mov r8, r8)
 80071dc:	46bd      	mov	sp, r7
 80071de:	b002      	add	sp, #8
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <__errno>:
 80071e4:	4b01      	ldr	r3, [pc, #4]	; (80071ec <__errno+0x8>)
 80071e6:	6818      	ldr	r0, [r3, #0]
 80071e8:	4770      	bx	lr
 80071ea:	46c0      	nop			; (mov r8, r8)
 80071ec:	2000008c 	.word	0x2000008c

080071f0 <__libc_init_array>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	2600      	movs	r6, #0
 80071f4:	4d0c      	ldr	r5, [pc, #48]	; (8007228 <__libc_init_array+0x38>)
 80071f6:	4c0d      	ldr	r4, [pc, #52]	; (800722c <__libc_init_array+0x3c>)
 80071f8:	1b64      	subs	r4, r4, r5
 80071fa:	10a4      	asrs	r4, r4, #2
 80071fc:	42a6      	cmp	r6, r4
 80071fe:	d109      	bne.n	8007214 <__libc_init_array+0x24>
 8007200:	2600      	movs	r6, #0
 8007202:	f002 fe83 	bl	8009f0c <_init>
 8007206:	4d0a      	ldr	r5, [pc, #40]	; (8007230 <__libc_init_array+0x40>)
 8007208:	4c0a      	ldr	r4, [pc, #40]	; (8007234 <__libc_init_array+0x44>)
 800720a:	1b64      	subs	r4, r4, r5
 800720c:	10a4      	asrs	r4, r4, #2
 800720e:	42a6      	cmp	r6, r4
 8007210:	d105      	bne.n	800721e <__libc_init_array+0x2e>
 8007212:	bd70      	pop	{r4, r5, r6, pc}
 8007214:	00b3      	lsls	r3, r6, #2
 8007216:	58eb      	ldr	r3, [r5, r3]
 8007218:	4798      	blx	r3
 800721a:	3601      	adds	r6, #1
 800721c:	e7ee      	b.n	80071fc <__libc_init_array+0xc>
 800721e:	00b3      	lsls	r3, r6, #2
 8007220:	58eb      	ldr	r3, [r5, r3]
 8007222:	4798      	blx	r3
 8007224:	3601      	adds	r6, #1
 8007226:	e7f2      	b.n	800720e <__libc_init_array+0x1e>
 8007228:	0800ab8c 	.word	0x0800ab8c
 800722c:	0800ab8c 	.word	0x0800ab8c
 8007230:	0800ab8c 	.word	0x0800ab8c
 8007234:	0800ab90 	.word	0x0800ab90

08007238 <memset>:
 8007238:	0003      	movs	r3, r0
 800723a:	1882      	adds	r2, r0, r2
 800723c:	4293      	cmp	r3, r2
 800723e:	d100      	bne.n	8007242 <memset+0xa>
 8007240:	4770      	bx	lr
 8007242:	7019      	strb	r1, [r3, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	e7f9      	b.n	800723c <memset+0x4>

08007248 <__cvt>:
 8007248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800724a:	001e      	movs	r6, r3
 800724c:	2300      	movs	r3, #0
 800724e:	0014      	movs	r4, r2
 8007250:	b08b      	sub	sp, #44	; 0x2c
 8007252:	429e      	cmp	r6, r3
 8007254:	da04      	bge.n	8007260 <__cvt+0x18>
 8007256:	2180      	movs	r1, #128	; 0x80
 8007258:	0609      	lsls	r1, r1, #24
 800725a:	1873      	adds	r3, r6, r1
 800725c:	001e      	movs	r6, r3
 800725e:	232d      	movs	r3, #45	; 0x2d
 8007260:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007262:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007264:	7013      	strb	r3, [r2, #0]
 8007266:	2320      	movs	r3, #32
 8007268:	2203      	movs	r2, #3
 800726a:	439f      	bics	r7, r3
 800726c:	2f46      	cmp	r7, #70	; 0x46
 800726e:	d007      	beq.n	8007280 <__cvt+0x38>
 8007270:	003b      	movs	r3, r7
 8007272:	3b45      	subs	r3, #69	; 0x45
 8007274:	4259      	negs	r1, r3
 8007276:	414b      	adcs	r3, r1
 8007278:	9910      	ldr	r1, [sp, #64]	; 0x40
 800727a:	3a01      	subs	r2, #1
 800727c:	18cb      	adds	r3, r1, r3
 800727e:	9310      	str	r3, [sp, #64]	; 0x40
 8007280:	ab09      	add	r3, sp, #36	; 0x24
 8007282:	9304      	str	r3, [sp, #16]
 8007284:	ab08      	add	r3, sp, #32
 8007286:	9303      	str	r3, [sp, #12]
 8007288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800728a:	9200      	str	r2, [sp, #0]
 800728c:	9302      	str	r3, [sp, #8]
 800728e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007290:	0022      	movs	r2, r4
 8007292:	9301      	str	r3, [sp, #4]
 8007294:	0033      	movs	r3, r6
 8007296:	f000 fe35 	bl	8007f04 <_dtoa_r>
 800729a:	0005      	movs	r5, r0
 800729c:	2f47      	cmp	r7, #71	; 0x47
 800729e:	d102      	bne.n	80072a6 <__cvt+0x5e>
 80072a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072a2:	07db      	lsls	r3, r3, #31
 80072a4:	d528      	bpl.n	80072f8 <__cvt+0xb0>
 80072a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072a8:	18eb      	adds	r3, r5, r3
 80072aa:	9307      	str	r3, [sp, #28]
 80072ac:	2f46      	cmp	r7, #70	; 0x46
 80072ae:	d114      	bne.n	80072da <__cvt+0x92>
 80072b0:	782b      	ldrb	r3, [r5, #0]
 80072b2:	2b30      	cmp	r3, #48	; 0x30
 80072b4:	d10c      	bne.n	80072d0 <__cvt+0x88>
 80072b6:	2200      	movs	r2, #0
 80072b8:	2300      	movs	r3, #0
 80072ba:	0020      	movs	r0, r4
 80072bc:	0031      	movs	r1, r6
 80072be:	f7f9 f8c5 	bl	800044c <__aeabi_dcmpeq>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	d104      	bne.n	80072d0 <__cvt+0x88>
 80072c6:	2301      	movs	r3, #1
 80072c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072ca:	1a9b      	subs	r3, r3, r2
 80072cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072d2:	9a07      	ldr	r2, [sp, #28]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	18d3      	adds	r3, r2, r3
 80072d8:	9307      	str	r3, [sp, #28]
 80072da:	2200      	movs	r2, #0
 80072dc:	2300      	movs	r3, #0
 80072de:	0020      	movs	r0, r4
 80072e0:	0031      	movs	r1, r6
 80072e2:	f7f9 f8b3 	bl	800044c <__aeabi_dcmpeq>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	d001      	beq.n	80072ee <__cvt+0xa6>
 80072ea:	9b07      	ldr	r3, [sp, #28]
 80072ec:	9309      	str	r3, [sp, #36]	; 0x24
 80072ee:	2230      	movs	r2, #48	; 0x30
 80072f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f2:	9907      	ldr	r1, [sp, #28]
 80072f4:	428b      	cmp	r3, r1
 80072f6:	d306      	bcc.n	8007306 <__cvt+0xbe>
 80072f8:	0028      	movs	r0, r5
 80072fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80072fe:	1b5b      	subs	r3, r3, r5
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	b00b      	add	sp, #44	; 0x2c
 8007304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007306:	1c59      	adds	r1, r3, #1
 8007308:	9109      	str	r1, [sp, #36]	; 0x24
 800730a:	701a      	strb	r2, [r3, #0]
 800730c:	e7f0      	b.n	80072f0 <__cvt+0xa8>

0800730e <__exponent>:
 800730e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007310:	1c83      	adds	r3, r0, #2
 8007312:	b087      	sub	sp, #28
 8007314:	9303      	str	r3, [sp, #12]
 8007316:	0005      	movs	r5, r0
 8007318:	000c      	movs	r4, r1
 800731a:	232b      	movs	r3, #43	; 0x2b
 800731c:	7002      	strb	r2, [r0, #0]
 800731e:	2900      	cmp	r1, #0
 8007320:	da01      	bge.n	8007326 <__exponent+0x18>
 8007322:	424c      	negs	r4, r1
 8007324:	3302      	adds	r3, #2
 8007326:	706b      	strb	r3, [r5, #1]
 8007328:	2c09      	cmp	r4, #9
 800732a:	dd31      	ble.n	8007390 <__exponent+0x82>
 800732c:	270a      	movs	r7, #10
 800732e:	ab04      	add	r3, sp, #16
 8007330:	1dde      	adds	r6, r3, #7
 8007332:	0020      	movs	r0, r4
 8007334:	0039      	movs	r1, r7
 8007336:	9601      	str	r6, [sp, #4]
 8007338:	f7f9 f872 	bl	8000420 <__aeabi_idivmod>
 800733c:	3e01      	subs	r6, #1
 800733e:	3130      	adds	r1, #48	; 0x30
 8007340:	0020      	movs	r0, r4
 8007342:	7031      	strb	r1, [r6, #0]
 8007344:	0039      	movs	r1, r7
 8007346:	9402      	str	r4, [sp, #8]
 8007348:	f7f8 ff84 	bl	8000254 <__divsi3>
 800734c:	9b02      	ldr	r3, [sp, #8]
 800734e:	0004      	movs	r4, r0
 8007350:	2b63      	cmp	r3, #99	; 0x63
 8007352:	dcee      	bgt.n	8007332 <__exponent+0x24>
 8007354:	9b01      	ldr	r3, [sp, #4]
 8007356:	3430      	adds	r4, #48	; 0x30
 8007358:	1e9a      	subs	r2, r3, #2
 800735a:	0013      	movs	r3, r2
 800735c:	9903      	ldr	r1, [sp, #12]
 800735e:	7014      	strb	r4, [r2, #0]
 8007360:	a804      	add	r0, sp, #16
 8007362:	3007      	adds	r0, #7
 8007364:	4298      	cmp	r0, r3
 8007366:	d80e      	bhi.n	8007386 <__exponent+0x78>
 8007368:	ab04      	add	r3, sp, #16
 800736a:	3307      	adds	r3, #7
 800736c:	2000      	movs	r0, #0
 800736e:	429a      	cmp	r2, r3
 8007370:	d804      	bhi.n	800737c <__exponent+0x6e>
 8007372:	ab04      	add	r3, sp, #16
 8007374:	3009      	adds	r0, #9
 8007376:	18c0      	adds	r0, r0, r3
 8007378:	9b01      	ldr	r3, [sp, #4]
 800737a:	1ac0      	subs	r0, r0, r3
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	1818      	adds	r0, r3, r0
 8007380:	1b40      	subs	r0, r0, r5
 8007382:	b007      	add	sp, #28
 8007384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007386:	7818      	ldrb	r0, [r3, #0]
 8007388:	3301      	adds	r3, #1
 800738a:	7008      	strb	r0, [r1, #0]
 800738c:	3101      	adds	r1, #1
 800738e:	e7e7      	b.n	8007360 <__exponent+0x52>
 8007390:	2330      	movs	r3, #48	; 0x30
 8007392:	18e4      	adds	r4, r4, r3
 8007394:	70ab      	strb	r3, [r5, #2]
 8007396:	1d28      	adds	r0, r5, #4
 8007398:	70ec      	strb	r4, [r5, #3]
 800739a:	e7f1      	b.n	8007380 <__exponent+0x72>

0800739c <_printf_float>:
 800739c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800739e:	b095      	sub	sp, #84	; 0x54
 80073a0:	000c      	movs	r4, r1
 80073a2:	9209      	str	r2, [sp, #36]	; 0x24
 80073a4:	001e      	movs	r6, r3
 80073a6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80073a8:	0007      	movs	r7, r0
 80073aa:	f001 fd93 	bl	8008ed4 <_localeconv_r>
 80073ae:	6803      	ldr	r3, [r0, #0]
 80073b0:	0018      	movs	r0, r3
 80073b2:	930c      	str	r3, [sp, #48]	; 0x30
 80073b4:	f7f8 fea8 	bl	8000108 <strlen>
 80073b8:	2300      	movs	r3, #0
 80073ba:	9312      	str	r3, [sp, #72]	; 0x48
 80073bc:	7e23      	ldrb	r3, [r4, #24]
 80073be:	2207      	movs	r2, #7
 80073c0:	930a      	str	r3, [sp, #40]	; 0x28
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	900e      	str	r0, [sp, #56]	; 0x38
 80073c6:	930d      	str	r3, [sp, #52]	; 0x34
 80073c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80073ca:	682b      	ldr	r3, [r5, #0]
 80073cc:	05c9      	lsls	r1, r1, #23
 80073ce:	d547      	bpl.n	8007460 <_printf_float+0xc4>
 80073d0:	189b      	adds	r3, r3, r2
 80073d2:	4393      	bics	r3, r2
 80073d4:	001a      	movs	r2, r3
 80073d6:	3208      	adds	r2, #8
 80073d8:	602a      	str	r2, [r5, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	64a2      	str	r2, [r4, #72]	; 0x48
 80073e0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80073e2:	2201      	movs	r2, #1
 80073e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80073e6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80073e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80073ea:	006b      	lsls	r3, r5, #1
 80073ec:	085b      	lsrs	r3, r3, #1
 80073ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80073f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80073f2:	4ba7      	ldr	r3, [pc, #668]	; (8007690 <_printf_float+0x2f4>)
 80073f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80073f6:	4252      	negs	r2, r2
 80073f8:	f7fa feac 	bl	8002154 <__aeabi_dcmpun>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d131      	bne.n	8007464 <_printf_float+0xc8>
 8007400:	2201      	movs	r2, #1
 8007402:	4ba3      	ldr	r3, [pc, #652]	; (8007690 <_printf_float+0x2f4>)
 8007404:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007406:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007408:	4252      	negs	r2, r2
 800740a:	f7f9 f82f 	bl	800046c <__aeabi_dcmple>
 800740e:	2800      	cmp	r0, #0
 8007410:	d128      	bne.n	8007464 <_printf_float+0xc8>
 8007412:	2200      	movs	r2, #0
 8007414:	2300      	movs	r3, #0
 8007416:	0029      	movs	r1, r5
 8007418:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800741a:	f7f9 f81d 	bl	8000458 <__aeabi_dcmplt>
 800741e:	2800      	cmp	r0, #0
 8007420:	d003      	beq.n	800742a <_printf_float+0x8e>
 8007422:	0023      	movs	r3, r4
 8007424:	222d      	movs	r2, #45	; 0x2d
 8007426:	3343      	adds	r3, #67	; 0x43
 8007428:	701a      	strb	r2, [r3, #0]
 800742a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800742c:	4d99      	ldr	r5, [pc, #612]	; (8007694 <_printf_float+0x2f8>)
 800742e:	2b47      	cmp	r3, #71	; 0x47
 8007430:	d900      	bls.n	8007434 <_printf_float+0x98>
 8007432:	4d99      	ldr	r5, [pc, #612]	; (8007698 <_printf_float+0x2fc>)
 8007434:	2303      	movs	r3, #3
 8007436:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007438:	6123      	str	r3, [r4, #16]
 800743a:	3301      	adds	r3, #1
 800743c:	439a      	bics	r2, r3
 800743e:	2300      	movs	r3, #0
 8007440:	6022      	str	r2, [r4, #0]
 8007442:	930b      	str	r3, [sp, #44]	; 0x2c
 8007444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007446:	0021      	movs	r1, r4
 8007448:	0038      	movs	r0, r7
 800744a:	9600      	str	r6, [sp, #0]
 800744c:	aa13      	add	r2, sp, #76	; 0x4c
 800744e:	f000 f9e7 	bl	8007820 <_printf_common>
 8007452:	1c43      	adds	r3, r0, #1
 8007454:	d000      	beq.n	8007458 <_printf_float+0xbc>
 8007456:	e0a2      	b.n	800759e <_printf_float+0x202>
 8007458:	2001      	movs	r0, #1
 800745a:	4240      	negs	r0, r0
 800745c:	b015      	add	sp, #84	; 0x54
 800745e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007460:	3307      	adds	r3, #7
 8007462:	e7b6      	b.n	80073d2 <_printf_float+0x36>
 8007464:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007466:	002b      	movs	r3, r5
 8007468:	0010      	movs	r0, r2
 800746a:	0029      	movs	r1, r5
 800746c:	f7fa fe72 	bl	8002154 <__aeabi_dcmpun>
 8007470:	2800      	cmp	r0, #0
 8007472:	d00b      	beq.n	800748c <_printf_float+0xf0>
 8007474:	2d00      	cmp	r5, #0
 8007476:	da03      	bge.n	8007480 <_printf_float+0xe4>
 8007478:	0023      	movs	r3, r4
 800747a:	222d      	movs	r2, #45	; 0x2d
 800747c:	3343      	adds	r3, #67	; 0x43
 800747e:	701a      	strb	r2, [r3, #0]
 8007480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007482:	4d86      	ldr	r5, [pc, #536]	; (800769c <_printf_float+0x300>)
 8007484:	2b47      	cmp	r3, #71	; 0x47
 8007486:	d9d5      	bls.n	8007434 <_printf_float+0x98>
 8007488:	4d85      	ldr	r5, [pc, #532]	; (80076a0 <_printf_float+0x304>)
 800748a:	e7d3      	b.n	8007434 <_printf_float+0x98>
 800748c:	2220      	movs	r2, #32
 800748e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007490:	6863      	ldr	r3, [r4, #4]
 8007492:	4391      	bics	r1, r2
 8007494:	910f      	str	r1, [sp, #60]	; 0x3c
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	d149      	bne.n	800752e <_printf_float+0x192>
 800749a:	3307      	adds	r3, #7
 800749c:	6063      	str	r3, [r4, #4]
 800749e:	2380      	movs	r3, #128	; 0x80
 80074a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	4313      	orrs	r3, r2
 80074a6:	2200      	movs	r2, #0
 80074a8:	9206      	str	r2, [sp, #24]
 80074aa:	aa12      	add	r2, sp, #72	; 0x48
 80074ac:	9205      	str	r2, [sp, #20]
 80074ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074b0:	a908      	add	r1, sp, #32
 80074b2:	9204      	str	r2, [sp, #16]
 80074b4:	aa11      	add	r2, sp, #68	; 0x44
 80074b6:	9203      	str	r2, [sp, #12]
 80074b8:	2223      	movs	r2, #35	; 0x23
 80074ba:	6023      	str	r3, [r4, #0]
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	6863      	ldr	r3, [r4, #4]
 80074c0:	1852      	adds	r2, r2, r1
 80074c2:	9202      	str	r2, [sp, #8]
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	0038      	movs	r0, r7
 80074c8:	002b      	movs	r3, r5
 80074ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074cc:	f7ff febc 	bl	8007248 <__cvt>
 80074d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074d2:	0005      	movs	r5, r0
 80074d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80074d6:	2b47      	cmp	r3, #71	; 0x47
 80074d8:	d108      	bne.n	80074ec <_printf_float+0x150>
 80074da:	1ccb      	adds	r3, r1, #3
 80074dc:	db02      	blt.n	80074e4 <_printf_float+0x148>
 80074de:	6863      	ldr	r3, [r4, #4]
 80074e0:	4299      	cmp	r1, r3
 80074e2:	dd48      	ble.n	8007576 <_printf_float+0x1da>
 80074e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074e6:	3b02      	subs	r3, #2
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	930a      	str	r3, [sp, #40]	; 0x28
 80074ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ee:	2b65      	cmp	r3, #101	; 0x65
 80074f0:	d824      	bhi.n	800753c <_printf_float+0x1a0>
 80074f2:	0020      	movs	r0, r4
 80074f4:	001a      	movs	r2, r3
 80074f6:	3901      	subs	r1, #1
 80074f8:	3050      	adds	r0, #80	; 0x50
 80074fa:	9111      	str	r1, [sp, #68]	; 0x44
 80074fc:	f7ff ff07 	bl	800730e <__exponent>
 8007500:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007502:	900b      	str	r0, [sp, #44]	; 0x2c
 8007504:	1813      	adds	r3, r2, r0
 8007506:	6123      	str	r3, [r4, #16]
 8007508:	2a01      	cmp	r2, #1
 800750a:	dc02      	bgt.n	8007512 <_printf_float+0x176>
 800750c:	6822      	ldr	r2, [r4, #0]
 800750e:	07d2      	lsls	r2, r2, #31
 8007510:	d501      	bpl.n	8007516 <_printf_float+0x17a>
 8007512:	3301      	adds	r3, #1
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	2323      	movs	r3, #35	; 0x23
 8007518:	aa08      	add	r2, sp, #32
 800751a:	189b      	adds	r3, r3, r2
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d100      	bne.n	8007524 <_printf_float+0x188>
 8007522:	e78f      	b.n	8007444 <_printf_float+0xa8>
 8007524:	0023      	movs	r3, r4
 8007526:	222d      	movs	r2, #45	; 0x2d
 8007528:	3343      	adds	r3, #67	; 0x43
 800752a:	701a      	strb	r2, [r3, #0]
 800752c:	e78a      	b.n	8007444 <_printf_float+0xa8>
 800752e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007530:	2a47      	cmp	r2, #71	; 0x47
 8007532:	d1b4      	bne.n	800749e <_printf_float+0x102>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1b2      	bne.n	800749e <_printf_float+0x102>
 8007538:	3301      	adds	r3, #1
 800753a:	e7af      	b.n	800749c <_printf_float+0x100>
 800753c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800753e:	2b66      	cmp	r3, #102	; 0x66
 8007540:	d11b      	bne.n	800757a <_printf_float+0x1de>
 8007542:	6863      	ldr	r3, [r4, #4]
 8007544:	2900      	cmp	r1, #0
 8007546:	dd0d      	ble.n	8007564 <_printf_float+0x1c8>
 8007548:	6121      	str	r1, [r4, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d102      	bne.n	8007554 <_printf_float+0x1b8>
 800754e:	6822      	ldr	r2, [r4, #0]
 8007550:	07d2      	lsls	r2, r2, #31
 8007552:	d502      	bpl.n	800755a <_printf_float+0x1be>
 8007554:	3301      	adds	r3, #1
 8007556:	1859      	adds	r1, r3, r1
 8007558:	6121      	str	r1, [r4, #16]
 800755a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800755c:	65a3      	str	r3, [r4, #88]	; 0x58
 800755e:	2300      	movs	r3, #0
 8007560:	930b      	str	r3, [sp, #44]	; 0x2c
 8007562:	e7d8      	b.n	8007516 <_printf_float+0x17a>
 8007564:	2b00      	cmp	r3, #0
 8007566:	d103      	bne.n	8007570 <_printf_float+0x1d4>
 8007568:	2201      	movs	r2, #1
 800756a:	6821      	ldr	r1, [r4, #0]
 800756c:	4211      	tst	r1, r2
 800756e:	d000      	beq.n	8007572 <_printf_float+0x1d6>
 8007570:	1c9a      	adds	r2, r3, #2
 8007572:	6122      	str	r2, [r4, #16]
 8007574:	e7f1      	b.n	800755a <_printf_float+0x1be>
 8007576:	2367      	movs	r3, #103	; 0x67
 8007578:	930a      	str	r3, [sp, #40]	; 0x28
 800757a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800757c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800757e:	4293      	cmp	r3, r2
 8007580:	db06      	blt.n	8007590 <_printf_float+0x1f4>
 8007582:	6822      	ldr	r2, [r4, #0]
 8007584:	6123      	str	r3, [r4, #16]
 8007586:	07d2      	lsls	r2, r2, #31
 8007588:	d5e7      	bpl.n	800755a <_printf_float+0x1be>
 800758a:	3301      	adds	r3, #1
 800758c:	6123      	str	r3, [r4, #16]
 800758e:	e7e4      	b.n	800755a <_printf_float+0x1be>
 8007590:	2101      	movs	r1, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	dc01      	bgt.n	800759a <_printf_float+0x1fe>
 8007596:	1849      	adds	r1, r1, r1
 8007598:	1ac9      	subs	r1, r1, r3
 800759a:	1852      	adds	r2, r2, r1
 800759c:	e7e9      	b.n	8007572 <_printf_float+0x1d6>
 800759e:	6822      	ldr	r2, [r4, #0]
 80075a0:	0553      	lsls	r3, r2, #21
 80075a2:	d407      	bmi.n	80075b4 <_printf_float+0x218>
 80075a4:	6923      	ldr	r3, [r4, #16]
 80075a6:	002a      	movs	r2, r5
 80075a8:	0038      	movs	r0, r7
 80075aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075ac:	47b0      	blx	r6
 80075ae:	1c43      	adds	r3, r0, #1
 80075b0:	d128      	bne.n	8007604 <_printf_float+0x268>
 80075b2:	e751      	b.n	8007458 <_printf_float+0xbc>
 80075b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b6:	2b65      	cmp	r3, #101	; 0x65
 80075b8:	d800      	bhi.n	80075bc <_printf_float+0x220>
 80075ba:	e0e1      	b.n	8007780 <_printf_float+0x3e4>
 80075bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80075be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80075c0:	2200      	movs	r2, #0
 80075c2:	2300      	movs	r3, #0
 80075c4:	f7f8 ff42 	bl	800044c <__aeabi_dcmpeq>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d031      	beq.n	8007630 <_printf_float+0x294>
 80075cc:	2301      	movs	r3, #1
 80075ce:	0038      	movs	r0, r7
 80075d0:	4a34      	ldr	r2, [pc, #208]	; (80076a4 <_printf_float+0x308>)
 80075d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075d4:	47b0      	blx	r6
 80075d6:	1c43      	adds	r3, r0, #1
 80075d8:	d100      	bne.n	80075dc <_printf_float+0x240>
 80075da:	e73d      	b.n	8007458 <_printf_float+0xbc>
 80075dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075e0:	4293      	cmp	r3, r2
 80075e2:	db02      	blt.n	80075ea <_printf_float+0x24e>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	07db      	lsls	r3, r3, #31
 80075e8:	d50c      	bpl.n	8007604 <_printf_float+0x268>
 80075ea:	0038      	movs	r0, r7
 80075ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075f2:	47b0      	blx	r6
 80075f4:	2500      	movs	r5, #0
 80075f6:	1c43      	adds	r3, r0, #1
 80075f8:	d100      	bne.n	80075fc <_printf_float+0x260>
 80075fa:	e72d      	b.n	8007458 <_printf_float+0xbc>
 80075fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075fe:	3b01      	subs	r3, #1
 8007600:	42ab      	cmp	r3, r5
 8007602:	dc0a      	bgt.n	800761a <_printf_float+0x27e>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	079b      	lsls	r3, r3, #30
 8007608:	d500      	bpl.n	800760c <_printf_float+0x270>
 800760a:	e106      	b.n	800781a <_printf_float+0x47e>
 800760c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800760e:	68e0      	ldr	r0, [r4, #12]
 8007610:	4298      	cmp	r0, r3
 8007612:	db00      	blt.n	8007616 <_printf_float+0x27a>
 8007614:	e722      	b.n	800745c <_printf_float+0xc0>
 8007616:	0018      	movs	r0, r3
 8007618:	e720      	b.n	800745c <_printf_float+0xc0>
 800761a:	0022      	movs	r2, r4
 800761c:	2301      	movs	r3, #1
 800761e:	0038      	movs	r0, r7
 8007620:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007622:	321a      	adds	r2, #26
 8007624:	47b0      	blx	r6
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	d100      	bne.n	800762c <_printf_float+0x290>
 800762a:	e715      	b.n	8007458 <_printf_float+0xbc>
 800762c:	3501      	adds	r5, #1
 800762e:	e7e5      	b.n	80075fc <_printf_float+0x260>
 8007630:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007632:	2b00      	cmp	r3, #0
 8007634:	dc38      	bgt.n	80076a8 <_printf_float+0x30c>
 8007636:	2301      	movs	r3, #1
 8007638:	0038      	movs	r0, r7
 800763a:	4a1a      	ldr	r2, [pc, #104]	; (80076a4 <_printf_float+0x308>)
 800763c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800763e:	47b0      	blx	r6
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d100      	bne.n	8007646 <_printf_float+0x2aa>
 8007644:	e708      	b.n	8007458 <_printf_float+0xbc>
 8007646:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007648:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800764a:	4313      	orrs	r3, r2
 800764c:	d102      	bne.n	8007654 <_printf_float+0x2b8>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	07db      	lsls	r3, r3, #31
 8007652:	d5d7      	bpl.n	8007604 <_printf_float+0x268>
 8007654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007656:	0038      	movs	r0, r7
 8007658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800765a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800765c:	47b0      	blx	r6
 800765e:	1c43      	adds	r3, r0, #1
 8007660:	d100      	bne.n	8007664 <_printf_float+0x2c8>
 8007662:	e6f9      	b.n	8007458 <_printf_float+0xbc>
 8007664:	2300      	movs	r3, #0
 8007666:	930a      	str	r3, [sp, #40]	; 0x28
 8007668:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800766a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800766c:	425b      	negs	r3, r3
 800766e:	4293      	cmp	r3, r2
 8007670:	dc01      	bgt.n	8007676 <_printf_float+0x2da>
 8007672:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007674:	e797      	b.n	80075a6 <_printf_float+0x20a>
 8007676:	0022      	movs	r2, r4
 8007678:	2301      	movs	r3, #1
 800767a:	0038      	movs	r0, r7
 800767c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800767e:	321a      	adds	r2, #26
 8007680:	47b0      	blx	r6
 8007682:	1c43      	adds	r3, r0, #1
 8007684:	d100      	bne.n	8007688 <_printf_float+0x2ec>
 8007686:	e6e7      	b.n	8007458 <_printf_float+0xbc>
 8007688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800768a:	3301      	adds	r3, #1
 800768c:	e7eb      	b.n	8007666 <_printf_float+0x2ca>
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	7fefffff 	.word	0x7fefffff
 8007694:	0800a7b0 	.word	0x0800a7b0
 8007698:	0800a7b4 	.word	0x0800a7b4
 800769c:	0800a7b8 	.word	0x0800a7b8
 80076a0:	0800a7bc 	.word	0x0800a7bc
 80076a4:	0800a7c0 	.word	0x0800a7c0
 80076a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076ac:	920a      	str	r2, [sp, #40]	; 0x28
 80076ae:	429a      	cmp	r2, r3
 80076b0:	dd00      	ble.n	80076b4 <_printf_float+0x318>
 80076b2:	930a      	str	r3, [sp, #40]	; 0x28
 80076b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	dc3c      	bgt.n	8007734 <_printf_float+0x398>
 80076ba:	2300      	movs	r3, #0
 80076bc:	930d      	str	r3, [sp, #52]	; 0x34
 80076be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c0:	43db      	mvns	r3, r3
 80076c2:	17db      	asrs	r3, r3, #31
 80076c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80076c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80076cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ce:	4013      	ands	r3, r2
 80076d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076d6:	4293      	cmp	r3, r2
 80076d8:	dc34      	bgt.n	8007744 <_printf_float+0x3a8>
 80076da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076de:	4293      	cmp	r3, r2
 80076e0:	db3d      	blt.n	800775e <_printf_float+0x3c2>
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	07db      	lsls	r3, r3, #31
 80076e6:	d43a      	bmi.n	800775e <_printf_float+0x3c2>
 80076e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	1a52      	subs	r2, r2, r1
 80076f2:	920a      	str	r2, [sp, #40]	; 0x28
 80076f4:	429a      	cmp	r2, r3
 80076f6:	dd00      	ble.n	80076fa <_printf_float+0x35e>
 80076f8:	930a      	str	r3, [sp, #40]	; 0x28
 80076fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	dc36      	bgt.n	800776e <_printf_float+0x3d2>
 8007700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007702:	2500      	movs	r5, #0
 8007704:	43db      	mvns	r3, r3
 8007706:	17db      	asrs	r3, r3, #31
 8007708:	930b      	str	r3, [sp, #44]	; 0x2c
 800770a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800770c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800770e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007710:	1a9b      	subs	r3, r3, r2
 8007712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007714:	400a      	ands	r2, r1
 8007716:	1a9b      	subs	r3, r3, r2
 8007718:	42ab      	cmp	r3, r5
 800771a:	dc00      	bgt.n	800771e <_printf_float+0x382>
 800771c:	e772      	b.n	8007604 <_printf_float+0x268>
 800771e:	0022      	movs	r2, r4
 8007720:	2301      	movs	r3, #1
 8007722:	0038      	movs	r0, r7
 8007724:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007726:	321a      	adds	r2, #26
 8007728:	47b0      	blx	r6
 800772a:	1c43      	adds	r3, r0, #1
 800772c:	d100      	bne.n	8007730 <_printf_float+0x394>
 800772e:	e693      	b.n	8007458 <_printf_float+0xbc>
 8007730:	3501      	adds	r5, #1
 8007732:	e7ea      	b.n	800770a <_printf_float+0x36e>
 8007734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007736:	002a      	movs	r2, r5
 8007738:	0038      	movs	r0, r7
 800773a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800773c:	47b0      	blx	r6
 800773e:	1c43      	adds	r3, r0, #1
 8007740:	d1bb      	bne.n	80076ba <_printf_float+0x31e>
 8007742:	e689      	b.n	8007458 <_printf_float+0xbc>
 8007744:	0022      	movs	r2, r4
 8007746:	2301      	movs	r3, #1
 8007748:	0038      	movs	r0, r7
 800774a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800774c:	321a      	adds	r2, #26
 800774e:	47b0      	blx	r6
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	d100      	bne.n	8007756 <_printf_float+0x3ba>
 8007754:	e680      	b.n	8007458 <_printf_float+0xbc>
 8007756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007758:	3301      	adds	r3, #1
 800775a:	930d      	str	r3, [sp, #52]	; 0x34
 800775c:	e7b3      	b.n	80076c6 <_printf_float+0x32a>
 800775e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007760:	0038      	movs	r0, r7
 8007762:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007764:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007766:	47b0      	blx	r6
 8007768:	1c43      	adds	r3, r0, #1
 800776a:	d1bd      	bne.n	80076e8 <_printf_float+0x34c>
 800776c:	e674      	b.n	8007458 <_printf_float+0xbc>
 800776e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007770:	0038      	movs	r0, r7
 8007772:	18ea      	adds	r2, r5, r3
 8007774:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007778:	47b0      	blx	r6
 800777a:	1c43      	adds	r3, r0, #1
 800777c:	d1c0      	bne.n	8007700 <_printf_float+0x364>
 800777e:	e66b      	b.n	8007458 <_printf_float+0xbc>
 8007780:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007782:	2b01      	cmp	r3, #1
 8007784:	dc02      	bgt.n	800778c <_printf_float+0x3f0>
 8007786:	2301      	movs	r3, #1
 8007788:	421a      	tst	r2, r3
 800778a:	d034      	beq.n	80077f6 <_printf_float+0x45a>
 800778c:	2301      	movs	r3, #1
 800778e:	002a      	movs	r2, r5
 8007790:	0038      	movs	r0, r7
 8007792:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007794:	47b0      	blx	r6
 8007796:	1c43      	adds	r3, r0, #1
 8007798:	d100      	bne.n	800779c <_printf_float+0x400>
 800779a:	e65d      	b.n	8007458 <_printf_float+0xbc>
 800779c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800779e:	0038      	movs	r0, r7
 80077a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077a4:	47b0      	blx	r6
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	d100      	bne.n	80077ac <_printf_float+0x410>
 80077aa:	e655      	b.n	8007458 <_printf_float+0xbc>
 80077ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80077ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80077b0:	2200      	movs	r2, #0
 80077b2:	2300      	movs	r3, #0
 80077b4:	f7f8 fe4a 	bl	800044c <__aeabi_dcmpeq>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d11a      	bne.n	80077f2 <_printf_float+0x456>
 80077bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077be:	1c6a      	adds	r2, r5, #1
 80077c0:	3b01      	subs	r3, #1
 80077c2:	0038      	movs	r0, r7
 80077c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077c6:	47b0      	blx	r6
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	d10e      	bne.n	80077ea <_printf_float+0x44e>
 80077cc:	e644      	b.n	8007458 <_printf_float+0xbc>
 80077ce:	0022      	movs	r2, r4
 80077d0:	2301      	movs	r3, #1
 80077d2:	0038      	movs	r0, r7
 80077d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077d6:	321a      	adds	r2, #26
 80077d8:	47b0      	blx	r6
 80077da:	1c43      	adds	r3, r0, #1
 80077dc:	d100      	bne.n	80077e0 <_printf_float+0x444>
 80077de:	e63b      	b.n	8007458 <_printf_float+0xbc>
 80077e0:	3501      	adds	r5, #1
 80077e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077e4:	3b01      	subs	r3, #1
 80077e6:	42ab      	cmp	r3, r5
 80077e8:	dcf1      	bgt.n	80077ce <_printf_float+0x432>
 80077ea:	0022      	movs	r2, r4
 80077ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ee:	3250      	adds	r2, #80	; 0x50
 80077f0:	e6da      	b.n	80075a8 <_printf_float+0x20c>
 80077f2:	2500      	movs	r5, #0
 80077f4:	e7f5      	b.n	80077e2 <_printf_float+0x446>
 80077f6:	002a      	movs	r2, r5
 80077f8:	e7e3      	b.n	80077c2 <_printf_float+0x426>
 80077fa:	0022      	movs	r2, r4
 80077fc:	2301      	movs	r3, #1
 80077fe:	0038      	movs	r0, r7
 8007800:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007802:	3219      	adds	r2, #25
 8007804:	47b0      	blx	r6
 8007806:	1c43      	adds	r3, r0, #1
 8007808:	d100      	bne.n	800780c <_printf_float+0x470>
 800780a:	e625      	b.n	8007458 <_printf_float+0xbc>
 800780c:	3501      	adds	r5, #1
 800780e:	68e3      	ldr	r3, [r4, #12]
 8007810:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007812:	1a9b      	subs	r3, r3, r2
 8007814:	42ab      	cmp	r3, r5
 8007816:	dcf0      	bgt.n	80077fa <_printf_float+0x45e>
 8007818:	e6f8      	b.n	800760c <_printf_float+0x270>
 800781a:	2500      	movs	r5, #0
 800781c:	e7f7      	b.n	800780e <_printf_float+0x472>
 800781e:	46c0      	nop			; (mov r8, r8)

08007820 <_printf_common>:
 8007820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007822:	0015      	movs	r5, r2
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	688a      	ldr	r2, [r1, #8]
 8007828:	690b      	ldr	r3, [r1, #16]
 800782a:	000c      	movs	r4, r1
 800782c:	9000      	str	r0, [sp, #0]
 800782e:	4293      	cmp	r3, r2
 8007830:	da00      	bge.n	8007834 <_printf_common+0x14>
 8007832:	0013      	movs	r3, r2
 8007834:	0022      	movs	r2, r4
 8007836:	602b      	str	r3, [r5, #0]
 8007838:	3243      	adds	r2, #67	; 0x43
 800783a:	7812      	ldrb	r2, [r2, #0]
 800783c:	2a00      	cmp	r2, #0
 800783e:	d001      	beq.n	8007844 <_printf_common+0x24>
 8007840:	3301      	adds	r3, #1
 8007842:	602b      	str	r3, [r5, #0]
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	069b      	lsls	r3, r3, #26
 8007848:	d502      	bpl.n	8007850 <_printf_common+0x30>
 800784a:	682b      	ldr	r3, [r5, #0]
 800784c:	3302      	adds	r3, #2
 800784e:	602b      	str	r3, [r5, #0]
 8007850:	6822      	ldr	r2, [r4, #0]
 8007852:	2306      	movs	r3, #6
 8007854:	0017      	movs	r7, r2
 8007856:	401f      	ands	r7, r3
 8007858:	421a      	tst	r2, r3
 800785a:	d027      	beq.n	80078ac <_printf_common+0x8c>
 800785c:	0023      	movs	r3, r4
 800785e:	3343      	adds	r3, #67	; 0x43
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	1e5a      	subs	r2, r3, #1
 8007864:	4193      	sbcs	r3, r2
 8007866:	6822      	ldr	r2, [r4, #0]
 8007868:	0692      	lsls	r2, r2, #26
 800786a:	d430      	bmi.n	80078ce <_printf_common+0xae>
 800786c:	0022      	movs	r2, r4
 800786e:	9901      	ldr	r1, [sp, #4]
 8007870:	9800      	ldr	r0, [sp, #0]
 8007872:	9e08      	ldr	r6, [sp, #32]
 8007874:	3243      	adds	r2, #67	; 0x43
 8007876:	47b0      	blx	r6
 8007878:	1c43      	adds	r3, r0, #1
 800787a:	d025      	beq.n	80078c8 <_printf_common+0xa8>
 800787c:	2306      	movs	r3, #6
 800787e:	6820      	ldr	r0, [r4, #0]
 8007880:	682a      	ldr	r2, [r5, #0]
 8007882:	68e1      	ldr	r1, [r4, #12]
 8007884:	2500      	movs	r5, #0
 8007886:	4003      	ands	r3, r0
 8007888:	2b04      	cmp	r3, #4
 800788a:	d103      	bne.n	8007894 <_printf_common+0x74>
 800788c:	1a8d      	subs	r5, r1, r2
 800788e:	43eb      	mvns	r3, r5
 8007890:	17db      	asrs	r3, r3, #31
 8007892:	401d      	ands	r5, r3
 8007894:	68a3      	ldr	r3, [r4, #8]
 8007896:	6922      	ldr	r2, [r4, #16]
 8007898:	4293      	cmp	r3, r2
 800789a:	dd01      	ble.n	80078a0 <_printf_common+0x80>
 800789c:	1a9b      	subs	r3, r3, r2
 800789e:	18ed      	adds	r5, r5, r3
 80078a0:	2700      	movs	r7, #0
 80078a2:	42bd      	cmp	r5, r7
 80078a4:	d120      	bne.n	80078e8 <_printf_common+0xc8>
 80078a6:	2000      	movs	r0, #0
 80078a8:	e010      	b.n	80078cc <_printf_common+0xac>
 80078aa:	3701      	adds	r7, #1
 80078ac:	68e3      	ldr	r3, [r4, #12]
 80078ae:	682a      	ldr	r2, [r5, #0]
 80078b0:	1a9b      	subs	r3, r3, r2
 80078b2:	42bb      	cmp	r3, r7
 80078b4:	ddd2      	ble.n	800785c <_printf_common+0x3c>
 80078b6:	0022      	movs	r2, r4
 80078b8:	2301      	movs	r3, #1
 80078ba:	9901      	ldr	r1, [sp, #4]
 80078bc:	9800      	ldr	r0, [sp, #0]
 80078be:	9e08      	ldr	r6, [sp, #32]
 80078c0:	3219      	adds	r2, #25
 80078c2:	47b0      	blx	r6
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d1f0      	bne.n	80078aa <_printf_common+0x8a>
 80078c8:	2001      	movs	r0, #1
 80078ca:	4240      	negs	r0, r0
 80078cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80078ce:	2030      	movs	r0, #48	; 0x30
 80078d0:	18e1      	adds	r1, r4, r3
 80078d2:	3143      	adds	r1, #67	; 0x43
 80078d4:	7008      	strb	r0, [r1, #0]
 80078d6:	0021      	movs	r1, r4
 80078d8:	1c5a      	adds	r2, r3, #1
 80078da:	3145      	adds	r1, #69	; 0x45
 80078dc:	7809      	ldrb	r1, [r1, #0]
 80078de:	18a2      	adds	r2, r4, r2
 80078e0:	3243      	adds	r2, #67	; 0x43
 80078e2:	3302      	adds	r3, #2
 80078e4:	7011      	strb	r1, [r2, #0]
 80078e6:	e7c1      	b.n	800786c <_printf_common+0x4c>
 80078e8:	0022      	movs	r2, r4
 80078ea:	2301      	movs	r3, #1
 80078ec:	9901      	ldr	r1, [sp, #4]
 80078ee:	9800      	ldr	r0, [sp, #0]
 80078f0:	9e08      	ldr	r6, [sp, #32]
 80078f2:	321a      	adds	r2, #26
 80078f4:	47b0      	blx	r6
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	d0e6      	beq.n	80078c8 <_printf_common+0xa8>
 80078fa:	3701      	adds	r7, #1
 80078fc:	e7d1      	b.n	80078a2 <_printf_common+0x82>
	...

08007900 <_printf_i>:
 8007900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007902:	b08b      	sub	sp, #44	; 0x2c
 8007904:	9206      	str	r2, [sp, #24]
 8007906:	000a      	movs	r2, r1
 8007908:	3243      	adds	r2, #67	; 0x43
 800790a:	9307      	str	r3, [sp, #28]
 800790c:	9005      	str	r0, [sp, #20]
 800790e:	9204      	str	r2, [sp, #16]
 8007910:	7e0a      	ldrb	r2, [r1, #24]
 8007912:	000c      	movs	r4, r1
 8007914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007916:	2a78      	cmp	r2, #120	; 0x78
 8007918:	d807      	bhi.n	800792a <_printf_i+0x2a>
 800791a:	2a62      	cmp	r2, #98	; 0x62
 800791c:	d809      	bhi.n	8007932 <_printf_i+0x32>
 800791e:	2a00      	cmp	r2, #0
 8007920:	d100      	bne.n	8007924 <_printf_i+0x24>
 8007922:	e0c1      	b.n	8007aa8 <_printf_i+0x1a8>
 8007924:	2a58      	cmp	r2, #88	; 0x58
 8007926:	d100      	bne.n	800792a <_printf_i+0x2a>
 8007928:	e08c      	b.n	8007a44 <_printf_i+0x144>
 800792a:	0026      	movs	r6, r4
 800792c:	3642      	adds	r6, #66	; 0x42
 800792e:	7032      	strb	r2, [r6, #0]
 8007930:	e022      	b.n	8007978 <_printf_i+0x78>
 8007932:	0010      	movs	r0, r2
 8007934:	3863      	subs	r0, #99	; 0x63
 8007936:	2815      	cmp	r0, #21
 8007938:	d8f7      	bhi.n	800792a <_printf_i+0x2a>
 800793a:	f7f8 fbf7 	bl	800012c <__gnu_thumb1_case_shi>
 800793e:	0016      	.short	0x0016
 8007940:	fff6001f 	.word	0xfff6001f
 8007944:	fff6fff6 	.word	0xfff6fff6
 8007948:	001ffff6 	.word	0x001ffff6
 800794c:	fff6fff6 	.word	0xfff6fff6
 8007950:	fff6fff6 	.word	0xfff6fff6
 8007954:	003600a8 	.word	0x003600a8
 8007958:	fff6009a 	.word	0xfff6009a
 800795c:	00b9fff6 	.word	0x00b9fff6
 8007960:	0036fff6 	.word	0x0036fff6
 8007964:	fff6fff6 	.word	0xfff6fff6
 8007968:	009e      	.short	0x009e
 800796a:	0026      	movs	r6, r4
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	3642      	adds	r6, #66	; 0x42
 8007970:	1d11      	adds	r1, r2, #4
 8007972:	6019      	str	r1, [r3, #0]
 8007974:	6813      	ldr	r3, [r2, #0]
 8007976:	7033      	strb	r3, [r6, #0]
 8007978:	2301      	movs	r3, #1
 800797a:	e0a7      	b.n	8007acc <_printf_i+0x1cc>
 800797c:	6808      	ldr	r0, [r1, #0]
 800797e:	6819      	ldr	r1, [r3, #0]
 8007980:	1d0a      	adds	r2, r1, #4
 8007982:	0605      	lsls	r5, r0, #24
 8007984:	d50b      	bpl.n	800799e <_printf_i+0x9e>
 8007986:	680d      	ldr	r5, [r1, #0]
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	2d00      	cmp	r5, #0
 800798c:	da03      	bge.n	8007996 <_printf_i+0x96>
 800798e:	232d      	movs	r3, #45	; 0x2d
 8007990:	9a04      	ldr	r2, [sp, #16]
 8007992:	426d      	negs	r5, r5
 8007994:	7013      	strb	r3, [r2, #0]
 8007996:	4b61      	ldr	r3, [pc, #388]	; (8007b1c <_printf_i+0x21c>)
 8007998:	270a      	movs	r7, #10
 800799a:	9303      	str	r3, [sp, #12]
 800799c:	e01b      	b.n	80079d6 <_printf_i+0xd6>
 800799e:	680d      	ldr	r5, [r1, #0]
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	0641      	lsls	r1, r0, #25
 80079a4:	d5f1      	bpl.n	800798a <_printf_i+0x8a>
 80079a6:	b22d      	sxth	r5, r5
 80079a8:	e7ef      	b.n	800798a <_printf_i+0x8a>
 80079aa:	680d      	ldr	r5, [r1, #0]
 80079ac:	6819      	ldr	r1, [r3, #0]
 80079ae:	1d08      	adds	r0, r1, #4
 80079b0:	6018      	str	r0, [r3, #0]
 80079b2:	062e      	lsls	r6, r5, #24
 80079b4:	d501      	bpl.n	80079ba <_printf_i+0xba>
 80079b6:	680d      	ldr	r5, [r1, #0]
 80079b8:	e003      	b.n	80079c2 <_printf_i+0xc2>
 80079ba:	066d      	lsls	r5, r5, #25
 80079bc:	d5fb      	bpl.n	80079b6 <_printf_i+0xb6>
 80079be:	680d      	ldr	r5, [r1, #0]
 80079c0:	b2ad      	uxth	r5, r5
 80079c2:	4b56      	ldr	r3, [pc, #344]	; (8007b1c <_printf_i+0x21c>)
 80079c4:	2708      	movs	r7, #8
 80079c6:	9303      	str	r3, [sp, #12]
 80079c8:	2a6f      	cmp	r2, #111	; 0x6f
 80079ca:	d000      	beq.n	80079ce <_printf_i+0xce>
 80079cc:	3702      	adds	r7, #2
 80079ce:	0023      	movs	r3, r4
 80079d0:	2200      	movs	r2, #0
 80079d2:	3343      	adds	r3, #67	; 0x43
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	6863      	ldr	r3, [r4, #4]
 80079d8:	60a3      	str	r3, [r4, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	db03      	blt.n	80079e6 <_printf_i+0xe6>
 80079de:	2204      	movs	r2, #4
 80079e0:	6821      	ldr	r1, [r4, #0]
 80079e2:	4391      	bics	r1, r2
 80079e4:	6021      	str	r1, [r4, #0]
 80079e6:	2d00      	cmp	r5, #0
 80079e8:	d102      	bne.n	80079f0 <_printf_i+0xf0>
 80079ea:	9e04      	ldr	r6, [sp, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00c      	beq.n	8007a0a <_printf_i+0x10a>
 80079f0:	9e04      	ldr	r6, [sp, #16]
 80079f2:	0028      	movs	r0, r5
 80079f4:	0039      	movs	r1, r7
 80079f6:	f7f8 fc29 	bl	800024c <__aeabi_uidivmod>
 80079fa:	9b03      	ldr	r3, [sp, #12]
 80079fc:	3e01      	subs	r6, #1
 80079fe:	5c5b      	ldrb	r3, [r3, r1]
 8007a00:	7033      	strb	r3, [r6, #0]
 8007a02:	002b      	movs	r3, r5
 8007a04:	0005      	movs	r5, r0
 8007a06:	429f      	cmp	r7, r3
 8007a08:	d9f3      	bls.n	80079f2 <_printf_i+0xf2>
 8007a0a:	2f08      	cmp	r7, #8
 8007a0c:	d109      	bne.n	8007a22 <_printf_i+0x122>
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	07db      	lsls	r3, r3, #31
 8007a12:	d506      	bpl.n	8007a22 <_printf_i+0x122>
 8007a14:	6863      	ldr	r3, [r4, #4]
 8007a16:	6922      	ldr	r2, [r4, #16]
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	dc02      	bgt.n	8007a22 <_printf_i+0x122>
 8007a1c:	2330      	movs	r3, #48	; 0x30
 8007a1e:	3e01      	subs	r6, #1
 8007a20:	7033      	strb	r3, [r6, #0]
 8007a22:	9b04      	ldr	r3, [sp, #16]
 8007a24:	1b9b      	subs	r3, r3, r6
 8007a26:	6123      	str	r3, [r4, #16]
 8007a28:	9b07      	ldr	r3, [sp, #28]
 8007a2a:	0021      	movs	r1, r4
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	9805      	ldr	r0, [sp, #20]
 8007a30:	9b06      	ldr	r3, [sp, #24]
 8007a32:	aa09      	add	r2, sp, #36	; 0x24
 8007a34:	f7ff fef4 	bl	8007820 <_printf_common>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d14c      	bne.n	8007ad6 <_printf_i+0x1d6>
 8007a3c:	2001      	movs	r0, #1
 8007a3e:	4240      	negs	r0, r0
 8007a40:	b00b      	add	sp, #44	; 0x2c
 8007a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a44:	3145      	adds	r1, #69	; 0x45
 8007a46:	700a      	strb	r2, [r1, #0]
 8007a48:	4a34      	ldr	r2, [pc, #208]	; (8007b1c <_printf_i+0x21c>)
 8007a4a:	9203      	str	r2, [sp, #12]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	6821      	ldr	r1, [r4, #0]
 8007a50:	ca20      	ldmia	r2!, {r5}
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	0608      	lsls	r0, r1, #24
 8007a56:	d516      	bpl.n	8007a86 <_printf_i+0x186>
 8007a58:	07cb      	lsls	r3, r1, #31
 8007a5a:	d502      	bpl.n	8007a62 <_printf_i+0x162>
 8007a5c:	2320      	movs	r3, #32
 8007a5e:	4319      	orrs	r1, r3
 8007a60:	6021      	str	r1, [r4, #0]
 8007a62:	2710      	movs	r7, #16
 8007a64:	2d00      	cmp	r5, #0
 8007a66:	d1b2      	bne.n	80079ce <_printf_i+0xce>
 8007a68:	2320      	movs	r3, #32
 8007a6a:	6822      	ldr	r2, [r4, #0]
 8007a6c:	439a      	bics	r2, r3
 8007a6e:	6022      	str	r2, [r4, #0]
 8007a70:	e7ad      	b.n	80079ce <_printf_i+0xce>
 8007a72:	2220      	movs	r2, #32
 8007a74:	6809      	ldr	r1, [r1, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	6022      	str	r2, [r4, #0]
 8007a7a:	0022      	movs	r2, r4
 8007a7c:	2178      	movs	r1, #120	; 0x78
 8007a7e:	3245      	adds	r2, #69	; 0x45
 8007a80:	7011      	strb	r1, [r2, #0]
 8007a82:	4a27      	ldr	r2, [pc, #156]	; (8007b20 <_printf_i+0x220>)
 8007a84:	e7e1      	b.n	8007a4a <_printf_i+0x14a>
 8007a86:	0648      	lsls	r0, r1, #25
 8007a88:	d5e6      	bpl.n	8007a58 <_printf_i+0x158>
 8007a8a:	b2ad      	uxth	r5, r5
 8007a8c:	e7e4      	b.n	8007a58 <_printf_i+0x158>
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	680d      	ldr	r5, [r1, #0]
 8007a92:	1d10      	adds	r0, r2, #4
 8007a94:	6949      	ldr	r1, [r1, #20]
 8007a96:	6018      	str	r0, [r3, #0]
 8007a98:	6813      	ldr	r3, [r2, #0]
 8007a9a:	062e      	lsls	r6, r5, #24
 8007a9c:	d501      	bpl.n	8007aa2 <_printf_i+0x1a2>
 8007a9e:	6019      	str	r1, [r3, #0]
 8007aa0:	e002      	b.n	8007aa8 <_printf_i+0x1a8>
 8007aa2:	066d      	lsls	r5, r5, #25
 8007aa4:	d5fb      	bpl.n	8007a9e <_printf_i+0x19e>
 8007aa6:	8019      	strh	r1, [r3, #0]
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	9e04      	ldr	r6, [sp, #16]
 8007aac:	6123      	str	r3, [r4, #16]
 8007aae:	e7bb      	b.n	8007a28 <_printf_i+0x128>
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	1d11      	adds	r1, r2, #4
 8007ab4:	6019      	str	r1, [r3, #0]
 8007ab6:	6816      	ldr	r6, [r2, #0]
 8007ab8:	2100      	movs	r1, #0
 8007aba:	0030      	movs	r0, r6
 8007abc:	6862      	ldr	r2, [r4, #4]
 8007abe:	f001 fa87 	bl	8008fd0 <memchr>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d001      	beq.n	8007aca <_printf_i+0x1ca>
 8007ac6:	1b80      	subs	r0, r0, r6
 8007ac8:	6060      	str	r0, [r4, #4]
 8007aca:	6863      	ldr	r3, [r4, #4]
 8007acc:	6123      	str	r3, [r4, #16]
 8007ace:	2300      	movs	r3, #0
 8007ad0:	9a04      	ldr	r2, [sp, #16]
 8007ad2:	7013      	strb	r3, [r2, #0]
 8007ad4:	e7a8      	b.n	8007a28 <_printf_i+0x128>
 8007ad6:	6923      	ldr	r3, [r4, #16]
 8007ad8:	0032      	movs	r2, r6
 8007ada:	9906      	ldr	r1, [sp, #24]
 8007adc:	9805      	ldr	r0, [sp, #20]
 8007ade:	9d07      	ldr	r5, [sp, #28]
 8007ae0:	47a8      	blx	r5
 8007ae2:	1c43      	adds	r3, r0, #1
 8007ae4:	d0aa      	beq.n	8007a3c <_printf_i+0x13c>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	079b      	lsls	r3, r3, #30
 8007aea:	d415      	bmi.n	8007b18 <_printf_i+0x218>
 8007aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aee:	68e0      	ldr	r0, [r4, #12]
 8007af0:	4298      	cmp	r0, r3
 8007af2:	daa5      	bge.n	8007a40 <_printf_i+0x140>
 8007af4:	0018      	movs	r0, r3
 8007af6:	e7a3      	b.n	8007a40 <_printf_i+0x140>
 8007af8:	0022      	movs	r2, r4
 8007afa:	2301      	movs	r3, #1
 8007afc:	9906      	ldr	r1, [sp, #24]
 8007afe:	9805      	ldr	r0, [sp, #20]
 8007b00:	9e07      	ldr	r6, [sp, #28]
 8007b02:	3219      	adds	r2, #25
 8007b04:	47b0      	blx	r6
 8007b06:	1c43      	adds	r3, r0, #1
 8007b08:	d098      	beq.n	8007a3c <_printf_i+0x13c>
 8007b0a:	3501      	adds	r5, #1
 8007b0c:	68e3      	ldr	r3, [r4, #12]
 8007b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b10:	1a9b      	subs	r3, r3, r2
 8007b12:	42ab      	cmp	r3, r5
 8007b14:	dcf0      	bgt.n	8007af8 <_printf_i+0x1f8>
 8007b16:	e7e9      	b.n	8007aec <_printf_i+0x1ec>
 8007b18:	2500      	movs	r5, #0
 8007b1a:	e7f7      	b.n	8007b0c <_printf_i+0x20c>
 8007b1c:	0800a7c2 	.word	0x0800a7c2
 8007b20:	0800a7d3 	.word	0x0800a7d3

08007b24 <iprintf>:
 8007b24:	b40f      	push	{r0, r1, r2, r3}
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <iprintf+0x30>)
 8007b28:	b513      	push	{r0, r1, r4, lr}
 8007b2a:	681c      	ldr	r4, [r3, #0]
 8007b2c:	2c00      	cmp	r4, #0
 8007b2e:	d005      	beq.n	8007b3c <iprintf+0x18>
 8007b30:	69a3      	ldr	r3, [r4, #24]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d102      	bne.n	8007b3c <iprintf+0x18>
 8007b36:	0020      	movs	r0, r4
 8007b38:	f001 f92c 	bl	8008d94 <__sinit>
 8007b3c:	ab05      	add	r3, sp, #20
 8007b3e:	0020      	movs	r0, r4
 8007b40:	9a04      	ldr	r2, [sp, #16]
 8007b42:	68a1      	ldr	r1, [r4, #8]
 8007b44:	9301      	str	r3, [sp, #4]
 8007b46:	f001 ff29 	bl	800999c <_vfiprintf_r>
 8007b4a:	bc16      	pop	{r1, r2, r4}
 8007b4c:	bc08      	pop	{r3}
 8007b4e:	b004      	add	sp, #16
 8007b50:	4718      	bx	r3
 8007b52:	46c0      	nop			; (mov r8, r8)
 8007b54:	2000008c 	.word	0x2000008c

08007b58 <_puts_r>:
 8007b58:	b570      	push	{r4, r5, r6, lr}
 8007b5a:	0005      	movs	r5, r0
 8007b5c:	000e      	movs	r6, r1
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d004      	beq.n	8007b6c <_puts_r+0x14>
 8007b62:	6983      	ldr	r3, [r0, #24]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <_puts_r+0x14>
 8007b68:	f001 f914 	bl	8008d94 <__sinit>
 8007b6c:	69ab      	ldr	r3, [r5, #24]
 8007b6e:	68ac      	ldr	r4, [r5, #8]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d102      	bne.n	8007b7a <_puts_r+0x22>
 8007b74:	0028      	movs	r0, r5
 8007b76:	f001 f90d 	bl	8008d94 <__sinit>
 8007b7a:	4b2d      	ldr	r3, [pc, #180]	; (8007c30 <_puts_r+0xd8>)
 8007b7c:	429c      	cmp	r4, r3
 8007b7e:	d122      	bne.n	8007bc6 <_puts_r+0x6e>
 8007b80:	686c      	ldr	r4, [r5, #4]
 8007b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b84:	07db      	lsls	r3, r3, #31
 8007b86:	d405      	bmi.n	8007b94 <_puts_r+0x3c>
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	059b      	lsls	r3, r3, #22
 8007b8c:	d402      	bmi.n	8007b94 <_puts_r+0x3c>
 8007b8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b90:	f001 f9a5 	bl	8008ede <__retarget_lock_acquire_recursive>
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	071b      	lsls	r3, r3, #28
 8007b98:	d502      	bpl.n	8007ba0 <_puts_r+0x48>
 8007b9a:	6923      	ldr	r3, [r4, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d129      	bne.n	8007bf4 <_puts_r+0x9c>
 8007ba0:	0021      	movs	r1, r4
 8007ba2:	0028      	movs	r0, r5
 8007ba4:	f000 f8aa 	bl	8007cfc <__swsetup_r>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d023      	beq.n	8007bf4 <_puts_r+0x9c>
 8007bac:	2501      	movs	r5, #1
 8007bae:	426d      	negs	r5, r5
 8007bb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bb2:	07db      	lsls	r3, r3, #31
 8007bb4:	d405      	bmi.n	8007bc2 <_puts_r+0x6a>
 8007bb6:	89a3      	ldrh	r3, [r4, #12]
 8007bb8:	059b      	lsls	r3, r3, #22
 8007bba:	d402      	bmi.n	8007bc2 <_puts_r+0x6a>
 8007bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bbe:	f001 f98f 	bl	8008ee0 <__retarget_lock_release_recursive>
 8007bc2:	0028      	movs	r0, r5
 8007bc4:	bd70      	pop	{r4, r5, r6, pc}
 8007bc6:	4b1b      	ldr	r3, [pc, #108]	; (8007c34 <_puts_r+0xdc>)
 8007bc8:	429c      	cmp	r4, r3
 8007bca:	d101      	bne.n	8007bd0 <_puts_r+0x78>
 8007bcc:	68ac      	ldr	r4, [r5, #8]
 8007bce:	e7d8      	b.n	8007b82 <_puts_r+0x2a>
 8007bd0:	4b19      	ldr	r3, [pc, #100]	; (8007c38 <_puts_r+0xe0>)
 8007bd2:	429c      	cmp	r4, r3
 8007bd4:	d1d5      	bne.n	8007b82 <_puts_r+0x2a>
 8007bd6:	68ec      	ldr	r4, [r5, #12]
 8007bd8:	e7d3      	b.n	8007b82 <_puts_r+0x2a>
 8007bda:	3601      	adds	r6, #1
 8007bdc:	60a3      	str	r3, [r4, #8]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	da04      	bge.n	8007bec <_puts_r+0x94>
 8007be2:	69a2      	ldr	r2, [r4, #24]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	dc16      	bgt.n	8007c16 <_puts_r+0xbe>
 8007be8:	290a      	cmp	r1, #10
 8007bea:	d014      	beq.n	8007c16 <_puts_r+0xbe>
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	6022      	str	r2, [r4, #0]
 8007bf2:	7019      	strb	r1, [r3, #0]
 8007bf4:	68a3      	ldr	r3, [r4, #8]
 8007bf6:	7831      	ldrb	r1, [r6, #0]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	2900      	cmp	r1, #0
 8007bfc:	d1ed      	bne.n	8007bda <_puts_r+0x82>
 8007bfe:	60a3      	str	r3, [r4, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	da0f      	bge.n	8007c24 <_puts_r+0xcc>
 8007c04:	0028      	movs	r0, r5
 8007c06:	0022      	movs	r2, r4
 8007c08:	310a      	adds	r1, #10
 8007c0a:	f000 f821 	bl	8007c50 <__swbuf_r>
 8007c0e:	250a      	movs	r5, #10
 8007c10:	1c43      	adds	r3, r0, #1
 8007c12:	d1cd      	bne.n	8007bb0 <_puts_r+0x58>
 8007c14:	e7ca      	b.n	8007bac <_puts_r+0x54>
 8007c16:	0022      	movs	r2, r4
 8007c18:	0028      	movs	r0, r5
 8007c1a:	f000 f819 	bl	8007c50 <__swbuf_r>
 8007c1e:	1c43      	adds	r3, r0, #1
 8007c20:	d1e8      	bne.n	8007bf4 <_puts_r+0x9c>
 8007c22:	e7c3      	b.n	8007bac <_puts_r+0x54>
 8007c24:	250a      	movs	r5, #10
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	6022      	str	r2, [r4, #0]
 8007c2c:	701d      	strb	r5, [r3, #0]
 8007c2e:	e7bf      	b.n	8007bb0 <_puts_r+0x58>
 8007c30:	0800a894 	.word	0x0800a894
 8007c34:	0800a8b4 	.word	0x0800a8b4
 8007c38:	0800a874 	.word	0x0800a874

08007c3c <puts>:
 8007c3c:	b510      	push	{r4, lr}
 8007c3e:	4b03      	ldr	r3, [pc, #12]	; (8007c4c <puts+0x10>)
 8007c40:	0001      	movs	r1, r0
 8007c42:	6818      	ldr	r0, [r3, #0]
 8007c44:	f7ff ff88 	bl	8007b58 <_puts_r>
 8007c48:	bd10      	pop	{r4, pc}
 8007c4a:	46c0      	nop			; (mov r8, r8)
 8007c4c:	2000008c 	.word	0x2000008c

08007c50 <__swbuf_r>:
 8007c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c52:	0005      	movs	r5, r0
 8007c54:	000e      	movs	r6, r1
 8007c56:	0014      	movs	r4, r2
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d004      	beq.n	8007c66 <__swbuf_r+0x16>
 8007c5c:	6983      	ldr	r3, [r0, #24]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <__swbuf_r+0x16>
 8007c62:	f001 f897 	bl	8008d94 <__sinit>
 8007c66:	4b22      	ldr	r3, [pc, #136]	; (8007cf0 <__swbuf_r+0xa0>)
 8007c68:	429c      	cmp	r4, r3
 8007c6a:	d12e      	bne.n	8007cca <__swbuf_r+0x7a>
 8007c6c:	686c      	ldr	r4, [r5, #4]
 8007c6e:	69a3      	ldr	r3, [r4, #24]
 8007c70:	60a3      	str	r3, [r4, #8]
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	071b      	lsls	r3, r3, #28
 8007c76:	d532      	bpl.n	8007cde <__swbuf_r+0x8e>
 8007c78:	6923      	ldr	r3, [r4, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d02f      	beq.n	8007cde <__swbuf_r+0x8e>
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	6922      	ldr	r2, [r4, #16]
 8007c82:	b2f7      	uxtb	r7, r6
 8007c84:	1a98      	subs	r0, r3, r2
 8007c86:	6963      	ldr	r3, [r4, #20]
 8007c88:	b2f6      	uxtb	r6, r6
 8007c8a:	4283      	cmp	r3, r0
 8007c8c:	dc05      	bgt.n	8007c9a <__swbuf_r+0x4a>
 8007c8e:	0021      	movs	r1, r4
 8007c90:	0028      	movs	r0, r5
 8007c92:	f000 ffdd 	bl	8008c50 <_fflush_r>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d127      	bne.n	8007cea <__swbuf_r+0x9a>
 8007c9a:	68a3      	ldr	r3, [r4, #8]
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	60a3      	str	r3, [r4, #8]
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	1c5a      	adds	r2, r3, #1
 8007ca6:	6022      	str	r2, [r4, #0]
 8007ca8:	701f      	strb	r7, [r3, #0]
 8007caa:	6963      	ldr	r3, [r4, #20]
 8007cac:	4283      	cmp	r3, r0
 8007cae:	d004      	beq.n	8007cba <__swbuf_r+0x6a>
 8007cb0:	89a3      	ldrh	r3, [r4, #12]
 8007cb2:	07db      	lsls	r3, r3, #31
 8007cb4:	d507      	bpl.n	8007cc6 <__swbuf_r+0x76>
 8007cb6:	2e0a      	cmp	r6, #10
 8007cb8:	d105      	bne.n	8007cc6 <__swbuf_r+0x76>
 8007cba:	0021      	movs	r1, r4
 8007cbc:	0028      	movs	r0, r5
 8007cbe:	f000 ffc7 	bl	8008c50 <_fflush_r>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d111      	bne.n	8007cea <__swbuf_r+0x9a>
 8007cc6:	0030      	movs	r0, r6
 8007cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cca:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <__swbuf_r+0xa4>)
 8007ccc:	429c      	cmp	r4, r3
 8007cce:	d101      	bne.n	8007cd4 <__swbuf_r+0x84>
 8007cd0:	68ac      	ldr	r4, [r5, #8]
 8007cd2:	e7cc      	b.n	8007c6e <__swbuf_r+0x1e>
 8007cd4:	4b08      	ldr	r3, [pc, #32]	; (8007cf8 <__swbuf_r+0xa8>)
 8007cd6:	429c      	cmp	r4, r3
 8007cd8:	d1c9      	bne.n	8007c6e <__swbuf_r+0x1e>
 8007cda:	68ec      	ldr	r4, [r5, #12]
 8007cdc:	e7c7      	b.n	8007c6e <__swbuf_r+0x1e>
 8007cde:	0021      	movs	r1, r4
 8007ce0:	0028      	movs	r0, r5
 8007ce2:	f000 f80b 	bl	8007cfc <__swsetup_r>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d0c9      	beq.n	8007c7e <__swbuf_r+0x2e>
 8007cea:	2601      	movs	r6, #1
 8007cec:	4276      	negs	r6, r6
 8007cee:	e7ea      	b.n	8007cc6 <__swbuf_r+0x76>
 8007cf0:	0800a894 	.word	0x0800a894
 8007cf4:	0800a8b4 	.word	0x0800a8b4
 8007cf8:	0800a874 	.word	0x0800a874

08007cfc <__swsetup_r>:
 8007cfc:	4b37      	ldr	r3, [pc, #220]	; (8007ddc <__swsetup_r+0xe0>)
 8007cfe:	b570      	push	{r4, r5, r6, lr}
 8007d00:	681d      	ldr	r5, [r3, #0]
 8007d02:	0006      	movs	r6, r0
 8007d04:	000c      	movs	r4, r1
 8007d06:	2d00      	cmp	r5, #0
 8007d08:	d005      	beq.n	8007d16 <__swsetup_r+0x1a>
 8007d0a:	69ab      	ldr	r3, [r5, #24]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d102      	bne.n	8007d16 <__swsetup_r+0x1a>
 8007d10:	0028      	movs	r0, r5
 8007d12:	f001 f83f 	bl	8008d94 <__sinit>
 8007d16:	4b32      	ldr	r3, [pc, #200]	; (8007de0 <__swsetup_r+0xe4>)
 8007d18:	429c      	cmp	r4, r3
 8007d1a:	d10f      	bne.n	8007d3c <__swsetup_r+0x40>
 8007d1c:	686c      	ldr	r4, [r5, #4]
 8007d1e:	230c      	movs	r3, #12
 8007d20:	5ee2      	ldrsh	r2, [r4, r3]
 8007d22:	b293      	uxth	r3, r2
 8007d24:	0711      	lsls	r1, r2, #28
 8007d26:	d42d      	bmi.n	8007d84 <__swsetup_r+0x88>
 8007d28:	06d9      	lsls	r1, r3, #27
 8007d2a:	d411      	bmi.n	8007d50 <__swsetup_r+0x54>
 8007d2c:	2309      	movs	r3, #9
 8007d2e:	2001      	movs	r0, #1
 8007d30:	6033      	str	r3, [r6, #0]
 8007d32:	3337      	adds	r3, #55	; 0x37
 8007d34:	4313      	orrs	r3, r2
 8007d36:	81a3      	strh	r3, [r4, #12]
 8007d38:	4240      	negs	r0, r0
 8007d3a:	bd70      	pop	{r4, r5, r6, pc}
 8007d3c:	4b29      	ldr	r3, [pc, #164]	; (8007de4 <__swsetup_r+0xe8>)
 8007d3e:	429c      	cmp	r4, r3
 8007d40:	d101      	bne.n	8007d46 <__swsetup_r+0x4a>
 8007d42:	68ac      	ldr	r4, [r5, #8]
 8007d44:	e7eb      	b.n	8007d1e <__swsetup_r+0x22>
 8007d46:	4b28      	ldr	r3, [pc, #160]	; (8007de8 <__swsetup_r+0xec>)
 8007d48:	429c      	cmp	r4, r3
 8007d4a:	d1e8      	bne.n	8007d1e <__swsetup_r+0x22>
 8007d4c:	68ec      	ldr	r4, [r5, #12]
 8007d4e:	e7e6      	b.n	8007d1e <__swsetup_r+0x22>
 8007d50:	075b      	lsls	r3, r3, #29
 8007d52:	d513      	bpl.n	8007d7c <__swsetup_r+0x80>
 8007d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d56:	2900      	cmp	r1, #0
 8007d58:	d008      	beq.n	8007d6c <__swsetup_r+0x70>
 8007d5a:	0023      	movs	r3, r4
 8007d5c:	3344      	adds	r3, #68	; 0x44
 8007d5e:	4299      	cmp	r1, r3
 8007d60:	d002      	beq.n	8007d68 <__swsetup_r+0x6c>
 8007d62:	0030      	movs	r0, r6
 8007d64:	f001 fd10 	bl	8009788 <_free_r>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	6363      	str	r3, [r4, #52]	; 0x34
 8007d6c:	2224      	movs	r2, #36	; 0x24
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	4393      	bics	r3, r2
 8007d72:	81a3      	strh	r3, [r4, #12]
 8007d74:	2300      	movs	r3, #0
 8007d76:	6063      	str	r3, [r4, #4]
 8007d78:	6923      	ldr	r3, [r4, #16]
 8007d7a:	6023      	str	r3, [r4, #0]
 8007d7c:	2308      	movs	r3, #8
 8007d7e:	89a2      	ldrh	r2, [r4, #12]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	6923      	ldr	r3, [r4, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10b      	bne.n	8007da2 <__swsetup_r+0xa6>
 8007d8a:	21a0      	movs	r1, #160	; 0xa0
 8007d8c:	2280      	movs	r2, #128	; 0x80
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	0089      	lsls	r1, r1, #2
 8007d92:	0092      	lsls	r2, r2, #2
 8007d94:	400b      	ands	r3, r1
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d003      	beq.n	8007da2 <__swsetup_r+0xa6>
 8007d9a:	0021      	movs	r1, r4
 8007d9c:	0030      	movs	r0, r6
 8007d9e:	f001 f8c9 	bl	8008f34 <__smakebuf_r>
 8007da2:	220c      	movs	r2, #12
 8007da4:	5ea3      	ldrsh	r3, [r4, r2]
 8007da6:	2001      	movs	r0, #1
 8007da8:	001a      	movs	r2, r3
 8007daa:	b299      	uxth	r1, r3
 8007dac:	4002      	ands	r2, r0
 8007dae:	4203      	tst	r3, r0
 8007db0:	d00f      	beq.n	8007dd2 <__swsetup_r+0xd6>
 8007db2:	2200      	movs	r2, #0
 8007db4:	60a2      	str	r2, [r4, #8]
 8007db6:	6962      	ldr	r2, [r4, #20]
 8007db8:	4252      	negs	r2, r2
 8007dba:	61a2      	str	r2, [r4, #24]
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	6922      	ldr	r2, [r4, #16]
 8007dc0:	4282      	cmp	r2, r0
 8007dc2:	d1ba      	bne.n	8007d3a <__swsetup_r+0x3e>
 8007dc4:	060a      	lsls	r2, r1, #24
 8007dc6:	d5b8      	bpl.n	8007d3a <__swsetup_r+0x3e>
 8007dc8:	2240      	movs	r2, #64	; 0x40
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	81a3      	strh	r3, [r4, #12]
 8007dce:	3801      	subs	r0, #1
 8007dd0:	e7b3      	b.n	8007d3a <__swsetup_r+0x3e>
 8007dd2:	0788      	lsls	r0, r1, #30
 8007dd4:	d400      	bmi.n	8007dd8 <__swsetup_r+0xdc>
 8007dd6:	6962      	ldr	r2, [r4, #20]
 8007dd8:	60a2      	str	r2, [r4, #8]
 8007dda:	e7ef      	b.n	8007dbc <__swsetup_r+0xc0>
 8007ddc:	2000008c 	.word	0x2000008c
 8007de0:	0800a894 	.word	0x0800a894
 8007de4:	0800a8b4 	.word	0x0800a8b4
 8007de8:	0800a874 	.word	0x0800a874

08007dec <quorem>:
 8007dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dee:	0006      	movs	r6, r0
 8007df0:	690b      	ldr	r3, [r1, #16]
 8007df2:	6932      	ldr	r2, [r6, #16]
 8007df4:	b087      	sub	sp, #28
 8007df6:	2000      	movs	r0, #0
 8007df8:	9103      	str	r1, [sp, #12]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	db65      	blt.n	8007eca <quorem+0xde>
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	009c      	lsls	r4, r3, #2
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	000b      	movs	r3, r1
 8007e06:	3314      	adds	r3, #20
 8007e08:	9305      	str	r3, [sp, #20]
 8007e0a:	191b      	adds	r3, r3, r4
 8007e0c:	9304      	str	r3, [sp, #16]
 8007e0e:	0033      	movs	r3, r6
 8007e10:	3314      	adds	r3, #20
 8007e12:	9302      	str	r3, [sp, #8]
 8007e14:	191c      	adds	r4, r3, r4
 8007e16:	9b04      	ldr	r3, [sp, #16]
 8007e18:	6827      	ldr	r7, [r4, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	0038      	movs	r0, r7
 8007e1e:	1c5d      	adds	r5, r3, #1
 8007e20:	0029      	movs	r1, r5
 8007e22:	9301      	str	r3, [sp, #4]
 8007e24:	f7f8 f98c 	bl	8000140 <__udivsi3>
 8007e28:	9001      	str	r0, [sp, #4]
 8007e2a:	42af      	cmp	r7, r5
 8007e2c:	d324      	bcc.n	8007e78 <quorem+0x8c>
 8007e2e:	2500      	movs	r5, #0
 8007e30:	46ac      	mov	ip, r5
 8007e32:	9802      	ldr	r0, [sp, #8]
 8007e34:	9f05      	ldr	r7, [sp, #20]
 8007e36:	cf08      	ldmia	r7!, {r3}
 8007e38:	9a01      	ldr	r2, [sp, #4]
 8007e3a:	b299      	uxth	r1, r3
 8007e3c:	4351      	muls	r1, r2
 8007e3e:	0c1b      	lsrs	r3, r3, #16
 8007e40:	4353      	muls	r3, r2
 8007e42:	1949      	adds	r1, r1, r5
 8007e44:	0c0a      	lsrs	r2, r1, #16
 8007e46:	189b      	adds	r3, r3, r2
 8007e48:	6802      	ldr	r2, [r0, #0]
 8007e4a:	b289      	uxth	r1, r1
 8007e4c:	b292      	uxth	r2, r2
 8007e4e:	4462      	add	r2, ip
 8007e50:	1a52      	subs	r2, r2, r1
 8007e52:	6801      	ldr	r1, [r0, #0]
 8007e54:	0c1d      	lsrs	r5, r3, #16
 8007e56:	0c09      	lsrs	r1, r1, #16
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	1acb      	subs	r3, r1, r3
 8007e5c:	1411      	asrs	r1, r2, #16
 8007e5e:	185b      	adds	r3, r3, r1
 8007e60:	1419      	asrs	r1, r3, #16
 8007e62:	b292      	uxth	r2, r2
 8007e64:	041b      	lsls	r3, r3, #16
 8007e66:	431a      	orrs	r2, r3
 8007e68:	9b04      	ldr	r3, [sp, #16]
 8007e6a:	468c      	mov	ip, r1
 8007e6c:	c004      	stmia	r0!, {r2}
 8007e6e:	42bb      	cmp	r3, r7
 8007e70:	d2e1      	bcs.n	8007e36 <quorem+0x4a>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d030      	beq.n	8007eda <quorem+0xee>
 8007e78:	0030      	movs	r0, r6
 8007e7a:	9903      	ldr	r1, [sp, #12]
 8007e7c:	f001 fb40 	bl	8009500 <__mcmp>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	db21      	blt.n	8007ec8 <quorem+0xdc>
 8007e84:	0030      	movs	r0, r6
 8007e86:	2400      	movs	r4, #0
 8007e88:	9b01      	ldr	r3, [sp, #4]
 8007e8a:	9903      	ldr	r1, [sp, #12]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	3014      	adds	r0, #20
 8007e92:	3114      	adds	r1, #20
 8007e94:	6803      	ldr	r3, [r0, #0]
 8007e96:	c920      	ldmia	r1!, {r5}
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	1914      	adds	r4, r2, r4
 8007e9c:	b2aa      	uxth	r2, r5
 8007e9e:	1aa2      	subs	r2, r4, r2
 8007ea0:	0c1b      	lsrs	r3, r3, #16
 8007ea2:	0c2d      	lsrs	r5, r5, #16
 8007ea4:	1414      	asrs	r4, r2, #16
 8007ea6:	1b5b      	subs	r3, r3, r5
 8007ea8:	191b      	adds	r3, r3, r4
 8007eaa:	141c      	asrs	r4, r3, #16
 8007eac:	b292      	uxth	r2, r2
 8007eae:	041b      	lsls	r3, r3, #16
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	c008      	stmia	r0!, {r3}
 8007eb4:	9b04      	ldr	r3, [sp, #16]
 8007eb6:	428b      	cmp	r3, r1
 8007eb8:	d2ec      	bcs.n	8007e94 <quorem+0xa8>
 8007eba:	9b00      	ldr	r3, [sp, #0]
 8007ebc:	9a02      	ldr	r2, [sp, #8]
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	18d3      	adds	r3, r2, r3
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	2a00      	cmp	r2, #0
 8007ec6:	d015      	beq.n	8007ef4 <quorem+0x108>
 8007ec8:	9801      	ldr	r0, [sp, #4]
 8007eca:	b007      	add	sp, #28
 8007ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d106      	bne.n	8007ee2 <quorem+0xf6>
 8007ed4:	9b00      	ldr	r3, [sp, #0]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	9b02      	ldr	r3, [sp, #8]
 8007edc:	3c04      	subs	r4, #4
 8007ede:	42a3      	cmp	r3, r4
 8007ee0:	d3f5      	bcc.n	8007ece <quorem+0xe2>
 8007ee2:	9b00      	ldr	r3, [sp, #0]
 8007ee4:	6133      	str	r3, [r6, #16]
 8007ee6:	e7c7      	b.n	8007e78 <quorem+0x8c>
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	2a00      	cmp	r2, #0
 8007eec:	d106      	bne.n	8007efc <quorem+0x110>
 8007eee:	9a00      	ldr	r2, [sp, #0]
 8007ef0:	3a01      	subs	r2, #1
 8007ef2:	9200      	str	r2, [sp, #0]
 8007ef4:	9a02      	ldr	r2, [sp, #8]
 8007ef6:	3b04      	subs	r3, #4
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d3f5      	bcc.n	8007ee8 <quorem+0xfc>
 8007efc:	9b00      	ldr	r3, [sp, #0]
 8007efe:	6133      	str	r3, [r6, #16]
 8007f00:	e7e2      	b.n	8007ec8 <quorem+0xdc>
	...

08007f04 <_dtoa_r>:
 8007f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f06:	b09d      	sub	sp, #116	; 0x74
 8007f08:	9202      	str	r2, [sp, #8]
 8007f0a:	9303      	str	r3, [sp, #12]
 8007f0c:	9b02      	ldr	r3, [sp, #8]
 8007f0e:	9c03      	ldr	r4, [sp, #12]
 8007f10:	9308      	str	r3, [sp, #32]
 8007f12:	9409      	str	r4, [sp, #36]	; 0x24
 8007f14:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007f16:	0007      	movs	r7, r0
 8007f18:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007f1a:	2c00      	cmp	r4, #0
 8007f1c:	d10e      	bne.n	8007f3c <_dtoa_r+0x38>
 8007f1e:	2010      	movs	r0, #16
 8007f20:	f001 f84c 	bl	8008fbc <malloc>
 8007f24:	1e02      	subs	r2, r0, #0
 8007f26:	6278      	str	r0, [r7, #36]	; 0x24
 8007f28:	d104      	bne.n	8007f34 <_dtoa_r+0x30>
 8007f2a:	21ea      	movs	r1, #234	; 0xea
 8007f2c:	4bc7      	ldr	r3, [pc, #796]	; (800824c <_dtoa_r+0x348>)
 8007f2e:	48c8      	ldr	r0, [pc, #800]	; (8008250 <_dtoa_r+0x34c>)
 8007f30:	f001 fee0 	bl	8009cf4 <__assert_func>
 8007f34:	6044      	str	r4, [r0, #4]
 8007f36:	6084      	str	r4, [r0, #8]
 8007f38:	6004      	str	r4, [r0, #0]
 8007f3a:	60c4      	str	r4, [r0, #12]
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3e:	6819      	ldr	r1, [r3, #0]
 8007f40:	2900      	cmp	r1, #0
 8007f42:	d00a      	beq.n	8007f5a <_dtoa_r+0x56>
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	2301      	movs	r3, #1
 8007f48:	4093      	lsls	r3, r2
 8007f4a:	604a      	str	r2, [r1, #4]
 8007f4c:	608b      	str	r3, [r1, #8]
 8007f4e:	0038      	movs	r0, r7
 8007f50:	f001 f896 	bl	8009080 <_Bfree>
 8007f54:	2200      	movs	r2, #0
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	9b03      	ldr	r3, [sp, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	da20      	bge.n	8007fa2 <_dtoa_r+0x9e>
 8007f60:	2301      	movs	r3, #1
 8007f62:	602b      	str	r3, [r5, #0]
 8007f64:	9b03      	ldr	r3, [sp, #12]
 8007f66:	005b      	lsls	r3, r3, #1
 8007f68:	085b      	lsrs	r3, r3, #1
 8007f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f6c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007f6e:	4bb9      	ldr	r3, [pc, #740]	; (8008254 <_dtoa_r+0x350>)
 8007f70:	4ab8      	ldr	r2, [pc, #736]	; (8008254 <_dtoa_r+0x350>)
 8007f72:	402b      	ands	r3, r5
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d117      	bne.n	8007fa8 <_dtoa_r+0xa4>
 8007f78:	4bb7      	ldr	r3, [pc, #732]	; (8008258 <_dtoa_r+0x354>)
 8007f7a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f7c:	0328      	lsls	r0, r5, #12
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	9b02      	ldr	r3, [sp, #8]
 8007f82:	0b00      	lsrs	r0, r0, #12
 8007f84:	4318      	orrs	r0, r3
 8007f86:	d101      	bne.n	8007f8c <_dtoa_r+0x88>
 8007f88:	f000 fdbf 	bl	8008b0a <_dtoa_r+0xc06>
 8007f8c:	48b3      	ldr	r0, [pc, #716]	; (800825c <_dtoa_r+0x358>)
 8007f8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f90:	9006      	str	r0, [sp, #24]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d002      	beq.n	8007f9c <_dtoa_r+0x98>
 8007f96:	4bb2      	ldr	r3, [pc, #712]	; (8008260 <_dtoa_r+0x35c>)
 8007f98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	9806      	ldr	r0, [sp, #24]
 8007f9e:	b01d      	add	sp, #116	; 0x74
 8007fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	602b      	str	r3, [r5, #0]
 8007fa6:	e7e1      	b.n	8007f6c <_dtoa_r+0x68>
 8007fa8:	9b08      	ldr	r3, [sp, #32]
 8007faa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007fac:	9312      	str	r3, [sp, #72]	; 0x48
 8007fae:	9413      	str	r4, [sp, #76]	; 0x4c
 8007fb0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007fb2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f7f8 fa48 	bl	800044c <__aeabi_dcmpeq>
 8007fbc:	1e04      	subs	r4, r0, #0
 8007fbe:	d009      	beq.n	8007fd4 <_dtoa_r+0xd0>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	4ba7      	ldr	r3, [pc, #668]	; (8008264 <_dtoa_r+0x360>)
 8007fc8:	9306      	str	r3, [sp, #24]
 8007fca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d0e5      	beq.n	8007f9c <_dtoa_r+0x98>
 8007fd0:	4ba5      	ldr	r3, [pc, #660]	; (8008268 <_dtoa_r+0x364>)
 8007fd2:	e7e1      	b.n	8007f98 <_dtoa_r+0x94>
 8007fd4:	ab1a      	add	r3, sp, #104	; 0x68
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	ab1b      	add	r3, sp, #108	; 0x6c
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	0038      	movs	r0, r7
 8007fde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fe0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fe2:	f001 fb41 	bl	8009668 <__d2b>
 8007fe6:	006e      	lsls	r6, r5, #1
 8007fe8:	9005      	str	r0, [sp, #20]
 8007fea:	0d76      	lsrs	r6, r6, #21
 8007fec:	d100      	bne.n	8007ff0 <_dtoa_r+0xec>
 8007fee:	e07c      	b.n	80080ea <_dtoa_r+0x1e6>
 8007ff0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007ff2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ff6:	4a9d      	ldr	r2, [pc, #628]	; (800826c <_dtoa_r+0x368>)
 8007ff8:	031b      	lsls	r3, r3, #12
 8007ffa:	0b1b      	lsrs	r3, r3, #12
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	0011      	movs	r1, r2
 8008000:	4b9b      	ldr	r3, [pc, #620]	; (8008270 <_dtoa_r+0x36c>)
 8008002:	9418      	str	r4, [sp, #96]	; 0x60
 8008004:	18f6      	adds	r6, r6, r3
 8008006:	2200      	movs	r2, #0
 8008008:	4b9a      	ldr	r3, [pc, #616]	; (8008274 <_dtoa_r+0x370>)
 800800a:	f7f9 fd11 	bl	8001a30 <__aeabi_dsub>
 800800e:	4a9a      	ldr	r2, [pc, #616]	; (8008278 <_dtoa_r+0x374>)
 8008010:	4b9a      	ldr	r3, [pc, #616]	; (800827c <_dtoa_r+0x378>)
 8008012:	f7f9 faa1 	bl	8001558 <__aeabi_dmul>
 8008016:	4a9a      	ldr	r2, [pc, #616]	; (8008280 <_dtoa_r+0x37c>)
 8008018:	4b9a      	ldr	r3, [pc, #616]	; (8008284 <_dtoa_r+0x380>)
 800801a:	f7f8 fb5f 	bl	80006dc <__aeabi_dadd>
 800801e:	0004      	movs	r4, r0
 8008020:	0030      	movs	r0, r6
 8008022:	000d      	movs	r5, r1
 8008024:	f7fa f8ea 	bl	80021fc <__aeabi_i2d>
 8008028:	4a97      	ldr	r2, [pc, #604]	; (8008288 <_dtoa_r+0x384>)
 800802a:	4b98      	ldr	r3, [pc, #608]	; (800828c <_dtoa_r+0x388>)
 800802c:	f7f9 fa94 	bl	8001558 <__aeabi_dmul>
 8008030:	0002      	movs	r2, r0
 8008032:	000b      	movs	r3, r1
 8008034:	0020      	movs	r0, r4
 8008036:	0029      	movs	r1, r5
 8008038:	f7f8 fb50 	bl	80006dc <__aeabi_dadd>
 800803c:	0004      	movs	r4, r0
 800803e:	000d      	movs	r5, r1
 8008040:	f7fa f8a6 	bl	8002190 <__aeabi_d2iz>
 8008044:	2200      	movs	r2, #0
 8008046:	9002      	str	r0, [sp, #8]
 8008048:	2300      	movs	r3, #0
 800804a:	0020      	movs	r0, r4
 800804c:	0029      	movs	r1, r5
 800804e:	f7f8 fa03 	bl	8000458 <__aeabi_dcmplt>
 8008052:	2800      	cmp	r0, #0
 8008054:	d00b      	beq.n	800806e <_dtoa_r+0x16a>
 8008056:	9802      	ldr	r0, [sp, #8]
 8008058:	f7fa f8d0 	bl	80021fc <__aeabi_i2d>
 800805c:	002b      	movs	r3, r5
 800805e:	0022      	movs	r2, r4
 8008060:	f7f8 f9f4 	bl	800044c <__aeabi_dcmpeq>
 8008064:	4243      	negs	r3, r0
 8008066:	4158      	adcs	r0, r3
 8008068:	9b02      	ldr	r3, [sp, #8]
 800806a:	1a1b      	subs	r3, r3, r0
 800806c:	9302      	str	r3, [sp, #8]
 800806e:	2301      	movs	r3, #1
 8008070:	9316      	str	r3, [sp, #88]	; 0x58
 8008072:	9b02      	ldr	r3, [sp, #8]
 8008074:	2b16      	cmp	r3, #22
 8008076:	d80f      	bhi.n	8008098 <_dtoa_r+0x194>
 8008078:	9812      	ldr	r0, [sp, #72]	; 0x48
 800807a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800807c:	00da      	lsls	r2, r3, #3
 800807e:	4b84      	ldr	r3, [pc, #528]	; (8008290 <_dtoa_r+0x38c>)
 8008080:	189b      	adds	r3, r3, r2
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f7f8 f9e7 	bl	8000458 <__aeabi_dcmplt>
 800808a:	2800      	cmp	r0, #0
 800808c:	d049      	beq.n	8008122 <_dtoa_r+0x21e>
 800808e:	9b02      	ldr	r3, [sp, #8]
 8008090:	3b01      	subs	r3, #1
 8008092:	9302      	str	r3, [sp, #8]
 8008094:	2300      	movs	r3, #0
 8008096:	9316      	str	r3, [sp, #88]	; 0x58
 8008098:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800809a:	1b9e      	subs	r6, r3, r6
 800809c:	2300      	movs	r3, #0
 800809e:	930a      	str	r3, [sp, #40]	; 0x28
 80080a0:	0033      	movs	r3, r6
 80080a2:	3b01      	subs	r3, #1
 80080a4:	930d      	str	r3, [sp, #52]	; 0x34
 80080a6:	d504      	bpl.n	80080b2 <_dtoa_r+0x1ae>
 80080a8:	2301      	movs	r3, #1
 80080aa:	1b9b      	subs	r3, r3, r6
 80080ac:	930a      	str	r3, [sp, #40]	; 0x28
 80080ae:	2300      	movs	r3, #0
 80080b0:	930d      	str	r3, [sp, #52]	; 0x34
 80080b2:	9b02      	ldr	r3, [sp, #8]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	db36      	blt.n	8008126 <_dtoa_r+0x222>
 80080b8:	9a02      	ldr	r2, [sp, #8]
 80080ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080bc:	4694      	mov	ip, r2
 80080be:	4463      	add	r3, ip
 80080c0:	930d      	str	r3, [sp, #52]	; 0x34
 80080c2:	2300      	movs	r3, #0
 80080c4:	9215      	str	r2, [sp, #84]	; 0x54
 80080c6:	930e      	str	r3, [sp, #56]	; 0x38
 80080c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080ca:	2401      	movs	r4, #1
 80080cc:	2b09      	cmp	r3, #9
 80080ce:	d864      	bhi.n	800819a <_dtoa_r+0x296>
 80080d0:	2b05      	cmp	r3, #5
 80080d2:	dd02      	ble.n	80080da <_dtoa_r+0x1d6>
 80080d4:	2400      	movs	r4, #0
 80080d6:	3b04      	subs	r3, #4
 80080d8:	9322      	str	r3, [sp, #136]	; 0x88
 80080da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080dc:	1e98      	subs	r0, r3, #2
 80080de:	2803      	cmp	r0, #3
 80080e0:	d864      	bhi.n	80081ac <_dtoa_r+0x2a8>
 80080e2:	f7f8 f819 	bl	8000118 <__gnu_thumb1_case_uqi>
 80080e6:	3829      	.short	0x3829
 80080e8:	5836      	.short	0x5836
 80080ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80080ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80080ee:	189e      	adds	r6, r3, r2
 80080f0:	4b68      	ldr	r3, [pc, #416]	; (8008294 <_dtoa_r+0x390>)
 80080f2:	18f2      	adds	r2, r6, r3
 80080f4:	2a20      	cmp	r2, #32
 80080f6:	dd0f      	ble.n	8008118 <_dtoa_r+0x214>
 80080f8:	2340      	movs	r3, #64	; 0x40
 80080fa:	1a9b      	subs	r3, r3, r2
 80080fc:	409d      	lsls	r5, r3
 80080fe:	4b66      	ldr	r3, [pc, #408]	; (8008298 <_dtoa_r+0x394>)
 8008100:	9802      	ldr	r0, [sp, #8]
 8008102:	18f3      	adds	r3, r6, r3
 8008104:	40d8      	lsrs	r0, r3
 8008106:	4328      	orrs	r0, r5
 8008108:	f7fa f8a8 	bl	800225c <__aeabi_ui2d>
 800810c:	2301      	movs	r3, #1
 800810e:	4c63      	ldr	r4, [pc, #396]	; (800829c <_dtoa_r+0x398>)
 8008110:	3e01      	subs	r6, #1
 8008112:	1909      	adds	r1, r1, r4
 8008114:	9318      	str	r3, [sp, #96]	; 0x60
 8008116:	e776      	b.n	8008006 <_dtoa_r+0x102>
 8008118:	2320      	movs	r3, #32
 800811a:	9802      	ldr	r0, [sp, #8]
 800811c:	1a9b      	subs	r3, r3, r2
 800811e:	4098      	lsls	r0, r3
 8008120:	e7f2      	b.n	8008108 <_dtoa_r+0x204>
 8008122:	9016      	str	r0, [sp, #88]	; 0x58
 8008124:	e7b8      	b.n	8008098 <_dtoa_r+0x194>
 8008126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008128:	9a02      	ldr	r2, [sp, #8]
 800812a:	1a9b      	subs	r3, r3, r2
 800812c:	930a      	str	r3, [sp, #40]	; 0x28
 800812e:	4253      	negs	r3, r2
 8008130:	930e      	str	r3, [sp, #56]	; 0x38
 8008132:	2300      	movs	r3, #0
 8008134:	9315      	str	r3, [sp, #84]	; 0x54
 8008136:	e7c7      	b.n	80080c8 <_dtoa_r+0x1c4>
 8008138:	2300      	movs	r3, #0
 800813a:	930f      	str	r3, [sp, #60]	; 0x3c
 800813c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800813e:	930c      	str	r3, [sp, #48]	; 0x30
 8008140:	9307      	str	r3, [sp, #28]
 8008142:	2b00      	cmp	r3, #0
 8008144:	dc13      	bgt.n	800816e <_dtoa_r+0x26a>
 8008146:	2301      	movs	r3, #1
 8008148:	001a      	movs	r2, r3
 800814a:	930c      	str	r3, [sp, #48]	; 0x30
 800814c:	9307      	str	r3, [sp, #28]
 800814e:	9223      	str	r2, [sp, #140]	; 0x8c
 8008150:	e00d      	b.n	800816e <_dtoa_r+0x26a>
 8008152:	2301      	movs	r3, #1
 8008154:	e7f1      	b.n	800813a <_dtoa_r+0x236>
 8008156:	2300      	movs	r3, #0
 8008158:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800815a:	930f      	str	r3, [sp, #60]	; 0x3c
 800815c:	4694      	mov	ip, r2
 800815e:	9b02      	ldr	r3, [sp, #8]
 8008160:	4463      	add	r3, ip
 8008162:	930c      	str	r3, [sp, #48]	; 0x30
 8008164:	3301      	adds	r3, #1
 8008166:	9307      	str	r3, [sp, #28]
 8008168:	2b00      	cmp	r3, #0
 800816a:	dc00      	bgt.n	800816e <_dtoa_r+0x26a>
 800816c:	2301      	movs	r3, #1
 800816e:	2200      	movs	r2, #0
 8008170:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008172:	6042      	str	r2, [r0, #4]
 8008174:	3204      	adds	r2, #4
 8008176:	0015      	movs	r5, r2
 8008178:	3514      	adds	r5, #20
 800817a:	6841      	ldr	r1, [r0, #4]
 800817c:	429d      	cmp	r5, r3
 800817e:	d919      	bls.n	80081b4 <_dtoa_r+0x2b0>
 8008180:	0038      	movs	r0, r7
 8008182:	f000 ff39 	bl	8008ff8 <_Balloc>
 8008186:	9006      	str	r0, [sp, #24]
 8008188:	2800      	cmp	r0, #0
 800818a:	d117      	bne.n	80081bc <_dtoa_r+0x2b8>
 800818c:	21d5      	movs	r1, #213	; 0xd5
 800818e:	0002      	movs	r2, r0
 8008190:	4b43      	ldr	r3, [pc, #268]	; (80082a0 <_dtoa_r+0x39c>)
 8008192:	0049      	lsls	r1, r1, #1
 8008194:	e6cb      	b.n	8007f2e <_dtoa_r+0x2a>
 8008196:	2301      	movs	r3, #1
 8008198:	e7de      	b.n	8008158 <_dtoa_r+0x254>
 800819a:	2300      	movs	r3, #0
 800819c:	940f      	str	r4, [sp, #60]	; 0x3c
 800819e:	9322      	str	r3, [sp, #136]	; 0x88
 80081a0:	3b01      	subs	r3, #1
 80081a2:	930c      	str	r3, [sp, #48]	; 0x30
 80081a4:	9307      	str	r3, [sp, #28]
 80081a6:	2200      	movs	r2, #0
 80081a8:	3313      	adds	r3, #19
 80081aa:	e7d0      	b.n	800814e <_dtoa_r+0x24a>
 80081ac:	2301      	movs	r3, #1
 80081ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80081b0:	3b02      	subs	r3, #2
 80081b2:	e7f6      	b.n	80081a2 <_dtoa_r+0x29e>
 80081b4:	3101      	adds	r1, #1
 80081b6:	6041      	str	r1, [r0, #4]
 80081b8:	0052      	lsls	r2, r2, #1
 80081ba:	e7dc      	b.n	8008176 <_dtoa_r+0x272>
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	9a06      	ldr	r2, [sp, #24]
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	9b07      	ldr	r3, [sp, #28]
 80081c4:	2b0e      	cmp	r3, #14
 80081c6:	d900      	bls.n	80081ca <_dtoa_r+0x2c6>
 80081c8:	e0eb      	b.n	80083a2 <_dtoa_r+0x49e>
 80081ca:	2c00      	cmp	r4, #0
 80081cc:	d100      	bne.n	80081d0 <_dtoa_r+0x2cc>
 80081ce:	e0e8      	b.n	80083a2 <_dtoa_r+0x49e>
 80081d0:	9b02      	ldr	r3, [sp, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	dd68      	ble.n	80082a8 <_dtoa_r+0x3a4>
 80081d6:	001a      	movs	r2, r3
 80081d8:	210f      	movs	r1, #15
 80081da:	4b2d      	ldr	r3, [pc, #180]	; (8008290 <_dtoa_r+0x38c>)
 80081dc:	400a      	ands	r2, r1
 80081de:	00d2      	lsls	r2, r2, #3
 80081e0:	189b      	adds	r3, r3, r2
 80081e2:	681d      	ldr	r5, [r3, #0]
 80081e4:	685e      	ldr	r6, [r3, #4]
 80081e6:	9b02      	ldr	r3, [sp, #8]
 80081e8:	111c      	asrs	r4, r3, #4
 80081ea:	2302      	movs	r3, #2
 80081ec:	9310      	str	r3, [sp, #64]	; 0x40
 80081ee:	9b02      	ldr	r3, [sp, #8]
 80081f0:	05db      	lsls	r3, r3, #23
 80081f2:	d50b      	bpl.n	800820c <_dtoa_r+0x308>
 80081f4:	4b2b      	ldr	r3, [pc, #172]	; (80082a4 <_dtoa_r+0x3a0>)
 80081f6:	400c      	ands	r4, r1
 80081f8:	6a1a      	ldr	r2, [r3, #32]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80081fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008200:	f7f8 fda8 	bl	8000d54 <__aeabi_ddiv>
 8008204:	2303      	movs	r3, #3
 8008206:	9008      	str	r0, [sp, #32]
 8008208:	9109      	str	r1, [sp, #36]	; 0x24
 800820a:	9310      	str	r3, [sp, #64]	; 0x40
 800820c:	4b25      	ldr	r3, [pc, #148]	; (80082a4 <_dtoa_r+0x3a0>)
 800820e:	9314      	str	r3, [sp, #80]	; 0x50
 8008210:	2c00      	cmp	r4, #0
 8008212:	d108      	bne.n	8008226 <_dtoa_r+0x322>
 8008214:	9808      	ldr	r0, [sp, #32]
 8008216:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008218:	002a      	movs	r2, r5
 800821a:	0033      	movs	r3, r6
 800821c:	f7f8 fd9a 	bl	8000d54 <__aeabi_ddiv>
 8008220:	9008      	str	r0, [sp, #32]
 8008222:	9109      	str	r1, [sp, #36]	; 0x24
 8008224:	e05c      	b.n	80082e0 <_dtoa_r+0x3dc>
 8008226:	2301      	movs	r3, #1
 8008228:	421c      	tst	r4, r3
 800822a:	d00b      	beq.n	8008244 <_dtoa_r+0x340>
 800822c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800822e:	0028      	movs	r0, r5
 8008230:	3301      	adds	r3, #1
 8008232:	9310      	str	r3, [sp, #64]	; 0x40
 8008234:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008236:	0031      	movs	r1, r6
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f7f9 f98c 	bl	8001558 <__aeabi_dmul>
 8008240:	0005      	movs	r5, r0
 8008242:	000e      	movs	r6, r1
 8008244:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008246:	1064      	asrs	r4, r4, #1
 8008248:	3308      	adds	r3, #8
 800824a:	e7e0      	b.n	800820e <_dtoa_r+0x30a>
 800824c:	0800a7f1 	.word	0x0800a7f1
 8008250:	0800a808 	.word	0x0800a808
 8008254:	7ff00000 	.word	0x7ff00000
 8008258:	0000270f 	.word	0x0000270f
 800825c:	0800a7ed 	.word	0x0800a7ed
 8008260:	0800a7f0 	.word	0x0800a7f0
 8008264:	0800a7c0 	.word	0x0800a7c0
 8008268:	0800a7c1 	.word	0x0800a7c1
 800826c:	3ff00000 	.word	0x3ff00000
 8008270:	fffffc01 	.word	0xfffffc01
 8008274:	3ff80000 	.word	0x3ff80000
 8008278:	636f4361 	.word	0x636f4361
 800827c:	3fd287a7 	.word	0x3fd287a7
 8008280:	8b60c8b3 	.word	0x8b60c8b3
 8008284:	3fc68a28 	.word	0x3fc68a28
 8008288:	509f79fb 	.word	0x509f79fb
 800828c:	3fd34413 	.word	0x3fd34413
 8008290:	0800a958 	.word	0x0800a958
 8008294:	00000432 	.word	0x00000432
 8008298:	00000412 	.word	0x00000412
 800829c:	fe100000 	.word	0xfe100000
 80082a0:	0800a863 	.word	0x0800a863
 80082a4:	0800a930 	.word	0x0800a930
 80082a8:	2302      	movs	r3, #2
 80082aa:	9310      	str	r3, [sp, #64]	; 0x40
 80082ac:	9b02      	ldr	r3, [sp, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d016      	beq.n	80082e0 <_dtoa_r+0x3dc>
 80082b2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80082b4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80082b6:	425c      	negs	r4, r3
 80082b8:	230f      	movs	r3, #15
 80082ba:	4ab6      	ldr	r2, [pc, #728]	; (8008594 <_dtoa_r+0x690>)
 80082bc:	4023      	ands	r3, r4
 80082be:	00db      	lsls	r3, r3, #3
 80082c0:	18d3      	adds	r3, r2, r3
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f7f9 f947 	bl	8001558 <__aeabi_dmul>
 80082ca:	2601      	movs	r6, #1
 80082cc:	2300      	movs	r3, #0
 80082ce:	9008      	str	r0, [sp, #32]
 80082d0:	9109      	str	r1, [sp, #36]	; 0x24
 80082d2:	4db1      	ldr	r5, [pc, #708]	; (8008598 <_dtoa_r+0x694>)
 80082d4:	1124      	asrs	r4, r4, #4
 80082d6:	2c00      	cmp	r4, #0
 80082d8:	d000      	beq.n	80082dc <_dtoa_r+0x3d8>
 80082da:	e094      	b.n	8008406 <_dtoa_r+0x502>
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d19f      	bne.n	8008220 <_dtoa_r+0x31c>
 80082e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d100      	bne.n	80082e8 <_dtoa_r+0x3e4>
 80082e6:	e09b      	b.n	8008420 <_dtoa_r+0x51c>
 80082e8:	9c08      	ldr	r4, [sp, #32]
 80082ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80082ec:	2200      	movs	r2, #0
 80082ee:	0020      	movs	r0, r4
 80082f0:	0029      	movs	r1, r5
 80082f2:	4baa      	ldr	r3, [pc, #680]	; (800859c <_dtoa_r+0x698>)
 80082f4:	f7f8 f8b0 	bl	8000458 <__aeabi_dcmplt>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d100      	bne.n	80082fe <_dtoa_r+0x3fa>
 80082fc:	e090      	b.n	8008420 <_dtoa_r+0x51c>
 80082fe:	9b07      	ldr	r3, [sp, #28]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d100      	bne.n	8008306 <_dtoa_r+0x402>
 8008304:	e08c      	b.n	8008420 <_dtoa_r+0x51c>
 8008306:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008308:	2b00      	cmp	r3, #0
 800830a:	dd46      	ble.n	800839a <_dtoa_r+0x496>
 800830c:	9b02      	ldr	r3, [sp, #8]
 800830e:	2200      	movs	r2, #0
 8008310:	0020      	movs	r0, r4
 8008312:	0029      	movs	r1, r5
 8008314:	1e5e      	subs	r6, r3, #1
 8008316:	4ba2      	ldr	r3, [pc, #648]	; (80085a0 <_dtoa_r+0x69c>)
 8008318:	f7f9 f91e 	bl	8001558 <__aeabi_dmul>
 800831c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800831e:	9008      	str	r0, [sp, #32]
 8008320:	9109      	str	r1, [sp, #36]	; 0x24
 8008322:	3301      	adds	r3, #1
 8008324:	9310      	str	r3, [sp, #64]	; 0x40
 8008326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008328:	9810      	ldr	r0, [sp, #64]	; 0x40
 800832a:	9c08      	ldr	r4, [sp, #32]
 800832c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800832e:	9314      	str	r3, [sp, #80]	; 0x50
 8008330:	f7f9 ff64 	bl	80021fc <__aeabi_i2d>
 8008334:	0022      	movs	r2, r4
 8008336:	002b      	movs	r3, r5
 8008338:	f7f9 f90e 	bl	8001558 <__aeabi_dmul>
 800833c:	2200      	movs	r2, #0
 800833e:	4b99      	ldr	r3, [pc, #612]	; (80085a4 <_dtoa_r+0x6a0>)
 8008340:	f7f8 f9cc 	bl	80006dc <__aeabi_dadd>
 8008344:	9010      	str	r0, [sp, #64]	; 0x40
 8008346:	9111      	str	r1, [sp, #68]	; 0x44
 8008348:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800834a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800834c:	9208      	str	r2, [sp, #32]
 800834e:	9309      	str	r3, [sp, #36]	; 0x24
 8008350:	4a95      	ldr	r2, [pc, #596]	; (80085a8 <_dtoa_r+0x6a4>)
 8008352:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008354:	4694      	mov	ip, r2
 8008356:	4463      	add	r3, ip
 8008358:	9317      	str	r3, [sp, #92]	; 0x5c
 800835a:	9309      	str	r3, [sp, #36]	; 0x24
 800835c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800835e:	2b00      	cmp	r3, #0
 8008360:	d161      	bne.n	8008426 <_dtoa_r+0x522>
 8008362:	2200      	movs	r2, #0
 8008364:	0020      	movs	r0, r4
 8008366:	0029      	movs	r1, r5
 8008368:	4b90      	ldr	r3, [pc, #576]	; (80085ac <_dtoa_r+0x6a8>)
 800836a:	f7f9 fb61 	bl	8001a30 <__aeabi_dsub>
 800836e:	9a08      	ldr	r2, [sp, #32]
 8008370:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008372:	0004      	movs	r4, r0
 8008374:	000d      	movs	r5, r1
 8008376:	f7f8 f883 	bl	8000480 <__aeabi_dcmpgt>
 800837a:	2800      	cmp	r0, #0
 800837c:	d000      	beq.n	8008380 <_dtoa_r+0x47c>
 800837e:	e2af      	b.n	80088e0 <_dtoa_r+0x9dc>
 8008380:	488b      	ldr	r0, [pc, #556]	; (80085b0 <_dtoa_r+0x6ac>)
 8008382:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008384:	4684      	mov	ip, r0
 8008386:	4461      	add	r1, ip
 8008388:	000b      	movs	r3, r1
 800838a:	0020      	movs	r0, r4
 800838c:	0029      	movs	r1, r5
 800838e:	9a08      	ldr	r2, [sp, #32]
 8008390:	f7f8 f862 	bl	8000458 <__aeabi_dcmplt>
 8008394:	2800      	cmp	r0, #0
 8008396:	d000      	beq.n	800839a <_dtoa_r+0x496>
 8008398:	e29f      	b.n	80088da <_dtoa_r+0x9d6>
 800839a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800839c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800839e:	9308      	str	r3, [sp, #32]
 80083a0:	9409      	str	r4, [sp, #36]	; 0x24
 80083a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	da00      	bge.n	80083aa <_dtoa_r+0x4a6>
 80083a8:	e172      	b.n	8008690 <_dtoa_r+0x78c>
 80083aa:	9a02      	ldr	r2, [sp, #8]
 80083ac:	2a0e      	cmp	r2, #14
 80083ae:	dd00      	ble.n	80083b2 <_dtoa_r+0x4ae>
 80083b0:	e16e      	b.n	8008690 <_dtoa_r+0x78c>
 80083b2:	4b78      	ldr	r3, [pc, #480]	; (8008594 <_dtoa_r+0x690>)
 80083b4:	00d2      	lsls	r2, r2, #3
 80083b6:	189b      	adds	r3, r3, r2
 80083b8:	685c      	ldr	r4, [r3, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	930a      	str	r3, [sp, #40]	; 0x28
 80083be:	940b      	str	r4, [sp, #44]	; 0x2c
 80083c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	db00      	blt.n	80083c8 <_dtoa_r+0x4c4>
 80083c6:	e0f7      	b.n	80085b8 <_dtoa_r+0x6b4>
 80083c8:	9b07      	ldr	r3, [sp, #28]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	dd00      	ble.n	80083d0 <_dtoa_r+0x4cc>
 80083ce:	e0f3      	b.n	80085b8 <_dtoa_r+0x6b4>
 80083d0:	d000      	beq.n	80083d4 <_dtoa_r+0x4d0>
 80083d2:	e282      	b.n	80088da <_dtoa_r+0x9d6>
 80083d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80083d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083d8:	2200      	movs	r2, #0
 80083da:	4b74      	ldr	r3, [pc, #464]	; (80085ac <_dtoa_r+0x6a8>)
 80083dc:	f7f9 f8bc 	bl	8001558 <__aeabi_dmul>
 80083e0:	9a08      	ldr	r2, [sp, #32]
 80083e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e4:	f7f8 f856 	bl	8000494 <__aeabi_dcmpge>
 80083e8:	9e07      	ldr	r6, [sp, #28]
 80083ea:	0035      	movs	r5, r6
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d000      	beq.n	80083f2 <_dtoa_r+0x4ee>
 80083f0:	e259      	b.n	80088a6 <_dtoa_r+0x9a2>
 80083f2:	9b06      	ldr	r3, [sp, #24]
 80083f4:	9a06      	ldr	r2, [sp, #24]
 80083f6:	3301      	adds	r3, #1
 80083f8:	9308      	str	r3, [sp, #32]
 80083fa:	2331      	movs	r3, #49	; 0x31
 80083fc:	7013      	strb	r3, [r2, #0]
 80083fe:	9b02      	ldr	r3, [sp, #8]
 8008400:	3301      	adds	r3, #1
 8008402:	9302      	str	r3, [sp, #8]
 8008404:	e254      	b.n	80088b0 <_dtoa_r+0x9ac>
 8008406:	4234      	tst	r4, r6
 8008408:	d007      	beq.n	800841a <_dtoa_r+0x516>
 800840a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800840c:	3301      	adds	r3, #1
 800840e:	9310      	str	r3, [sp, #64]	; 0x40
 8008410:	682a      	ldr	r2, [r5, #0]
 8008412:	686b      	ldr	r3, [r5, #4]
 8008414:	f7f9 f8a0 	bl	8001558 <__aeabi_dmul>
 8008418:	0033      	movs	r3, r6
 800841a:	1064      	asrs	r4, r4, #1
 800841c:	3508      	adds	r5, #8
 800841e:	e75a      	b.n	80082d6 <_dtoa_r+0x3d2>
 8008420:	9e02      	ldr	r6, [sp, #8]
 8008422:	9b07      	ldr	r3, [sp, #28]
 8008424:	e780      	b.n	8008328 <_dtoa_r+0x424>
 8008426:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008428:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800842a:	1e5a      	subs	r2, r3, #1
 800842c:	4b59      	ldr	r3, [pc, #356]	; (8008594 <_dtoa_r+0x690>)
 800842e:	00d2      	lsls	r2, r2, #3
 8008430:	189b      	adds	r3, r3, r2
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	2900      	cmp	r1, #0
 8008438:	d051      	beq.n	80084de <_dtoa_r+0x5da>
 800843a:	2000      	movs	r0, #0
 800843c:	495d      	ldr	r1, [pc, #372]	; (80085b4 <_dtoa_r+0x6b0>)
 800843e:	f7f8 fc89 	bl	8000d54 <__aeabi_ddiv>
 8008442:	9a08      	ldr	r2, [sp, #32]
 8008444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008446:	f7f9 faf3 	bl	8001a30 <__aeabi_dsub>
 800844a:	9a06      	ldr	r2, [sp, #24]
 800844c:	9b06      	ldr	r3, [sp, #24]
 800844e:	4694      	mov	ip, r2
 8008450:	9317      	str	r3, [sp, #92]	; 0x5c
 8008452:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008454:	9010      	str	r0, [sp, #64]	; 0x40
 8008456:	9111      	str	r1, [sp, #68]	; 0x44
 8008458:	4463      	add	r3, ip
 800845a:	9319      	str	r3, [sp, #100]	; 0x64
 800845c:	0029      	movs	r1, r5
 800845e:	0020      	movs	r0, r4
 8008460:	f7f9 fe96 	bl	8002190 <__aeabi_d2iz>
 8008464:	9014      	str	r0, [sp, #80]	; 0x50
 8008466:	f7f9 fec9 	bl	80021fc <__aeabi_i2d>
 800846a:	0002      	movs	r2, r0
 800846c:	000b      	movs	r3, r1
 800846e:	0020      	movs	r0, r4
 8008470:	0029      	movs	r1, r5
 8008472:	f7f9 fadd 	bl	8001a30 <__aeabi_dsub>
 8008476:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008478:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800847a:	3301      	adds	r3, #1
 800847c:	9308      	str	r3, [sp, #32]
 800847e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008480:	0004      	movs	r4, r0
 8008482:	3330      	adds	r3, #48	; 0x30
 8008484:	7013      	strb	r3, [r2, #0]
 8008486:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008488:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800848a:	000d      	movs	r5, r1
 800848c:	f7f7 ffe4 	bl	8000458 <__aeabi_dcmplt>
 8008490:	2800      	cmp	r0, #0
 8008492:	d175      	bne.n	8008580 <_dtoa_r+0x67c>
 8008494:	0022      	movs	r2, r4
 8008496:	002b      	movs	r3, r5
 8008498:	2000      	movs	r0, #0
 800849a:	4940      	ldr	r1, [pc, #256]	; (800859c <_dtoa_r+0x698>)
 800849c:	f7f9 fac8 	bl	8001a30 <__aeabi_dsub>
 80084a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084a4:	f7f7 ffd8 	bl	8000458 <__aeabi_dcmplt>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d000      	beq.n	80084ae <_dtoa_r+0x5aa>
 80084ac:	e0d2      	b.n	8008654 <_dtoa_r+0x750>
 80084ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084b0:	9a08      	ldr	r2, [sp, #32]
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d100      	bne.n	80084b8 <_dtoa_r+0x5b4>
 80084b6:	e770      	b.n	800839a <_dtoa_r+0x496>
 80084b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80084ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80084bc:	2200      	movs	r2, #0
 80084be:	4b38      	ldr	r3, [pc, #224]	; (80085a0 <_dtoa_r+0x69c>)
 80084c0:	f7f9 f84a 	bl	8001558 <__aeabi_dmul>
 80084c4:	4b36      	ldr	r3, [pc, #216]	; (80085a0 <_dtoa_r+0x69c>)
 80084c6:	9010      	str	r0, [sp, #64]	; 0x40
 80084c8:	9111      	str	r1, [sp, #68]	; 0x44
 80084ca:	2200      	movs	r2, #0
 80084cc:	0020      	movs	r0, r4
 80084ce:	0029      	movs	r1, r5
 80084d0:	f7f9 f842 	bl	8001558 <__aeabi_dmul>
 80084d4:	9b08      	ldr	r3, [sp, #32]
 80084d6:	0004      	movs	r4, r0
 80084d8:	000d      	movs	r5, r1
 80084da:	9317      	str	r3, [sp, #92]	; 0x5c
 80084dc:	e7be      	b.n	800845c <_dtoa_r+0x558>
 80084de:	9808      	ldr	r0, [sp, #32]
 80084e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084e2:	f7f9 f839 	bl	8001558 <__aeabi_dmul>
 80084e6:	9a06      	ldr	r2, [sp, #24]
 80084e8:	9b06      	ldr	r3, [sp, #24]
 80084ea:	4694      	mov	ip, r2
 80084ec:	9308      	str	r3, [sp, #32]
 80084ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084f0:	9010      	str	r0, [sp, #64]	; 0x40
 80084f2:	9111      	str	r1, [sp, #68]	; 0x44
 80084f4:	4463      	add	r3, ip
 80084f6:	9319      	str	r3, [sp, #100]	; 0x64
 80084f8:	0029      	movs	r1, r5
 80084fa:	0020      	movs	r0, r4
 80084fc:	f7f9 fe48 	bl	8002190 <__aeabi_d2iz>
 8008500:	9017      	str	r0, [sp, #92]	; 0x5c
 8008502:	f7f9 fe7b 	bl	80021fc <__aeabi_i2d>
 8008506:	0002      	movs	r2, r0
 8008508:	000b      	movs	r3, r1
 800850a:	0020      	movs	r0, r4
 800850c:	0029      	movs	r1, r5
 800850e:	f7f9 fa8f 	bl	8001a30 <__aeabi_dsub>
 8008512:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008514:	9a08      	ldr	r2, [sp, #32]
 8008516:	3330      	adds	r3, #48	; 0x30
 8008518:	7013      	strb	r3, [r2, #0]
 800851a:	0013      	movs	r3, r2
 800851c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800851e:	3301      	adds	r3, #1
 8008520:	0004      	movs	r4, r0
 8008522:	000d      	movs	r5, r1
 8008524:	9308      	str	r3, [sp, #32]
 8008526:	4293      	cmp	r3, r2
 8008528:	d12c      	bne.n	8008584 <_dtoa_r+0x680>
 800852a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800852c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800852e:	9a06      	ldr	r2, [sp, #24]
 8008530:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008532:	4694      	mov	ip, r2
 8008534:	4463      	add	r3, ip
 8008536:	2200      	movs	r2, #0
 8008538:	9308      	str	r3, [sp, #32]
 800853a:	4b1e      	ldr	r3, [pc, #120]	; (80085b4 <_dtoa_r+0x6b0>)
 800853c:	f7f8 f8ce 	bl	80006dc <__aeabi_dadd>
 8008540:	0002      	movs	r2, r0
 8008542:	000b      	movs	r3, r1
 8008544:	0020      	movs	r0, r4
 8008546:	0029      	movs	r1, r5
 8008548:	f7f7 ff9a 	bl	8000480 <__aeabi_dcmpgt>
 800854c:	2800      	cmp	r0, #0
 800854e:	d000      	beq.n	8008552 <_dtoa_r+0x64e>
 8008550:	e080      	b.n	8008654 <_dtoa_r+0x750>
 8008552:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008554:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008556:	2000      	movs	r0, #0
 8008558:	4916      	ldr	r1, [pc, #88]	; (80085b4 <_dtoa_r+0x6b0>)
 800855a:	f7f9 fa69 	bl	8001a30 <__aeabi_dsub>
 800855e:	0002      	movs	r2, r0
 8008560:	000b      	movs	r3, r1
 8008562:	0020      	movs	r0, r4
 8008564:	0029      	movs	r1, r5
 8008566:	f7f7 ff77 	bl	8000458 <__aeabi_dcmplt>
 800856a:	2800      	cmp	r0, #0
 800856c:	d100      	bne.n	8008570 <_dtoa_r+0x66c>
 800856e:	e714      	b.n	800839a <_dtoa_r+0x496>
 8008570:	9b08      	ldr	r3, [sp, #32]
 8008572:	001a      	movs	r2, r3
 8008574:	3a01      	subs	r2, #1
 8008576:	9208      	str	r2, [sp, #32]
 8008578:	7812      	ldrb	r2, [r2, #0]
 800857a:	2a30      	cmp	r2, #48	; 0x30
 800857c:	d0f8      	beq.n	8008570 <_dtoa_r+0x66c>
 800857e:	9308      	str	r3, [sp, #32]
 8008580:	9602      	str	r6, [sp, #8]
 8008582:	e055      	b.n	8008630 <_dtoa_r+0x72c>
 8008584:	2200      	movs	r2, #0
 8008586:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <_dtoa_r+0x69c>)
 8008588:	f7f8 ffe6 	bl	8001558 <__aeabi_dmul>
 800858c:	0004      	movs	r4, r0
 800858e:	000d      	movs	r5, r1
 8008590:	e7b2      	b.n	80084f8 <_dtoa_r+0x5f4>
 8008592:	46c0      	nop			; (mov r8, r8)
 8008594:	0800a958 	.word	0x0800a958
 8008598:	0800a930 	.word	0x0800a930
 800859c:	3ff00000 	.word	0x3ff00000
 80085a0:	40240000 	.word	0x40240000
 80085a4:	401c0000 	.word	0x401c0000
 80085a8:	fcc00000 	.word	0xfcc00000
 80085ac:	40140000 	.word	0x40140000
 80085b0:	7cc00000 	.word	0x7cc00000
 80085b4:	3fe00000 	.word	0x3fe00000
 80085b8:	9b07      	ldr	r3, [sp, #28]
 80085ba:	9e06      	ldr	r6, [sp, #24]
 80085bc:	3b01      	subs	r3, #1
 80085be:	199b      	adds	r3, r3, r6
 80085c0:	930c      	str	r3, [sp, #48]	; 0x30
 80085c2:	9c08      	ldr	r4, [sp, #32]
 80085c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80085c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ca:	0020      	movs	r0, r4
 80085cc:	0029      	movs	r1, r5
 80085ce:	f7f8 fbc1 	bl	8000d54 <__aeabi_ddiv>
 80085d2:	f7f9 fddd 	bl	8002190 <__aeabi_d2iz>
 80085d6:	9007      	str	r0, [sp, #28]
 80085d8:	f7f9 fe10 	bl	80021fc <__aeabi_i2d>
 80085dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e0:	f7f8 ffba 	bl	8001558 <__aeabi_dmul>
 80085e4:	0002      	movs	r2, r0
 80085e6:	000b      	movs	r3, r1
 80085e8:	0020      	movs	r0, r4
 80085ea:	0029      	movs	r1, r5
 80085ec:	f7f9 fa20 	bl	8001a30 <__aeabi_dsub>
 80085f0:	0033      	movs	r3, r6
 80085f2:	9a07      	ldr	r2, [sp, #28]
 80085f4:	3601      	adds	r6, #1
 80085f6:	3230      	adds	r2, #48	; 0x30
 80085f8:	701a      	strb	r2, [r3, #0]
 80085fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085fc:	9608      	str	r6, [sp, #32]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d139      	bne.n	8008676 <_dtoa_r+0x772>
 8008602:	0002      	movs	r2, r0
 8008604:	000b      	movs	r3, r1
 8008606:	f7f8 f869 	bl	80006dc <__aeabi_dadd>
 800860a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800860c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800860e:	0004      	movs	r4, r0
 8008610:	000d      	movs	r5, r1
 8008612:	f7f7 ff35 	bl	8000480 <__aeabi_dcmpgt>
 8008616:	2800      	cmp	r0, #0
 8008618:	d11b      	bne.n	8008652 <_dtoa_r+0x74e>
 800861a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800861c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800861e:	0020      	movs	r0, r4
 8008620:	0029      	movs	r1, r5
 8008622:	f7f7 ff13 	bl	800044c <__aeabi_dcmpeq>
 8008626:	2800      	cmp	r0, #0
 8008628:	d002      	beq.n	8008630 <_dtoa_r+0x72c>
 800862a:	9b07      	ldr	r3, [sp, #28]
 800862c:	07db      	lsls	r3, r3, #31
 800862e:	d410      	bmi.n	8008652 <_dtoa_r+0x74e>
 8008630:	0038      	movs	r0, r7
 8008632:	9905      	ldr	r1, [sp, #20]
 8008634:	f000 fd24 	bl	8009080 <_Bfree>
 8008638:	2300      	movs	r3, #0
 800863a:	9a08      	ldr	r2, [sp, #32]
 800863c:	9802      	ldr	r0, [sp, #8]
 800863e:	7013      	strb	r3, [r2, #0]
 8008640:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008642:	3001      	adds	r0, #1
 8008644:	6018      	str	r0, [r3, #0]
 8008646:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008648:	2b00      	cmp	r3, #0
 800864a:	d100      	bne.n	800864e <_dtoa_r+0x74a>
 800864c:	e4a6      	b.n	8007f9c <_dtoa_r+0x98>
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	e4a4      	b.n	8007f9c <_dtoa_r+0x98>
 8008652:	9e02      	ldr	r6, [sp, #8]
 8008654:	9b08      	ldr	r3, [sp, #32]
 8008656:	9308      	str	r3, [sp, #32]
 8008658:	3b01      	subs	r3, #1
 800865a:	781a      	ldrb	r2, [r3, #0]
 800865c:	2a39      	cmp	r2, #57	; 0x39
 800865e:	d106      	bne.n	800866e <_dtoa_r+0x76a>
 8008660:	9a06      	ldr	r2, [sp, #24]
 8008662:	429a      	cmp	r2, r3
 8008664:	d1f7      	bne.n	8008656 <_dtoa_r+0x752>
 8008666:	2230      	movs	r2, #48	; 0x30
 8008668:	9906      	ldr	r1, [sp, #24]
 800866a:	3601      	adds	r6, #1
 800866c:	700a      	strb	r2, [r1, #0]
 800866e:	781a      	ldrb	r2, [r3, #0]
 8008670:	3201      	adds	r2, #1
 8008672:	701a      	strb	r2, [r3, #0]
 8008674:	e784      	b.n	8008580 <_dtoa_r+0x67c>
 8008676:	2200      	movs	r2, #0
 8008678:	4baa      	ldr	r3, [pc, #680]	; (8008924 <_dtoa_r+0xa20>)
 800867a:	f7f8 ff6d 	bl	8001558 <__aeabi_dmul>
 800867e:	2200      	movs	r2, #0
 8008680:	2300      	movs	r3, #0
 8008682:	0004      	movs	r4, r0
 8008684:	000d      	movs	r5, r1
 8008686:	f7f7 fee1 	bl	800044c <__aeabi_dcmpeq>
 800868a:	2800      	cmp	r0, #0
 800868c:	d09b      	beq.n	80085c6 <_dtoa_r+0x6c2>
 800868e:	e7cf      	b.n	8008630 <_dtoa_r+0x72c>
 8008690:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008692:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008694:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008696:	2d00      	cmp	r5, #0
 8008698:	d012      	beq.n	80086c0 <_dtoa_r+0x7bc>
 800869a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800869c:	2a01      	cmp	r2, #1
 800869e:	dc66      	bgt.n	800876e <_dtoa_r+0x86a>
 80086a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80086a2:	2a00      	cmp	r2, #0
 80086a4:	d05d      	beq.n	8008762 <_dtoa_r+0x85e>
 80086a6:	4aa0      	ldr	r2, [pc, #640]	; (8008928 <_dtoa_r+0xa24>)
 80086a8:	189b      	adds	r3, r3, r2
 80086aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086ac:	2101      	movs	r1, #1
 80086ae:	18d2      	adds	r2, r2, r3
 80086b0:	920a      	str	r2, [sp, #40]	; 0x28
 80086b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086b4:	0038      	movs	r0, r7
 80086b6:	18d3      	adds	r3, r2, r3
 80086b8:	930d      	str	r3, [sp, #52]	; 0x34
 80086ba:	f000 fd91 	bl	80091e0 <__i2b>
 80086be:	0005      	movs	r5, r0
 80086c0:	2c00      	cmp	r4, #0
 80086c2:	dd0e      	ble.n	80086e2 <_dtoa_r+0x7de>
 80086c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	dd0b      	ble.n	80086e2 <_dtoa_r+0x7de>
 80086ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086cc:	0023      	movs	r3, r4
 80086ce:	4294      	cmp	r4, r2
 80086d0:	dd00      	ble.n	80086d4 <_dtoa_r+0x7d0>
 80086d2:	0013      	movs	r3, r2
 80086d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086d6:	1ae4      	subs	r4, r4, r3
 80086d8:	1ad2      	subs	r2, r2, r3
 80086da:	920a      	str	r2, [sp, #40]	; 0x28
 80086dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	930d      	str	r3, [sp, #52]	; 0x34
 80086e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d01f      	beq.n	8008728 <_dtoa_r+0x824>
 80086e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d054      	beq.n	8008798 <_dtoa_r+0x894>
 80086ee:	2e00      	cmp	r6, #0
 80086f0:	dd11      	ble.n	8008716 <_dtoa_r+0x812>
 80086f2:	0029      	movs	r1, r5
 80086f4:	0032      	movs	r2, r6
 80086f6:	0038      	movs	r0, r7
 80086f8:	f000 fe38 	bl	800936c <__pow5mult>
 80086fc:	9a05      	ldr	r2, [sp, #20]
 80086fe:	0001      	movs	r1, r0
 8008700:	0005      	movs	r5, r0
 8008702:	0038      	movs	r0, r7
 8008704:	f000 fd82 	bl	800920c <__multiply>
 8008708:	9905      	ldr	r1, [sp, #20]
 800870a:	9014      	str	r0, [sp, #80]	; 0x50
 800870c:	0038      	movs	r0, r7
 800870e:	f000 fcb7 	bl	8009080 <_Bfree>
 8008712:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008714:	9305      	str	r3, [sp, #20]
 8008716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008718:	1b9a      	subs	r2, r3, r6
 800871a:	42b3      	cmp	r3, r6
 800871c:	d004      	beq.n	8008728 <_dtoa_r+0x824>
 800871e:	0038      	movs	r0, r7
 8008720:	9905      	ldr	r1, [sp, #20]
 8008722:	f000 fe23 	bl	800936c <__pow5mult>
 8008726:	9005      	str	r0, [sp, #20]
 8008728:	2101      	movs	r1, #1
 800872a:	0038      	movs	r0, r7
 800872c:	f000 fd58 	bl	80091e0 <__i2b>
 8008730:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008732:	0006      	movs	r6, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	dd31      	ble.n	800879c <_dtoa_r+0x898>
 8008738:	001a      	movs	r2, r3
 800873a:	0001      	movs	r1, r0
 800873c:	0038      	movs	r0, r7
 800873e:	f000 fe15 	bl	800936c <__pow5mult>
 8008742:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008744:	0006      	movs	r6, r0
 8008746:	2b01      	cmp	r3, #1
 8008748:	dd2d      	ble.n	80087a6 <_dtoa_r+0x8a2>
 800874a:	2300      	movs	r3, #0
 800874c:	930e      	str	r3, [sp, #56]	; 0x38
 800874e:	6933      	ldr	r3, [r6, #16]
 8008750:	3303      	adds	r3, #3
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	18f3      	adds	r3, r6, r3
 8008756:	6858      	ldr	r0, [r3, #4]
 8008758:	f000 fcfa 	bl	8009150 <__hi0bits>
 800875c:	2320      	movs	r3, #32
 800875e:	1a18      	subs	r0, r3, r0
 8008760:	e039      	b.n	80087d6 <_dtoa_r+0x8d2>
 8008762:	2336      	movs	r3, #54	; 0x36
 8008764:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008766:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008768:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800876a:	1a9b      	subs	r3, r3, r2
 800876c:	e79d      	b.n	80086aa <_dtoa_r+0x7a6>
 800876e:	9b07      	ldr	r3, [sp, #28]
 8008770:	1e5e      	subs	r6, r3, #1
 8008772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008774:	42b3      	cmp	r3, r6
 8008776:	db07      	blt.n	8008788 <_dtoa_r+0x884>
 8008778:	1b9e      	subs	r6, r3, r6
 800877a:	9b07      	ldr	r3, [sp, #28]
 800877c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800877e:	2b00      	cmp	r3, #0
 8008780:	da93      	bge.n	80086aa <_dtoa_r+0x7a6>
 8008782:	1ae4      	subs	r4, r4, r3
 8008784:	2300      	movs	r3, #0
 8008786:	e790      	b.n	80086aa <_dtoa_r+0x7a6>
 8008788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800878a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800878c:	1af3      	subs	r3, r6, r3
 800878e:	18d3      	adds	r3, r2, r3
 8008790:	960e      	str	r6, [sp, #56]	; 0x38
 8008792:	9315      	str	r3, [sp, #84]	; 0x54
 8008794:	2600      	movs	r6, #0
 8008796:	e7f0      	b.n	800877a <_dtoa_r+0x876>
 8008798:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800879a:	e7c0      	b.n	800871e <_dtoa_r+0x81a>
 800879c:	2300      	movs	r3, #0
 800879e:	930e      	str	r3, [sp, #56]	; 0x38
 80087a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	dc13      	bgt.n	80087ce <_dtoa_r+0x8ca>
 80087a6:	2300      	movs	r3, #0
 80087a8:	930e      	str	r3, [sp, #56]	; 0x38
 80087aa:	9b08      	ldr	r3, [sp, #32]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10e      	bne.n	80087ce <_dtoa_r+0x8ca>
 80087b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b2:	031b      	lsls	r3, r3, #12
 80087b4:	d10b      	bne.n	80087ce <_dtoa_r+0x8ca>
 80087b6:	4b5d      	ldr	r3, [pc, #372]	; (800892c <_dtoa_r+0xa28>)
 80087b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ba:	4213      	tst	r3, r2
 80087bc:	d007      	beq.n	80087ce <_dtoa_r+0x8ca>
 80087be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c0:	3301      	adds	r3, #1
 80087c2:	930a      	str	r3, [sp, #40]	; 0x28
 80087c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087c6:	3301      	adds	r3, #1
 80087c8:	930d      	str	r3, [sp, #52]	; 0x34
 80087ca:	2301      	movs	r3, #1
 80087cc:	930e      	str	r3, [sp, #56]	; 0x38
 80087ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087d0:	2001      	movs	r0, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1bb      	bne.n	800874e <_dtoa_r+0x84a>
 80087d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087d8:	221f      	movs	r2, #31
 80087da:	1818      	adds	r0, r3, r0
 80087dc:	0003      	movs	r3, r0
 80087de:	4013      	ands	r3, r2
 80087e0:	4210      	tst	r0, r2
 80087e2:	d046      	beq.n	8008872 <_dtoa_r+0x96e>
 80087e4:	3201      	adds	r2, #1
 80087e6:	1ad2      	subs	r2, r2, r3
 80087e8:	2a04      	cmp	r2, #4
 80087ea:	dd3f      	ble.n	800886c <_dtoa_r+0x968>
 80087ec:	221c      	movs	r2, #28
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087f2:	18e4      	adds	r4, r4, r3
 80087f4:	18d2      	adds	r2, r2, r3
 80087f6:	920a      	str	r2, [sp, #40]	; 0x28
 80087f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087fa:	18d3      	adds	r3, r2, r3
 80087fc:	930d      	str	r3, [sp, #52]	; 0x34
 80087fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008800:	2b00      	cmp	r3, #0
 8008802:	dd05      	ble.n	8008810 <_dtoa_r+0x90c>
 8008804:	001a      	movs	r2, r3
 8008806:	0038      	movs	r0, r7
 8008808:	9905      	ldr	r1, [sp, #20]
 800880a:	f000 fe0b 	bl	8009424 <__lshift>
 800880e:	9005      	str	r0, [sp, #20]
 8008810:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008812:	2b00      	cmp	r3, #0
 8008814:	dd05      	ble.n	8008822 <_dtoa_r+0x91e>
 8008816:	0031      	movs	r1, r6
 8008818:	001a      	movs	r2, r3
 800881a:	0038      	movs	r0, r7
 800881c:	f000 fe02 	bl	8009424 <__lshift>
 8008820:	0006      	movs	r6, r0
 8008822:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008824:	2b00      	cmp	r3, #0
 8008826:	d026      	beq.n	8008876 <_dtoa_r+0x972>
 8008828:	0031      	movs	r1, r6
 800882a:	9805      	ldr	r0, [sp, #20]
 800882c:	f000 fe68 	bl	8009500 <__mcmp>
 8008830:	2800      	cmp	r0, #0
 8008832:	da20      	bge.n	8008876 <_dtoa_r+0x972>
 8008834:	9b02      	ldr	r3, [sp, #8]
 8008836:	220a      	movs	r2, #10
 8008838:	3b01      	subs	r3, #1
 800883a:	9302      	str	r3, [sp, #8]
 800883c:	0038      	movs	r0, r7
 800883e:	2300      	movs	r3, #0
 8008840:	9905      	ldr	r1, [sp, #20]
 8008842:	f000 fc41 	bl	80090c8 <__multadd>
 8008846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008848:	9005      	str	r0, [sp, #20]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d100      	bne.n	8008850 <_dtoa_r+0x94c>
 800884e:	e166      	b.n	8008b1e <_dtoa_r+0xc1a>
 8008850:	2300      	movs	r3, #0
 8008852:	0029      	movs	r1, r5
 8008854:	220a      	movs	r2, #10
 8008856:	0038      	movs	r0, r7
 8008858:	f000 fc36 	bl	80090c8 <__multadd>
 800885c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800885e:	0005      	movs	r5, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	dc47      	bgt.n	80088f4 <_dtoa_r+0x9f0>
 8008864:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008866:	2b02      	cmp	r3, #2
 8008868:	dc0d      	bgt.n	8008886 <_dtoa_r+0x982>
 800886a:	e043      	b.n	80088f4 <_dtoa_r+0x9f0>
 800886c:	2a04      	cmp	r2, #4
 800886e:	d0c6      	beq.n	80087fe <_dtoa_r+0x8fa>
 8008870:	0013      	movs	r3, r2
 8008872:	331c      	adds	r3, #28
 8008874:	e7bc      	b.n	80087f0 <_dtoa_r+0x8ec>
 8008876:	9b07      	ldr	r3, [sp, #28]
 8008878:	2b00      	cmp	r3, #0
 800887a:	dc35      	bgt.n	80088e8 <_dtoa_r+0x9e4>
 800887c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800887e:	2b02      	cmp	r3, #2
 8008880:	dd32      	ble.n	80088e8 <_dtoa_r+0x9e4>
 8008882:	9b07      	ldr	r3, [sp, #28]
 8008884:	930c      	str	r3, [sp, #48]	; 0x30
 8008886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10c      	bne.n	80088a6 <_dtoa_r+0x9a2>
 800888c:	0031      	movs	r1, r6
 800888e:	2205      	movs	r2, #5
 8008890:	0038      	movs	r0, r7
 8008892:	f000 fc19 	bl	80090c8 <__multadd>
 8008896:	0006      	movs	r6, r0
 8008898:	0001      	movs	r1, r0
 800889a:	9805      	ldr	r0, [sp, #20]
 800889c:	f000 fe30 	bl	8009500 <__mcmp>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	dd00      	ble.n	80088a6 <_dtoa_r+0x9a2>
 80088a4:	e5a5      	b.n	80083f2 <_dtoa_r+0x4ee>
 80088a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088a8:	43db      	mvns	r3, r3
 80088aa:	9302      	str	r3, [sp, #8]
 80088ac:	9b06      	ldr	r3, [sp, #24]
 80088ae:	9308      	str	r3, [sp, #32]
 80088b0:	2400      	movs	r4, #0
 80088b2:	0031      	movs	r1, r6
 80088b4:	0038      	movs	r0, r7
 80088b6:	f000 fbe3 	bl	8009080 <_Bfree>
 80088ba:	2d00      	cmp	r5, #0
 80088bc:	d100      	bne.n	80088c0 <_dtoa_r+0x9bc>
 80088be:	e6b7      	b.n	8008630 <_dtoa_r+0x72c>
 80088c0:	2c00      	cmp	r4, #0
 80088c2:	d005      	beq.n	80088d0 <_dtoa_r+0x9cc>
 80088c4:	42ac      	cmp	r4, r5
 80088c6:	d003      	beq.n	80088d0 <_dtoa_r+0x9cc>
 80088c8:	0021      	movs	r1, r4
 80088ca:	0038      	movs	r0, r7
 80088cc:	f000 fbd8 	bl	8009080 <_Bfree>
 80088d0:	0029      	movs	r1, r5
 80088d2:	0038      	movs	r0, r7
 80088d4:	f000 fbd4 	bl	8009080 <_Bfree>
 80088d8:	e6aa      	b.n	8008630 <_dtoa_r+0x72c>
 80088da:	2600      	movs	r6, #0
 80088dc:	0035      	movs	r5, r6
 80088de:	e7e2      	b.n	80088a6 <_dtoa_r+0x9a2>
 80088e0:	9602      	str	r6, [sp, #8]
 80088e2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80088e4:	0035      	movs	r5, r6
 80088e6:	e584      	b.n	80083f2 <_dtoa_r+0x4ee>
 80088e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d100      	bne.n	80088f0 <_dtoa_r+0x9ec>
 80088ee:	e0ce      	b.n	8008a8e <_dtoa_r+0xb8a>
 80088f0:	9b07      	ldr	r3, [sp, #28]
 80088f2:	930c      	str	r3, [sp, #48]	; 0x30
 80088f4:	2c00      	cmp	r4, #0
 80088f6:	dd05      	ble.n	8008904 <_dtoa_r+0xa00>
 80088f8:	0029      	movs	r1, r5
 80088fa:	0022      	movs	r2, r4
 80088fc:	0038      	movs	r0, r7
 80088fe:	f000 fd91 	bl	8009424 <__lshift>
 8008902:	0005      	movs	r5, r0
 8008904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008906:	0028      	movs	r0, r5
 8008908:	2b00      	cmp	r3, #0
 800890a:	d022      	beq.n	8008952 <_dtoa_r+0xa4e>
 800890c:	0038      	movs	r0, r7
 800890e:	6869      	ldr	r1, [r5, #4]
 8008910:	f000 fb72 	bl	8008ff8 <_Balloc>
 8008914:	1e04      	subs	r4, r0, #0
 8008916:	d10f      	bne.n	8008938 <_dtoa_r+0xa34>
 8008918:	0002      	movs	r2, r0
 800891a:	4b05      	ldr	r3, [pc, #20]	; (8008930 <_dtoa_r+0xa2c>)
 800891c:	4905      	ldr	r1, [pc, #20]	; (8008934 <_dtoa_r+0xa30>)
 800891e:	f7ff fb06 	bl	8007f2e <_dtoa_r+0x2a>
 8008922:	46c0      	nop			; (mov r8, r8)
 8008924:	40240000 	.word	0x40240000
 8008928:	00000433 	.word	0x00000433
 800892c:	7ff00000 	.word	0x7ff00000
 8008930:	0800a863 	.word	0x0800a863
 8008934:	000002ea 	.word	0x000002ea
 8008938:	0029      	movs	r1, r5
 800893a:	692b      	ldr	r3, [r5, #16]
 800893c:	310c      	adds	r1, #12
 800893e:	1c9a      	adds	r2, r3, #2
 8008940:	0092      	lsls	r2, r2, #2
 8008942:	300c      	adds	r0, #12
 8008944:	f000 fb4f 	bl	8008fe6 <memcpy>
 8008948:	2201      	movs	r2, #1
 800894a:	0021      	movs	r1, r4
 800894c:	0038      	movs	r0, r7
 800894e:	f000 fd69 	bl	8009424 <__lshift>
 8008952:	9b06      	ldr	r3, [sp, #24]
 8008954:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008956:	930a      	str	r3, [sp, #40]	; 0x28
 8008958:	3b01      	subs	r3, #1
 800895a:	189b      	adds	r3, r3, r2
 800895c:	2201      	movs	r2, #1
 800895e:	002c      	movs	r4, r5
 8008960:	0005      	movs	r5, r0
 8008962:	9314      	str	r3, [sp, #80]	; 0x50
 8008964:	9b08      	ldr	r3, [sp, #32]
 8008966:	4013      	ands	r3, r2
 8008968:	930f      	str	r3, [sp, #60]	; 0x3c
 800896a:	0031      	movs	r1, r6
 800896c:	9805      	ldr	r0, [sp, #20]
 800896e:	f7ff fa3d 	bl	8007dec <quorem>
 8008972:	0003      	movs	r3, r0
 8008974:	0021      	movs	r1, r4
 8008976:	3330      	adds	r3, #48	; 0x30
 8008978:	900d      	str	r0, [sp, #52]	; 0x34
 800897a:	9805      	ldr	r0, [sp, #20]
 800897c:	9307      	str	r3, [sp, #28]
 800897e:	f000 fdbf 	bl	8009500 <__mcmp>
 8008982:	002a      	movs	r2, r5
 8008984:	900e      	str	r0, [sp, #56]	; 0x38
 8008986:	0031      	movs	r1, r6
 8008988:	0038      	movs	r0, r7
 800898a:	f000 fdd5 	bl	8009538 <__mdiff>
 800898e:	68c3      	ldr	r3, [r0, #12]
 8008990:	9008      	str	r0, [sp, #32]
 8008992:	9310      	str	r3, [sp, #64]	; 0x40
 8008994:	2301      	movs	r3, #1
 8008996:	930c      	str	r3, [sp, #48]	; 0x30
 8008998:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	d104      	bne.n	80089a8 <_dtoa_r+0xaa4>
 800899e:	0001      	movs	r1, r0
 80089a0:	9805      	ldr	r0, [sp, #20]
 80089a2:	f000 fdad 	bl	8009500 <__mcmp>
 80089a6:	900c      	str	r0, [sp, #48]	; 0x30
 80089a8:	0038      	movs	r0, r7
 80089aa:	9908      	ldr	r1, [sp, #32]
 80089ac:	f000 fb68 	bl	8009080 <_Bfree>
 80089b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089b4:	3301      	adds	r3, #1
 80089b6:	9308      	str	r3, [sp, #32]
 80089b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089ba:	4313      	orrs	r3, r2
 80089bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089be:	4313      	orrs	r3, r2
 80089c0:	d10c      	bne.n	80089dc <_dtoa_r+0xad8>
 80089c2:	9b07      	ldr	r3, [sp, #28]
 80089c4:	2b39      	cmp	r3, #57	; 0x39
 80089c6:	d026      	beq.n	8008a16 <_dtoa_r+0xb12>
 80089c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	dd02      	ble.n	80089d4 <_dtoa_r+0xad0>
 80089ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089d0:	3331      	adds	r3, #49	; 0x31
 80089d2:	9307      	str	r3, [sp, #28]
 80089d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d6:	9a07      	ldr	r2, [sp, #28]
 80089d8:	701a      	strb	r2, [r3, #0]
 80089da:	e76a      	b.n	80088b2 <_dtoa_r+0x9ae>
 80089dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089de:	2b00      	cmp	r3, #0
 80089e0:	db04      	blt.n	80089ec <_dtoa_r+0xae8>
 80089e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80089e4:	4313      	orrs	r3, r2
 80089e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089e8:	4313      	orrs	r3, r2
 80089ea:	d11f      	bne.n	8008a2c <_dtoa_r+0xb28>
 80089ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	ddf0      	ble.n	80089d4 <_dtoa_r+0xad0>
 80089f2:	9905      	ldr	r1, [sp, #20]
 80089f4:	2201      	movs	r2, #1
 80089f6:	0038      	movs	r0, r7
 80089f8:	f000 fd14 	bl	8009424 <__lshift>
 80089fc:	0031      	movs	r1, r6
 80089fe:	9005      	str	r0, [sp, #20]
 8008a00:	f000 fd7e 	bl	8009500 <__mcmp>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	dc03      	bgt.n	8008a10 <_dtoa_r+0xb0c>
 8008a08:	d1e4      	bne.n	80089d4 <_dtoa_r+0xad0>
 8008a0a:	9b07      	ldr	r3, [sp, #28]
 8008a0c:	07db      	lsls	r3, r3, #31
 8008a0e:	d5e1      	bpl.n	80089d4 <_dtoa_r+0xad0>
 8008a10:	9b07      	ldr	r3, [sp, #28]
 8008a12:	2b39      	cmp	r3, #57	; 0x39
 8008a14:	d1db      	bne.n	80089ce <_dtoa_r+0xaca>
 8008a16:	2339      	movs	r3, #57	; 0x39
 8008a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a1a:	7013      	strb	r3, [r2, #0]
 8008a1c:	9b08      	ldr	r3, [sp, #32]
 8008a1e:	9308      	str	r3, [sp, #32]
 8008a20:	3b01      	subs	r3, #1
 8008a22:	781a      	ldrb	r2, [r3, #0]
 8008a24:	2a39      	cmp	r2, #57	; 0x39
 8008a26:	d068      	beq.n	8008afa <_dtoa_r+0xbf6>
 8008a28:	3201      	adds	r2, #1
 8008a2a:	e7d5      	b.n	80089d8 <_dtoa_r+0xad4>
 8008a2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	dd07      	ble.n	8008a42 <_dtoa_r+0xb3e>
 8008a32:	9b07      	ldr	r3, [sp, #28]
 8008a34:	2b39      	cmp	r3, #57	; 0x39
 8008a36:	d0ee      	beq.n	8008a16 <_dtoa_r+0xb12>
 8008a38:	9b07      	ldr	r3, [sp, #28]
 8008a3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	7013      	strb	r3, [r2, #0]
 8008a40:	e737      	b.n	80088b2 <_dtoa_r+0x9ae>
 8008a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a44:	9a07      	ldr	r2, [sp, #28]
 8008a46:	701a      	strb	r2, [r3, #0]
 8008a48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d03e      	beq.n	8008ace <_dtoa_r+0xbca>
 8008a50:	2300      	movs	r3, #0
 8008a52:	220a      	movs	r2, #10
 8008a54:	9905      	ldr	r1, [sp, #20]
 8008a56:	0038      	movs	r0, r7
 8008a58:	f000 fb36 	bl	80090c8 <__multadd>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9005      	str	r0, [sp, #20]
 8008a60:	220a      	movs	r2, #10
 8008a62:	0021      	movs	r1, r4
 8008a64:	0038      	movs	r0, r7
 8008a66:	42ac      	cmp	r4, r5
 8008a68:	d106      	bne.n	8008a78 <_dtoa_r+0xb74>
 8008a6a:	f000 fb2d 	bl	80090c8 <__multadd>
 8008a6e:	0004      	movs	r4, r0
 8008a70:	0005      	movs	r5, r0
 8008a72:	9b08      	ldr	r3, [sp, #32]
 8008a74:	930a      	str	r3, [sp, #40]	; 0x28
 8008a76:	e778      	b.n	800896a <_dtoa_r+0xa66>
 8008a78:	f000 fb26 	bl	80090c8 <__multadd>
 8008a7c:	0029      	movs	r1, r5
 8008a7e:	0004      	movs	r4, r0
 8008a80:	2300      	movs	r3, #0
 8008a82:	220a      	movs	r2, #10
 8008a84:	0038      	movs	r0, r7
 8008a86:	f000 fb1f 	bl	80090c8 <__multadd>
 8008a8a:	0005      	movs	r5, r0
 8008a8c:	e7f1      	b.n	8008a72 <_dtoa_r+0xb6e>
 8008a8e:	9b07      	ldr	r3, [sp, #28]
 8008a90:	930c      	str	r3, [sp, #48]	; 0x30
 8008a92:	2400      	movs	r4, #0
 8008a94:	0031      	movs	r1, r6
 8008a96:	9805      	ldr	r0, [sp, #20]
 8008a98:	f7ff f9a8 	bl	8007dec <quorem>
 8008a9c:	9b06      	ldr	r3, [sp, #24]
 8008a9e:	3030      	adds	r0, #48	; 0x30
 8008aa0:	5518      	strb	r0, [r3, r4]
 8008aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aa4:	3401      	adds	r4, #1
 8008aa6:	9007      	str	r0, [sp, #28]
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	dd07      	ble.n	8008abc <_dtoa_r+0xbb8>
 8008aac:	2300      	movs	r3, #0
 8008aae:	220a      	movs	r2, #10
 8008ab0:	0038      	movs	r0, r7
 8008ab2:	9905      	ldr	r1, [sp, #20]
 8008ab4:	f000 fb08 	bl	80090c8 <__multadd>
 8008ab8:	9005      	str	r0, [sp, #20]
 8008aba:	e7eb      	b.n	8008a94 <_dtoa_r+0xb90>
 8008abc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008abe:	2001      	movs	r0, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	dd00      	ble.n	8008ac6 <_dtoa_r+0xbc2>
 8008ac4:	0018      	movs	r0, r3
 8008ac6:	2400      	movs	r4, #0
 8008ac8:	9b06      	ldr	r3, [sp, #24]
 8008aca:	181b      	adds	r3, r3, r0
 8008acc:	9308      	str	r3, [sp, #32]
 8008ace:	9905      	ldr	r1, [sp, #20]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	0038      	movs	r0, r7
 8008ad4:	f000 fca6 	bl	8009424 <__lshift>
 8008ad8:	0031      	movs	r1, r6
 8008ada:	9005      	str	r0, [sp, #20]
 8008adc:	f000 fd10 	bl	8009500 <__mcmp>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	dc9b      	bgt.n	8008a1c <_dtoa_r+0xb18>
 8008ae4:	d102      	bne.n	8008aec <_dtoa_r+0xbe8>
 8008ae6:	9b07      	ldr	r3, [sp, #28]
 8008ae8:	07db      	lsls	r3, r3, #31
 8008aea:	d497      	bmi.n	8008a1c <_dtoa_r+0xb18>
 8008aec:	9b08      	ldr	r3, [sp, #32]
 8008aee:	9308      	str	r3, [sp, #32]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	781a      	ldrb	r2, [r3, #0]
 8008af4:	2a30      	cmp	r2, #48	; 0x30
 8008af6:	d0fa      	beq.n	8008aee <_dtoa_r+0xbea>
 8008af8:	e6db      	b.n	80088b2 <_dtoa_r+0x9ae>
 8008afa:	9a06      	ldr	r2, [sp, #24]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d18e      	bne.n	8008a1e <_dtoa_r+0xb1a>
 8008b00:	9b02      	ldr	r3, [sp, #8]
 8008b02:	3301      	adds	r3, #1
 8008b04:	9302      	str	r3, [sp, #8]
 8008b06:	2331      	movs	r3, #49	; 0x31
 8008b08:	e799      	b.n	8008a3e <_dtoa_r+0xb3a>
 8008b0a:	4b09      	ldr	r3, [pc, #36]	; (8008b30 <_dtoa_r+0xc2c>)
 8008b0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008b0e:	9306      	str	r3, [sp, #24]
 8008b10:	4b08      	ldr	r3, [pc, #32]	; (8008b34 <_dtoa_r+0xc30>)
 8008b12:	2a00      	cmp	r2, #0
 8008b14:	d001      	beq.n	8008b1a <_dtoa_r+0xc16>
 8008b16:	f7ff fa3f 	bl	8007f98 <_dtoa_r+0x94>
 8008b1a:	f7ff fa3f 	bl	8007f9c <_dtoa_r+0x98>
 8008b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	dcb6      	bgt.n	8008a92 <_dtoa_r+0xb8e>
 8008b24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	dd00      	ble.n	8008b2c <_dtoa_r+0xc28>
 8008b2a:	e6ac      	b.n	8008886 <_dtoa_r+0x982>
 8008b2c:	e7b1      	b.n	8008a92 <_dtoa_r+0xb8e>
 8008b2e:	46c0      	nop			; (mov r8, r8)
 8008b30:	0800a7e4 	.word	0x0800a7e4
 8008b34:	0800a7ec 	.word	0x0800a7ec

08008b38 <__sflush_r>:
 8008b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b3a:	898b      	ldrh	r3, [r1, #12]
 8008b3c:	0005      	movs	r5, r0
 8008b3e:	000c      	movs	r4, r1
 8008b40:	071a      	lsls	r2, r3, #28
 8008b42:	d45f      	bmi.n	8008c04 <__sflush_r+0xcc>
 8008b44:	684a      	ldr	r2, [r1, #4]
 8008b46:	2a00      	cmp	r2, #0
 8008b48:	dc04      	bgt.n	8008b54 <__sflush_r+0x1c>
 8008b4a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008b4c:	2a00      	cmp	r2, #0
 8008b4e:	dc01      	bgt.n	8008b54 <__sflush_r+0x1c>
 8008b50:	2000      	movs	r0, #0
 8008b52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b54:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008b56:	2f00      	cmp	r7, #0
 8008b58:	d0fa      	beq.n	8008b50 <__sflush_r+0x18>
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2180      	movs	r1, #128	; 0x80
 8008b5e:	682e      	ldr	r6, [r5, #0]
 8008b60:	602a      	str	r2, [r5, #0]
 8008b62:	001a      	movs	r2, r3
 8008b64:	0149      	lsls	r1, r1, #5
 8008b66:	400a      	ands	r2, r1
 8008b68:	420b      	tst	r3, r1
 8008b6a:	d034      	beq.n	8008bd6 <__sflush_r+0x9e>
 8008b6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	075b      	lsls	r3, r3, #29
 8008b72:	d506      	bpl.n	8008b82 <__sflush_r+0x4a>
 8008b74:	6863      	ldr	r3, [r4, #4]
 8008b76:	1ac0      	subs	r0, r0, r3
 8008b78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <__sflush_r+0x4a>
 8008b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b80:	1ac0      	subs	r0, r0, r3
 8008b82:	0002      	movs	r2, r0
 8008b84:	6a21      	ldr	r1, [r4, #32]
 8008b86:	2300      	movs	r3, #0
 8008b88:	0028      	movs	r0, r5
 8008b8a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008b8c:	47b8      	blx	r7
 8008b8e:	89a1      	ldrh	r1, [r4, #12]
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	d106      	bne.n	8008ba2 <__sflush_r+0x6a>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	2b1d      	cmp	r3, #29
 8008b98:	d831      	bhi.n	8008bfe <__sflush_r+0xc6>
 8008b9a:	4a2c      	ldr	r2, [pc, #176]	; (8008c4c <__sflush_r+0x114>)
 8008b9c:	40da      	lsrs	r2, r3
 8008b9e:	07d3      	lsls	r3, r2, #31
 8008ba0:	d52d      	bpl.n	8008bfe <__sflush_r+0xc6>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	6063      	str	r3, [r4, #4]
 8008ba6:	6923      	ldr	r3, [r4, #16]
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	04cb      	lsls	r3, r1, #19
 8008bac:	d505      	bpl.n	8008bba <__sflush_r+0x82>
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	d102      	bne.n	8008bb8 <__sflush_r+0x80>
 8008bb2:	682b      	ldr	r3, [r5, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d100      	bne.n	8008bba <__sflush_r+0x82>
 8008bb8:	6560      	str	r0, [r4, #84]	; 0x54
 8008bba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bbc:	602e      	str	r6, [r5, #0]
 8008bbe:	2900      	cmp	r1, #0
 8008bc0:	d0c6      	beq.n	8008b50 <__sflush_r+0x18>
 8008bc2:	0023      	movs	r3, r4
 8008bc4:	3344      	adds	r3, #68	; 0x44
 8008bc6:	4299      	cmp	r1, r3
 8008bc8:	d002      	beq.n	8008bd0 <__sflush_r+0x98>
 8008bca:	0028      	movs	r0, r5
 8008bcc:	f000 fddc 	bl	8009788 <_free_r>
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	6360      	str	r0, [r4, #52]	; 0x34
 8008bd4:	e7bd      	b.n	8008b52 <__sflush_r+0x1a>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	0028      	movs	r0, r5
 8008bda:	6a21      	ldr	r1, [r4, #32]
 8008bdc:	47b8      	blx	r7
 8008bde:	1c43      	adds	r3, r0, #1
 8008be0:	d1c5      	bne.n	8008b6e <__sflush_r+0x36>
 8008be2:	682b      	ldr	r3, [r5, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d0c2      	beq.n	8008b6e <__sflush_r+0x36>
 8008be8:	2b1d      	cmp	r3, #29
 8008bea:	d001      	beq.n	8008bf0 <__sflush_r+0xb8>
 8008bec:	2b16      	cmp	r3, #22
 8008bee:	d101      	bne.n	8008bf4 <__sflush_r+0xbc>
 8008bf0:	602e      	str	r6, [r5, #0]
 8008bf2:	e7ad      	b.n	8008b50 <__sflush_r+0x18>
 8008bf4:	2340      	movs	r3, #64	; 0x40
 8008bf6:	89a2      	ldrh	r2, [r4, #12]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	81a3      	strh	r3, [r4, #12]
 8008bfc:	e7a9      	b.n	8008b52 <__sflush_r+0x1a>
 8008bfe:	2340      	movs	r3, #64	; 0x40
 8008c00:	430b      	orrs	r3, r1
 8008c02:	e7fa      	b.n	8008bfa <__sflush_r+0xc2>
 8008c04:	690f      	ldr	r7, [r1, #16]
 8008c06:	2f00      	cmp	r7, #0
 8008c08:	d0a2      	beq.n	8008b50 <__sflush_r+0x18>
 8008c0a:	680a      	ldr	r2, [r1, #0]
 8008c0c:	600f      	str	r7, [r1, #0]
 8008c0e:	1bd2      	subs	r2, r2, r7
 8008c10:	9201      	str	r2, [sp, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	079b      	lsls	r3, r3, #30
 8008c16:	d100      	bne.n	8008c1a <__sflush_r+0xe2>
 8008c18:	694a      	ldr	r2, [r1, #20]
 8008c1a:	60a2      	str	r2, [r4, #8]
 8008c1c:	9b01      	ldr	r3, [sp, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	dc00      	bgt.n	8008c24 <__sflush_r+0xec>
 8008c22:	e795      	b.n	8008b50 <__sflush_r+0x18>
 8008c24:	003a      	movs	r2, r7
 8008c26:	0028      	movs	r0, r5
 8008c28:	9b01      	ldr	r3, [sp, #4]
 8008c2a:	6a21      	ldr	r1, [r4, #32]
 8008c2c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c2e:	47b0      	blx	r6
 8008c30:	2800      	cmp	r0, #0
 8008c32:	dc06      	bgt.n	8008c42 <__sflush_r+0x10a>
 8008c34:	2340      	movs	r3, #64	; 0x40
 8008c36:	2001      	movs	r0, #1
 8008c38:	89a2      	ldrh	r2, [r4, #12]
 8008c3a:	4240      	negs	r0, r0
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	81a3      	strh	r3, [r4, #12]
 8008c40:	e787      	b.n	8008b52 <__sflush_r+0x1a>
 8008c42:	9b01      	ldr	r3, [sp, #4]
 8008c44:	183f      	adds	r7, r7, r0
 8008c46:	1a1b      	subs	r3, r3, r0
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	e7e7      	b.n	8008c1c <__sflush_r+0xe4>
 8008c4c:	20400001 	.word	0x20400001

08008c50 <_fflush_r>:
 8008c50:	690b      	ldr	r3, [r1, #16]
 8008c52:	b570      	push	{r4, r5, r6, lr}
 8008c54:	0005      	movs	r5, r0
 8008c56:	000c      	movs	r4, r1
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d102      	bne.n	8008c62 <_fflush_r+0x12>
 8008c5c:	2500      	movs	r5, #0
 8008c5e:	0028      	movs	r0, r5
 8008c60:	bd70      	pop	{r4, r5, r6, pc}
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d004      	beq.n	8008c70 <_fflush_r+0x20>
 8008c66:	6983      	ldr	r3, [r0, #24]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <_fflush_r+0x20>
 8008c6c:	f000 f892 	bl	8008d94 <__sinit>
 8008c70:	4b14      	ldr	r3, [pc, #80]	; (8008cc4 <_fflush_r+0x74>)
 8008c72:	429c      	cmp	r4, r3
 8008c74:	d11b      	bne.n	8008cae <_fflush_r+0x5e>
 8008c76:	686c      	ldr	r4, [r5, #4]
 8008c78:	220c      	movs	r2, #12
 8008c7a:	5ea3      	ldrsh	r3, [r4, r2]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d0ed      	beq.n	8008c5c <_fflush_r+0xc>
 8008c80:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c82:	07d2      	lsls	r2, r2, #31
 8008c84:	d404      	bmi.n	8008c90 <_fflush_r+0x40>
 8008c86:	059b      	lsls	r3, r3, #22
 8008c88:	d402      	bmi.n	8008c90 <_fflush_r+0x40>
 8008c8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c8c:	f000 f927 	bl	8008ede <__retarget_lock_acquire_recursive>
 8008c90:	0028      	movs	r0, r5
 8008c92:	0021      	movs	r1, r4
 8008c94:	f7ff ff50 	bl	8008b38 <__sflush_r>
 8008c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c9a:	0005      	movs	r5, r0
 8008c9c:	07db      	lsls	r3, r3, #31
 8008c9e:	d4de      	bmi.n	8008c5e <_fflush_r+0xe>
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	059b      	lsls	r3, r3, #22
 8008ca4:	d4db      	bmi.n	8008c5e <_fflush_r+0xe>
 8008ca6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ca8:	f000 f91a 	bl	8008ee0 <__retarget_lock_release_recursive>
 8008cac:	e7d7      	b.n	8008c5e <_fflush_r+0xe>
 8008cae:	4b06      	ldr	r3, [pc, #24]	; (8008cc8 <_fflush_r+0x78>)
 8008cb0:	429c      	cmp	r4, r3
 8008cb2:	d101      	bne.n	8008cb8 <_fflush_r+0x68>
 8008cb4:	68ac      	ldr	r4, [r5, #8]
 8008cb6:	e7df      	b.n	8008c78 <_fflush_r+0x28>
 8008cb8:	4b04      	ldr	r3, [pc, #16]	; (8008ccc <_fflush_r+0x7c>)
 8008cba:	429c      	cmp	r4, r3
 8008cbc:	d1dc      	bne.n	8008c78 <_fflush_r+0x28>
 8008cbe:	68ec      	ldr	r4, [r5, #12]
 8008cc0:	e7da      	b.n	8008c78 <_fflush_r+0x28>
 8008cc2:	46c0      	nop			; (mov r8, r8)
 8008cc4:	0800a894 	.word	0x0800a894
 8008cc8:	0800a8b4 	.word	0x0800a8b4
 8008ccc:	0800a874 	.word	0x0800a874

08008cd0 <std>:
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	b510      	push	{r4, lr}
 8008cd4:	0004      	movs	r4, r0
 8008cd6:	6003      	str	r3, [r0, #0]
 8008cd8:	6043      	str	r3, [r0, #4]
 8008cda:	6083      	str	r3, [r0, #8]
 8008cdc:	8181      	strh	r1, [r0, #12]
 8008cde:	6643      	str	r3, [r0, #100]	; 0x64
 8008ce0:	0019      	movs	r1, r3
 8008ce2:	81c2      	strh	r2, [r0, #14]
 8008ce4:	6103      	str	r3, [r0, #16]
 8008ce6:	6143      	str	r3, [r0, #20]
 8008ce8:	6183      	str	r3, [r0, #24]
 8008cea:	2208      	movs	r2, #8
 8008cec:	305c      	adds	r0, #92	; 0x5c
 8008cee:	f7fe faa3 	bl	8007238 <memset>
 8008cf2:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <std+0x38>)
 8008cf4:	6224      	str	r4, [r4, #32]
 8008cf6:	6263      	str	r3, [r4, #36]	; 0x24
 8008cf8:	4b04      	ldr	r3, [pc, #16]	; (8008d0c <std+0x3c>)
 8008cfa:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cfc:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <std+0x40>)
 8008cfe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d00:	4b04      	ldr	r3, [pc, #16]	; (8008d14 <std+0x44>)
 8008d02:	6323      	str	r3, [r4, #48]	; 0x30
 8008d04:	bd10      	pop	{r4, pc}
 8008d06:	46c0      	nop			; (mov r8, r8)
 8008d08:	08009c35 	.word	0x08009c35
 8008d0c:	08009c5d 	.word	0x08009c5d
 8008d10:	08009c95 	.word	0x08009c95
 8008d14:	08009cc1 	.word	0x08009cc1

08008d18 <_cleanup_r>:
 8008d18:	b510      	push	{r4, lr}
 8008d1a:	4902      	ldr	r1, [pc, #8]	; (8008d24 <_cleanup_r+0xc>)
 8008d1c:	f000 f8ba 	bl	8008e94 <_fwalk_reent>
 8008d20:	bd10      	pop	{r4, pc}
 8008d22:	46c0      	nop			; (mov r8, r8)
 8008d24:	08008c51 	.word	0x08008c51

08008d28 <__sfmoreglue>:
 8008d28:	b570      	push	{r4, r5, r6, lr}
 8008d2a:	2568      	movs	r5, #104	; 0x68
 8008d2c:	1e4a      	subs	r2, r1, #1
 8008d2e:	4355      	muls	r5, r2
 8008d30:	000e      	movs	r6, r1
 8008d32:	0029      	movs	r1, r5
 8008d34:	3174      	adds	r1, #116	; 0x74
 8008d36:	f000 fd93 	bl	8009860 <_malloc_r>
 8008d3a:	1e04      	subs	r4, r0, #0
 8008d3c:	d008      	beq.n	8008d50 <__sfmoreglue+0x28>
 8008d3e:	2100      	movs	r1, #0
 8008d40:	002a      	movs	r2, r5
 8008d42:	6001      	str	r1, [r0, #0]
 8008d44:	6046      	str	r6, [r0, #4]
 8008d46:	300c      	adds	r0, #12
 8008d48:	60a0      	str	r0, [r4, #8]
 8008d4a:	3268      	adds	r2, #104	; 0x68
 8008d4c:	f7fe fa74 	bl	8007238 <memset>
 8008d50:	0020      	movs	r0, r4
 8008d52:	bd70      	pop	{r4, r5, r6, pc}

08008d54 <__sfp_lock_acquire>:
 8008d54:	b510      	push	{r4, lr}
 8008d56:	4802      	ldr	r0, [pc, #8]	; (8008d60 <__sfp_lock_acquire+0xc>)
 8008d58:	f000 f8c1 	bl	8008ede <__retarget_lock_acquire_recursive>
 8008d5c:	bd10      	pop	{r4, pc}
 8008d5e:	46c0      	nop			; (mov r8, r8)
 8008d60:	2000039d 	.word	0x2000039d

08008d64 <__sfp_lock_release>:
 8008d64:	b510      	push	{r4, lr}
 8008d66:	4802      	ldr	r0, [pc, #8]	; (8008d70 <__sfp_lock_release+0xc>)
 8008d68:	f000 f8ba 	bl	8008ee0 <__retarget_lock_release_recursive>
 8008d6c:	bd10      	pop	{r4, pc}
 8008d6e:	46c0      	nop			; (mov r8, r8)
 8008d70:	2000039d 	.word	0x2000039d

08008d74 <__sinit_lock_acquire>:
 8008d74:	b510      	push	{r4, lr}
 8008d76:	4802      	ldr	r0, [pc, #8]	; (8008d80 <__sinit_lock_acquire+0xc>)
 8008d78:	f000 f8b1 	bl	8008ede <__retarget_lock_acquire_recursive>
 8008d7c:	bd10      	pop	{r4, pc}
 8008d7e:	46c0      	nop			; (mov r8, r8)
 8008d80:	2000039e 	.word	0x2000039e

08008d84 <__sinit_lock_release>:
 8008d84:	b510      	push	{r4, lr}
 8008d86:	4802      	ldr	r0, [pc, #8]	; (8008d90 <__sinit_lock_release+0xc>)
 8008d88:	f000 f8aa 	bl	8008ee0 <__retarget_lock_release_recursive>
 8008d8c:	bd10      	pop	{r4, pc}
 8008d8e:	46c0      	nop			; (mov r8, r8)
 8008d90:	2000039e 	.word	0x2000039e

08008d94 <__sinit>:
 8008d94:	b513      	push	{r0, r1, r4, lr}
 8008d96:	0004      	movs	r4, r0
 8008d98:	f7ff ffec 	bl	8008d74 <__sinit_lock_acquire>
 8008d9c:	69a3      	ldr	r3, [r4, #24]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d002      	beq.n	8008da8 <__sinit+0x14>
 8008da2:	f7ff ffef 	bl	8008d84 <__sinit_lock_release>
 8008da6:	bd13      	pop	{r0, r1, r4, pc}
 8008da8:	64a3      	str	r3, [r4, #72]	; 0x48
 8008daa:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008dac:	6523      	str	r3, [r4, #80]	; 0x50
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <__sinit+0x68>)
 8008db0:	4a13      	ldr	r2, [pc, #76]	; (8008e00 <__sinit+0x6c>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008db6:	9301      	str	r3, [sp, #4]
 8008db8:	42a3      	cmp	r3, r4
 8008dba:	d101      	bne.n	8008dc0 <__sinit+0x2c>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	61a3      	str	r3, [r4, #24]
 8008dc0:	0020      	movs	r0, r4
 8008dc2:	f000 f81f 	bl	8008e04 <__sfp>
 8008dc6:	6060      	str	r0, [r4, #4]
 8008dc8:	0020      	movs	r0, r4
 8008dca:	f000 f81b 	bl	8008e04 <__sfp>
 8008dce:	60a0      	str	r0, [r4, #8]
 8008dd0:	0020      	movs	r0, r4
 8008dd2:	f000 f817 	bl	8008e04 <__sfp>
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2104      	movs	r1, #4
 8008dda:	60e0      	str	r0, [r4, #12]
 8008ddc:	6860      	ldr	r0, [r4, #4]
 8008dde:	f7ff ff77 	bl	8008cd0 <std>
 8008de2:	2201      	movs	r2, #1
 8008de4:	2109      	movs	r1, #9
 8008de6:	68a0      	ldr	r0, [r4, #8]
 8008de8:	f7ff ff72 	bl	8008cd0 <std>
 8008dec:	2202      	movs	r2, #2
 8008dee:	2112      	movs	r1, #18
 8008df0:	68e0      	ldr	r0, [r4, #12]
 8008df2:	f7ff ff6d 	bl	8008cd0 <std>
 8008df6:	2301      	movs	r3, #1
 8008df8:	61a3      	str	r3, [r4, #24]
 8008dfa:	e7d2      	b.n	8008da2 <__sinit+0xe>
 8008dfc:	0800a7ac 	.word	0x0800a7ac
 8008e00:	08008d19 	.word	0x08008d19

08008e04 <__sfp>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	0007      	movs	r7, r0
 8008e08:	f7ff ffa4 	bl	8008d54 <__sfp_lock_acquire>
 8008e0c:	4b1f      	ldr	r3, [pc, #124]	; (8008e8c <__sfp+0x88>)
 8008e0e:	681e      	ldr	r6, [r3, #0]
 8008e10:	69b3      	ldr	r3, [r6, #24]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d102      	bne.n	8008e1c <__sfp+0x18>
 8008e16:	0030      	movs	r0, r6
 8008e18:	f7ff ffbc 	bl	8008d94 <__sinit>
 8008e1c:	3648      	adds	r6, #72	; 0x48
 8008e1e:	68b4      	ldr	r4, [r6, #8]
 8008e20:	6873      	ldr	r3, [r6, #4]
 8008e22:	3b01      	subs	r3, #1
 8008e24:	d504      	bpl.n	8008e30 <__sfp+0x2c>
 8008e26:	6833      	ldr	r3, [r6, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d022      	beq.n	8008e72 <__sfp+0x6e>
 8008e2c:	6836      	ldr	r6, [r6, #0]
 8008e2e:	e7f6      	b.n	8008e1e <__sfp+0x1a>
 8008e30:	220c      	movs	r2, #12
 8008e32:	5ea5      	ldrsh	r5, [r4, r2]
 8008e34:	2d00      	cmp	r5, #0
 8008e36:	d11a      	bne.n	8008e6e <__sfp+0x6a>
 8008e38:	0020      	movs	r0, r4
 8008e3a:	4b15      	ldr	r3, [pc, #84]	; (8008e90 <__sfp+0x8c>)
 8008e3c:	3058      	adds	r0, #88	; 0x58
 8008e3e:	60e3      	str	r3, [r4, #12]
 8008e40:	6665      	str	r5, [r4, #100]	; 0x64
 8008e42:	f000 f84b 	bl	8008edc <__retarget_lock_init_recursive>
 8008e46:	f7ff ff8d 	bl	8008d64 <__sfp_lock_release>
 8008e4a:	0020      	movs	r0, r4
 8008e4c:	2208      	movs	r2, #8
 8008e4e:	0029      	movs	r1, r5
 8008e50:	6025      	str	r5, [r4, #0]
 8008e52:	60a5      	str	r5, [r4, #8]
 8008e54:	6065      	str	r5, [r4, #4]
 8008e56:	6125      	str	r5, [r4, #16]
 8008e58:	6165      	str	r5, [r4, #20]
 8008e5a:	61a5      	str	r5, [r4, #24]
 8008e5c:	305c      	adds	r0, #92	; 0x5c
 8008e5e:	f7fe f9eb 	bl	8007238 <memset>
 8008e62:	6365      	str	r5, [r4, #52]	; 0x34
 8008e64:	63a5      	str	r5, [r4, #56]	; 0x38
 8008e66:	64a5      	str	r5, [r4, #72]	; 0x48
 8008e68:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008e6a:	0020      	movs	r0, r4
 8008e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e6e:	3468      	adds	r4, #104	; 0x68
 8008e70:	e7d7      	b.n	8008e22 <__sfp+0x1e>
 8008e72:	2104      	movs	r1, #4
 8008e74:	0038      	movs	r0, r7
 8008e76:	f7ff ff57 	bl	8008d28 <__sfmoreglue>
 8008e7a:	1e04      	subs	r4, r0, #0
 8008e7c:	6030      	str	r0, [r6, #0]
 8008e7e:	d1d5      	bne.n	8008e2c <__sfp+0x28>
 8008e80:	f7ff ff70 	bl	8008d64 <__sfp_lock_release>
 8008e84:	230c      	movs	r3, #12
 8008e86:	603b      	str	r3, [r7, #0]
 8008e88:	e7ef      	b.n	8008e6a <__sfp+0x66>
 8008e8a:	46c0      	nop			; (mov r8, r8)
 8008e8c:	0800a7ac 	.word	0x0800a7ac
 8008e90:	ffff0001 	.word	0xffff0001

08008e94 <_fwalk_reent>:
 8008e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e96:	0004      	movs	r4, r0
 8008e98:	0006      	movs	r6, r0
 8008e9a:	2700      	movs	r7, #0
 8008e9c:	9101      	str	r1, [sp, #4]
 8008e9e:	3448      	adds	r4, #72	; 0x48
 8008ea0:	6863      	ldr	r3, [r4, #4]
 8008ea2:	68a5      	ldr	r5, [r4, #8]
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	9b00      	ldr	r3, [sp, #0]
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	d504      	bpl.n	8008eb8 <_fwalk_reent+0x24>
 8008eae:	6824      	ldr	r4, [r4, #0]
 8008eb0:	2c00      	cmp	r4, #0
 8008eb2:	d1f5      	bne.n	8008ea0 <_fwalk_reent+0xc>
 8008eb4:	0038      	movs	r0, r7
 8008eb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008eb8:	89ab      	ldrh	r3, [r5, #12]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d908      	bls.n	8008ed0 <_fwalk_reent+0x3c>
 8008ebe:	220e      	movs	r2, #14
 8008ec0:	5eab      	ldrsh	r3, [r5, r2]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	d004      	beq.n	8008ed0 <_fwalk_reent+0x3c>
 8008ec6:	0029      	movs	r1, r5
 8008ec8:	0030      	movs	r0, r6
 8008eca:	9b01      	ldr	r3, [sp, #4]
 8008ecc:	4798      	blx	r3
 8008ece:	4307      	orrs	r7, r0
 8008ed0:	3568      	adds	r5, #104	; 0x68
 8008ed2:	e7e8      	b.n	8008ea6 <_fwalk_reent+0x12>

08008ed4 <_localeconv_r>:
 8008ed4:	4800      	ldr	r0, [pc, #0]	; (8008ed8 <_localeconv_r+0x4>)
 8008ed6:	4770      	bx	lr
 8008ed8:	200001e0 	.word	0x200001e0

08008edc <__retarget_lock_init_recursive>:
 8008edc:	4770      	bx	lr

08008ede <__retarget_lock_acquire_recursive>:
 8008ede:	4770      	bx	lr

08008ee0 <__retarget_lock_release_recursive>:
 8008ee0:	4770      	bx	lr
	...

08008ee4 <__swhatbuf_r>:
 8008ee4:	b570      	push	{r4, r5, r6, lr}
 8008ee6:	000e      	movs	r6, r1
 8008ee8:	001d      	movs	r5, r3
 8008eea:	230e      	movs	r3, #14
 8008eec:	5ec9      	ldrsh	r1, [r1, r3]
 8008eee:	0014      	movs	r4, r2
 8008ef0:	b096      	sub	sp, #88	; 0x58
 8008ef2:	2900      	cmp	r1, #0
 8008ef4:	da08      	bge.n	8008f08 <__swhatbuf_r+0x24>
 8008ef6:	220c      	movs	r2, #12
 8008ef8:	5eb3      	ldrsh	r3, [r6, r2]
 8008efa:	2200      	movs	r2, #0
 8008efc:	602a      	str	r2, [r5, #0]
 8008efe:	061b      	lsls	r3, r3, #24
 8008f00:	d411      	bmi.n	8008f26 <__swhatbuf_r+0x42>
 8008f02:	2380      	movs	r3, #128	; 0x80
 8008f04:	00db      	lsls	r3, r3, #3
 8008f06:	e00f      	b.n	8008f28 <__swhatbuf_r+0x44>
 8008f08:	466a      	mov	r2, sp
 8008f0a:	f000 ff33 	bl	8009d74 <_fstat_r>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	dbf1      	blt.n	8008ef6 <__swhatbuf_r+0x12>
 8008f12:	23f0      	movs	r3, #240	; 0xf0
 8008f14:	9901      	ldr	r1, [sp, #4]
 8008f16:	021b      	lsls	r3, r3, #8
 8008f18:	4019      	ands	r1, r3
 8008f1a:	4b05      	ldr	r3, [pc, #20]	; (8008f30 <__swhatbuf_r+0x4c>)
 8008f1c:	18c9      	adds	r1, r1, r3
 8008f1e:	424b      	negs	r3, r1
 8008f20:	4159      	adcs	r1, r3
 8008f22:	6029      	str	r1, [r5, #0]
 8008f24:	e7ed      	b.n	8008f02 <__swhatbuf_r+0x1e>
 8008f26:	2340      	movs	r3, #64	; 0x40
 8008f28:	2000      	movs	r0, #0
 8008f2a:	6023      	str	r3, [r4, #0]
 8008f2c:	b016      	add	sp, #88	; 0x58
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}
 8008f30:	ffffe000 	.word	0xffffe000

08008f34 <__smakebuf_r>:
 8008f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f36:	2602      	movs	r6, #2
 8008f38:	898b      	ldrh	r3, [r1, #12]
 8008f3a:	0005      	movs	r5, r0
 8008f3c:	000c      	movs	r4, r1
 8008f3e:	4233      	tst	r3, r6
 8008f40:	d006      	beq.n	8008f50 <__smakebuf_r+0x1c>
 8008f42:	0023      	movs	r3, r4
 8008f44:	3347      	adds	r3, #71	; 0x47
 8008f46:	6023      	str	r3, [r4, #0]
 8008f48:	6123      	str	r3, [r4, #16]
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	6163      	str	r3, [r4, #20]
 8008f4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008f50:	466a      	mov	r2, sp
 8008f52:	ab01      	add	r3, sp, #4
 8008f54:	f7ff ffc6 	bl	8008ee4 <__swhatbuf_r>
 8008f58:	9900      	ldr	r1, [sp, #0]
 8008f5a:	0007      	movs	r7, r0
 8008f5c:	0028      	movs	r0, r5
 8008f5e:	f000 fc7f 	bl	8009860 <_malloc_r>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d108      	bne.n	8008f78 <__smakebuf_r+0x44>
 8008f66:	220c      	movs	r2, #12
 8008f68:	5ea3      	ldrsh	r3, [r4, r2]
 8008f6a:	059a      	lsls	r2, r3, #22
 8008f6c:	d4ef      	bmi.n	8008f4e <__smakebuf_r+0x1a>
 8008f6e:	2203      	movs	r2, #3
 8008f70:	4393      	bics	r3, r2
 8008f72:	431e      	orrs	r6, r3
 8008f74:	81a6      	strh	r6, [r4, #12]
 8008f76:	e7e4      	b.n	8008f42 <__smakebuf_r+0xe>
 8008f78:	4b0f      	ldr	r3, [pc, #60]	; (8008fb8 <__smakebuf_r+0x84>)
 8008f7a:	62ab      	str	r3, [r5, #40]	; 0x28
 8008f7c:	2380      	movs	r3, #128	; 0x80
 8008f7e:	89a2      	ldrh	r2, [r4, #12]
 8008f80:	6020      	str	r0, [r4, #0]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	81a3      	strh	r3, [r4, #12]
 8008f86:	9b00      	ldr	r3, [sp, #0]
 8008f88:	6120      	str	r0, [r4, #16]
 8008f8a:	6163      	str	r3, [r4, #20]
 8008f8c:	9b01      	ldr	r3, [sp, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00d      	beq.n	8008fae <__smakebuf_r+0x7a>
 8008f92:	0028      	movs	r0, r5
 8008f94:	230e      	movs	r3, #14
 8008f96:	5ee1      	ldrsh	r1, [r4, r3]
 8008f98:	f000 fefe 	bl	8009d98 <_isatty_r>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	d006      	beq.n	8008fae <__smakebuf_r+0x7a>
 8008fa0:	2203      	movs	r2, #3
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	4393      	bics	r3, r2
 8008fa6:	001a      	movs	r2, r3
 8008fa8:	2301      	movs	r3, #1
 8008faa:	4313      	orrs	r3, r2
 8008fac:	81a3      	strh	r3, [r4, #12]
 8008fae:	89a0      	ldrh	r0, [r4, #12]
 8008fb0:	4307      	orrs	r7, r0
 8008fb2:	81a7      	strh	r7, [r4, #12]
 8008fb4:	e7cb      	b.n	8008f4e <__smakebuf_r+0x1a>
 8008fb6:	46c0      	nop			; (mov r8, r8)
 8008fb8:	08008d19 	.word	0x08008d19

08008fbc <malloc>:
 8008fbc:	b510      	push	{r4, lr}
 8008fbe:	4b03      	ldr	r3, [pc, #12]	; (8008fcc <malloc+0x10>)
 8008fc0:	0001      	movs	r1, r0
 8008fc2:	6818      	ldr	r0, [r3, #0]
 8008fc4:	f000 fc4c 	bl	8009860 <_malloc_r>
 8008fc8:	bd10      	pop	{r4, pc}
 8008fca:	46c0      	nop			; (mov r8, r8)
 8008fcc:	2000008c 	.word	0x2000008c

08008fd0 <memchr>:
 8008fd0:	b2c9      	uxtb	r1, r1
 8008fd2:	1882      	adds	r2, r0, r2
 8008fd4:	4290      	cmp	r0, r2
 8008fd6:	d101      	bne.n	8008fdc <memchr+0xc>
 8008fd8:	2000      	movs	r0, #0
 8008fda:	4770      	bx	lr
 8008fdc:	7803      	ldrb	r3, [r0, #0]
 8008fde:	428b      	cmp	r3, r1
 8008fe0:	d0fb      	beq.n	8008fda <memchr+0xa>
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	e7f6      	b.n	8008fd4 <memchr+0x4>

08008fe6 <memcpy>:
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	b510      	push	{r4, lr}
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d100      	bne.n	8008ff0 <memcpy+0xa>
 8008fee:	bd10      	pop	{r4, pc}
 8008ff0:	5ccc      	ldrb	r4, [r1, r3]
 8008ff2:	54c4      	strb	r4, [r0, r3]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	e7f8      	b.n	8008fea <memcpy+0x4>

08008ff8 <_Balloc>:
 8008ff8:	b570      	push	{r4, r5, r6, lr}
 8008ffa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ffc:	0006      	movs	r6, r0
 8008ffe:	000c      	movs	r4, r1
 8009000:	2d00      	cmp	r5, #0
 8009002:	d10e      	bne.n	8009022 <_Balloc+0x2a>
 8009004:	2010      	movs	r0, #16
 8009006:	f7ff ffd9 	bl	8008fbc <malloc>
 800900a:	1e02      	subs	r2, r0, #0
 800900c:	6270      	str	r0, [r6, #36]	; 0x24
 800900e:	d104      	bne.n	800901a <_Balloc+0x22>
 8009010:	2166      	movs	r1, #102	; 0x66
 8009012:	4b19      	ldr	r3, [pc, #100]	; (8009078 <_Balloc+0x80>)
 8009014:	4819      	ldr	r0, [pc, #100]	; (800907c <_Balloc+0x84>)
 8009016:	f000 fe6d 	bl	8009cf4 <__assert_func>
 800901a:	6045      	str	r5, [r0, #4]
 800901c:	6085      	str	r5, [r0, #8]
 800901e:	6005      	str	r5, [r0, #0]
 8009020:	60c5      	str	r5, [r0, #12]
 8009022:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009024:	68eb      	ldr	r3, [r5, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d013      	beq.n	8009052 <_Balloc+0x5a>
 800902a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800902c:	00a2      	lsls	r2, r4, #2
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	189b      	adds	r3, r3, r2
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	2800      	cmp	r0, #0
 8009036:	d118      	bne.n	800906a <_Balloc+0x72>
 8009038:	2101      	movs	r1, #1
 800903a:	000d      	movs	r5, r1
 800903c:	40a5      	lsls	r5, r4
 800903e:	1d6a      	adds	r2, r5, #5
 8009040:	0030      	movs	r0, r6
 8009042:	0092      	lsls	r2, r2, #2
 8009044:	f000 fb74 	bl	8009730 <_calloc_r>
 8009048:	2800      	cmp	r0, #0
 800904a:	d00c      	beq.n	8009066 <_Balloc+0x6e>
 800904c:	6044      	str	r4, [r0, #4]
 800904e:	6085      	str	r5, [r0, #8]
 8009050:	e00d      	b.n	800906e <_Balloc+0x76>
 8009052:	2221      	movs	r2, #33	; 0x21
 8009054:	2104      	movs	r1, #4
 8009056:	0030      	movs	r0, r6
 8009058:	f000 fb6a 	bl	8009730 <_calloc_r>
 800905c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800905e:	60e8      	str	r0, [r5, #12]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1e1      	bne.n	800902a <_Balloc+0x32>
 8009066:	2000      	movs	r0, #0
 8009068:	bd70      	pop	{r4, r5, r6, pc}
 800906a:	6802      	ldr	r2, [r0, #0]
 800906c:	601a      	str	r2, [r3, #0]
 800906e:	2300      	movs	r3, #0
 8009070:	6103      	str	r3, [r0, #16]
 8009072:	60c3      	str	r3, [r0, #12]
 8009074:	e7f8      	b.n	8009068 <_Balloc+0x70>
 8009076:	46c0      	nop			; (mov r8, r8)
 8009078:	0800a7f1 	.word	0x0800a7f1
 800907c:	0800a8d4 	.word	0x0800a8d4

08009080 <_Bfree>:
 8009080:	b570      	push	{r4, r5, r6, lr}
 8009082:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009084:	0005      	movs	r5, r0
 8009086:	000c      	movs	r4, r1
 8009088:	2e00      	cmp	r6, #0
 800908a:	d10e      	bne.n	80090aa <_Bfree+0x2a>
 800908c:	2010      	movs	r0, #16
 800908e:	f7ff ff95 	bl	8008fbc <malloc>
 8009092:	1e02      	subs	r2, r0, #0
 8009094:	6268      	str	r0, [r5, #36]	; 0x24
 8009096:	d104      	bne.n	80090a2 <_Bfree+0x22>
 8009098:	218a      	movs	r1, #138	; 0x8a
 800909a:	4b09      	ldr	r3, [pc, #36]	; (80090c0 <_Bfree+0x40>)
 800909c:	4809      	ldr	r0, [pc, #36]	; (80090c4 <_Bfree+0x44>)
 800909e:	f000 fe29 	bl	8009cf4 <__assert_func>
 80090a2:	6046      	str	r6, [r0, #4]
 80090a4:	6086      	str	r6, [r0, #8]
 80090a6:	6006      	str	r6, [r0, #0]
 80090a8:	60c6      	str	r6, [r0, #12]
 80090aa:	2c00      	cmp	r4, #0
 80090ac:	d007      	beq.n	80090be <_Bfree+0x3e>
 80090ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090b0:	6862      	ldr	r2, [r4, #4]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	0092      	lsls	r2, r2, #2
 80090b6:	189b      	adds	r3, r3, r2
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	6022      	str	r2, [r4, #0]
 80090bc:	601c      	str	r4, [r3, #0]
 80090be:	bd70      	pop	{r4, r5, r6, pc}
 80090c0:	0800a7f1 	.word	0x0800a7f1
 80090c4:	0800a8d4 	.word	0x0800a8d4

080090c8 <__multadd>:
 80090c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ca:	000e      	movs	r6, r1
 80090cc:	9001      	str	r0, [sp, #4]
 80090ce:	000c      	movs	r4, r1
 80090d0:	001d      	movs	r5, r3
 80090d2:	2000      	movs	r0, #0
 80090d4:	690f      	ldr	r7, [r1, #16]
 80090d6:	3614      	adds	r6, #20
 80090d8:	6833      	ldr	r3, [r6, #0]
 80090da:	3001      	adds	r0, #1
 80090dc:	b299      	uxth	r1, r3
 80090de:	4351      	muls	r1, r2
 80090e0:	0c1b      	lsrs	r3, r3, #16
 80090e2:	4353      	muls	r3, r2
 80090e4:	1949      	adds	r1, r1, r5
 80090e6:	0c0d      	lsrs	r5, r1, #16
 80090e8:	195b      	adds	r3, r3, r5
 80090ea:	0c1d      	lsrs	r5, r3, #16
 80090ec:	b289      	uxth	r1, r1
 80090ee:	041b      	lsls	r3, r3, #16
 80090f0:	185b      	adds	r3, r3, r1
 80090f2:	c608      	stmia	r6!, {r3}
 80090f4:	4287      	cmp	r7, r0
 80090f6:	dcef      	bgt.n	80090d8 <__multadd+0x10>
 80090f8:	2d00      	cmp	r5, #0
 80090fa:	d022      	beq.n	8009142 <__multadd+0x7a>
 80090fc:	68a3      	ldr	r3, [r4, #8]
 80090fe:	42bb      	cmp	r3, r7
 8009100:	dc19      	bgt.n	8009136 <__multadd+0x6e>
 8009102:	6863      	ldr	r3, [r4, #4]
 8009104:	9801      	ldr	r0, [sp, #4]
 8009106:	1c59      	adds	r1, r3, #1
 8009108:	f7ff ff76 	bl	8008ff8 <_Balloc>
 800910c:	1e06      	subs	r6, r0, #0
 800910e:	d105      	bne.n	800911c <__multadd+0x54>
 8009110:	0002      	movs	r2, r0
 8009112:	21b5      	movs	r1, #181	; 0xb5
 8009114:	4b0c      	ldr	r3, [pc, #48]	; (8009148 <__multadd+0x80>)
 8009116:	480d      	ldr	r0, [pc, #52]	; (800914c <__multadd+0x84>)
 8009118:	f000 fdec 	bl	8009cf4 <__assert_func>
 800911c:	0021      	movs	r1, r4
 800911e:	6923      	ldr	r3, [r4, #16]
 8009120:	310c      	adds	r1, #12
 8009122:	1c9a      	adds	r2, r3, #2
 8009124:	0092      	lsls	r2, r2, #2
 8009126:	300c      	adds	r0, #12
 8009128:	f7ff ff5d 	bl	8008fe6 <memcpy>
 800912c:	0021      	movs	r1, r4
 800912e:	9801      	ldr	r0, [sp, #4]
 8009130:	f7ff ffa6 	bl	8009080 <_Bfree>
 8009134:	0034      	movs	r4, r6
 8009136:	1d3b      	adds	r3, r7, #4
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	18e3      	adds	r3, r4, r3
 800913c:	605d      	str	r5, [r3, #4]
 800913e:	1c7b      	adds	r3, r7, #1
 8009140:	6123      	str	r3, [r4, #16]
 8009142:	0020      	movs	r0, r4
 8009144:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009146:	46c0      	nop			; (mov r8, r8)
 8009148:	0800a863 	.word	0x0800a863
 800914c:	0800a8d4 	.word	0x0800a8d4

08009150 <__hi0bits>:
 8009150:	0003      	movs	r3, r0
 8009152:	0c02      	lsrs	r2, r0, #16
 8009154:	2000      	movs	r0, #0
 8009156:	4282      	cmp	r2, r0
 8009158:	d101      	bne.n	800915e <__hi0bits+0xe>
 800915a:	041b      	lsls	r3, r3, #16
 800915c:	3010      	adds	r0, #16
 800915e:	0e1a      	lsrs	r2, r3, #24
 8009160:	d101      	bne.n	8009166 <__hi0bits+0x16>
 8009162:	3008      	adds	r0, #8
 8009164:	021b      	lsls	r3, r3, #8
 8009166:	0f1a      	lsrs	r2, r3, #28
 8009168:	d101      	bne.n	800916e <__hi0bits+0x1e>
 800916a:	3004      	adds	r0, #4
 800916c:	011b      	lsls	r3, r3, #4
 800916e:	0f9a      	lsrs	r2, r3, #30
 8009170:	d101      	bne.n	8009176 <__hi0bits+0x26>
 8009172:	3002      	adds	r0, #2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	db03      	blt.n	8009182 <__hi0bits+0x32>
 800917a:	3001      	adds	r0, #1
 800917c:	005b      	lsls	r3, r3, #1
 800917e:	d400      	bmi.n	8009182 <__hi0bits+0x32>
 8009180:	2020      	movs	r0, #32
 8009182:	4770      	bx	lr

08009184 <__lo0bits>:
 8009184:	6803      	ldr	r3, [r0, #0]
 8009186:	0002      	movs	r2, r0
 8009188:	2107      	movs	r1, #7
 800918a:	0018      	movs	r0, r3
 800918c:	4008      	ands	r0, r1
 800918e:	420b      	tst	r3, r1
 8009190:	d00d      	beq.n	80091ae <__lo0bits+0x2a>
 8009192:	3906      	subs	r1, #6
 8009194:	2000      	movs	r0, #0
 8009196:	420b      	tst	r3, r1
 8009198:	d105      	bne.n	80091a6 <__lo0bits+0x22>
 800919a:	3002      	adds	r0, #2
 800919c:	4203      	tst	r3, r0
 800919e:	d003      	beq.n	80091a8 <__lo0bits+0x24>
 80091a0:	40cb      	lsrs	r3, r1
 80091a2:	0008      	movs	r0, r1
 80091a4:	6013      	str	r3, [r2, #0]
 80091a6:	4770      	bx	lr
 80091a8:	089b      	lsrs	r3, r3, #2
 80091aa:	6013      	str	r3, [r2, #0]
 80091ac:	e7fb      	b.n	80091a6 <__lo0bits+0x22>
 80091ae:	b299      	uxth	r1, r3
 80091b0:	2900      	cmp	r1, #0
 80091b2:	d101      	bne.n	80091b8 <__lo0bits+0x34>
 80091b4:	2010      	movs	r0, #16
 80091b6:	0c1b      	lsrs	r3, r3, #16
 80091b8:	b2d9      	uxtb	r1, r3
 80091ba:	2900      	cmp	r1, #0
 80091bc:	d101      	bne.n	80091c2 <__lo0bits+0x3e>
 80091be:	3008      	adds	r0, #8
 80091c0:	0a1b      	lsrs	r3, r3, #8
 80091c2:	0719      	lsls	r1, r3, #28
 80091c4:	d101      	bne.n	80091ca <__lo0bits+0x46>
 80091c6:	3004      	adds	r0, #4
 80091c8:	091b      	lsrs	r3, r3, #4
 80091ca:	0799      	lsls	r1, r3, #30
 80091cc:	d101      	bne.n	80091d2 <__lo0bits+0x4e>
 80091ce:	3002      	adds	r0, #2
 80091d0:	089b      	lsrs	r3, r3, #2
 80091d2:	07d9      	lsls	r1, r3, #31
 80091d4:	d4e9      	bmi.n	80091aa <__lo0bits+0x26>
 80091d6:	3001      	adds	r0, #1
 80091d8:	085b      	lsrs	r3, r3, #1
 80091da:	d1e6      	bne.n	80091aa <__lo0bits+0x26>
 80091dc:	2020      	movs	r0, #32
 80091de:	e7e2      	b.n	80091a6 <__lo0bits+0x22>

080091e0 <__i2b>:
 80091e0:	b510      	push	{r4, lr}
 80091e2:	000c      	movs	r4, r1
 80091e4:	2101      	movs	r1, #1
 80091e6:	f7ff ff07 	bl	8008ff8 <_Balloc>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d106      	bne.n	80091fc <__i2b+0x1c>
 80091ee:	21a0      	movs	r1, #160	; 0xa0
 80091f0:	0002      	movs	r2, r0
 80091f2:	4b04      	ldr	r3, [pc, #16]	; (8009204 <__i2b+0x24>)
 80091f4:	4804      	ldr	r0, [pc, #16]	; (8009208 <__i2b+0x28>)
 80091f6:	0049      	lsls	r1, r1, #1
 80091f8:	f000 fd7c 	bl	8009cf4 <__assert_func>
 80091fc:	2301      	movs	r3, #1
 80091fe:	6144      	str	r4, [r0, #20]
 8009200:	6103      	str	r3, [r0, #16]
 8009202:	bd10      	pop	{r4, pc}
 8009204:	0800a863 	.word	0x0800a863
 8009208:	0800a8d4 	.word	0x0800a8d4

0800920c <__multiply>:
 800920c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800920e:	690b      	ldr	r3, [r1, #16]
 8009210:	0014      	movs	r4, r2
 8009212:	6912      	ldr	r2, [r2, #16]
 8009214:	000d      	movs	r5, r1
 8009216:	b089      	sub	sp, #36	; 0x24
 8009218:	4293      	cmp	r3, r2
 800921a:	da01      	bge.n	8009220 <__multiply+0x14>
 800921c:	0025      	movs	r5, r4
 800921e:	000c      	movs	r4, r1
 8009220:	692f      	ldr	r7, [r5, #16]
 8009222:	6926      	ldr	r6, [r4, #16]
 8009224:	6869      	ldr	r1, [r5, #4]
 8009226:	19bb      	adds	r3, r7, r6
 8009228:	9302      	str	r3, [sp, #8]
 800922a:	68ab      	ldr	r3, [r5, #8]
 800922c:	19ba      	adds	r2, r7, r6
 800922e:	4293      	cmp	r3, r2
 8009230:	da00      	bge.n	8009234 <__multiply+0x28>
 8009232:	3101      	adds	r1, #1
 8009234:	f7ff fee0 	bl	8008ff8 <_Balloc>
 8009238:	9001      	str	r0, [sp, #4]
 800923a:	2800      	cmp	r0, #0
 800923c:	d106      	bne.n	800924c <__multiply+0x40>
 800923e:	215e      	movs	r1, #94	; 0x5e
 8009240:	0002      	movs	r2, r0
 8009242:	4b48      	ldr	r3, [pc, #288]	; (8009364 <__multiply+0x158>)
 8009244:	4848      	ldr	r0, [pc, #288]	; (8009368 <__multiply+0x15c>)
 8009246:	31ff      	adds	r1, #255	; 0xff
 8009248:	f000 fd54 	bl	8009cf4 <__assert_func>
 800924c:	9b01      	ldr	r3, [sp, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	3314      	adds	r3, #20
 8009252:	469c      	mov	ip, r3
 8009254:	19bb      	adds	r3, r7, r6
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4463      	add	r3, ip
 800925a:	9303      	str	r3, [sp, #12]
 800925c:	4663      	mov	r3, ip
 800925e:	9903      	ldr	r1, [sp, #12]
 8009260:	428b      	cmp	r3, r1
 8009262:	d32c      	bcc.n	80092be <__multiply+0xb2>
 8009264:	002b      	movs	r3, r5
 8009266:	0022      	movs	r2, r4
 8009268:	3314      	adds	r3, #20
 800926a:	00bf      	lsls	r7, r7, #2
 800926c:	3214      	adds	r2, #20
 800926e:	9306      	str	r3, [sp, #24]
 8009270:	00b6      	lsls	r6, r6, #2
 8009272:	19db      	adds	r3, r3, r7
 8009274:	9304      	str	r3, [sp, #16]
 8009276:	1993      	adds	r3, r2, r6
 8009278:	9307      	str	r3, [sp, #28]
 800927a:	2304      	movs	r3, #4
 800927c:	9305      	str	r3, [sp, #20]
 800927e:	002b      	movs	r3, r5
 8009280:	9904      	ldr	r1, [sp, #16]
 8009282:	3315      	adds	r3, #21
 8009284:	9200      	str	r2, [sp, #0]
 8009286:	4299      	cmp	r1, r3
 8009288:	d305      	bcc.n	8009296 <__multiply+0x8a>
 800928a:	1b4b      	subs	r3, r1, r5
 800928c:	3b15      	subs	r3, #21
 800928e:	089b      	lsrs	r3, r3, #2
 8009290:	3301      	adds	r3, #1
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	9305      	str	r3, [sp, #20]
 8009296:	9b07      	ldr	r3, [sp, #28]
 8009298:	9a00      	ldr	r2, [sp, #0]
 800929a:	429a      	cmp	r2, r3
 800929c:	d311      	bcc.n	80092c2 <__multiply+0xb6>
 800929e:	9b02      	ldr	r3, [sp, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	dd06      	ble.n	80092b2 <__multiply+0xa6>
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	3b04      	subs	r3, #4
 80092a8:	9303      	str	r3, [sp, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d053      	beq.n	800935a <__multiply+0x14e>
 80092b2:	9b01      	ldr	r3, [sp, #4]
 80092b4:	9a02      	ldr	r2, [sp, #8]
 80092b6:	0018      	movs	r0, r3
 80092b8:	611a      	str	r2, [r3, #16]
 80092ba:	b009      	add	sp, #36	; 0x24
 80092bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092be:	c304      	stmia	r3!, {r2}
 80092c0:	e7cd      	b.n	800925e <__multiply+0x52>
 80092c2:	9b00      	ldr	r3, [sp, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	b298      	uxth	r0, r3
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d01b      	beq.n	8009304 <__multiply+0xf8>
 80092cc:	4667      	mov	r7, ip
 80092ce:	2400      	movs	r4, #0
 80092d0:	9e06      	ldr	r6, [sp, #24]
 80092d2:	ce02      	ldmia	r6!, {r1}
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	b28b      	uxth	r3, r1
 80092d8:	4343      	muls	r3, r0
 80092da:	b292      	uxth	r2, r2
 80092dc:	189b      	adds	r3, r3, r2
 80092de:	191b      	adds	r3, r3, r4
 80092e0:	0c0c      	lsrs	r4, r1, #16
 80092e2:	4344      	muls	r4, r0
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	0c11      	lsrs	r1, r2, #16
 80092e8:	1861      	adds	r1, r4, r1
 80092ea:	0c1c      	lsrs	r4, r3, #16
 80092ec:	1909      	adds	r1, r1, r4
 80092ee:	0c0c      	lsrs	r4, r1, #16
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	0409      	lsls	r1, r1, #16
 80092f4:	430b      	orrs	r3, r1
 80092f6:	c708      	stmia	r7!, {r3}
 80092f8:	9b04      	ldr	r3, [sp, #16]
 80092fa:	42b3      	cmp	r3, r6
 80092fc:	d8e9      	bhi.n	80092d2 <__multiply+0xc6>
 80092fe:	4663      	mov	r3, ip
 8009300:	9a05      	ldr	r2, [sp, #20]
 8009302:	509c      	str	r4, [r3, r2]
 8009304:	9b00      	ldr	r3, [sp, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	0c1e      	lsrs	r6, r3, #16
 800930a:	d020      	beq.n	800934e <__multiply+0x142>
 800930c:	4663      	mov	r3, ip
 800930e:	002c      	movs	r4, r5
 8009310:	4660      	mov	r0, ip
 8009312:	2700      	movs	r7, #0
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3414      	adds	r4, #20
 8009318:	6822      	ldr	r2, [r4, #0]
 800931a:	b29b      	uxth	r3, r3
 800931c:	b291      	uxth	r1, r2
 800931e:	4371      	muls	r1, r6
 8009320:	6802      	ldr	r2, [r0, #0]
 8009322:	0c12      	lsrs	r2, r2, #16
 8009324:	1889      	adds	r1, r1, r2
 8009326:	19cf      	adds	r7, r1, r7
 8009328:	0439      	lsls	r1, r7, #16
 800932a:	430b      	orrs	r3, r1
 800932c:	6003      	str	r3, [r0, #0]
 800932e:	cc02      	ldmia	r4!, {r1}
 8009330:	6843      	ldr	r3, [r0, #4]
 8009332:	0c09      	lsrs	r1, r1, #16
 8009334:	4371      	muls	r1, r6
 8009336:	b29b      	uxth	r3, r3
 8009338:	0c3f      	lsrs	r7, r7, #16
 800933a:	18cb      	adds	r3, r1, r3
 800933c:	9a04      	ldr	r2, [sp, #16]
 800933e:	19db      	adds	r3, r3, r7
 8009340:	0c1f      	lsrs	r7, r3, #16
 8009342:	3004      	adds	r0, #4
 8009344:	42a2      	cmp	r2, r4
 8009346:	d8e7      	bhi.n	8009318 <__multiply+0x10c>
 8009348:	4662      	mov	r2, ip
 800934a:	9905      	ldr	r1, [sp, #20]
 800934c:	5053      	str	r3, [r2, r1]
 800934e:	9b00      	ldr	r3, [sp, #0]
 8009350:	3304      	adds	r3, #4
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	2304      	movs	r3, #4
 8009356:	449c      	add	ip, r3
 8009358:	e79d      	b.n	8009296 <__multiply+0x8a>
 800935a:	9b02      	ldr	r3, [sp, #8]
 800935c:	3b01      	subs	r3, #1
 800935e:	9302      	str	r3, [sp, #8]
 8009360:	e79d      	b.n	800929e <__multiply+0x92>
 8009362:	46c0      	nop			; (mov r8, r8)
 8009364:	0800a863 	.word	0x0800a863
 8009368:	0800a8d4 	.word	0x0800a8d4

0800936c <__pow5mult>:
 800936c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800936e:	2303      	movs	r3, #3
 8009370:	0015      	movs	r5, r2
 8009372:	0007      	movs	r7, r0
 8009374:	000e      	movs	r6, r1
 8009376:	401a      	ands	r2, r3
 8009378:	421d      	tst	r5, r3
 800937a:	d008      	beq.n	800938e <__pow5mult+0x22>
 800937c:	4925      	ldr	r1, [pc, #148]	; (8009414 <__pow5mult+0xa8>)
 800937e:	3a01      	subs	r2, #1
 8009380:	0092      	lsls	r2, r2, #2
 8009382:	5852      	ldr	r2, [r2, r1]
 8009384:	2300      	movs	r3, #0
 8009386:	0031      	movs	r1, r6
 8009388:	f7ff fe9e 	bl	80090c8 <__multadd>
 800938c:	0006      	movs	r6, r0
 800938e:	10ad      	asrs	r5, r5, #2
 8009390:	d03d      	beq.n	800940e <__pow5mult+0xa2>
 8009392:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009394:	2c00      	cmp	r4, #0
 8009396:	d10f      	bne.n	80093b8 <__pow5mult+0x4c>
 8009398:	2010      	movs	r0, #16
 800939a:	f7ff fe0f 	bl	8008fbc <malloc>
 800939e:	1e02      	subs	r2, r0, #0
 80093a0:	6278      	str	r0, [r7, #36]	; 0x24
 80093a2:	d105      	bne.n	80093b0 <__pow5mult+0x44>
 80093a4:	21d7      	movs	r1, #215	; 0xd7
 80093a6:	4b1c      	ldr	r3, [pc, #112]	; (8009418 <__pow5mult+0xac>)
 80093a8:	481c      	ldr	r0, [pc, #112]	; (800941c <__pow5mult+0xb0>)
 80093aa:	0049      	lsls	r1, r1, #1
 80093ac:	f000 fca2 	bl	8009cf4 <__assert_func>
 80093b0:	6044      	str	r4, [r0, #4]
 80093b2:	6084      	str	r4, [r0, #8]
 80093b4:	6004      	str	r4, [r0, #0]
 80093b6:	60c4      	str	r4, [r0, #12]
 80093b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ba:	689c      	ldr	r4, [r3, #8]
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	2c00      	cmp	r4, #0
 80093c0:	d108      	bne.n	80093d4 <__pow5mult+0x68>
 80093c2:	0038      	movs	r0, r7
 80093c4:	4916      	ldr	r1, [pc, #88]	; (8009420 <__pow5mult+0xb4>)
 80093c6:	f7ff ff0b 	bl	80091e0 <__i2b>
 80093ca:	9b01      	ldr	r3, [sp, #4]
 80093cc:	0004      	movs	r4, r0
 80093ce:	6098      	str	r0, [r3, #8]
 80093d0:	2300      	movs	r3, #0
 80093d2:	6003      	str	r3, [r0, #0]
 80093d4:	2301      	movs	r3, #1
 80093d6:	421d      	tst	r5, r3
 80093d8:	d00a      	beq.n	80093f0 <__pow5mult+0x84>
 80093da:	0031      	movs	r1, r6
 80093dc:	0022      	movs	r2, r4
 80093de:	0038      	movs	r0, r7
 80093e0:	f7ff ff14 	bl	800920c <__multiply>
 80093e4:	0031      	movs	r1, r6
 80093e6:	9001      	str	r0, [sp, #4]
 80093e8:	0038      	movs	r0, r7
 80093ea:	f7ff fe49 	bl	8009080 <_Bfree>
 80093ee:	9e01      	ldr	r6, [sp, #4]
 80093f0:	106d      	asrs	r5, r5, #1
 80093f2:	d00c      	beq.n	800940e <__pow5mult+0xa2>
 80093f4:	6820      	ldr	r0, [r4, #0]
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d107      	bne.n	800940a <__pow5mult+0x9e>
 80093fa:	0022      	movs	r2, r4
 80093fc:	0021      	movs	r1, r4
 80093fe:	0038      	movs	r0, r7
 8009400:	f7ff ff04 	bl	800920c <__multiply>
 8009404:	2300      	movs	r3, #0
 8009406:	6020      	str	r0, [r4, #0]
 8009408:	6003      	str	r3, [r0, #0]
 800940a:	0004      	movs	r4, r0
 800940c:	e7e2      	b.n	80093d4 <__pow5mult+0x68>
 800940e:	0030      	movs	r0, r6
 8009410:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009412:	46c0      	nop			; (mov r8, r8)
 8009414:	0800aa20 	.word	0x0800aa20
 8009418:	0800a7f1 	.word	0x0800a7f1
 800941c:	0800a8d4 	.word	0x0800a8d4
 8009420:	00000271 	.word	0x00000271

08009424 <__lshift>:
 8009424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009426:	000c      	movs	r4, r1
 8009428:	0017      	movs	r7, r2
 800942a:	6923      	ldr	r3, [r4, #16]
 800942c:	1155      	asrs	r5, r2, #5
 800942e:	b087      	sub	sp, #28
 8009430:	18eb      	adds	r3, r5, r3
 8009432:	9302      	str	r3, [sp, #8]
 8009434:	3301      	adds	r3, #1
 8009436:	9301      	str	r3, [sp, #4]
 8009438:	6849      	ldr	r1, [r1, #4]
 800943a:	68a3      	ldr	r3, [r4, #8]
 800943c:	9004      	str	r0, [sp, #16]
 800943e:	9a01      	ldr	r2, [sp, #4]
 8009440:	4293      	cmp	r3, r2
 8009442:	db10      	blt.n	8009466 <__lshift+0x42>
 8009444:	9804      	ldr	r0, [sp, #16]
 8009446:	f7ff fdd7 	bl	8008ff8 <_Balloc>
 800944a:	2300      	movs	r3, #0
 800944c:	0002      	movs	r2, r0
 800944e:	0006      	movs	r6, r0
 8009450:	0019      	movs	r1, r3
 8009452:	3214      	adds	r2, #20
 8009454:	4298      	cmp	r0, r3
 8009456:	d10c      	bne.n	8009472 <__lshift+0x4e>
 8009458:	21da      	movs	r1, #218	; 0xda
 800945a:	0002      	movs	r2, r0
 800945c:	4b26      	ldr	r3, [pc, #152]	; (80094f8 <__lshift+0xd4>)
 800945e:	4827      	ldr	r0, [pc, #156]	; (80094fc <__lshift+0xd8>)
 8009460:	31ff      	adds	r1, #255	; 0xff
 8009462:	f000 fc47 	bl	8009cf4 <__assert_func>
 8009466:	3101      	adds	r1, #1
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	e7e8      	b.n	800943e <__lshift+0x1a>
 800946c:	0098      	lsls	r0, r3, #2
 800946e:	5011      	str	r1, [r2, r0]
 8009470:	3301      	adds	r3, #1
 8009472:	42ab      	cmp	r3, r5
 8009474:	dbfa      	blt.n	800946c <__lshift+0x48>
 8009476:	43eb      	mvns	r3, r5
 8009478:	17db      	asrs	r3, r3, #31
 800947a:	401d      	ands	r5, r3
 800947c:	211f      	movs	r1, #31
 800947e:	0023      	movs	r3, r4
 8009480:	0038      	movs	r0, r7
 8009482:	00ad      	lsls	r5, r5, #2
 8009484:	1955      	adds	r5, r2, r5
 8009486:	6922      	ldr	r2, [r4, #16]
 8009488:	3314      	adds	r3, #20
 800948a:	0092      	lsls	r2, r2, #2
 800948c:	4008      	ands	r0, r1
 800948e:	4684      	mov	ip, r0
 8009490:	189a      	adds	r2, r3, r2
 8009492:	420f      	tst	r7, r1
 8009494:	d02a      	beq.n	80094ec <__lshift+0xc8>
 8009496:	3101      	adds	r1, #1
 8009498:	1a09      	subs	r1, r1, r0
 800949a:	9105      	str	r1, [sp, #20]
 800949c:	2100      	movs	r1, #0
 800949e:	9503      	str	r5, [sp, #12]
 80094a0:	4667      	mov	r7, ip
 80094a2:	6818      	ldr	r0, [r3, #0]
 80094a4:	40b8      	lsls	r0, r7
 80094a6:	4301      	orrs	r1, r0
 80094a8:	9803      	ldr	r0, [sp, #12]
 80094aa:	c002      	stmia	r0!, {r1}
 80094ac:	cb02      	ldmia	r3!, {r1}
 80094ae:	9003      	str	r0, [sp, #12]
 80094b0:	9805      	ldr	r0, [sp, #20]
 80094b2:	40c1      	lsrs	r1, r0
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d8f3      	bhi.n	80094a0 <__lshift+0x7c>
 80094b8:	0020      	movs	r0, r4
 80094ba:	3015      	adds	r0, #21
 80094bc:	2304      	movs	r3, #4
 80094be:	4282      	cmp	r2, r0
 80094c0:	d304      	bcc.n	80094cc <__lshift+0xa8>
 80094c2:	1b13      	subs	r3, r2, r4
 80094c4:	3b15      	subs	r3, #21
 80094c6:	089b      	lsrs	r3, r3, #2
 80094c8:	3301      	adds	r3, #1
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	50e9      	str	r1, [r5, r3]
 80094ce:	2900      	cmp	r1, #0
 80094d0:	d002      	beq.n	80094d8 <__lshift+0xb4>
 80094d2:	9b02      	ldr	r3, [sp, #8]
 80094d4:	3302      	adds	r3, #2
 80094d6:	9301      	str	r3, [sp, #4]
 80094d8:	9b01      	ldr	r3, [sp, #4]
 80094da:	9804      	ldr	r0, [sp, #16]
 80094dc:	3b01      	subs	r3, #1
 80094de:	0021      	movs	r1, r4
 80094e0:	6133      	str	r3, [r6, #16]
 80094e2:	f7ff fdcd 	bl	8009080 <_Bfree>
 80094e6:	0030      	movs	r0, r6
 80094e8:	b007      	add	sp, #28
 80094ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ec:	cb02      	ldmia	r3!, {r1}
 80094ee:	c502      	stmia	r5!, {r1}
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d8fb      	bhi.n	80094ec <__lshift+0xc8>
 80094f4:	e7f0      	b.n	80094d8 <__lshift+0xb4>
 80094f6:	46c0      	nop			; (mov r8, r8)
 80094f8:	0800a863 	.word	0x0800a863
 80094fc:	0800a8d4 	.word	0x0800a8d4

08009500 <__mcmp>:
 8009500:	6902      	ldr	r2, [r0, #16]
 8009502:	690b      	ldr	r3, [r1, #16]
 8009504:	b530      	push	{r4, r5, lr}
 8009506:	0004      	movs	r4, r0
 8009508:	1ad0      	subs	r0, r2, r3
 800950a:	429a      	cmp	r2, r3
 800950c:	d10d      	bne.n	800952a <__mcmp+0x2a>
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	3414      	adds	r4, #20
 8009512:	3114      	adds	r1, #20
 8009514:	18e2      	adds	r2, r4, r3
 8009516:	18c9      	adds	r1, r1, r3
 8009518:	3a04      	subs	r2, #4
 800951a:	3904      	subs	r1, #4
 800951c:	6815      	ldr	r5, [r2, #0]
 800951e:	680b      	ldr	r3, [r1, #0]
 8009520:	429d      	cmp	r5, r3
 8009522:	d003      	beq.n	800952c <__mcmp+0x2c>
 8009524:	2001      	movs	r0, #1
 8009526:	429d      	cmp	r5, r3
 8009528:	d303      	bcc.n	8009532 <__mcmp+0x32>
 800952a:	bd30      	pop	{r4, r5, pc}
 800952c:	4294      	cmp	r4, r2
 800952e:	d3f3      	bcc.n	8009518 <__mcmp+0x18>
 8009530:	e7fb      	b.n	800952a <__mcmp+0x2a>
 8009532:	4240      	negs	r0, r0
 8009534:	e7f9      	b.n	800952a <__mcmp+0x2a>
	...

08009538 <__mdiff>:
 8009538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800953a:	000e      	movs	r6, r1
 800953c:	0007      	movs	r7, r0
 800953e:	0011      	movs	r1, r2
 8009540:	0030      	movs	r0, r6
 8009542:	b087      	sub	sp, #28
 8009544:	0014      	movs	r4, r2
 8009546:	f7ff ffdb 	bl	8009500 <__mcmp>
 800954a:	1e05      	subs	r5, r0, #0
 800954c:	d110      	bne.n	8009570 <__mdiff+0x38>
 800954e:	0001      	movs	r1, r0
 8009550:	0038      	movs	r0, r7
 8009552:	f7ff fd51 	bl	8008ff8 <_Balloc>
 8009556:	1e02      	subs	r2, r0, #0
 8009558:	d104      	bne.n	8009564 <__mdiff+0x2c>
 800955a:	4b40      	ldr	r3, [pc, #256]	; (800965c <__mdiff+0x124>)
 800955c:	4940      	ldr	r1, [pc, #256]	; (8009660 <__mdiff+0x128>)
 800955e:	4841      	ldr	r0, [pc, #260]	; (8009664 <__mdiff+0x12c>)
 8009560:	f000 fbc8 	bl	8009cf4 <__assert_func>
 8009564:	2301      	movs	r3, #1
 8009566:	6145      	str	r5, [r0, #20]
 8009568:	6103      	str	r3, [r0, #16]
 800956a:	0010      	movs	r0, r2
 800956c:	b007      	add	sp, #28
 800956e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009570:	2301      	movs	r3, #1
 8009572:	9301      	str	r3, [sp, #4]
 8009574:	2800      	cmp	r0, #0
 8009576:	db04      	blt.n	8009582 <__mdiff+0x4a>
 8009578:	0023      	movs	r3, r4
 800957a:	0034      	movs	r4, r6
 800957c:	001e      	movs	r6, r3
 800957e:	2300      	movs	r3, #0
 8009580:	9301      	str	r3, [sp, #4]
 8009582:	0038      	movs	r0, r7
 8009584:	6861      	ldr	r1, [r4, #4]
 8009586:	f7ff fd37 	bl	8008ff8 <_Balloc>
 800958a:	1e02      	subs	r2, r0, #0
 800958c:	d103      	bne.n	8009596 <__mdiff+0x5e>
 800958e:	2190      	movs	r1, #144	; 0x90
 8009590:	4b32      	ldr	r3, [pc, #200]	; (800965c <__mdiff+0x124>)
 8009592:	0089      	lsls	r1, r1, #2
 8009594:	e7e3      	b.n	800955e <__mdiff+0x26>
 8009596:	9b01      	ldr	r3, [sp, #4]
 8009598:	2700      	movs	r7, #0
 800959a:	60c3      	str	r3, [r0, #12]
 800959c:	6920      	ldr	r0, [r4, #16]
 800959e:	3414      	adds	r4, #20
 80095a0:	9401      	str	r4, [sp, #4]
 80095a2:	9b01      	ldr	r3, [sp, #4]
 80095a4:	0084      	lsls	r4, r0, #2
 80095a6:	191b      	adds	r3, r3, r4
 80095a8:	0034      	movs	r4, r6
 80095aa:	9302      	str	r3, [sp, #8]
 80095ac:	6933      	ldr	r3, [r6, #16]
 80095ae:	3414      	adds	r4, #20
 80095b0:	0099      	lsls	r1, r3, #2
 80095b2:	1863      	adds	r3, r4, r1
 80095b4:	9303      	str	r3, [sp, #12]
 80095b6:	0013      	movs	r3, r2
 80095b8:	3314      	adds	r3, #20
 80095ba:	469c      	mov	ip, r3
 80095bc:	9305      	str	r3, [sp, #20]
 80095be:	9b01      	ldr	r3, [sp, #4]
 80095c0:	9304      	str	r3, [sp, #16]
 80095c2:	9b04      	ldr	r3, [sp, #16]
 80095c4:	cc02      	ldmia	r4!, {r1}
 80095c6:	cb20      	ldmia	r3!, {r5}
 80095c8:	9304      	str	r3, [sp, #16]
 80095ca:	b2ab      	uxth	r3, r5
 80095cc:	19df      	adds	r7, r3, r7
 80095ce:	b28b      	uxth	r3, r1
 80095d0:	1afb      	subs	r3, r7, r3
 80095d2:	0c09      	lsrs	r1, r1, #16
 80095d4:	0c2d      	lsrs	r5, r5, #16
 80095d6:	1a6d      	subs	r5, r5, r1
 80095d8:	1419      	asrs	r1, r3, #16
 80095da:	186d      	adds	r5, r5, r1
 80095dc:	4661      	mov	r1, ip
 80095de:	142f      	asrs	r7, r5, #16
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	042d      	lsls	r5, r5, #16
 80095e4:	432b      	orrs	r3, r5
 80095e6:	c108      	stmia	r1!, {r3}
 80095e8:	9b03      	ldr	r3, [sp, #12]
 80095ea:	468c      	mov	ip, r1
 80095ec:	42a3      	cmp	r3, r4
 80095ee:	d8e8      	bhi.n	80095c2 <__mdiff+0x8a>
 80095f0:	0031      	movs	r1, r6
 80095f2:	9c03      	ldr	r4, [sp, #12]
 80095f4:	3115      	adds	r1, #21
 80095f6:	2304      	movs	r3, #4
 80095f8:	428c      	cmp	r4, r1
 80095fa:	d304      	bcc.n	8009606 <__mdiff+0xce>
 80095fc:	1ba3      	subs	r3, r4, r6
 80095fe:	3b15      	subs	r3, #21
 8009600:	089b      	lsrs	r3, r3, #2
 8009602:	3301      	adds	r3, #1
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	9901      	ldr	r1, [sp, #4]
 8009608:	18cc      	adds	r4, r1, r3
 800960a:	9905      	ldr	r1, [sp, #20]
 800960c:	0026      	movs	r6, r4
 800960e:	18cb      	adds	r3, r1, r3
 8009610:	469c      	mov	ip, r3
 8009612:	9902      	ldr	r1, [sp, #8]
 8009614:	428e      	cmp	r6, r1
 8009616:	d310      	bcc.n	800963a <__mdiff+0x102>
 8009618:	9e02      	ldr	r6, [sp, #8]
 800961a:	1ee1      	subs	r1, r4, #3
 800961c:	2500      	movs	r5, #0
 800961e:	428e      	cmp	r6, r1
 8009620:	d304      	bcc.n	800962c <__mdiff+0xf4>
 8009622:	0031      	movs	r1, r6
 8009624:	3103      	adds	r1, #3
 8009626:	1b0c      	subs	r4, r1, r4
 8009628:	08a4      	lsrs	r4, r4, #2
 800962a:	00a5      	lsls	r5, r4, #2
 800962c:	195b      	adds	r3, r3, r5
 800962e:	3b04      	subs	r3, #4
 8009630:	6819      	ldr	r1, [r3, #0]
 8009632:	2900      	cmp	r1, #0
 8009634:	d00f      	beq.n	8009656 <__mdiff+0x11e>
 8009636:	6110      	str	r0, [r2, #16]
 8009638:	e797      	b.n	800956a <__mdiff+0x32>
 800963a:	ce02      	ldmia	r6!, {r1}
 800963c:	b28d      	uxth	r5, r1
 800963e:	19ed      	adds	r5, r5, r7
 8009640:	0c0f      	lsrs	r7, r1, #16
 8009642:	1429      	asrs	r1, r5, #16
 8009644:	1879      	adds	r1, r7, r1
 8009646:	140f      	asrs	r7, r1, #16
 8009648:	b2ad      	uxth	r5, r5
 800964a:	0409      	lsls	r1, r1, #16
 800964c:	430d      	orrs	r5, r1
 800964e:	4661      	mov	r1, ip
 8009650:	c120      	stmia	r1!, {r5}
 8009652:	468c      	mov	ip, r1
 8009654:	e7dd      	b.n	8009612 <__mdiff+0xda>
 8009656:	3801      	subs	r0, #1
 8009658:	e7e9      	b.n	800962e <__mdiff+0xf6>
 800965a:	46c0      	nop			; (mov r8, r8)
 800965c:	0800a863 	.word	0x0800a863
 8009660:	00000232 	.word	0x00000232
 8009664:	0800a8d4 	.word	0x0800a8d4

08009668 <__d2b>:
 8009668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800966a:	2101      	movs	r1, #1
 800966c:	0014      	movs	r4, r2
 800966e:	001e      	movs	r6, r3
 8009670:	9f08      	ldr	r7, [sp, #32]
 8009672:	f7ff fcc1 	bl	8008ff8 <_Balloc>
 8009676:	1e05      	subs	r5, r0, #0
 8009678:	d105      	bne.n	8009686 <__d2b+0x1e>
 800967a:	0002      	movs	r2, r0
 800967c:	4b26      	ldr	r3, [pc, #152]	; (8009718 <__d2b+0xb0>)
 800967e:	4927      	ldr	r1, [pc, #156]	; (800971c <__d2b+0xb4>)
 8009680:	4827      	ldr	r0, [pc, #156]	; (8009720 <__d2b+0xb8>)
 8009682:	f000 fb37 	bl	8009cf4 <__assert_func>
 8009686:	0333      	lsls	r3, r6, #12
 8009688:	0076      	lsls	r6, r6, #1
 800968a:	0b1b      	lsrs	r3, r3, #12
 800968c:	0d76      	lsrs	r6, r6, #21
 800968e:	d124      	bne.n	80096da <__d2b+0x72>
 8009690:	9301      	str	r3, [sp, #4]
 8009692:	2c00      	cmp	r4, #0
 8009694:	d027      	beq.n	80096e6 <__d2b+0x7e>
 8009696:	4668      	mov	r0, sp
 8009698:	9400      	str	r4, [sp, #0]
 800969a:	f7ff fd73 	bl	8009184 <__lo0bits>
 800969e:	9c00      	ldr	r4, [sp, #0]
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d01e      	beq.n	80096e2 <__d2b+0x7a>
 80096a4:	9b01      	ldr	r3, [sp, #4]
 80096a6:	2120      	movs	r1, #32
 80096a8:	001a      	movs	r2, r3
 80096aa:	1a09      	subs	r1, r1, r0
 80096ac:	408a      	lsls	r2, r1
 80096ae:	40c3      	lsrs	r3, r0
 80096b0:	4322      	orrs	r2, r4
 80096b2:	616a      	str	r2, [r5, #20]
 80096b4:	9301      	str	r3, [sp, #4]
 80096b6:	9c01      	ldr	r4, [sp, #4]
 80096b8:	61ac      	str	r4, [r5, #24]
 80096ba:	1e63      	subs	r3, r4, #1
 80096bc:	419c      	sbcs	r4, r3
 80096be:	3401      	adds	r4, #1
 80096c0:	612c      	str	r4, [r5, #16]
 80096c2:	2e00      	cmp	r6, #0
 80096c4:	d018      	beq.n	80096f8 <__d2b+0x90>
 80096c6:	4b17      	ldr	r3, [pc, #92]	; (8009724 <__d2b+0xbc>)
 80096c8:	18f6      	adds	r6, r6, r3
 80096ca:	2335      	movs	r3, #53	; 0x35
 80096cc:	1836      	adds	r6, r6, r0
 80096ce:	1a18      	subs	r0, r3, r0
 80096d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d2:	603e      	str	r6, [r7, #0]
 80096d4:	6018      	str	r0, [r3, #0]
 80096d6:	0028      	movs	r0, r5
 80096d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80096da:	2280      	movs	r2, #128	; 0x80
 80096dc:	0352      	lsls	r2, r2, #13
 80096de:	4313      	orrs	r3, r2
 80096e0:	e7d6      	b.n	8009690 <__d2b+0x28>
 80096e2:	616c      	str	r4, [r5, #20]
 80096e4:	e7e7      	b.n	80096b6 <__d2b+0x4e>
 80096e6:	a801      	add	r0, sp, #4
 80096e8:	f7ff fd4c 	bl	8009184 <__lo0bits>
 80096ec:	2401      	movs	r4, #1
 80096ee:	9b01      	ldr	r3, [sp, #4]
 80096f0:	612c      	str	r4, [r5, #16]
 80096f2:	616b      	str	r3, [r5, #20]
 80096f4:	3020      	adds	r0, #32
 80096f6:	e7e4      	b.n	80096c2 <__d2b+0x5a>
 80096f8:	4b0b      	ldr	r3, [pc, #44]	; (8009728 <__d2b+0xc0>)
 80096fa:	18c0      	adds	r0, r0, r3
 80096fc:	4b0b      	ldr	r3, [pc, #44]	; (800972c <__d2b+0xc4>)
 80096fe:	6038      	str	r0, [r7, #0]
 8009700:	18e3      	adds	r3, r4, r3
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	18eb      	adds	r3, r5, r3
 8009706:	6958      	ldr	r0, [r3, #20]
 8009708:	f7ff fd22 	bl	8009150 <__hi0bits>
 800970c:	0164      	lsls	r4, r4, #5
 800970e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009710:	1a24      	subs	r4, r4, r0
 8009712:	601c      	str	r4, [r3, #0]
 8009714:	e7df      	b.n	80096d6 <__d2b+0x6e>
 8009716:	46c0      	nop			; (mov r8, r8)
 8009718:	0800a863 	.word	0x0800a863
 800971c:	0000030a 	.word	0x0000030a
 8009720:	0800a8d4 	.word	0x0800a8d4
 8009724:	fffffbcd 	.word	0xfffffbcd
 8009728:	fffffbce 	.word	0xfffffbce
 800972c:	3fffffff 	.word	0x3fffffff

08009730 <_calloc_r>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	0c13      	lsrs	r3, r2, #16
 8009734:	0c0d      	lsrs	r5, r1, #16
 8009736:	d11e      	bne.n	8009776 <_calloc_r+0x46>
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10c      	bne.n	8009756 <_calloc_r+0x26>
 800973c:	b289      	uxth	r1, r1
 800973e:	b294      	uxth	r4, r2
 8009740:	434c      	muls	r4, r1
 8009742:	0021      	movs	r1, r4
 8009744:	f000 f88c 	bl	8009860 <_malloc_r>
 8009748:	1e05      	subs	r5, r0, #0
 800974a:	d01b      	beq.n	8009784 <_calloc_r+0x54>
 800974c:	0022      	movs	r2, r4
 800974e:	2100      	movs	r1, #0
 8009750:	f7fd fd72 	bl	8007238 <memset>
 8009754:	e016      	b.n	8009784 <_calloc_r+0x54>
 8009756:	1c1d      	adds	r5, r3, #0
 8009758:	1c0b      	adds	r3, r1, #0
 800975a:	b292      	uxth	r2, r2
 800975c:	b289      	uxth	r1, r1
 800975e:	b29c      	uxth	r4, r3
 8009760:	4351      	muls	r1, r2
 8009762:	b2ab      	uxth	r3, r5
 8009764:	4363      	muls	r3, r4
 8009766:	0c0c      	lsrs	r4, r1, #16
 8009768:	191c      	adds	r4, r3, r4
 800976a:	0c22      	lsrs	r2, r4, #16
 800976c:	d107      	bne.n	800977e <_calloc_r+0x4e>
 800976e:	0424      	lsls	r4, r4, #16
 8009770:	b289      	uxth	r1, r1
 8009772:	430c      	orrs	r4, r1
 8009774:	e7e5      	b.n	8009742 <_calloc_r+0x12>
 8009776:	2b00      	cmp	r3, #0
 8009778:	d101      	bne.n	800977e <_calloc_r+0x4e>
 800977a:	1c13      	adds	r3, r2, #0
 800977c:	e7ed      	b.n	800975a <_calloc_r+0x2a>
 800977e:	230c      	movs	r3, #12
 8009780:	2500      	movs	r5, #0
 8009782:	6003      	str	r3, [r0, #0]
 8009784:	0028      	movs	r0, r5
 8009786:	bd70      	pop	{r4, r5, r6, pc}

08009788 <_free_r>:
 8009788:	b570      	push	{r4, r5, r6, lr}
 800978a:	0005      	movs	r5, r0
 800978c:	2900      	cmp	r1, #0
 800978e:	d010      	beq.n	80097b2 <_free_r+0x2a>
 8009790:	1f0c      	subs	r4, r1, #4
 8009792:	6823      	ldr	r3, [r4, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	da00      	bge.n	800979a <_free_r+0x12>
 8009798:	18e4      	adds	r4, r4, r3
 800979a:	0028      	movs	r0, r5
 800979c:	f000 fb34 	bl	8009e08 <__malloc_lock>
 80097a0:	4a1d      	ldr	r2, [pc, #116]	; (8009818 <_free_r+0x90>)
 80097a2:	6813      	ldr	r3, [r2, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d105      	bne.n	80097b4 <_free_r+0x2c>
 80097a8:	6063      	str	r3, [r4, #4]
 80097aa:	6014      	str	r4, [r2, #0]
 80097ac:	0028      	movs	r0, r5
 80097ae:	f000 fb33 	bl	8009e18 <__malloc_unlock>
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
 80097b4:	42a3      	cmp	r3, r4
 80097b6:	d908      	bls.n	80097ca <_free_r+0x42>
 80097b8:	6821      	ldr	r1, [r4, #0]
 80097ba:	1860      	adds	r0, r4, r1
 80097bc:	4283      	cmp	r3, r0
 80097be:	d1f3      	bne.n	80097a8 <_free_r+0x20>
 80097c0:	6818      	ldr	r0, [r3, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	1841      	adds	r1, r0, r1
 80097c6:	6021      	str	r1, [r4, #0]
 80097c8:	e7ee      	b.n	80097a8 <_free_r+0x20>
 80097ca:	001a      	movs	r2, r3
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <_free_r+0x4e>
 80097d2:	42a3      	cmp	r3, r4
 80097d4:	d9f9      	bls.n	80097ca <_free_r+0x42>
 80097d6:	6811      	ldr	r1, [r2, #0]
 80097d8:	1850      	adds	r0, r2, r1
 80097da:	42a0      	cmp	r0, r4
 80097dc:	d10b      	bne.n	80097f6 <_free_r+0x6e>
 80097de:	6820      	ldr	r0, [r4, #0]
 80097e0:	1809      	adds	r1, r1, r0
 80097e2:	1850      	adds	r0, r2, r1
 80097e4:	6011      	str	r1, [r2, #0]
 80097e6:	4283      	cmp	r3, r0
 80097e8:	d1e0      	bne.n	80097ac <_free_r+0x24>
 80097ea:	6818      	ldr	r0, [r3, #0]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	1841      	adds	r1, r0, r1
 80097f0:	6011      	str	r1, [r2, #0]
 80097f2:	6053      	str	r3, [r2, #4]
 80097f4:	e7da      	b.n	80097ac <_free_r+0x24>
 80097f6:	42a0      	cmp	r0, r4
 80097f8:	d902      	bls.n	8009800 <_free_r+0x78>
 80097fa:	230c      	movs	r3, #12
 80097fc:	602b      	str	r3, [r5, #0]
 80097fe:	e7d5      	b.n	80097ac <_free_r+0x24>
 8009800:	6821      	ldr	r1, [r4, #0]
 8009802:	1860      	adds	r0, r4, r1
 8009804:	4283      	cmp	r3, r0
 8009806:	d103      	bne.n	8009810 <_free_r+0x88>
 8009808:	6818      	ldr	r0, [r3, #0]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	1841      	adds	r1, r0, r1
 800980e:	6021      	str	r1, [r4, #0]
 8009810:	6063      	str	r3, [r4, #4]
 8009812:	6054      	str	r4, [r2, #4]
 8009814:	e7ca      	b.n	80097ac <_free_r+0x24>
 8009816:	46c0      	nop			; (mov r8, r8)
 8009818:	200003a0 	.word	0x200003a0

0800981c <sbrk_aligned>:
 800981c:	b570      	push	{r4, r5, r6, lr}
 800981e:	4e0f      	ldr	r6, [pc, #60]	; (800985c <sbrk_aligned+0x40>)
 8009820:	000d      	movs	r5, r1
 8009822:	6831      	ldr	r1, [r6, #0]
 8009824:	0004      	movs	r4, r0
 8009826:	2900      	cmp	r1, #0
 8009828:	d102      	bne.n	8009830 <sbrk_aligned+0x14>
 800982a:	f000 f9f1 	bl	8009c10 <_sbrk_r>
 800982e:	6030      	str	r0, [r6, #0]
 8009830:	0029      	movs	r1, r5
 8009832:	0020      	movs	r0, r4
 8009834:	f000 f9ec 	bl	8009c10 <_sbrk_r>
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	d00a      	beq.n	8009852 <sbrk_aligned+0x36>
 800983c:	2303      	movs	r3, #3
 800983e:	1cc5      	adds	r5, r0, #3
 8009840:	439d      	bics	r5, r3
 8009842:	42a8      	cmp	r0, r5
 8009844:	d007      	beq.n	8009856 <sbrk_aligned+0x3a>
 8009846:	1a29      	subs	r1, r5, r0
 8009848:	0020      	movs	r0, r4
 800984a:	f000 f9e1 	bl	8009c10 <_sbrk_r>
 800984e:	1c43      	adds	r3, r0, #1
 8009850:	d101      	bne.n	8009856 <sbrk_aligned+0x3a>
 8009852:	2501      	movs	r5, #1
 8009854:	426d      	negs	r5, r5
 8009856:	0028      	movs	r0, r5
 8009858:	bd70      	pop	{r4, r5, r6, pc}
 800985a:	46c0      	nop			; (mov r8, r8)
 800985c:	200003a4 	.word	0x200003a4

08009860 <_malloc_r>:
 8009860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009862:	2203      	movs	r2, #3
 8009864:	1ccb      	adds	r3, r1, #3
 8009866:	4393      	bics	r3, r2
 8009868:	3308      	adds	r3, #8
 800986a:	0006      	movs	r6, r0
 800986c:	001f      	movs	r7, r3
 800986e:	2b0c      	cmp	r3, #12
 8009870:	d232      	bcs.n	80098d8 <_malloc_r+0x78>
 8009872:	270c      	movs	r7, #12
 8009874:	42b9      	cmp	r1, r7
 8009876:	d831      	bhi.n	80098dc <_malloc_r+0x7c>
 8009878:	0030      	movs	r0, r6
 800987a:	f000 fac5 	bl	8009e08 <__malloc_lock>
 800987e:	4d32      	ldr	r5, [pc, #200]	; (8009948 <_malloc_r+0xe8>)
 8009880:	682b      	ldr	r3, [r5, #0]
 8009882:	001c      	movs	r4, r3
 8009884:	2c00      	cmp	r4, #0
 8009886:	d12e      	bne.n	80098e6 <_malloc_r+0x86>
 8009888:	0039      	movs	r1, r7
 800988a:	0030      	movs	r0, r6
 800988c:	f7ff ffc6 	bl	800981c <sbrk_aligned>
 8009890:	0004      	movs	r4, r0
 8009892:	1c43      	adds	r3, r0, #1
 8009894:	d11e      	bne.n	80098d4 <_malloc_r+0x74>
 8009896:	682c      	ldr	r4, [r5, #0]
 8009898:	0025      	movs	r5, r4
 800989a:	2d00      	cmp	r5, #0
 800989c:	d14a      	bne.n	8009934 <_malloc_r+0xd4>
 800989e:	6823      	ldr	r3, [r4, #0]
 80098a0:	0029      	movs	r1, r5
 80098a2:	18e3      	adds	r3, r4, r3
 80098a4:	0030      	movs	r0, r6
 80098a6:	9301      	str	r3, [sp, #4]
 80098a8:	f000 f9b2 	bl	8009c10 <_sbrk_r>
 80098ac:	9b01      	ldr	r3, [sp, #4]
 80098ae:	4283      	cmp	r3, r0
 80098b0:	d143      	bne.n	800993a <_malloc_r+0xda>
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	3703      	adds	r7, #3
 80098b6:	1aff      	subs	r7, r7, r3
 80098b8:	2303      	movs	r3, #3
 80098ba:	439f      	bics	r7, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	2f0c      	cmp	r7, #12
 80098c0:	d200      	bcs.n	80098c4 <_malloc_r+0x64>
 80098c2:	270c      	movs	r7, #12
 80098c4:	0039      	movs	r1, r7
 80098c6:	0030      	movs	r0, r6
 80098c8:	f7ff ffa8 	bl	800981c <sbrk_aligned>
 80098cc:	1c43      	adds	r3, r0, #1
 80098ce:	d034      	beq.n	800993a <_malloc_r+0xda>
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	19df      	adds	r7, r3, r7
 80098d4:	6027      	str	r7, [r4, #0]
 80098d6:	e013      	b.n	8009900 <_malloc_r+0xa0>
 80098d8:	2b00      	cmp	r3, #0
 80098da:	dacb      	bge.n	8009874 <_malloc_r+0x14>
 80098dc:	230c      	movs	r3, #12
 80098de:	2500      	movs	r5, #0
 80098e0:	6033      	str	r3, [r6, #0]
 80098e2:	0028      	movs	r0, r5
 80098e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098e6:	6822      	ldr	r2, [r4, #0]
 80098e8:	1bd1      	subs	r1, r2, r7
 80098ea:	d420      	bmi.n	800992e <_malloc_r+0xce>
 80098ec:	290b      	cmp	r1, #11
 80098ee:	d917      	bls.n	8009920 <_malloc_r+0xc0>
 80098f0:	19e2      	adds	r2, r4, r7
 80098f2:	6027      	str	r7, [r4, #0]
 80098f4:	42a3      	cmp	r3, r4
 80098f6:	d111      	bne.n	800991c <_malloc_r+0xbc>
 80098f8:	602a      	str	r2, [r5, #0]
 80098fa:	6863      	ldr	r3, [r4, #4]
 80098fc:	6011      	str	r1, [r2, #0]
 80098fe:	6053      	str	r3, [r2, #4]
 8009900:	0030      	movs	r0, r6
 8009902:	0025      	movs	r5, r4
 8009904:	f000 fa88 	bl	8009e18 <__malloc_unlock>
 8009908:	2207      	movs	r2, #7
 800990a:	350b      	adds	r5, #11
 800990c:	1d23      	adds	r3, r4, #4
 800990e:	4395      	bics	r5, r2
 8009910:	1aea      	subs	r2, r5, r3
 8009912:	429d      	cmp	r5, r3
 8009914:	d0e5      	beq.n	80098e2 <_malloc_r+0x82>
 8009916:	1b5b      	subs	r3, r3, r5
 8009918:	50a3      	str	r3, [r4, r2]
 800991a:	e7e2      	b.n	80098e2 <_malloc_r+0x82>
 800991c:	605a      	str	r2, [r3, #4]
 800991e:	e7ec      	b.n	80098fa <_malloc_r+0x9a>
 8009920:	6862      	ldr	r2, [r4, #4]
 8009922:	42a3      	cmp	r3, r4
 8009924:	d101      	bne.n	800992a <_malloc_r+0xca>
 8009926:	602a      	str	r2, [r5, #0]
 8009928:	e7ea      	b.n	8009900 <_malloc_r+0xa0>
 800992a:	605a      	str	r2, [r3, #4]
 800992c:	e7e8      	b.n	8009900 <_malloc_r+0xa0>
 800992e:	0023      	movs	r3, r4
 8009930:	6864      	ldr	r4, [r4, #4]
 8009932:	e7a7      	b.n	8009884 <_malloc_r+0x24>
 8009934:	002c      	movs	r4, r5
 8009936:	686d      	ldr	r5, [r5, #4]
 8009938:	e7af      	b.n	800989a <_malloc_r+0x3a>
 800993a:	230c      	movs	r3, #12
 800993c:	0030      	movs	r0, r6
 800993e:	6033      	str	r3, [r6, #0]
 8009940:	f000 fa6a 	bl	8009e18 <__malloc_unlock>
 8009944:	e7cd      	b.n	80098e2 <_malloc_r+0x82>
 8009946:	46c0      	nop			; (mov r8, r8)
 8009948:	200003a0 	.word	0x200003a0

0800994c <__sfputc_r>:
 800994c:	6893      	ldr	r3, [r2, #8]
 800994e:	b510      	push	{r4, lr}
 8009950:	3b01      	subs	r3, #1
 8009952:	6093      	str	r3, [r2, #8]
 8009954:	2b00      	cmp	r3, #0
 8009956:	da04      	bge.n	8009962 <__sfputc_r+0x16>
 8009958:	6994      	ldr	r4, [r2, #24]
 800995a:	42a3      	cmp	r3, r4
 800995c:	db07      	blt.n	800996e <__sfputc_r+0x22>
 800995e:	290a      	cmp	r1, #10
 8009960:	d005      	beq.n	800996e <__sfputc_r+0x22>
 8009962:	6813      	ldr	r3, [r2, #0]
 8009964:	1c58      	adds	r0, r3, #1
 8009966:	6010      	str	r0, [r2, #0]
 8009968:	7019      	strb	r1, [r3, #0]
 800996a:	0008      	movs	r0, r1
 800996c:	bd10      	pop	{r4, pc}
 800996e:	f7fe f96f 	bl	8007c50 <__swbuf_r>
 8009972:	0001      	movs	r1, r0
 8009974:	e7f9      	b.n	800996a <__sfputc_r+0x1e>

08009976 <__sfputs_r>:
 8009976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009978:	0006      	movs	r6, r0
 800997a:	000f      	movs	r7, r1
 800997c:	0014      	movs	r4, r2
 800997e:	18d5      	adds	r5, r2, r3
 8009980:	42ac      	cmp	r4, r5
 8009982:	d101      	bne.n	8009988 <__sfputs_r+0x12>
 8009984:	2000      	movs	r0, #0
 8009986:	e007      	b.n	8009998 <__sfputs_r+0x22>
 8009988:	7821      	ldrb	r1, [r4, #0]
 800998a:	003a      	movs	r2, r7
 800998c:	0030      	movs	r0, r6
 800998e:	f7ff ffdd 	bl	800994c <__sfputc_r>
 8009992:	3401      	adds	r4, #1
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d1f3      	bne.n	8009980 <__sfputs_r+0xa>
 8009998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800999c <_vfiprintf_r>:
 800999c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800999e:	b0a1      	sub	sp, #132	; 0x84
 80099a0:	0006      	movs	r6, r0
 80099a2:	000c      	movs	r4, r1
 80099a4:	001f      	movs	r7, r3
 80099a6:	9203      	str	r2, [sp, #12]
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d004      	beq.n	80099b6 <_vfiprintf_r+0x1a>
 80099ac:	6983      	ldr	r3, [r0, #24]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <_vfiprintf_r+0x1a>
 80099b2:	f7ff f9ef 	bl	8008d94 <__sinit>
 80099b6:	4b8e      	ldr	r3, [pc, #568]	; (8009bf0 <_vfiprintf_r+0x254>)
 80099b8:	429c      	cmp	r4, r3
 80099ba:	d11c      	bne.n	80099f6 <_vfiprintf_r+0x5a>
 80099bc:	6874      	ldr	r4, [r6, #4]
 80099be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099c0:	07db      	lsls	r3, r3, #31
 80099c2:	d405      	bmi.n	80099d0 <_vfiprintf_r+0x34>
 80099c4:	89a3      	ldrh	r3, [r4, #12]
 80099c6:	059b      	lsls	r3, r3, #22
 80099c8:	d402      	bmi.n	80099d0 <_vfiprintf_r+0x34>
 80099ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099cc:	f7ff fa87 	bl	8008ede <__retarget_lock_acquire_recursive>
 80099d0:	89a3      	ldrh	r3, [r4, #12]
 80099d2:	071b      	lsls	r3, r3, #28
 80099d4:	d502      	bpl.n	80099dc <_vfiprintf_r+0x40>
 80099d6:	6923      	ldr	r3, [r4, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d11d      	bne.n	8009a18 <_vfiprintf_r+0x7c>
 80099dc:	0021      	movs	r1, r4
 80099de:	0030      	movs	r0, r6
 80099e0:	f7fe f98c 	bl	8007cfc <__swsetup_r>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d017      	beq.n	8009a18 <_vfiprintf_r+0x7c>
 80099e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099ea:	07db      	lsls	r3, r3, #31
 80099ec:	d50d      	bpl.n	8009a0a <_vfiprintf_r+0x6e>
 80099ee:	2001      	movs	r0, #1
 80099f0:	4240      	negs	r0, r0
 80099f2:	b021      	add	sp, #132	; 0x84
 80099f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099f6:	4b7f      	ldr	r3, [pc, #508]	; (8009bf4 <_vfiprintf_r+0x258>)
 80099f8:	429c      	cmp	r4, r3
 80099fa:	d101      	bne.n	8009a00 <_vfiprintf_r+0x64>
 80099fc:	68b4      	ldr	r4, [r6, #8]
 80099fe:	e7de      	b.n	80099be <_vfiprintf_r+0x22>
 8009a00:	4b7d      	ldr	r3, [pc, #500]	; (8009bf8 <_vfiprintf_r+0x25c>)
 8009a02:	429c      	cmp	r4, r3
 8009a04:	d1db      	bne.n	80099be <_vfiprintf_r+0x22>
 8009a06:	68f4      	ldr	r4, [r6, #12]
 8009a08:	e7d9      	b.n	80099be <_vfiprintf_r+0x22>
 8009a0a:	89a3      	ldrh	r3, [r4, #12]
 8009a0c:	059b      	lsls	r3, r3, #22
 8009a0e:	d4ee      	bmi.n	80099ee <_vfiprintf_r+0x52>
 8009a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a12:	f7ff fa65 	bl	8008ee0 <__retarget_lock_release_recursive>
 8009a16:	e7ea      	b.n	80099ee <_vfiprintf_r+0x52>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	ad08      	add	r5, sp, #32
 8009a1c:	616b      	str	r3, [r5, #20]
 8009a1e:	3320      	adds	r3, #32
 8009a20:	766b      	strb	r3, [r5, #25]
 8009a22:	3310      	adds	r3, #16
 8009a24:	76ab      	strb	r3, [r5, #26]
 8009a26:	9707      	str	r7, [sp, #28]
 8009a28:	9f03      	ldr	r7, [sp, #12]
 8009a2a:	783b      	ldrb	r3, [r7, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <_vfiprintf_r+0x98>
 8009a30:	2b25      	cmp	r3, #37	; 0x25
 8009a32:	d14e      	bne.n	8009ad2 <_vfiprintf_r+0x136>
 8009a34:	9b03      	ldr	r3, [sp, #12]
 8009a36:	1afb      	subs	r3, r7, r3
 8009a38:	9305      	str	r3, [sp, #20]
 8009a3a:	9b03      	ldr	r3, [sp, #12]
 8009a3c:	429f      	cmp	r7, r3
 8009a3e:	d00d      	beq.n	8009a5c <_vfiprintf_r+0xc0>
 8009a40:	9b05      	ldr	r3, [sp, #20]
 8009a42:	0021      	movs	r1, r4
 8009a44:	0030      	movs	r0, r6
 8009a46:	9a03      	ldr	r2, [sp, #12]
 8009a48:	f7ff ff95 	bl	8009976 <__sfputs_r>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d100      	bne.n	8009a52 <_vfiprintf_r+0xb6>
 8009a50:	e0b5      	b.n	8009bbe <_vfiprintf_r+0x222>
 8009a52:	696a      	ldr	r2, [r5, #20]
 8009a54:	9b05      	ldr	r3, [sp, #20]
 8009a56:	4694      	mov	ip, r2
 8009a58:	4463      	add	r3, ip
 8009a5a:	616b      	str	r3, [r5, #20]
 8009a5c:	783b      	ldrb	r3, [r7, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d100      	bne.n	8009a64 <_vfiprintf_r+0xc8>
 8009a62:	e0ac      	b.n	8009bbe <_vfiprintf_r+0x222>
 8009a64:	2201      	movs	r2, #1
 8009a66:	1c7b      	adds	r3, r7, #1
 8009a68:	9303      	str	r3, [sp, #12]
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	4252      	negs	r2, r2
 8009a6e:	606a      	str	r2, [r5, #4]
 8009a70:	a904      	add	r1, sp, #16
 8009a72:	3254      	adds	r2, #84	; 0x54
 8009a74:	1852      	adds	r2, r2, r1
 8009a76:	602b      	str	r3, [r5, #0]
 8009a78:	60eb      	str	r3, [r5, #12]
 8009a7a:	60ab      	str	r3, [r5, #8]
 8009a7c:	7013      	strb	r3, [r2, #0]
 8009a7e:	65ab      	str	r3, [r5, #88]	; 0x58
 8009a80:	9b03      	ldr	r3, [sp, #12]
 8009a82:	2205      	movs	r2, #5
 8009a84:	7819      	ldrb	r1, [r3, #0]
 8009a86:	485d      	ldr	r0, [pc, #372]	; (8009bfc <_vfiprintf_r+0x260>)
 8009a88:	f7ff faa2 	bl	8008fd0 <memchr>
 8009a8c:	9b03      	ldr	r3, [sp, #12]
 8009a8e:	1c5f      	adds	r7, r3, #1
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d120      	bne.n	8009ad6 <_vfiprintf_r+0x13a>
 8009a94:	682a      	ldr	r2, [r5, #0]
 8009a96:	06d3      	lsls	r3, r2, #27
 8009a98:	d504      	bpl.n	8009aa4 <_vfiprintf_r+0x108>
 8009a9a:	2353      	movs	r3, #83	; 0x53
 8009a9c:	a904      	add	r1, sp, #16
 8009a9e:	185b      	adds	r3, r3, r1
 8009aa0:	2120      	movs	r1, #32
 8009aa2:	7019      	strb	r1, [r3, #0]
 8009aa4:	0713      	lsls	r3, r2, #28
 8009aa6:	d504      	bpl.n	8009ab2 <_vfiprintf_r+0x116>
 8009aa8:	2353      	movs	r3, #83	; 0x53
 8009aaa:	a904      	add	r1, sp, #16
 8009aac:	185b      	adds	r3, r3, r1
 8009aae:	212b      	movs	r1, #43	; 0x2b
 8009ab0:	7019      	strb	r1, [r3, #0]
 8009ab2:	9b03      	ldr	r3, [sp, #12]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ab8:	d016      	beq.n	8009ae8 <_vfiprintf_r+0x14c>
 8009aba:	2100      	movs	r1, #0
 8009abc:	68eb      	ldr	r3, [r5, #12]
 8009abe:	9f03      	ldr	r7, [sp, #12]
 8009ac0:	783a      	ldrb	r2, [r7, #0]
 8009ac2:	1c78      	adds	r0, r7, #1
 8009ac4:	3a30      	subs	r2, #48	; 0x30
 8009ac6:	4684      	mov	ip, r0
 8009ac8:	2a09      	cmp	r2, #9
 8009aca:	d94f      	bls.n	8009b6c <_vfiprintf_r+0x1d0>
 8009acc:	2900      	cmp	r1, #0
 8009ace:	d111      	bne.n	8009af4 <_vfiprintf_r+0x158>
 8009ad0:	e017      	b.n	8009b02 <_vfiprintf_r+0x166>
 8009ad2:	3701      	adds	r7, #1
 8009ad4:	e7a9      	b.n	8009a2a <_vfiprintf_r+0x8e>
 8009ad6:	4b49      	ldr	r3, [pc, #292]	; (8009bfc <_vfiprintf_r+0x260>)
 8009ad8:	682a      	ldr	r2, [r5, #0]
 8009ada:	1ac0      	subs	r0, r0, r3
 8009adc:	2301      	movs	r3, #1
 8009ade:	4083      	lsls	r3, r0
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	602b      	str	r3, [r5, #0]
 8009ae4:	9703      	str	r7, [sp, #12]
 8009ae6:	e7cb      	b.n	8009a80 <_vfiprintf_r+0xe4>
 8009ae8:	9b07      	ldr	r3, [sp, #28]
 8009aea:	1d19      	adds	r1, r3, #4
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	9107      	str	r1, [sp, #28]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	db01      	blt.n	8009af8 <_vfiprintf_r+0x15c>
 8009af4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009af6:	e004      	b.n	8009b02 <_vfiprintf_r+0x166>
 8009af8:	425b      	negs	r3, r3
 8009afa:	60eb      	str	r3, [r5, #12]
 8009afc:	2302      	movs	r3, #2
 8009afe:	4313      	orrs	r3, r2
 8009b00:	602b      	str	r3, [r5, #0]
 8009b02:	783b      	ldrb	r3, [r7, #0]
 8009b04:	2b2e      	cmp	r3, #46	; 0x2e
 8009b06:	d10a      	bne.n	8009b1e <_vfiprintf_r+0x182>
 8009b08:	787b      	ldrb	r3, [r7, #1]
 8009b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b0c:	d137      	bne.n	8009b7e <_vfiprintf_r+0x1e2>
 8009b0e:	9b07      	ldr	r3, [sp, #28]
 8009b10:	3702      	adds	r7, #2
 8009b12:	1d1a      	adds	r2, r3, #4
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	9207      	str	r2, [sp, #28]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	db2d      	blt.n	8009b78 <_vfiprintf_r+0x1dc>
 8009b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b1e:	2203      	movs	r2, #3
 8009b20:	7839      	ldrb	r1, [r7, #0]
 8009b22:	4837      	ldr	r0, [pc, #220]	; (8009c00 <_vfiprintf_r+0x264>)
 8009b24:	f7ff fa54 	bl	8008fd0 <memchr>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	d007      	beq.n	8009b3c <_vfiprintf_r+0x1a0>
 8009b2c:	4b34      	ldr	r3, [pc, #208]	; (8009c00 <_vfiprintf_r+0x264>)
 8009b2e:	682a      	ldr	r2, [r5, #0]
 8009b30:	1ac0      	subs	r0, r0, r3
 8009b32:	2340      	movs	r3, #64	; 0x40
 8009b34:	4083      	lsls	r3, r0
 8009b36:	4313      	orrs	r3, r2
 8009b38:	3701      	adds	r7, #1
 8009b3a:	602b      	str	r3, [r5, #0]
 8009b3c:	7839      	ldrb	r1, [r7, #0]
 8009b3e:	1c7b      	adds	r3, r7, #1
 8009b40:	2206      	movs	r2, #6
 8009b42:	4830      	ldr	r0, [pc, #192]	; (8009c04 <_vfiprintf_r+0x268>)
 8009b44:	9303      	str	r3, [sp, #12]
 8009b46:	7629      	strb	r1, [r5, #24]
 8009b48:	f7ff fa42 	bl	8008fd0 <memchr>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d045      	beq.n	8009bdc <_vfiprintf_r+0x240>
 8009b50:	4b2d      	ldr	r3, [pc, #180]	; (8009c08 <_vfiprintf_r+0x26c>)
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d127      	bne.n	8009ba6 <_vfiprintf_r+0x20a>
 8009b56:	2207      	movs	r2, #7
 8009b58:	9b07      	ldr	r3, [sp, #28]
 8009b5a:	3307      	adds	r3, #7
 8009b5c:	4393      	bics	r3, r2
 8009b5e:	3308      	adds	r3, #8
 8009b60:	9307      	str	r3, [sp, #28]
 8009b62:	696b      	ldr	r3, [r5, #20]
 8009b64:	9a04      	ldr	r2, [sp, #16]
 8009b66:	189b      	adds	r3, r3, r2
 8009b68:	616b      	str	r3, [r5, #20]
 8009b6a:	e75d      	b.n	8009a28 <_vfiprintf_r+0x8c>
 8009b6c:	210a      	movs	r1, #10
 8009b6e:	434b      	muls	r3, r1
 8009b70:	4667      	mov	r7, ip
 8009b72:	189b      	adds	r3, r3, r2
 8009b74:	3909      	subs	r1, #9
 8009b76:	e7a3      	b.n	8009ac0 <_vfiprintf_r+0x124>
 8009b78:	2301      	movs	r3, #1
 8009b7a:	425b      	negs	r3, r3
 8009b7c:	e7ce      	b.n	8009b1c <_vfiprintf_r+0x180>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	001a      	movs	r2, r3
 8009b82:	3701      	adds	r7, #1
 8009b84:	606b      	str	r3, [r5, #4]
 8009b86:	7839      	ldrb	r1, [r7, #0]
 8009b88:	1c78      	adds	r0, r7, #1
 8009b8a:	3930      	subs	r1, #48	; 0x30
 8009b8c:	4684      	mov	ip, r0
 8009b8e:	2909      	cmp	r1, #9
 8009b90:	d903      	bls.n	8009b9a <_vfiprintf_r+0x1fe>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d0c3      	beq.n	8009b1e <_vfiprintf_r+0x182>
 8009b96:	9209      	str	r2, [sp, #36]	; 0x24
 8009b98:	e7c1      	b.n	8009b1e <_vfiprintf_r+0x182>
 8009b9a:	230a      	movs	r3, #10
 8009b9c:	435a      	muls	r2, r3
 8009b9e:	4667      	mov	r7, ip
 8009ba0:	1852      	adds	r2, r2, r1
 8009ba2:	3b09      	subs	r3, #9
 8009ba4:	e7ef      	b.n	8009b86 <_vfiprintf_r+0x1ea>
 8009ba6:	ab07      	add	r3, sp, #28
 8009ba8:	9300      	str	r3, [sp, #0]
 8009baa:	0022      	movs	r2, r4
 8009bac:	0029      	movs	r1, r5
 8009bae:	0030      	movs	r0, r6
 8009bb0:	4b16      	ldr	r3, [pc, #88]	; (8009c0c <_vfiprintf_r+0x270>)
 8009bb2:	f7fd fbf3 	bl	800739c <_printf_float>
 8009bb6:	9004      	str	r0, [sp, #16]
 8009bb8:	9b04      	ldr	r3, [sp, #16]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	d1d1      	bne.n	8009b62 <_vfiprintf_r+0x1c6>
 8009bbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bc0:	07db      	lsls	r3, r3, #31
 8009bc2:	d405      	bmi.n	8009bd0 <_vfiprintf_r+0x234>
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	059b      	lsls	r3, r3, #22
 8009bc8:	d402      	bmi.n	8009bd0 <_vfiprintf_r+0x234>
 8009bca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bcc:	f7ff f988 	bl	8008ee0 <__retarget_lock_release_recursive>
 8009bd0:	89a3      	ldrh	r3, [r4, #12]
 8009bd2:	065b      	lsls	r3, r3, #25
 8009bd4:	d500      	bpl.n	8009bd8 <_vfiprintf_r+0x23c>
 8009bd6:	e70a      	b.n	80099ee <_vfiprintf_r+0x52>
 8009bd8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009bda:	e70a      	b.n	80099f2 <_vfiprintf_r+0x56>
 8009bdc:	ab07      	add	r3, sp, #28
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	0022      	movs	r2, r4
 8009be2:	0029      	movs	r1, r5
 8009be4:	0030      	movs	r0, r6
 8009be6:	4b09      	ldr	r3, [pc, #36]	; (8009c0c <_vfiprintf_r+0x270>)
 8009be8:	f7fd fe8a 	bl	8007900 <_printf_i>
 8009bec:	e7e3      	b.n	8009bb6 <_vfiprintf_r+0x21a>
 8009bee:	46c0      	nop			; (mov r8, r8)
 8009bf0:	0800a894 	.word	0x0800a894
 8009bf4:	0800a8b4 	.word	0x0800a8b4
 8009bf8:	0800a874 	.word	0x0800a874
 8009bfc:	0800aa2c 	.word	0x0800aa2c
 8009c00:	0800aa32 	.word	0x0800aa32
 8009c04:	0800aa36 	.word	0x0800aa36
 8009c08:	0800739d 	.word	0x0800739d
 8009c0c:	08009977 	.word	0x08009977

08009c10 <_sbrk_r>:
 8009c10:	2300      	movs	r3, #0
 8009c12:	b570      	push	{r4, r5, r6, lr}
 8009c14:	4d06      	ldr	r5, [pc, #24]	; (8009c30 <_sbrk_r+0x20>)
 8009c16:	0004      	movs	r4, r0
 8009c18:	0008      	movs	r0, r1
 8009c1a:	602b      	str	r3, [r5, #0]
 8009c1c:	f7fa fb18 	bl	8004250 <_sbrk>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	d103      	bne.n	8009c2c <_sbrk_r+0x1c>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d000      	beq.n	8009c2c <_sbrk_r+0x1c>
 8009c2a:	6023      	str	r3, [r4, #0]
 8009c2c:	bd70      	pop	{r4, r5, r6, pc}
 8009c2e:	46c0      	nop			; (mov r8, r8)
 8009c30:	200003a8 	.word	0x200003a8

08009c34 <__sread>:
 8009c34:	b570      	push	{r4, r5, r6, lr}
 8009c36:	000c      	movs	r4, r1
 8009c38:	250e      	movs	r5, #14
 8009c3a:	5f49      	ldrsh	r1, [r1, r5]
 8009c3c:	f000 f8f4 	bl	8009e28 <_read_r>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	db03      	blt.n	8009c4c <__sread+0x18>
 8009c44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009c46:	181b      	adds	r3, r3, r0
 8009c48:	6563      	str	r3, [r4, #84]	; 0x54
 8009c4a:	bd70      	pop	{r4, r5, r6, pc}
 8009c4c:	89a3      	ldrh	r3, [r4, #12]
 8009c4e:	4a02      	ldr	r2, [pc, #8]	; (8009c58 <__sread+0x24>)
 8009c50:	4013      	ands	r3, r2
 8009c52:	81a3      	strh	r3, [r4, #12]
 8009c54:	e7f9      	b.n	8009c4a <__sread+0x16>
 8009c56:	46c0      	nop			; (mov r8, r8)
 8009c58:	ffffefff 	.word	0xffffefff

08009c5c <__swrite>:
 8009c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5e:	001f      	movs	r7, r3
 8009c60:	898b      	ldrh	r3, [r1, #12]
 8009c62:	0005      	movs	r5, r0
 8009c64:	000c      	movs	r4, r1
 8009c66:	0016      	movs	r6, r2
 8009c68:	05db      	lsls	r3, r3, #23
 8009c6a:	d505      	bpl.n	8009c78 <__swrite+0x1c>
 8009c6c:	230e      	movs	r3, #14
 8009c6e:	5ec9      	ldrsh	r1, [r1, r3]
 8009c70:	2200      	movs	r2, #0
 8009c72:	2302      	movs	r3, #2
 8009c74:	f000 f8a2 	bl	8009dbc <_lseek_r>
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	4a05      	ldr	r2, [pc, #20]	; (8009c90 <__swrite+0x34>)
 8009c7c:	0028      	movs	r0, r5
 8009c7e:	4013      	ands	r3, r2
 8009c80:	81a3      	strh	r3, [r4, #12]
 8009c82:	0032      	movs	r2, r6
 8009c84:	230e      	movs	r3, #14
 8009c86:	5ee1      	ldrsh	r1, [r4, r3]
 8009c88:	003b      	movs	r3, r7
 8009c8a:	f000 f81f 	bl	8009ccc <_write_r>
 8009c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c90:	ffffefff 	.word	0xffffefff

08009c94 <__sseek>:
 8009c94:	b570      	push	{r4, r5, r6, lr}
 8009c96:	000c      	movs	r4, r1
 8009c98:	250e      	movs	r5, #14
 8009c9a:	5f49      	ldrsh	r1, [r1, r5]
 8009c9c:	f000 f88e 	bl	8009dbc <_lseek_r>
 8009ca0:	89a3      	ldrh	r3, [r4, #12]
 8009ca2:	1c42      	adds	r2, r0, #1
 8009ca4:	d103      	bne.n	8009cae <__sseek+0x1a>
 8009ca6:	4a05      	ldr	r2, [pc, #20]	; (8009cbc <__sseek+0x28>)
 8009ca8:	4013      	ands	r3, r2
 8009caa:	81a3      	strh	r3, [r4, #12]
 8009cac:	bd70      	pop	{r4, r5, r6, pc}
 8009cae:	2280      	movs	r2, #128	; 0x80
 8009cb0:	0152      	lsls	r2, r2, #5
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	81a3      	strh	r3, [r4, #12]
 8009cb6:	6560      	str	r0, [r4, #84]	; 0x54
 8009cb8:	e7f8      	b.n	8009cac <__sseek+0x18>
 8009cba:	46c0      	nop			; (mov r8, r8)
 8009cbc:	ffffefff 	.word	0xffffefff

08009cc0 <__sclose>:
 8009cc0:	b510      	push	{r4, lr}
 8009cc2:	230e      	movs	r3, #14
 8009cc4:	5ec9      	ldrsh	r1, [r1, r3]
 8009cc6:	f000 f833 	bl	8009d30 <_close_r>
 8009cca:	bd10      	pop	{r4, pc}

08009ccc <_write_r>:
 8009ccc:	b570      	push	{r4, r5, r6, lr}
 8009cce:	0004      	movs	r4, r0
 8009cd0:	0008      	movs	r0, r1
 8009cd2:	0011      	movs	r1, r2
 8009cd4:	001a      	movs	r2, r3
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	4d05      	ldr	r5, [pc, #20]	; (8009cf0 <_write_r+0x24>)
 8009cda:	602b      	str	r3, [r5, #0]
 8009cdc:	f7f8 fcfa 	bl	80026d4 <_write>
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	d103      	bne.n	8009cec <_write_r+0x20>
 8009ce4:	682b      	ldr	r3, [r5, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d000      	beq.n	8009cec <_write_r+0x20>
 8009cea:	6023      	str	r3, [r4, #0]
 8009cec:	bd70      	pop	{r4, r5, r6, pc}
 8009cee:	46c0      	nop			; (mov r8, r8)
 8009cf0:	200003a8 	.word	0x200003a8

08009cf4 <__assert_func>:
 8009cf4:	b530      	push	{r4, r5, lr}
 8009cf6:	0014      	movs	r4, r2
 8009cf8:	001a      	movs	r2, r3
 8009cfa:	4b09      	ldr	r3, [pc, #36]	; (8009d20 <__assert_func+0x2c>)
 8009cfc:	0005      	movs	r5, r0
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	b085      	sub	sp, #20
 8009d02:	68d8      	ldr	r0, [r3, #12]
 8009d04:	4b07      	ldr	r3, [pc, #28]	; (8009d24 <__assert_func+0x30>)
 8009d06:	2c00      	cmp	r4, #0
 8009d08:	d101      	bne.n	8009d0e <__assert_func+0x1a>
 8009d0a:	4b07      	ldr	r3, [pc, #28]	; (8009d28 <__assert_func+0x34>)
 8009d0c:	001c      	movs	r4, r3
 8009d0e:	9301      	str	r3, [sp, #4]
 8009d10:	9100      	str	r1, [sp, #0]
 8009d12:	002b      	movs	r3, r5
 8009d14:	4905      	ldr	r1, [pc, #20]	; (8009d2c <__assert_func+0x38>)
 8009d16:	9402      	str	r4, [sp, #8]
 8009d18:	f000 f81c 	bl	8009d54 <fiprintf>
 8009d1c:	f000 f8a5 	bl	8009e6a <abort>
 8009d20:	2000008c 	.word	0x2000008c
 8009d24:	0800aa3d 	.word	0x0800aa3d
 8009d28:	0800aa78 	.word	0x0800aa78
 8009d2c:	0800aa4a 	.word	0x0800aa4a

08009d30 <_close_r>:
 8009d30:	2300      	movs	r3, #0
 8009d32:	b570      	push	{r4, r5, r6, lr}
 8009d34:	4d06      	ldr	r5, [pc, #24]	; (8009d50 <_close_r+0x20>)
 8009d36:	0004      	movs	r4, r0
 8009d38:	0008      	movs	r0, r1
 8009d3a:	602b      	str	r3, [r5, #0]
 8009d3c:	f7fa fa5b 	bl	80041f6 <_close>
 8009d40:	1c43      	adds	r3, r0, #1
 8009d42:	d103      	bne.n	8009d4c <_close_r+0x1c>
 8009d44:	682b      	ldr	r3, [r5, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d000      	beq.n	8009d4c <_close_r+0x1c>
 8009d4a:	6023      	str	r3, [r4, #0]
 8009d4c:	bd70      	pop	{r4, r5, r6, pc}
 8009d4e:	46c0      	nop			; (mov r8, r8)
 8009d50:	200003a8 	.word	0x200003a8

08009d54 <fiprintf>:
 8009d54:	b40e      	push	{r1, r2, r3}
 8009d56:	b503      	push	{r0, r1, lr}
 8009d58:	0001      	movs	r1, r0
 8009d5a:	ab03      	add	r3, sp, #12
 8009d5c:	4804      	ldr	r0, [pc, #16]	; (8009d70 <fiprintf+0x1c>)
 8009d5e:	cb04      	ldmia	r3!, {r2}
 8009d60:	6800      	ldr	r0, [r0, #0]
 8009d62:	9301      	str	r3, [sp, #4]
 8009d64:	f7ff fe1a 	bl	800999c <_vfiprintf_r>
 8009d68:	b002      	add	sp, #8
 8009d6a:	bc08      	pop	{r3}
 8009d6c:	b003      	add	sp, #12
 8009d6e:	4718      	bx	r3
 8009d70:	2000008c 	.word	0x2000008c

08009d74 <_fstat_r>:
 8009d74:	2300      	movs	r3, #0
 8009d76:	b570      	push	{r4, r5, r6, lr}
 8009d78:	4d06      	ldr	r5, [pc, #24]	; (8009d94 <_fstat_r+0x20>)
 8009d7a:	0004      	movs	r4, r0
 8009d7c:	0008      	movs	r0, r1
 8009d7e:	0011      	movs	r1, r2
 8009d80:	602b      	str	r3, [r5, #0]
 8009d82:	f7fa fa42 	bl	800420a <_fstat>
 8009d86:	1c43      	adds	r3, r0, #1
 8009d88:	d103      	bne.n	8009d92 <_fstat_r+0x1e>
 8009d8a:	682b      	ldr	r3, [r5, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d000      	beq.n	8009d92 <_fstat_r+0x1e>
 8009d90:	6023      	str	r3, [r4, #0]
 8009d92:	bd70      	pop	{r4, r5, r6, pc}
 8009d94:	200003a8 	.word	0x200003a8

08009d98 <_isatty_r>:
 8009d98:	2300      	movs	r3, #0
 8009d9a:	b570      	push	{r4, r5, r6, lr}
 8009d9c:	4d06      	ldr	r5, [pc, #24]	; (8009db8 <_isatty_r+0x20>)
 8009d9e:	0004      	movs	r4, r0
 8009da0:	0008      	movs	r0, r1
 8009da2:	602b      	str	r3, [r5, #0]
 8009da4:	f7fa fa3f 	bl	8004226 <_isatty>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d103      	bne.n	8009db4 <_isatty_r+0x1c>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d000      	beq.n	8009db4 <_isatty_r+0x1c>
 8009db2:	6023      	str	r3, [r4, #0]
 8009db4:	bd70      	pop	{r4, r5, r6, pc}
 8009db6:	46c0      	nop			; (mov r8, r8)
 8009db8:	200003a8 	.word	0x200003a8

08009dbc <_lseek_r>:
 8009dbc:	b570      	push	{r4, r5, r6, lr}
 8009dbe:	0004      	movs	r4, r0
 8009dc0:	0008      	movs	r0, r1
 8009dc2:	0011      	movs	r1, r2
 8009dc4:	001a      	movs	r2, r3
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	4d05      	ldr	r5, [pc, #20]	; (8009de0 <_lseek_r+0x24>)
 8009dca:	602b      	str	r3, [r5, #0]
 8009dcc:	f7fa fa34 	bl	8004238 <_lseek>
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	d103      	bne.n	8009ddc <_lseek_r+0x20>
 8009dd4:	682b      	ldr	r3, [r5, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d000      	beq.n	8009ddc <_lseek_r+0x20>
 8009dda:	6023      	str	r3, [r4, #0]
 8009ddc:	bd70      	pop	{r4, r5, r6, pc}
 8009dde:	46c0      	nop			; (mov r8, r8)
 8009de0:	200003a8 	.word	0x200003a8

08009de4 <__ascii_mbtowc>:
 8009de4:	b082      	sub	sp, #8
 8009de6:	2900      	cmp	r1, #0
 8009de8:	d100      	bne.n	8009dec <__ascii_mbtowc+0x8>
 8009dea:	a901      	add	r1, sp, #4
 8009dec:	1e10      	subs	r0, r2, #0
 8009dee:	d006      	beq.n	8009dfe <__ascii_mbtowc+0x1a>
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d006      	beq.n	8009e02 <__ascii_mbtowc+0x1e>
 8009df4:	7813      	ldrb	r3, [r2, #0]
 8009df6:	600b      	str	r3, [r1, #0]
 8009df8:	7810      	ldrb	r0, [r2, #0]
 8009dfa:	1e43      	subs	r3, r0, #1
 8009dfc:	4198      	sbcs	r0, r3
 8009dfe:	b002      	add	sp, #8
 8009e00:	4770      	bx	lr
 8009e02:	2002      	movs	r0, #2
 8009e04:	4240      	negs	r0, r0
 8009e06:	e7fa      	b.n	8009dfe <__ascii_mbtowc+0x1a>

08009e08 <__malloc_lock>:
 8009e08:	b510      	push	{r4, lr}
 8009e0a:	4802      	ldr	r0, [pc, #8]	; (8009e14 <__malloc_lock+0xc>)
 8009e0c:	f7ff f867 	bl	8008ede <__retarget_lock_acquire_recursive>
 8009e10:	bd10      	pop	{r4, pc}
 8009e12:	46c0      	nop			; (mov r8, r8)
 8009e14:	2000039c 	.word	0x2000039c

08009e18 <__malloc_unlock>:
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	4802      	ldr	r0, [pc, #8]	; (8009e24 <__malloc_unlock+0xc>)
 8009e1c:	f7ff f860 	bl	8008ee0 <__retarget_lock_release_recursive>
 8009e20:	bd10      	pop	{r4, pc}
 8009e22:	46c0      	nop			; (mov r8, r8)
 8009e24:	2000039c 	.word	0x2000039c

08009e28 <_read_r>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	0004      	movs	r4, r0
 8009e2c:	0008      	movs	r0, r1
 8009e2e:	0011      	movs	r1, r2
 8009e30:	001a      	movs	r2, r3
 8009e32:	2300      	movs	r3, #0
 8009e34:	4d05      	ldr	r5, [pc, #20]	; (8009e4c <_read_r+0x24>)
 8009e36:	602b      	str	r3, [r5, #0]
 8009e38:	f7fa f9c0 	bl	80041bc <_read>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d103      	bne.n	8009e48 <_read_r+0x20>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d000      	beq.n	8009e48 <_read_r+0x20>
 8009e46:	6023      	str	r3, [r4, #0]
 8009e48:	bd70      	pop	{r4, r5, r6, pc}
 8009e4a:	46c0      	nop			; (mov r8, r8)
 8009e4c:	200003a8 	.word	0x200003a8

08009e50 <__ascii_wctomb>:
 8009e50:	0003      	movs	r3, r0
 8009e52:	1e08      	subs	r0, r1, #0
 8009e54:	d005      	beq.n	8009e62 <__ascii_wctomb+0x12>
 8009e56:	2aff      	cmp	r2, #255	; 0xff
 8009e58:	d904      	bls.n	8009e64 <__ascii_wctomb+0x14>
 8009e5a:	228a      	movs	r2, #138	; 0x8a
 8009e5c:	2001      	movs	r0, #1
 8009e5e:	601a      	str	r2, [r3, #0]
 8009e60:	4240      	negs	r0, r0
 8009e62:	4770      	bx	lr
 8009e64:	2001      	movs	r0, #1
 8009e66:	700a      	strb	r2, [r1, #0]
 8009e68:	e7fb      	b.n	8009e62 <__ascii_wctomb+0x12>

08009e6a <abort>:
 8009e6a:	2006      	movs	r0, #6
 8009e6c:	b510      	push	{r4, lr}
 8009e6e:	f000 f82d 	bl	8009ecc <raise>
 8009e72:	2001      	movs	r0, #1
 8009e74:	f7fa f996 	bl	80041a4 <_exit>

08009e78 <_raise_r>:
 8009e78:	b570      	push	{r4, r5, r6, lr}
 8009e7a:	0004      	movs	r4, r0
 8009e7c:	000d      	movs	r5, r1
 8009e7e:	291f      	cmp	r1, #31
 8009e80:	d904      	bls.n	8009e8c <_raise_r+0x14>
 8009e82:	2316      	movs	r3, #22
 8009e84:	6003      	str	r3, [r0, #0]
 8009e86:	2001      	movs	r0, #1
 8009e88:	4240      	negs	r0, r0
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}
 8009e8c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d004      	beq.n	8009e9c <_raise_r+0x24>
 8009e92:	008a      	lsls	r2, r1, #2
 8009e94:	189b      	adds	r3, r3, r2
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	2a00      	cmp	r2, #0
 8009e9a:	d108      	bne.n	8009eae <_raise_r+0x36>
 8009e9c:	0020      	movs	r0, r4
 8009e9e:	f000 f831 	bl	8009f04 <_getpid_r>
 8009ea2:	002a      	movs	r2, r5
 8009ea4:	0001      	movs	r1, r0
 8009ea6:	0020      	movs	r0, r4
 8009ea8:	f000 f81a 	bl	8009ee0 <_kill_r>
 8009eac:	e7ed      	b.n	8009e8a <_raise_r+0x12>
 8009eae:	2000      	movs	r0, #0
 8009eb0:	2a01      	cmp	r2, #1
 8009eb2:	d0ea      	beq.n	8009e8a <_raise_r+0x12>
 8009eb4:	1c51      	adds	r1, r2, #1
 8009eb6:	d103      	bne.n	8009ec0 <_raise_r+0x48>
 8009eb8:	2316      	movs	r3, #22
 8009eba:	3001      	adds	r0, #1
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	e7e4      	b.n	8009e8a <_raise_r+0x12>
 8009ec0:	2400      	movs	r4, #0
 8009ec2:	0028      	movs	r0, r5
 8009ec4:	601c      	str	r4, [r3, #0]
 8009ec6:	4790      	blx	r2
 8009ec8:	0020      	movs	r0, r4
 8009eca:	e7de      	b.n	8009e8a <_raise_r+0x12>

08009ecc <raise>:
 8009ecc:	b510      	push	{r4, lr}
 8009ece:	4b03      	ldr	r3, [pc, #12]	; (8009edc <raise+0x10>)
 8009ed0:	0001      	movs	r1, r0
 8009ed2:	6818      	ldr	r0, [r3, #0]
 8009ed4:	f7ff ffd0 	bl	8009e78 <_raise_r>
 8009ed8:	bd10      	pop	{r4, pc}
 8009eda:	46c0      	nop			; (mov r8, r8)
 8009edc:	2000008c 	.word	0x2000008c

08009ee0 <_kill_r>:
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	b570      	push	{r4, r5, r6, lr}
 8009ee4:	4d06      	ldr	r5, [pc, #24]	; (8009f00 <_kill_r+0x20>)
 8009ee6:	0004      	movs	r4, r0
 8009ee8:	0008      	movs	r0, r1
 8009eea:	0011      	movs	r1, r2
 8009eec:	602b      	str	r3, [r5, #0]
 8009eee:	f7fa f949 	bl	8004184 <_kill>
 8009ef2:	1c43      	adds	r3, r0, #1
 8009ef4:	d103      	bne.n	8009efe <_kill_r+0x1e>
 8009ef6:	682b      	ldr	r3, [r5, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d000      	beq.n	8009efe <_kill_r+0x1e>
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	bd70      	pop	{r4, r5, r6, pc}
 8009f00:	200003a8 	.word	0x200003a8

08009f04 <_getpid_r>:
 8009f04:	b510      	push	{r4, lr}
 8009f06:	f7fa f937 	bl	8004178 <_getpid>
 8009f0a:	bd10      	pop	{r4, pc}

08009f0c <_init>:
 8009f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0e:	46c0      	nop			; (mov r8, r8)
 8009f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f12:	bc08      	pop	{r3}
 8009f14:	469e      	mov	lr, r3
 8009f16:	4770      	bx	lr

08009f18 <_fini>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	46c0      	nop			; (mov r8, r8)
 8009f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f1e:	bc08      	pop	{r3}
 8009f20:	469e      	mov	lr, r3
 8009f22:	4770      	bx	lr
