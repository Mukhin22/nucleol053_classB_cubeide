
nucleol053_classB_cubeide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006400  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000085c  080064c0  080064c0  000164c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006d24  08006d24  00016d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006d28  08006d28  00016d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000080  08006d2c  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .check_sum    00000028  08006d9c  08006d9c  00026d9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000150  200000f0  200000f0  000300f0  2**2
                  ALLOC
  9 ._user_heap_stack 00000c10  20000240  20000240  000300f0  2**2
                  ALLOC
 10 ._user_classb 00000078  20000000  20000000  00030000  2**2
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00026dc4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb96  00000000  00000000  00026dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b80  00000000  00000000  00036982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00039508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  0003a2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ece  00000000  00000000  0003af48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fe0  00000000  00000000  00054e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009804a  00000000  00000000  0006adf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102e40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003610  00000000  00000000  00102e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000f0 	.word	0x200000f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080064a8 	.word	0x080064a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000f4 	.word	0x200000f4
 8000104:	080064a8 	.word	0x080064a8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
  * @brief  Main program.
  * @param  : None
  * @retval : None
  */
int32_t main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* Configure the System clock to have a system clock = 32 MHz */
  SystemClock_Config();
 80004c0:	f000 f850 	bl	8000564 <SystemClock_Config>
  /* STM32L0xx HAL library initialization:
       - Configure the Flash prefetch, Flash preread and Buffer caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Low Level Initialization
     */
  HAL_Init();
 80004c4:	f002 f8d4 	bl	8002670 <HAL_Init>
  
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	05da      	lsls	r2, r3, #23
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	045b      	lsls	r3, r3, #17
 80004d0:	0019      	movs	r1, r3
 80004d2:	2000      	movs	r0, #0
 80004d4:	f003 fb60 	bl	8003b98 <HAL_RCC_MCOConfig>
    
  #if defined (STL_VERBOSE)
    /* Verbose messages ------------------------------------------------------*/
    USART_Configuration();
 80004d8:	f000 f942 	bl	8000760 <USART_Configuration>
    printf("\n\r %s\n\r", MESSAGE1);
 80004dc:	4a13      	ldr	r2, [pc, #76]	; (800052c <main+0x70>)
 80004de:	4b14      	ldr	r3, [pc, #80]	; (8000530 <main+0x74>)
 80004e0:	0011      	movs	r1, r2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f004 ff8c 	bl	8005400 <iprintf>
    printf(" %s\n\r", MESSAGE2);
 80004e8:	4a12      	ldr	r2, [pc, #72]	; (8000534 <main+0x78>)
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <main+0x7c>)
 80004ec:	0011      	movs	r1, r2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f004 ff86 	bl	8005400 <iprintf>
    printf(" ... main routine starts ...\r\n");
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <main+0x80>)
 80004f6:	0018      	movs	r0, r3
 80004f8:	f005 f80e 	bl	8005518 <puts>
  #endif /* STL_VERBOSE */

  #if defined (STL_EVAL_MODE)
    /* Evaluation board control ----------------------------------------------*/
    Eval_Board_HW_Init();
 80004fc:	f000 f8f4 	bl	80006e8 <Eval_Board_HW_Init>
  #endif /* STL_EVAL_MODE */
  /* NVIC configuration ------------------------------------------------------*/
  NVIC_Configuration();
 8000500:	f000 f81e 	bl	8000540 <NVIC_Configuration>
    /* if you debug TIM21 it is helpful to uncomment next lines */
    /*
    __DBGMCU_CLK_ENABLE();
    __HAL_FREEZE_TIM21_DBGMCU();
    */  
    BSP_LED_On(LED_ERR);
 8000504:	23a0      	movs	r3, #160	; 0xa0
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	2201      	movs	r2, #1
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	0018      	movs	r0, r3
 800050e:	f002 fdad 	bl	800306c <HAL_GPIO_WritePin>
  #endif  /* STL_EVAL_MODE */
  /* -------------------------------------------------------------------------*/
  /* This is where the main self-test routines are initialized */        
  STL_InitRunTimeChecks();
 8000512:	f000 fbfb 	bl	8000d0c <STL_InitRunTimeChecks>
  /* -------------------------------------------------------------------------*/
  #if defined STL_EVAL_MODE
    BSP_LED_Off(LED_ERR);
 8000516:	23a0      	movs	r3, #160	; 0xa0
 8000518:	05db      	lsls	r3, r3, #23
 800051a:	2200      	movs	r2, #0
 800051c:	2180      	movs	r1, #128	; 0x80
 800051e:	0018      	movs	r0, r3
 8000520:	f002 fda4 	bl	800306c <HAL_GPIO_WritePin>
  /* Infinite loop */
  while (1)
  {
    /* -----------------------------------------------------------------------*/
    /* This is where the main self-test routines are executed */
    STL_DoRunTimeChecks();
 8000524:	f000 fc7c 	bl	8000e20 <STL_DoRunTimeChecks>
 8000528:	e7fc      	b.n	8000524 <main+0x68>
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	080064c0 	.word	0x080064c0
 8000530:	080064d8 	.word	0x080064d8
 8000534:	080064e0 	.word	0x080064e0
 8000538:	080064f8 	.word	0x080064f8
 800053c:	08006500 	.word	0x08006500

08000540 <NVIC_Configuration>:
  * @brief  NVIC configuration
  * @param :  None
  * @retval : None
  */
static void NVIC_Configuration(void)
{  
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <NVIC_Configuration+0x20>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	22fa      	movs	r2, #250	; 0xfa
 800054a:	0091      	lsls	r1, r2, #2
 800054c:	0018      	movs	r0, r3
 800054e:	f7ff fde5 	bl	800011c <__udivsi3>
 8000552:	0003      	movs	r3, r0
 8000554:	0018      	movs	r0, r3
 8000556:	f002 f9e2 	bl	800291e <HAL_SYSTICK_Config>
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000080 	.word	0x20000080

08000564 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale 1 mode
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 800056a:	4b29      	ldr	r3, [pc, #164]	; (8000610 <SystemClock_Config+0xac>)
 800056c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800056e:	4b28      	ldr	r3, [pc, #160]	; (8000610 <SystemClock_Config+0xac>)
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	0549      	lsls	r1, r1, #21
 8000574:	430a      	orrs	r2, r1
 8000576:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* The voltage scaling  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	4b26      	ldr	r3, [pc, #152]	; (8000614 <SystemClock_Config+0xb0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a26      	ldr	r2, [pc, #152]	; (8000618 <SystemClock_Config+0xb4>)
 800057e:	401a      	ands	r2, r3
 8000580:	4b24      	ldr	r3, [pc, #144]	; (8000614 <SystemClock_Config+0xb0>)
 8000582:	2180      	movs	r1, #128	; 0x80
 8000584:	0109      	lsls	r1, r1, #4
 8000586:	430a      	orrs	r2, r1
 8000588:	601a      	str	r2, [r3, #0]

#ifdef HSE_CLOCK_APPLIED    
  /* Enable HSE Oscillator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2201      	movs	r2, #1
 800058e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	0252      	lsls	r2, r2, #9
 8000596:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2202      	movs	r2, #2
 800059c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2280      	movs	r2, #128	; 0x80
 80005a2:	0252      	lsls	r2, r2, #9
 80005a4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	22c0      	movs	r2, #192	; 0xc0
 80005aa:	0312      	lsls	r2, r2, #12
 80005ac:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2280      	movs	r2, #128	; 0x80
 80005b2:	03d2      	lsls	r2, r2, #15
 80005b4:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
#endif
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	0018      	movs	r0, r3
 80005ba:	f002 fde1 	bl	8003180 <HAL_RCC_OscConfig>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d005      	beq.n	80005ce <SystemClock_Config+0x6a>
  {
    #ifdef STL_VERBOSE_POR
      printf("PLL Osc config failure\n\r");
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <SystemClock_Config+0xb8>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f004 ff1b 	bl	8005400 <iprintf>
    #endif  /* STL_VERBOSE_POR */
    FailSafePOR();
 80005ca:	f000 fddb 	bl	8001184 <FailSafePOR>
  }
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80005ce:	213c      	movs	r1, #60	; 0x3c
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	220f      	movs	r2, #15
 80005d4:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2203      	movs	r2, #3
 80005da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, MAX_FLASH_LATENCY) != HAL_OK)
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2101      	movs	r1, #1
 80005f2:	0018      	movs	r0, r3
 80005f4:	f003 f988 	bl	8003908 <HAL_RCC_ClockConfig>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d005      	beq.n	8000608 <SystemClock_Config+0xa4>
  {
    #ifdef STL_VERBOSE_POR
      printf("PLL clock config failure\n\r");
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <SystemClock_Config+0xbc>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f004 fefe 	bl	8005400 <iprintf>
    #endif  /* STL_VERBOSE_POR */
    FailSafePOR();
 8000604:	f000 fdbe 	bl	8001184 <FailSafePOR>
  }
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	b014      	add	sp, #80	; 0x50
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40021000 	.word	0x40021000
 8000614:	40007000 	.word	0x40007000
 8000618:	ffffe7ff 	.word	0xffffe7ff
 800061c:	08006520 	.word	0x08006520
 8000620:	0800653c 	.word	0x0800653c

08000624 <StartUpClock_Config>:
  * @param  None
  * @retval None
  */

void StartUpClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 800062a:	4b2a      	ldr	r3, [pc, #168]	; (80006d4 <StartUpClock_Config+0xb0>)
 800062c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <StartUpClock_Config+0xb0>)
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	0549      	lsls	r1, r1, #21
 8000634:	430a      	orrs	r2, r1
 8000636:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* The voltage scaling  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <StartUpClock_Config+0xb4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a27      	ldr	r2, [pc, #156]	; (80006dc <StartUpClock_Config+0xb8>)
 800063e:	401a      	ands	r2, r3
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <StartUpClock_Config+0xb4>)
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	0109      	lsls	r1, r1, #4
 8000646:	430a      	orrs	r2, r1
 8000648:	601a      	str	r2, [r3, #0]
  
  /* Enable HSI Oscillator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2202      	movs	r2, #2
 800064e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2201      	movs	r2, #1
 8000654:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2202      	movs	r2, #2
 800065a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 0x10; /* !!! default HSI trimming value !!! */
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2210      	movs	r2, #16
 8000666:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2280      	movs	r2, #128	; 0x80
 800066c:	02d2      	lsls	r2, r2, #11
 800066e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	03d2      	lsls	r2, r2, #15
 8000676:	635a      	str	r2, [r3, #52]	; 0x34
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	0018      	movs	r0, r3
 800067c:	f002 fd80 	bl	8003180 <HAL_RCC_OscConfig>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d005      	beq.n	8000690 <StartUpClock_Config+0x6c>
  {
    #ifdef STL_VERBOSE_POR
      printf("PLL clock config failure\n\r");
 8000684:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <StartUpClock_Config+0xbc>)
 8000686:	0018      	movs	r0, r3
 8000688:	f004 feba 	bl	8005400 <iprintf>
    #endif  /* STL_VERBOSE_POR */
    FailSafePOR();
 800068c:	f000 fd7a 	bl	8001184 <FailSafePOR>
  }
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000690:	213c      	movs	r1, #60	; 0x3c
 8000692:	187b      	adds	r3, r7, r1
 8000694:	220f      	movs	r2, #15
 8000696:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2203      	movs	r2, #3
 800069c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2101      	movs	r1, #1
 80006b4:	0018      	movs	r0, r3
 80006b6:	f003 f927 	bl	8003908 <HAL_RCC_ClockConfig>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d005      	beq.n	80006ca <StartUpClock_Config+0xa6>
  {
    #ifdef STL_VERBOSE_POR
      printf("PLL clock switch failure\n\r");
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <StartUpClock_Config+0xc0>)
 80006c0:	0018      	movs	r0, r3
 80006c2:	f004 fe9d 	bl	8005400 <iprintf>
    #endif  /* STL_VERBOSE_POR */
    FailSafePOR();
 80006c6:	f000 fd5d 	bl	8001184 <FailSafePOR>
  }
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b014      	add	sp, #80	; 0x50
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40007000 	.word	0x40007000
 80006dc:	ffffe7ff 	.word	0xffffe7ff
 80006e0:	0800653c 	.word	0x0800653c
 80006e4:	08006558 	.word	0x08006558

080006e8 <Eval_Board_HW_Init>:
  * @brief  Initialization of evaluation board HW
  * @param :  None
  * @retval : None
  */
void Eval_Board_HW_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* init LED and monitoring signals on evaluation board -------------------*/
    BSP_LED_Init(LED_VLM);
 80006ec:	2020      	movs	r0, #32
 80006ee:	f000 f809 	bl	8000704 <User_signal_Init>
    BSP_LED_Init(LED_NVM);
 80006f2:	2040      	movs	r0, #64	; 0x40
 80006f4:	f000 f806 	bl	8000704 <User_signal_Init>
    BSP_LED_Init(LED_ERR);
 80006f8:	2080      	movs	r0, #128	; 0x80
 80006fa:	f000 f803 	bl	8000704 <User_signal_Init>
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <User_signal_Init>:
  * @brief  Initialization of evaluation board HW
  * @param :  None
  * @retval : None
  */
void User_signal_Init(uint16_t gpio_pin)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	0002      	movs	r2, r0
 800070c:	1dbb      	adds	r3, r7, #6
 800070e:	801a      	strh	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  __GPIOA_CLK_ENABLE();
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <User_signal_Init+0x58>)
 8000712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <User_signal_Init+0x58>)
 8000716:	2101      	movs	r1, #1
 8000718:	430a      	orrs	r2, r1
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <User_signal_Init+0x58>)
 800071e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000720:	2201      	movs	r2, #1
 8000722:	4013      	ands	r3, r2
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = gpio_pin;
 8000728:	1dbb      	adds	r3, r7, #6
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	210c      	movs	r1, #12
 800072e:	187b      	adds	r3, r7, r1
 8000730:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2201      	movs	r2, #1
 8000736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2201      	movs	r2, #1
 800073c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2202      	movs	r2, #2
 8000742:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	187a      	adds	r2, r7, r1
 8000746:	23a0      	movs	r3, #160	; 0xa0
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f002 fb17 	bl	8002d80 <HAL_GPIO_Init>
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b008      	add	sp, #32
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	40021000 	.word	0x40021000

08000760 <USART_Configuration>:
  * @brief  Configure the UART peripheral 
  * @param  None
  * @retval None
  */
void USART_Configuration(void)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b09f      	sub	sp, #124	; 0x7c
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable GPIO clock */
  __GPIOA_CLK_ENABLE();
 8000766:	4b3d      	ldr	r3, [pc, #244]	; (800085c <USART_Configuration+0xfc>)
 8000768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800076a:	4b3c      	ldr	r3, [pc, #240]	; (800085c <USART_Configuration+0xfc>)
 800076c:	2101      	movs	r1, #1
 800076e:	430a      	orrs	r2, r1
 8000770:	62da      	str	r2, [r3, #44]	; 0x2c
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <USART_Configuration+0xfc>)
 8000774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000776:	2201      	movs	r2, #1
 8000778:	4013      	ands	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
    
  /* Configure USART Tx as alternate function */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800077e:	2464      	movs	r4, #100	; 0x64
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2204      	movs	r2, #4
 8000784:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2202      	movs	r2, #2
 800078a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2202      	movs	r2, #2
 8000790:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2201      	movs	r2, #1
 8000796:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2204      	movs	r2, #4
 800079c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	193a      	adds	r2, r7, r4
 80007a0:	23a0      	movs	r3, #160	; 0xa0
 80007a2:	05db      	lsls	r3, r3, #23
 80007a4:	0011      	movs	r1, r2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 faea 	bl	8002d80 <HAL_GPIO_Init>
  
  /* Configure USART Rx as alternate function */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2208      	movs	r2, #8
 80007b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	2202      	movs	r2, #2
 80007b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2204      	movs	r2, #4
 80007bc:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	193a      	adds	r2, r7, r4
 80007c0:	23a0      	movs	r3, #160	; 0xa0
 80007c2:	05db      	lsls	r3, r3, #23
 80007c4:	0011      	movs	r1, r2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f002 fada 	bl	8002d80 <HAL_GPIO_Init>
  
   /* Start high speed internal (HSI) oscillator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007cc:	2108      	movs	r1, #8
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2202      	movs	r2, #2
 80007d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2201      	movs	r2, #1
 80007d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT; /* !!! 0x10 - default HSI trimming value !!! */
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2210      	movs	r2, #16
 80007e4:	611a      	str	r2, [r3, #16]
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	0018      	movs	r0, r3
 80007ea:	f002 fcc9 	bl	8003180 <HAL_RCC_OscConfig>

   /* HSI feeds USART2 */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2; 
 80007ee:	2140      	movs	r1, #64	; 0x40
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2202      	movs	r2, #2
 80007f4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2208      	movs	r2, #8
 80007fa:	611a      	str	r2, [r3, #16]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	0018      	movs	r0, r3
 8000800:	f003 fb38 	bl	8003e74 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Enable USART clock */
  __USART2_CLK_ENABLE();
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <USART_Configuration+0xfc>)
 8000806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <USART_Configuration+0xfc>)
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	0289      	lsls	r1, r1, #10
 800080e:	430a      	orrs	r2, r1
 8000810:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* UART configuration */
  UartHandle.Instance = USART2;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <USART_Configuration+0x100>)
 8000814:	4a13      	ldr	r2, [pc, #76]	; (8000864 <USART_Configuration+0x104>)
 8000816:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate   = 115200;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <USART_Configuration+0x100>)
 800081a:	22e1      	movs	r2, #225	; 0xe1
 800081c:	0252      	lsls	r2, r2, #9
 800081e:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <USART_Configuration+0x100>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <USART_Configuration+0x100>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <USART_Configuration+0x100>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <USART_Configuration+0x100>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <USART_Configuration+0x100>)
 800083a:	2208      	movs	r2, #8
 800083c:	615a      	str	r2, [r3, #20]
  __HAL_UART_RESET_HANDLE_STATE(&UartHandle);
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <USART_Configuration+0x100>)
 8000840:	2200      	movs	r2, #0
 8000842:	679a      	str	r2, [r3, #120]	; 0x78
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <USART_Configuration+0x100>)
 8000846:	2200      	movs	r2, #0
 8000848:	67da      	str	r2, [r3, #124]	; 0x7c
  HAL_UART_Init(&UartHandle); 
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <USART_Configuration+0x100>)
 800084c:	0018      	movs	r0, r3
 800084e:	f003 ffdb 	bl	8004808 <HAL_UART_Init>
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b01f      	add	sp, #124	; 0x7c
 8000858:	bd90      	pop	{r4, r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	40021000 	.word	0x40021000
 8000860:	2000010c 	.word	0x2000010c
 8000864:	40004400 	.word	0x40004400

08000868 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	0002      	movs	r2, r0
 8000870:	1dbb      	adds	r3, r7, #6
 8000872:	801a      	strh	r2, [r3, #0]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 10); /* 0xFFFF */
 8000874:	1db9      	adds	r1, r7, #6
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <__io_putchar+0x28>)
 8000878:	230a      	movs	r3, #10
 800087a:	2201      	movs	r2, #1
 800087c:	f004 f862 	bl	8004944 <HAL_UART_Transmit>

  return ch;
 8000880:	1dbb      	adds	r3, r7, #6
 8000882:	2200      	movs	r2, #0
 8000884:	5e9b      	ldrsh	r3, [r3, r2]
}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	2000010c 	.word	0x2000010c

08000894 <_write>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
int16_t _write(int16_t file, int8_t *ptr, int16_t len) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6039      	str	r1, [r7, #0]
 800089c:	0011      	movs	r1, r2
 800089e:	1dbb      	adds	r3, r7, #6
 80008a0:	1c02      	adds	r2, r0, #0
 80008a2:	801a      	strh	r2, [r3, #0]
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	1c0a      	adds	r2, r1, #0
 80008a8:	801a      	strh	r2, [r3, #0]
	int16_t DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008aa:	230e      	movs	r3, #14
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	2200      	movs	r2, #0
 80008b0:	801a      	strh	r2, [r3, #0]
 80008b2:	e011      	b.n	80008d8 <_write+0x44>
		__io_putchar(*ptr++);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	603a      	str	r2, [r7, #0]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	b21b      	sxth	r3, r3
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff ffd1 	bl	8000868 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008c6:	210e      	movs	r1, #14
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	5e9b      	ldrsh	r3, [r3, r2]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	3301      	adds	r3, #1
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	801a      	strh	r2, [r3, #0]
 80008d8:	230e      	movs	r3, #14
 80008da:	18fa      	adds	r2, r7, r3
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2100      	movs	r1, #0
 80008e0:	5e52      	ldrsh	r2, [r2, r1]
 80008e2:	2100      	movs	r1, #0
 80008e4:	5e5b      	ldrsh	r3, [r3, r1]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	dbe4      	blt.n	80008b4 <_write+0x20>
	}
	return len;
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	5e9b      	ldrsh	r3, [r3, r2]
}
 80008f0:	0018      	movs	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b004      	add	sp, #16
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <STL_MainClockTest>:
  * @retval : ClockStatus = (LSI_START_FAIL, HSE_START_FAIL,
  *   HSI_HSE_SWITCH_FAIL, TEST_ONGOING, EXT_SOURCE_FAIL,
  *   CLASS_B_VAR_FAIL, CTRL_FLOW_ERROR, FREQ_OK)
  */
ClockStatus STL_MainClockTest(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
  ClockStatus result = TEST_ONGOING; /* In case of unexpected exit */
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	2203      	movs	r2, #3
 8000902:	701a      	strb	r2, [r3, #0]

  CtrlFlowCnt += CLOCKPERIOD_TEST_CALLEE;
 8000904:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <STL_MainClockTest+0xb8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	333d      	adds	r3, #61	; 0x3d
 800090a:	001a      	movs	r2, r3
 800090c:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <STL_MainClockTest+0xb8>)
 800090e:	601a      	str	r2, [r3, #0]
   - all the following pairs of volatile variables are changed consistently at timer ISR only */
  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_suppress=Pm026              
  #endif /* __IAR_SYSTEMS_ICC__ */
  /* checking result of HSE measurement done at TIM5 interrupt */
  if (((PeriodValue ^ PeriodValueInv) == 0xFFFFFFFFuL)\
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <STL_MainClockTest+0xbc>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <STL_MainClockTest+0xc0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4053      	eors	r3, r2
 800091a:	3301      	adds	r3, #1
 800091c:	d139      	bne.n	8000992 <STL_MainClockTest+0x9a>
  &&  ((LSIPeriodFlag ^ LSIPeriodFlagInv) == 0xFFFFFFFFuL)\
 800091e:	4b27      	ldr	r3, [pc, #156]	; (80009bc <STL_MainClockTest+0xc4>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <STL_MainClockTest+0xc8>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4053      	eors	r3, r2
 8000928:	3301      	adds	r3, #1
 800092a:	d132      	bne.n	8000992 <STL_MainClockTest+0x9a>
  &&   (LSIPeriodFlag != 0u) )
 800092c:	4b23      	ldr	r3, [pc, #140]	; (80009bc <STL_MainClockTest+0xc4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d02e      	beq.n	8000992 <STL_MainClockTest+0x9a>
  #endif /* __IAR_SYSTEMS_ICC__ */
  /* ==============================================================================*/
   
  {
#ifdef HSE_CLOCK_APPLIED    
    if (PeriodValue < HSE_LimitLow(SYSTCLK_AT_RUN_HSE))
 8000934:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <STL_MainClockTest+0xbc>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <STL_MainClockTest+0xcc>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d80e      	bhi.n	800095c <STL_MainClockTest+0x64>
#else
    if (PeriodValue < HSI_LimitLow(SYSTCLK_AT_RUN_HSI))
#endif
    {
      /* Switch back to internal clock */
      RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <STL_MainClockTest+0xd0>)
 8000940:	2201      	movs	r2, #1
 8000942:	601a      	str	r2, [r3, #0]
      RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <STL_MainClockTest+0xd0>)
 8000946:	2201      	movs	r2, #1
 8000948:	605a      	str	r2, [r3, #4]
      HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 800094a:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <STL_MainClockTest+0xd0>)
 800094c:	2100      	movs	r1, #0
 800094e:	0018      	movs	r0, r3
 8000950:	f002 ffda 	bl	8003908 <HAL_RCC_ClockConfig>
      result = EXT_SOURCE_FAIL;	/* Sub-harmonics: HSE -25% below expected */
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	2204      	movs	r2, #4
 8000958:	701a      	strb	r2, [r3, #0]
    if (PeriodValue < HSE_LimitLow(SYSTCLK_AT_RUN_HSE))
 800095a:	e01d      	b.n	8000998 <STL_MainClockTest+0xa0>
    }
    else
    {
#ifdef HSE_CLOCK_APPLIED    
      if (PeriodValue > HSE_LimitHigh(SYSTCLK_AT_RUN_HSE))
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <STL_MainClockTest+0xbc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a1a      	ldr	r2, [pc, #104]	; (80009cc <STL_MainClockTest+0xd4>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d90e      	bls.n	8000984 <STL_MainClockTest+0x8c>
#else
      if (PeriodValue > HSI_LimitHigh(SYSTCLK_AT_RUN_HSI))
#endif
      {
        /* Switch back to internal clock */
        RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <STL_MainClockTest+0xd0>)
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
        RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <STL_MainClockTest+0xd0>)
 800096e:	2201      	movs	r2, #1
 8000970:	605a      	str	r2, [r3, #4]
        HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <STL_MainClockTest+0xd0>)
 8000974:	2100      	movs	r1, #0
 8000976:	0018      	movs	r0, r3
 8000978:	f002 ffc6 	bl	8003908 <HAL_RCC_ClockConfig>
        result = EXT_SOURCE_FAIL;	/* Harmonics: HSE +25% above expected */
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	2204      	movs	r2, #4
 8000980:	701a      	strb	r2, [r3, #0]
    if (PeriodValue < HSE_LimitLow(SYSTCLK_AT_RUN_HSE))
 8000982:	e009      	b.n	8000998 <STL_MainClockTest+0xa0>
      }
      else
      {
        result = FREQ_OK;         /* Crystal or Resonator started correctly */        
 8000984:	1dfb      	adds	r3, r7, #7
 8000986:	220a      	movs	r2, #10
 8000988:	701a      	strb	r2, [r3, #0]
        /* clear flag here to ensure refresh LSI measurement result will be taken at next check */
        LSIPeriodFlag = 0u;
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <STL_MainClockTest+0xc4>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
    if (PeriodValue < HSE_LimitLow(SYSTCLK_AT_RUN_HSE))
 8000990:	e002      	b.n	8000998 <STL_MainClockTest+0xa0>
      } /* No harmonics */
    } /* No sub-harmonics */
  } /* Control Flow error */
  else
  {
    result = CLASS_B_VAR_FAIL;
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	2208      	movs	r2, #8
 8000996:	701a      	strb	r2, [r3, #0]
  }

  CtrlFlowCntInv -= CLOCKPERIOD_TEST_CALLEE;
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <STL_MainClockTest+0xd8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3b3d      	subs	r3, #61	; 0x3d
 800099e:	001a      	movs	r2, r3
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <STL_MainClockTest+0xd8>)
 80009a2:	601a      	str	r2, [r3, #0]

  return (result);
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	781b      	ldrb	r3, [r3, #0]
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000030 	.word	0x20000030
 80009b4:	20000038 	.word	0x20000038
 80009b8:	2000005c 	.word	0x2000005c
 80009bc:	20000044 	.word	0x20000044
 80009c0:	20000068 	.word	0x20000068
 80009c4:	000013bb 	.word	0x000013bb
 80009c8:	20000190 	.word	0x20000190
 80009cc:	000020e4 	.word	0x000020e4
 80009d0:	20000054 	.word	0x20000054

080009d4 <STL_ClockStartUpTest>:
  * @param  : None
  * @retval : ClockStatus = (LSI_START_FAIL, HSE_START_FAIL,
  *   HSI_HSE_SWITCH_FAIL, XCROSS_CONFIG_FAIL, EXT_SOURCE_FAIL, FREQ_OK)
  */
ClockStatus STL_ClockStartUpTest(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  ClockStatus clck_sts = TEST_ONGOING;
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	2203      	movs	r2, #3
 80009de:	701a      	strb	r2, [r3, #0]
  CtrlFlowCnt += CLOCK_TEST_CALLEE;
 80009e0:	4b54      	ldr	r3, [pc, #336]	; (8000b34 <STL_ClockStartUpTest+0x160>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	331d      	adds	r3, #29
 80009e6:	001a      	movs	r2, r3
 80009e8:	4b52      	ldr	r3, [pc, #328]	; (8000b34 <STL_ClockStartUpTest+0x160>)
 80009ea:	601a      	str	r2, [r3, #0]

  /* Start low speed internal (LSI) oscillator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI;
 80009ec:	4b52      	ldr	r3, [pc, #328]	; (8000b38 <STL_ClockStartUpTest+0x164>)
 80009ee:	2208      	movs	r2, #8
 80009f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009f2:	4b51      	ldr	r3, [pc, #324]	; (8000b38 <STL_ClockStartUpTest+0x164>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f8:	4b4f      	ldr	r3, [pc, #316]	; (8000b38 <STL_ClockStartUpTest+0x164>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	629a      	str	r2, [r3, #40]	; 0x28
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fe:	4b4e      	ldr	r3, [pc, #312]	; (8000b38 <STL_ClockStartUpTest+0x164>)
 8000a00:	0018      	movs	r0, r3
 8000a02:	f002 fbbd 	bl	8003180 <HAL_RCC_OscConfig>
 8000a06:	1e03      	subs	r3, r0, #0
 8000a08:	d002      	beq.n	8000a10 <STL_ClockStartUpTest+0x3c>
  {
    /* LSI clock fails */
    clck_sts = LSI_START_FAIL;
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
  }
  
#ifdef HSE_CLOCK_APPLIED  
  /* if LSI started OK - Start High-speed external oscillator (HSE) */
  if(clck_sts == TEST_ONGOING)
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d112      	bne.n	8000a3e <STL_ClockStartUpTest+0x6a>
  {
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a18:	4b47      	ldr	r3, [pc, #284]	; (8000b38 <STL_ClockStartUpTest+0x164>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]
    /* Use HSEState parameter RCC_HSE_BYPASS when external generator is applied */
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a1e:	4b46      	ldr	r3, [pc, #280]	; (8000b38 <STL_ClockStartUpTest+0x164>)
 8000a20:	2280      	movs	r2, #128	; 0x80
 8000a22:	0252      	lsls	r2, r2, #9
 8000a24:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a26:	4b44      	ldr	r3, [pc, #272]	; (8000b38 <STL_ClockStartUpTest+0x164>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
    if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2c:	4b42      	ldr	r3, [pc, #264]	; (8000b38 <STL_ClockStartUpTest+0x164>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f002 fba6 	bl	8003180 <HAL_RCC_OscConfig>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d002      	beq.n	8000a3e <STL_ClockStartUpTest+0x6a>
    {
      /* HSE clock fails */
      clck_sts = HSE_START_FAIL;
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  /* if HSE started OK - enable CSS */
  if(clck_sts == TEST_ONGOING)
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d111      	bne.n	8000a6a <STL_ClockStartUpTest+0x96>
  {
    HAL_RCC_EnableCSS();
 8000a46:	f003 f92b 	bl	8003ca0 <HAL_RCC_EnableCSS>
    /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
       clocks dividers */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	; (8000b3c <STL_ClockStartUpTest+0x168>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a50:	4b3a      	ldr	r3, [pc, #232]	; (8000b3c <STL_ClockStartUpTest+0x168>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	605a      	str	r2, [r3, #4]
    if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a56:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <STL_ClockStartUpTest+0x168>)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f002 ff54 	bl	8003908 <HAL_RCC_ClockConfig>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d002      	beq.n	8000a6a <STL_ClockStartUpTest+0x96>
    {
      /* switch to HSE clock fails */
      clck_sts = HSI_HSE_SWITCH_FAIL;
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	2202      	movs	r2, #2
 8000a68:	701a      	strb	r2, [r3, #0]
    }
  }
  
  /*-------------- Start Reference Measurement -------------------------------*/
  if(clck_sts == TEST_ONGOING)
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d12b      	bne.n	8000aca <STL_ClockStartUpTest+0xf6>
  {  
    /* Configure dedicated timer to measure LSI period */
    if(STL_InitClock_Xcross_Measurement() == ERROR)
 8000a72:	f001 f947 	bl	8001d04 <STL_InitClock_Xcross_Measurement>
 8000a76:	0003      	movs	r3, r0
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d103      	bne.n	8000a84 <STL_ClockStartUpTest+0xb0>
    {
      clck_sts = XCROSS_CONFIG_FAIL;
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	2205      	movs	r2, #5
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	e022      	b.n	8000aca <STL_ClockStartUpTest+0xf6>
    }
    else
    {   
      /* Wait for two subsequent LSI periods measurements */
      LSIPeriodFlag = 0u;
 8000a84:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <STL_ClockStartUpTest+0x16c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
      while (LSIPeriodFlag == 0u)
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <STL_ClockStartUpTest+0x16c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0fb      	beq.n	8000a8c <STL_ClockStartUpTest+0xb8>
      { }
      LSIPeriodFlag = 0u;
 8000a94:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <STL_ClockStartUpTest+0x16c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
      while (LSIPeriodFlag == 0u)
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <STL_ClockStartUpTest+0x16c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0fb      	beq.n	8000a9c <STL_ClockStartUpTest+0xc8>
      { }

      /*-------------------- HSE measurement check -------------------------*/
      if (PeriodValue < HSE_LimitLow(HSE_VALUE))
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <STL_ClockStartUpTest+0x170>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	23fc      	movs	r3, #252	; 0xfc
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d203      	bcs.n	8000ab8 <STL_ClockStartUpTest+0xe4>
      {
        /* Sub-harmonics: HSE -25% below expected */
        clck_sts = EXT_SOURCE_FAIL;
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	e008      	b.n	8000aca <STL_ClockStartUpTest+0xf6>
      }
      else if (PeriodValue > HSE_LimitHigh(HSE_VALUE))
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <STL_ClockStartUpTest+0x170>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	23d2      	movs	r3, #210	; 0xd2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d902      	bls.n	8000aca <STL_ClockStartUpTest+0xf6>
      {
        /* Harmonics: HSE +25% above expected */
        clck_sts = EXT_SOURCE_FAIL;
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	701a      	strb	r2, [r3, #0]
    }
  }
#endif
  
  /* Switch back HSI internal clock at any case */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <STL_ClockStartUpTest+0x168>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <STL_ClockStartUpTest+0x168>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	605a      	str	r2, [r3, #4]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, MAX_FLASH_LATENCY) != HAL_OK)
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <STL_ClockStartUpTest+0x168>)
 8000ad8:	2101      	movs	r1, #1
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 ff14 	bl	8003908 <HAL_RCC_ClockConfig>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d003      	beq.n	8000aec <STL_ClockStartUpTest+0x118>
  {
    /* switch to HSE clock fails */
    clck_sts = HSE_HSI_SWITCH_FAIL;
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	2206      	movs	r2, #6
 8000ae8:	701a      	strb	r2, [r3, #0]
 8000aea:	e016      	b.n	8000b1a <STL_ClockStartUpTest+0x146>
  }
  else
  {
    /* Switch off PLL */
    RCC_OscInitStruct.OscillatorType = 0u;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <STL_ClockStartUpTest+0x164>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_OFF;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <STL_ClockStartUpTest+0x164>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
    if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <STL_ClockStartUpTest+0x164>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f002 fb40 	bl	8003180 <HAL_RCC_OscConfig>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d003      	beq.n	8000b0c <STL_ClockStartUpTest+0x138>
    {
      /* PLL off fails */
      clck_sts = PLL_OFF_FAIL;
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	2207      	movs	r2, #7
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	e006      	b.n	8000b1a <STL_ClockStartUpTest+0x146>
    }
    else
    {
      if(clck_sts == TEST_ONGOING)
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d102      	bne.n	8000b1a <STL_ClockStartUpTest+0x146>
      {
        /* the test was finished correctly */
        clck_sts = FREQ_OK;
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	220a      	movs	r2, #10
 8000b18:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  
  CtrlFlowCntInv -= CLOCK_TEST_CALLEE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <STL_ClockStartUpTest+0x174>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3b1d      	subs	r3, #29
 8000b20:	001a      	movs	r2, r3
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <STL_ClockStartUpTest+0x174>)
 8000b24:	601a      	str	r2, [r3, #0]
  
  return(clck_sts);
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
}
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	20000030 	.word	0x20000030
 8000b38:	200001a4 	.word	0x200001a4
 8000b3c:	20000190 	.word	0x20000190
 8000b40:	20000044 	.word	0x20000044
 8000b44:	20000038 	.word	0x20000038
 8000b48:	20000054 	.word	0x20000054

08000b4c <STL_FlashCrc32Init>:
  *   run-time
  * @param  : None
  * @retval : None
  */
void STL_FlashCrc32Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  pRunCrc32Chk = (uint32_t*)ROM_START;
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <STL_FlashCrc32Init+0x54>)
 8000b52:	2280      	movs	r2, #128	; 0x80
 8000b54:	0512      	lsls	r2, r2, #20
 8000b56:	601a      	str	r2, [r3, #0]
  pRunCrc32ChkInv = ((uint32_t *)(uint32_t)(~(uint32_t)(ROM_START)));
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <STL_FlashCrc32Init+0x58>)
 8000b5a:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <STL_FlashCrc32Init+0x5c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  
  CrcHandle.Instance = CRC;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <STL_FlashCrc32Init+0x60>)
 8000b60:	4a13      	ldr	r2, [pc, #76]	; (8000bb0 <STL_FlashCrc32Init+0x64>)
 8000b62:	601a      	str	r2, [r3, #0]

  /* Reset CRC Calculation Unit */
  __HAL_CRC_DR_RESET(&CrcHandle);
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <STL_FlashCrc32Init+0x60>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <STL_FlashCrc32Init+0x60>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2101      	movs	r1, #1
 8000b70:	430a      	orrs	r2, r1
 8000b72:	609a      	str	r2, [r3, #8]

  #ifdef  CRC_UNIT_CONFIGURABLE
    CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_ENABLE;
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <STL_FlashCrc32Init+0x60>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	711a      	strb	r2, [r3, #4]
    CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_ENABLE;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <STL_FlashCrc32Init+0x60>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	715a      	strb	r2, [r3, #5]
    CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <STL_FlashCrc32Init+0x60>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	615a      	str	r2, [r3, #20]
    CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLED;
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <STL_FlashCrc32Init+0x60>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
    CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_WORDS;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <STL_FlashCrc32Init+0x60>)
 8000b8e:	2203      	movs	r2, #3
 8000b90:	621a      	str	r2, [r3, #32]
  #endif
  HAL_CRC_Init(&CrcHandle);
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <STL_FlashCrc32Init+0x60>)
 8000b94:	0018      	movs	r0, r3
 8000b96:	f001 fecf 	bl	8002938 <HAL_CRC_Init>
}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000004c 	.word	0x2000004c
 8000ba4:	20000070 	.word	0x20000070
 8000ba8:	f7ffffff 	.word	0xf7ffffff
 8000bac:	20000200 	.word	0x20000200
 8000bb0:	40023000 	.word	0x40023000

08000bb4 <STL_crc32Run>:
  * @param  : None
  * @retval : ClassBTestStatus (TEST_RUNNING, CLASS_B_DATA_FAIL,
  *   TEST_FAILURE, TEST_OK)
  */
ClassBTestStatus STL_crc32Run(void)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
  ClassBTestStatus result = CTRL_FLW_ERROR; /* In case of abnormal func exit*/
 8000bba:	230f      	movs	r3, #15
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	701a      	strb	r2, [r3, #0]

  CtrlFlowCnt += CRC32_RUN_TEST_CALLEE;
 8000bc2:	4b4a      	ldr	r3, [pc, #296]	; (8000cec <STL_crc32Run+0x138>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	333f      	adds	r3, #63	; 0x3f
 8000bc8:	001a      	movs	r2, r3
 8000bca:	4b48      	ldr	r3, [pc, #288]	; (8000cec <STL_crc32Run+0x138>)
 8000bcc:	601a      	str	r2, [r3, #0]

  /* Check Class B var integrity */
  if ((((uint32_t)pRunCrc32Chk) ^ ((uint32_t)pRunCrc32ChkInv)) == 0xFFFFFFFFuL)
 8000bce:	4b48      	ldr	r3, [pc, #288]	; (8000cf0 <STL_crc32Run+0x13c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	001a      	movs	r2, r3
 8000bd4:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <STL_crc32Run+0x140>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4053      	eors	r3, r2
 8000bda:	3301      	adds	r3, #1
 8000bdc:	d000      	beq.n	8000be0 <STL_crc32Run+0x2c>
 8000bde:	e074      	b.n	8000cca <STL_crc32Run+0x116>
  {
    if (pRunCrc32Chk < (uint32_t *)ROM_END)
 8000be0:	4b43      	ldr	r3, [pc, #268]	; (8000cf0 <STL_crc32Run+0x13c>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b44      	ldr	r3, [pc, #272]	; (8000cf8 <STL_crc32Run+0x144>)
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d247      	bcs.n	8000c7a <STL_crc32Run+0xc6>
   /* the next lines replaces the HAL function call
      HAL_CRC_Accumulate(&CrcHandle, (uint32_t *)pRunCrc32Chk, (uint32_t)FLASH_BLOCK_WORDS);
      due to bug at IAR linker - check sum computation can't support both big & little endian  */
  
      uint32_t index;
      for(index = 0; index < (uint32_t)FLASH_BLOCK_WORDS; index++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	e00d      	b.n	8000c0c <STL_crc32Run+0x58>
      {
        CRC->DR = __REV(*(pRunCrc32Chk + index));
 8000bf0:	4b3f      	ldr	r3, [pc, #252]	; (8000cf0 <STL_crc32Run+0x13c>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	18d3      	adds	r3, r2, r3
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <STL_crc32Run+0x148>)
 8000bfe:	607a      	str	r2, [r7, #4]
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	ba12      	rev	r2, r2
 8000c04:	601a      	str	r2, [r3, #0]
      for(index = 0; index < (uint32_t)FLASH_BLOCK_WORDS; index++)
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <STL_crc32Run+0x144>)
 8000c0e:	22f8      	movs	r2, #248	; 0xf8
 8000c10:	0612      	lsls	r2, r2, #24
 8000c12:	4694      	mov	ip, r2
 8000c14:	4463      	add	r3, ip
 8000c16:	089a      	lsrs	r2, r3, #2
 8000c18:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <STL_crc32Run+0x144>)
 8000c1a:	21f8      	movs	r1, #248	; 0xf8
 8000c1c:	0609      	lsls	r1, r1, #24
 8000c1e:	468c      	mov	ip, r1
 8000c20:	4463      	add	r3, ip
 8000c22:	099b      	lsrs	r3, r3, #6
 8000c24:	0019      	movs	r1, r3
 8000c26:	0010      	movs	r0, r2
 8000c28:	f7ff fa78 	bl	800011c <__udivsi3>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	001a      	movs	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d3dc      	bcc.n	8000bf0 <STL_crc32Run+0x3c>
      }
      pRunCrc32Chk += FLASH_BLOCK_WORDS;     /* Increment pointer to next block */
 8000c36:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <STL_crc32Run+0x13c>)
 8000c38:	681c      	ldr	r4, [r3, #0]
 8000c3a:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <STL_crc32Run+0x144>)
 8000c3c:	22f8      	movs	r2, #248	; 0xf8
 8000c3e:	0612      	lsls	r2, r2, #24
 8000c40:	4694      	mov	ip, r2
 8000c42:	4463      	add	r3, ip
 8000c44:	089a      	lsrs	r2, r3, #2
 8000c46:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <STL_crc32Run+0x144>)
 8000c48:	21f8      	movs	r1, #248	; 0xf8
 8000c4a:	0609      	lsls	r1, r1, #24
 8000c4c:	468c      	mov	ip, r1
 8000c4e:	4463      	add	r3, ip
 8000c50:	099b      	lsrs	r3, r3, #6
 8000c52:	0019      	movs	r1, r3
 8000c54:	0010      	movs	r0, r2
 8000c56:	f7ff fa61 	bl	800011c <__udivsi3>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	18e2      	adds	r2, r4, r3
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <STL_crc32Run+0x13c>)
 8000c62:	601a      	str	r2, [r3, #0]
      pRunCrc32ChkInv = ((uint32_t *)~((uint32_t)pRunCrc32Chk));
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <STL_crc32Run+0x13c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	001a      	movs	r2, r3
 8000c6c:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <STL_crc32Run+0x140>)
 8000c6e:	601a      	str	r2, [r3, #0]
      result = TEST_RUNNING;
 8000c70:	230f      	movs	r3, #15
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
 8000c78:	e02b      	b.n	8000cd2 <STL_crc32Run+0x11e>
    }
    else
    {
      if ((RefCrc32 ^ RefCrc32Inv) == 0xFFFFFFFFuL)
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <STL_crc32Run+0x14c>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <STL_crc32Run+0x150>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4053      	eors	r3, r2
 8000c84:	3301      	adds	r3, #1
 8000c86:	d11b      	bne.n	8000cc0 <STL_crc32Run+0x10c>
      {
        CtrlFlowCnt += CRC32_INIT_CALLER;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <STL_crc32Run+0x138>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	1dda      	adds	r2, r3, #7
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <STL_crc32Run+0x138>)
 8000c90:	601a      	str	r2, [r3, #0]
        if(CRC->DR == *(uint32_t *)(&REF_CRC32))
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <STL_crc32Run+0x148>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <STL_crc32Run+0x144>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d104      	bne.n	8000ca8 <STL_crc32Run+0xf4>
        {
          result = TEST_OK;
 8000c9e:	230f      	movs	r3, #15
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e003      	b.n	8000cb0 <STL_crc32Run+0xfc>
        }
        else
        {
          result = TEST_FAILURE;
 8000ca8:	230f      	movs	r3, #15
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	2203      	movs	r2, #3
 8000cae:	701a      	strb	r2, [r3, #0]
        }
        STL_FlashCrc32Init(); /* Prepare next test (or redo it if this one failed) */
 8000cb0:	f7ff ff4c 	bl	8000b4c <STL_FlashCrc32Init>
        
        CtrlFlowCntInv -= CRC32_INIT_CALLER;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <STL_crc32Run+0x154>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	1fda      	subs	r2, r3, #7
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <STL_crc32Run+0x154>)
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e008      	b.n	8000cd2 <STL_crc32Run+0x11e>
      }
      else /* Class B error on RefCrc32 */
      {
        result = CLASS_B_DATA_FAIL;
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
 8000cc8:	e003      	b.n	8000cd2 <STL_crc32Run+0x11e>
      }
    }
  }
  else  /* Class B error pRunCrc32Chk */
  {
    result = CLASS_B_DATA_FAIL;
 8000cca:	230f      	movs	r3, #15
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
  }

  CtrlFlowCntInv -= CRC32_RUN_TEST_CALLEE;
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <STL_crc32Run+0x154>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	3b3f      	subs	r3, #63	; 0x3f
 8000cd8:	001a      	movs	r2, r3
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <STL_crc32Run+0x154>)
 8000cdc:	601a      	str	r2, [r3, #0]

  return (result);
 8000cde:	230f      	movs	r3, #15
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	781b      	ldrb	r3, [r3, #0]

}
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b005      	add	sp, #20
 8000cea:	bd90      	pop	{r4, r7, pc}
 8000cec:	20000030 	.word	0x20000030
 8000cf0:	2000004c 	.word	0x2000004c
 8000cf4:	20000070 	.word	0x20000070
 8000cf8:	08006dc0 	.word	0x08006dc0
 8000cfc:	40023000 	.word	0x40023000
 8000d00:	20000050 	.word	0x20000050
 8000d04:	20000074 	.word	0x20000074
 8000d08:	20000054 	.word	0x20000054

08000d0c <STL_InitRunTimeChecks>:
  *   counterparts. Init also the Systick for clock frequency monitoring.
  * @param  : None
  * @retval : None
  */
void STL_InitRunTimeChecks(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  uint32_t tout;
  
  /* Initialize variables for invariable memory check */
  STL_TranspMarchInit();
 8000d12:	f000 fe35 	bl	8001980 <STL_TranspMarchInit>

  /* Init Class B variables required in main routine and SysTick interrupt
  service routine for timing purposes */
  TickCounter = 0u;
 8000d16:	4b35      	ldr	r3, [pc, #212]	; (8000dec <STL_InitRunTimeChecks+0xe0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
  TickCounterInv = 0xFFFFFFFFuL;
 8000d1c:	4b34      	ldr	r3, [pc, #208]	; (8000df0 <STL_InitRunTimeChecks+0xe4>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4252      	negs	r2, r2
 8000d22:	601a      	str	r2, [r3, #0]

  TimeBaseFlag = 0u;
 8000d24:	4b33      	ldr	r3, [pc, #204]	; (8000df4 <STL_InitRunTimeChecks+0xe8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
  TimeBaseFlagInv = 0xFFFFFFFFuL;
 8000d2a:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <STL_InitRunTimeChecks+0xec>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4252      	negs	r2, r2
 8000d30:	601a      	str	r2, [r3, #0]

  LastCtrlFlowCnt = 0u;
 8000d32:	4b32      	ldr	r3, [pc, #200]	; (8000dfc <STL_InitRunTimeChecks+0xf0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
  LastCtrlFlowCntInv = 0xFFFFFFFFuL;
 8000d38:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <STL_InitRunTimeChecks+0xf4>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	601a      	str	r2, [r3, #0]
  init_control_flow();
 8000d40:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <STL_InitRunTimeChecks+0xf8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <STL_InitRunTimeChecks+0xf8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <STL_InitRunTimeChecks+0xfc>)
 8000d4e:	601a      	str	r2, [r3, #0]

  /* Initialize variables for SysTick interrupt routine control flow monitoring */
  ISRCtrlFlowCnt = 0u;
 8000d50:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <STL_InitRunTimeChecks+0x100>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
  ISRCtrlFlowCntInv = 0xFFFFFFFFuL;
 8000d56:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <STL_InitRunTimeChecks+0x104>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4252      	negs	r2, r2
 8000d5c:	601a      	str	r2, [r3, #0]

  /* Initialize SysTick to generate 1ms time base */
#ifdef HSE_CLOCK_APPLIED    
  if (HAL_SYSTICK_Config(SYSTCLK_AT_RUN_HSE/1000uL) != HAL_OK)
 8000d5e:	23fa      	movs	r3, #250	; 0xfa
 8000d60:	01db      	lsls	r3, r3, #7
 8000d62:	0018      	movs	r0, r3
 8000d64:	f001 fddb 	bl	800291e <HAL_SYSTICK_Config>
 8000d68:	1e03      	subs	r3, r0, #0
 8000d6a:	d005      	beq.n	8000d78 <STL_InitRunTimeChecks+0x6c>
#else
  if (HAL_SYSTICK_Config(SYSTCLK_AT_RUN_HSI/1000uL) != HAL_OK)
#endif
  {
    #ifdef STL_VERBOSE_POR
      printf("Run time base init failure\n\r");
 8000d6c:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <STL_InitRunTimeChecks+0x108>)
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f004 fb46 	bl	8005400 <iprintf>
    #endif /* STL_VERBOSE_POR */
    FailSafePOR();
 8000d74:	f000 fa06 	bl	8001184 <FailSafePOR>
  }

  /* Initialize variables for invariable memory check */
  STL_FlashCrc32Init();
 8000d78:	f7ff fee8 	bl	8000b4c <STL_FlashCrc32Init>

  /* wait till HSE measurement is completed & check timer system */
  tout = HAL_GetTick() + 5u;
 8000d7c:	f001 fcde 	bl	800273c <HAL_GetTick>
 8000d80:	0003      	movs	r3, r0
 8000d82:	3305      	adds	r3, #5
 8000d84:	607b      	str	r3, [r7, #4]
  LSIPeriodFlag = 0u;
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <STL_InitRunTimeChecks+0x10c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
  /* MISRA violation of rule 12.4, 12.5 - "&&" operand can't contain side effects 
    and shall be primary expressions  */
  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_suppress= Pm026,Pm027              
  #endif /* __IAR_SYSTEMS_ICC__ */
  while ( LSIPeriodFlag == 0u  &&  HAL_GetTick() < tout )
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <STL_InitRunTimeChecks+0x10c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d105      	bne.n	8000da2 <STL_InitRunTimeChecks+0x96>
 8000d96:	f001 fcd1 	bl	800273c <HAL_GetTick>
 8000d9a:	0002      	movs	r2, r0
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d8f5      	bhi.n	8000d8e <STL_InitRunTimeChecks+0x82>
  { }
  LSIPeriodFlag = 0u;
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <STL_InitRunTimeChecks+0x10c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
  while ( LSIPeriodFlag == 0u  &&  HAL_GetTick() < tout )
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <STL_InitRunTimeChecks+0x10c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d105      	bne.n	8000dbe <STL_InitRunTimeChecks+0xb2>
 8000db2:	f001 fcc3 	bl	800273c <HAL_GetTick>
 8000db6:	0002      	movs	r2, r0
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d8f5      	bhi.n	8000daa <STL_InitRunTimeChecks+0x9e>
  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_default= Pm026,Pm027
  #endif /* __IAR_SYSTEMS_ICC__ */
  /* ==============================================================================*/

  if(HAL_GetTick() >= tout)
 8000dbe:	f001 fcbd 	bl	800273c <HAL_GetTick>
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d805      	bhi.n	8000dd6 <STL_InitRunTimeChecks+0xca>
  {
    #ifdef STL_VERBOSE_POR
      printf("Run time clock measurement failure\n\r");
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <STL_InitRunTimeChecks+0x110>)
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f004 fb17 	bl	8005400 <iprintf>
    #endif /* STL_VERBOSE_POR */
    FailSafePOR();
 8000dd2:	f000 f9d7 	bl	8001184 <FailSafePOR>
  }
    
  /* Initialize variables for main routine control flow monitoring */
  CtrlFlowCnt = 0u;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <STL_InitRunTimeChecks+0xf8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
  CtrlFlowCntInv = 0xFFFFFFFFuL;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <STL_InitRunTimeChecks+0xfc>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	4252      	negs	r2, r2
 8000de2:	601a      	str	r2, [r3, #0]
      printf(" WWDG init Error\n\r");
    #endif  /* STL_VERBOSE */
    FailSafePOR();
  }
#endif /* USE_WINDOW_WDOG */ 
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b002      	add	sp, #8
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	2000003c 	.word	0x2000003c
 8000df0:	20000060 	.word	0x20000060
 8000df4:	20000040 	.word	0x20000040
 8000df8:	20000064 	.word	0x20000064
 8000dfc:	20000048 	.word	0x20000048
 8000e00:	2000006c 	.word	0x2000006c
 8000e04:	20000030 	.word	0x20000030
 8000e08:	20000054 	.word	0x20000054
 8000e0c:	20000034 	.word	0x20000034
 8000e10:	20000058 	.word	0x20000058
 8000e14:	08006574 	.word	0x08006574
 8000e18:	20000044 	.word	0x20000044
 8000e1c:	08006594 	.word	0x08006594

08000e20 <STL_DoRunTimeChecks>:
  *         (can be divided into more separated segments if necessary)
  * @param  : None
  * @retval : None
  */
void STL_DoRunTimeChecks(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  uint32_t rom_test;
  
  /* Is the time base duration elapsed? */
  if (TimeBaseFlag == 0xAAAAAAAAuL)
 8000e26:	4b98      	ldr	r3, [pc, #608]	; (8001088 <STL_DoRunTimeChecks+0x268>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a98      	ldr	r2, [pc, #608]	; (800108c <STL_DoRunTimeChecks+0x26c>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d000      	beq.n	8000e32 <STL_DoRunTimeChecks+0x12>
 8000e30:	e126      	b.n	8001080 <STL_DoRunTimeChecks+0x260>
  {
    /* Toggle LED_Non Volatile Memory */
    #if defined STL_EVAL_MODE
      BSP_LED_Toggle(LED_NVM);
 8000e32:	23a0      	movs	r3, #160	; 0xa0
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	2140      	movs	r1, #64	; 0x40
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f002 f934 	bl	80030a6 <HAL_GPIO_TogglePin>
    #endif  /* STL_EVAL_MODE */
      
    /* Verification of TimeBaseFlag integrity */
    /* The following pair of volatile variables is changed consistently at Systick ISR only */
    if ((TimeBaseFlag ^ TimeBaseFlagInv) == 0xFFFFFFFFuL)
 8000e3e:	4b92      	ldr	r3, [pc, #584]	; (8001088 <STL_DoRunTimeChecks+0x268>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b93      	ldr	r3, [pc, #588]	; (8001090 <STL_DoRunTimeChecks+0x270>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4053      	eors	r3, r2
 8000e48:	3301      	adds	r3, #1
 8000e4a:	d000      	beq.n	8000e4e <STL_DoRunTimeChecks+0x2e>
 8000e4c:	e10c      	b.n	8001068 <STL_DoRunTimeChecks+0x248>
    {
      TimeBaseFlag = 0u;
 8000e4e:	4b8e      	ldr	r3, [pc, #568]	; (8001088 <STL_DoRunTimeChecks+0x268>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
    
      /*----------------------------------------------------------------------*/
      /*---------------------------- CPU registers ----------------------------*/
      /*----------------------------------------------------------------------*/
      control_flow_call(CPU_TEST_CALLER);
 8000e54:	4b8f      	ldr	r3, [pc, #572]	; (8001094 <STL_DoRunTimeChecks+0x274>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	1c9a      	adds	r2, r3, #2
 8000e5a:	4b8e      	ldr	r3, [pc, #568]	; (8001094 <STL_DoRunTimeChecks+0x274>)
 8000e5c:	601a      	str	r2, [r3, #0]
      
      if (STL_RunTimeCPUTest() != CPUTEST_SUCCESS)
 8000e5e:	f001 fa3f 	bl	80022e0 <STL_RunTimeCPUTest>
 8000e62:	0003      	movs	r3, r0
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d006      	beq.n	8000e76 <STL_DoRunTimeChecks+0x56>
      {
        #ifdef STL_VERBOSE
          printf("Run-time CPU Test Failure\n\r");
 8000e68:	4b8b      	ldr	r3, [pc, #556]	; (8001098 <STL_DoRunTimeChecks+0x278>)
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f004 fac8 	bl	8005400 <iprintf>
        #endif /* STL_VERBOSE */
        FailSafePOR();
 8000e70:	f000 f988 	bl	8001184 <FailSafePOR>
 8000e74:	e004      	b.n	8000e80 <STL_DoRunTimeChecks+0x60>
      }
      else
      {
        control_flow_resume(CPU_TEST_CALLER);
 8000e76:	4b89      	ldr	r3, [pc, #548]	; (800109c <STL_DoRunTimeChecks+0x27c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	1e9a      	subs	r2, r3, #2
 8000e7c:	4b87      	ldr	r3, [pc, #540]	; (800109c <STL_DoRunTimeChecks+0x27c>)
 8000e7e:	601a      	str	r2, [r3, #0]
      }
  
      /*----------------------------------------------------------------------*/
      /*------------------------- Stack overflow -----------------------------*/
      /*----------------------------------------------------------------------*/
      control_flow_call(STACK_OVERFLOW_TEST);
 8000e80:	4b84      	ldr	r3, [pc, #528]	; (8001094 <STL_DoRunTimeChecks+0x274>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	3335      	adds	r3, #53	; 0x35
 8000e86:	001a      	movs	r2, r3
 8000e88:	4b82      	ldr	r3, [pc, #520]	; (8001094 <STL_DoRunTimeChecks+0x274>)
 8000e8a:	601a      	str	r2, [r3, #0]
      
      if (STL_CheckStack() != SUCCESS)
 8000e8c:	f000 f922 	bl	80010d4 <STL_CheckStack>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d006      	beq.n	8000ea2 <STL_DoRunTimeChecks+0x82>
      {
        #ifdef STL_VERBOSE
          printf("Stack overflow\n\r");
 8000e94:	4b82      	ldr	r3, [pc, #520]	; (80010a0 <STL_DoRunTimeChecks+0x280>)
 8000e96:	0018      	movs	r0, r3
 8000e98:	f004 fab2 	bl	8005400 <iprintf>
        #endif /* STL_VERBOSE */
        FailSafePOR();
 8000e9c:	f000 f972 	bl	8001184 <FailSafePOR>
 8000ea0:	e005      	b.n	8000eae <STL_DoRunTimeChecks+0x8e>
      }
      else
      {
        control_flow_resume(STACK_OVERFLOW_TEST);
 8000ea2:	4b7e      	ldr	r3, [pc, #504]	; (800109c <STL_DoRunTimeChecks+0x27c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	3b35      	subs	r3, #53	; 0x35
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	4b7c      	ldr	r3, [pc, #496]	; (800109c <STL_DoRunTimeChecks+0x27c>)
 8000eac:	601a      	str	r2, [r3, #0]
      }
      
      /*----------------------------------------------------------------------*/
      /*------------------------- Clock monitoring ---------------------------*/
      /*----------------------------------------------------------------------*/
      control_flow_call(CLOCK_TEST_CALLER);
 8000eae:	4b79      	ldr	r3, [pc, #484]	; (8001094 <STL_DoRunTimeChecks+0x274>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3317      	adds	r3, #23
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	4b77      	ldr	r3, [pc, #476]	; (8001094 <STL_DoRunTimeChecks+0x274>)
 8000eb8:	601a      	str	r2, [r3, #0]
      
      switch ( STL_MainClockTest() )
 8000eba:	f7ff fd1d 	bl	80008f8 <STL_MainClockTest>
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	2b0a      	cmp	r3, #10
 8000ec2:	d005      	beq.n	8000ed0 <STL_DoRunTimeChecks+0xb0>
 8000ec4:	dc3f      	bgt.n	8000f46 <STL_DoRunTimeChecks+0x126>
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d009      	beq.n	8000ede <STL_DoRunTimeChecks+0xbe>
 8000eca:	2b08      	cmp	r3, #8
 8000ecc:	d034      	beq.n	8000f38 <STL_DoRunTimeChecks+0x118>
 8000ece:	e03a      	b.n	8000f46 <STL_DoRunTimeChecks+0x126>
      {
        case FREQ_OK:
          control_flow_resume(CLOCK_TEST_CALLER);
 8000ed0:	4b72      	ldr	r3, [pc, #456]	; (800109c <STL_DoRunTimeChecks+0x27c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3b17      	subs	r3, #23
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	4b70      	ldr	r3, [pc, #448]	; (800109c <STL_DoRunTimeChecks+0x27c>)
 8000eda:	601a      	str	r2, [r3, #0]
          break;
 8000edc:	e03a      	b.n	8000f54 <STL_DoRunTimeChecks+0x134>
  
        case EXT_SOURCE_FAIL:
          #ifdef STL_VERBOSE
            /* finish communication flow prior system clock change */
            UartHandle.Instance = USARTx;
 8000ede:	4b71      	ldr	r3, [pc, #452]	; (80010a4 <STL_DoRunTimeChecks+0x284>)
 8000ee0:	4a71      	ldr	r2, [pc, #452]	; (80010a8 <STL_DoRunTimeChecks+0x288>)
 8000ee2:	601a      	str	r2, [r3, #0]
            while (HAL_UART_GetState(&UartHandle) == HAL_UART_STATE_BUSY_TX)
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	4b6f      	ldr	r3, [pc, #444]	; (80010a4 <STL_DoRunTimeChecks+0x284>)
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f003 fdd3 	bl	8004a94 <HAL_UART_GetState>
 8000eee:	0003      	movs	r3, r0
 8000ef0:	2b21      	cmp	r3, #33	; 0x21
 8000ef2:	d0f8      	beq.n	8000ee6 <STL_DoRunTimeChecks+0xc6>
            { }
            /* Re-init communication channel with modified clock setting */
            HAL_UART_DeInit(&UartHandle);
 8000ef4:	4b6b      	ldr	r3, [pc, #428]	; (80010a4 <STL_DoRunTimeChecks+0x284>)
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f003 fcda 	bl	80048b0 <HAL_UART_DeInit>
            UartHandle.Init.BaudRate   = 115200;
 8000efc:	4b69      	ldr	r3, [pc, #420]	; (80010a4 <STL_DoRunTimeChecks+0x284>)
 8000efe:	22e1      	movs	r2, #225	; 0xe1
 8000f00:	0252      	lsls	r2, r2, #9
 8000f02:	605a      	str	r2, [r3, #4]
            UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000f04:	4b67      	ldr	r3, [pc, #412]	; (80010a4 <STL_DoRunTimeChecks+0x284>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
            UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000f0a:	4b66      	ldr	r3, [pc, #408]	; (80010a4 <STL_DoRunTimeChecks+0x284>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
            UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000f10:	4b64      	ldr	r3, [pc, #400]	; (80010a4 <STL_DoRunTimeChecks+0x284>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
            UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000f16:	4b63      	ldr	r3, [pc, #396]	; (80010a4 <STL_DoRunTimeChecks+0x284>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
            UartHandle.Init.Mode       = UART_MODE_TX;
 8000f1c:	4b61      	ldr	r3, [pc, #388]	; (80010a4 <STL_DoRunTimeChecks+0x284>)
 8000f1e:	2208      	movs	r2, #8
 8000f20:	615a      	str	r2, [r3, #20]
            HAL_UART_Init(&UartHandle);
 8000f22:	4b60      	ldr	r3, [pc, #384]	; (80010a4 <STL_DoRunTimeChecks+0x284>)
 8000f24:	0018      	movs	r0, r3
 8000f26:	f003 fc6f 	bl	8004808 <HAL_UART_Init>
            printf("\n\r Clock Source failure (Run-time)\n\r");
 8000f2a:	4b60      	ldr	r3, [pc, #384]	; (80010ac <STL_DoRunTimeChecks+0x28c>)
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f004 fa67 	bl	8005400 <iprintf>
          #endif /* STL_VERBOSE */
          FailSafePOR();
 8000f32:	f000 f927 	bl	8001184 <FailSafePOR>
          break;
 8000f36:	e00d      	b.n	8000f54 <STL_DoRunTimeChecks+0x134>
  
        case CLASS_B_VAR_FAIL:
          #ifdef STL_VERBOSE
            printf("\n\r Class B variable error (clock test)\n\r");
 8000f38:	4b5d      	ldr	r3, [pc, #372]	; (80010b0 <STL_DoRunTimeChecks+0x290>)
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f004 fa60 	bl	8005400 <iprintf>
          #endif /* STL_VERBOSE */
          FailSafePOR();
 8000f40:	f000 f920 	bl	8001184 <FailSafePOR>
          break;
 8000f44:	e006      	b.n	8000f54 <STL_DoRunTimeChecks+0x134>
        case HSI_HSE_SWITCH_FAIL:
        case TEST_ONGOING:
        case CTRL_FLOW_ERROR:
        default:
          #ifdef STL_VERBOSE
            printf("Abnormal Clock Test routine termination \n\r");
 8000f46:	4b5b      	ldr	r3, [pc, #364]	; (80010b4 <STL_DoRunTimeChecks+0x294>)
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f004 fa59 	bl	8005400 <iprintf>
          #endif  /* STL_VERBOSE */
          FailSafePOR();
 8000f4e:	f000 f919 	bl	8001184 <FailSafePOR>
          break;
 8000f52:	46c0      	nop			; (mov r8, r8)
  
  
      /*----------------------------------------------------------------------*/
      /*------------------ Invariable memory CRC check -----------------------*/
      /*----------------------------------------------------------------------*/
      control_flow_call(FLASH_TEST_CALLER);
 8000f54:	4b4f      	ldr	r3, [pc, #316]	; (8001094 <STL_DoRunTimeChecks+0x274>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	333f      	adds	r3, #63	; 0x3f
 8000f5a:	001a      	movs	r2, r3
 8000f5c:	4b4d      	ldr	r3, [pc, #308]	; (8001094 <STL_DoRunTimeChecks+0x274>)
 8000f5e:	601a      	str	r2, [r3, #0]
			
      rom_test = STL_crc32Run();  /* Requires the control flow check to be modified */
 8000f60:	f7ff fe28 	bl	8000bb4 <STL_crc32Run>
 8000f64:	0003      	movs	r3, r0
 8000f66:	607b      	str	r3, [r7, #4]
      switch ( rom_test )
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <STL_DoRunTimeChecks+0x156>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d007      	beq.n	8000f84 <STL_DoRunTimeChecks+0x164>
 8000f74:	e016      	b.n	8000fa4 <STL_DoRunTimeChecks+0x184>
      {
        case TEST_RUNNING:
            control_flow_resume(FLASH_TEST_CALLER);
 8000f76:	4b49      	ldr	r3, [pc, #292]	; (800109c <STL_DoRunTimeChecks+0x27c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	3b3f      	subs	r3, #63	; 0x3f
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	4b47      	ldr	r3, [pc, #284]	; (800109c <STL_DoRunTimeChecks+0x27c>)
 8000f80:	601a      	str	r2, [r3, #0]
          break;
 8000f82:	e016      	b.n	8000fb2 <STL_DoRunTimeChecks+0x192>
          #ifdef STL_VERBOSE
            /* avoid any long string output here, '*' just marks the flash test completed ok */
            #ifndef __GNUC__
              putchar((int16_t)'*');
            #else
              __io_putchar((int16_t)'*');
 8000f84:	202a      	movs	r0, #42	; 0x2a
 8000f86:	f7ff fc6f 	bl	8000868 <__io_putchar>
            #endif /* __GNUC__ */
          #endif /* STL_VERBOSE */
          #if defined STL_EVAL_MODE
            /* Toggle LED_NVM for debug purpose */
            BSP_LED_Toggle(LED_NVM);
 8000f8a:	23a0      	movs	r3, #160	; 0xa0
 8000f8c:	05db      	lsls	r3, r3, #23
 8000f8e:	2140      	movs	r1, #64	; 0x40
 8000f90:	0018      	movs	r0, r3
 8000f92:	f002 f888 	bl	80030a6 <HAL_GPIO_TogglePin>
          #endif  /* STL_EVAL_MODE */
          #if defined(STL_EVAL_LCD)
            ++MyFLASHCounter;
          #endif /* STL_EVAL_LCD */
          CtrlFlowCntInv -= FLASH_TEST_CALLER;
 8000f96:	4b41      	ldr	r3, [pc, #260]	; (800109c <STL_DoRunTimeChecks+0x27c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	3b3f      	subs	r3, #63	; 0x3f
 8000f9c:	001a      	movs	r2, r3
 8000f9e:	4b3f      	ldr	r3, [pc, #252]	; (800109c <STL_DoRunTimeChecks+0x27c>)
 8000fa0:	601a      	str	r2, [r3, #0]
          break;
 8000fa2:	e006      	b.n	8000fb2 <STL_DoRunTimeChecks+0x192>
  
        case TEST_FAILURE:
        case CLASS_B_DATA_FAIL:
        default:
          #ifdef STL_VERBOSE
            printf(" Run-time FLASH CRC Error\n\r");
 8000fa4:	4b44      	ldr	r3, [pc, #272]	; (80010b8 <STL_DoRunTimeChecks+0x298>)
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f004 fa2a 	bl	8005400 <iprintf>
          #endif  /* STL_VERBOSE */
          FailSafePOR();
 8000fac:	f000 f8ea 	bl	8001184 <FailSafePOR>
          break;
 8000fb0:	46c0      	nop			; (mov r8, r8)
          #endif  /* STL_VERBOSE */
          FailSafePOR();
        }
      #endif /* USE_INDEPENDENT_WDOG */
  
      if (((CtrlFlowCnt ^ CtrlFlowCntInv) == 0xFFFFFFFFuL)
 8000fb2:	4b38      	ldr	r3, [pc, #224]	; (8001094 <STL_DoRunTimeChecks+0x274>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4b39      	ldr	r3, [pc, #228]	; (800109c <STL_DoRunTimeChecks+0x27c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4053      	eors	r3, r2
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	d14c      	bne.n	800105a <STL_DoRunTimeChecks+0x23a>
        &&((LastCtrlFlowCnt ^ LastCtrlFlowCntInv) == 0xFFFFFFFFuL))
 8000fc0:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <STL_DoRunTimeChecks+0x29c>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <STL_DoRunTimeChecks+0x2a0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4053      	eors	r3, r2
 8000fca:	3301      	adds	r3, #1
 8000fcc:	d145      	bne.n	800105a <STL_DoRunTimeChecks+0x23a>
      {
        if (rom_test == TEST_OK)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b04      	cmp	r3, #4
 8000fd2:	d12a      	bne.n	800102a <STL_DoRunTimeChecks+0x20a>
          /* ==============================================================================*/
          /* MISRA violation of rule 11.4,17.4 - pointer arithmetic & casting has is used */
          #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
            #pragma diag_suppress=Pm088,Pm141
          #endif /* __IAR_SYSTEMS_ICC__ */
          if ((CtrlFlowCnt == FULL_FLASH_CHECKED) 
 8000fd4:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <STL_DoRunTimeChecks+0x274>)
 8000fd6:	6819      	ldr	r1, [r3, #0]
 8000fd8:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <STL_DoRunTimeChecks+0x2a4>)
 8000fda:	22f8      	movs	r2, #248	; 0xf8
 8000fdc:	0612      	lsls	r2, r2, #24
 8000fde:	4694      	mov	ip, r2
 8000fe0:	4463      	add	r3, ip
 8000fe2:	099a      	lsrs	r2, r3, #6
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	189b      	adds	r3, r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	189b      	adds	r3, r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	1a9b      	subs	r3, r3, r2
 8000ff2:	334f      	adds	r3, #79	; 0x4f
 8000ff4:	33ff      	adds	r3, #255	; 0xff
 8000ff6:	4299      	cmp	r1, r3
 8000ff8:	d110      	bne.n	800101c <STL_DoRunTimeChecks+0x1fc>
            && ((CtrlFlowCnt - LastCtrlFlowCnt) == (LAST_DELTA_MAIN)))
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <STL_DoRunTimeChecks+0x274>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <STL_DoRunTimeChecks+0x29c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	1ad2      	subs	r2, r2, r3
 8001004:	23a7      	movs	r3, #167	; 0xa7
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	429a      	cmp	r2, r3
 800100a:	d107      	bne.n	800101c <STL_DoRunTimeChecks+0x1fc>
          #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
            #pragma diag_default=Pm088,Pm141
          #endif /* __IAR_SYSTEMS_ICC__ */
          /* ==============================================================================*/
          {
            CtrlFlowCnt = 0u;
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <STL_DoRunTimeChecks+0x274>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
            CtrlFlowCntInv = 0xFFFFFFFFuL;
 8001012:	4b22      	ldr	r3, [pc, #136]	; (800109c <STL_DoRunTimeChecks+0x27c>)
 8001014:	2201      	movs	r2, #1
 8001016:	4252      	negs	r2, r2
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e015      	b.n	8001048 <STL_DoRunTimeChecks+0x228>
          }
          else  /* Return value form crc check was corrupted */
          {
            #ifdef STL_VERBOSE
              printf("Control Flow Error (main loop, Flash CRC)\n\r");
 800101c:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <STL_DoRunTimeChecks+0x2a8>)
 800101e:	0018      	movs	r0, r3
 8001020:	f004 f9ee 	bl	8005400 <iprintf>
            #endif  /* STL_VERBOSE */
            FailSafePOR();
 8001024:	f000 f8ae 	bl	8001184 <FailSafePOR>
 8001028:	e00e      	b.n	8001048 <STL_DoRunTimeChecks+0x228>
          }
        }
        else  /* Flash test not completed yet */
        {
          if ((CtrlFlowCnt - LastCtrlFlowCnt) != DELTA_MAIN)
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <STL_DoRunTimeChecks+0x274>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <STL_DoRunTimeChecks+0x29c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	1ad2      	subs	r2, r2, r3
 8001034:	2348      	movs	r3, #72	; 0x48
 8001036:	33ff      	adds	r3, #255	; 0xff
 8001038:	429a      	cmp	r2, r3
 800103a:	d005      	beq.n	8001048 <STL_DoRunTimeChecks+0x228>
          {
            #ifdef STL_VERBOSE
              printf("Control Flow Error (main loop, Flash CRC on-going)\n\r");
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <STL_DoRunTimeChecks+0x2ac>)
 800103e:	0018      	movs	r0, r3
 8001040:	f004 f9de 	bl	8005400 <iprintf>
            #endif  /* STL_VERBOSE */
            FailSafePOR();
 8001044:	f000 f89e 	bl	8001184 <FailSafePOR>
          }
        }
  
        LastCtrlFlowCnt = CtrlFlowCnt;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <STL_DoRunTimeChecks+0x274>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <STL_DoRunTimeChecks+0x29c>)
 800104e:	601a      	str	r2, [r3, #0]
        LastCtrlFlowCntInv = CtrlFlowCntInv;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <STL_DoRunTimeChecks+0x27c>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <STL_DoRunTimeChecks+0x2a0>)
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	e00c      	b.n	8001074 <STL_DoRunTimeChecks+0x254>
      }
      else
      {
        #ifdef STL_VERBOSE
          printf("Class B variable Error (main loop)\n\r");
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <STL_DoRunTimeChecks+0x2b0>)
 800105c:	0018      	movs	r0, r3
 800105e:	f004 f9cf 	bl	8005400 <iprintf>
        #endif  /* STL_VERBOSE */
        FailSafePOR();
 8001062:	f000 f88f 	bl	8001184 <FailSafePOR>
 8001066:	e005      	b.n	8001074 <STL_DoRunTimeChecks+0x254>
      }
    }
    else
    {
      #ifdef STL_VERBOSE
        printf("Class B variable Error (main loop)\n\r");
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <STL_DoRunTimeChecks+0x2b0>)
 800106a:	0018      	movs	r0, r3
 800106c:	f004 f9c8 	bl	8005400 <iprintf>
      #endif  /* STL_VERBOSE */
      FailSafePOR();
 8001070:	f000 f888 	bl	8001184 <FailSafePOR>
    }
    #if defined STL_EVAL_MODE
      /* Toggle LD3 for debug purpose */
      BSP_LED_Toggle(LED_NVM);
 8001074:	23a0      	movs	r3, #160	; 0xa0
 8001076:	05db      	lsls	r3, r3, #23
 8001078:	2140      	movs	r1, #64	; 0x40
 800107a:	0018      	movs	r0, r3
 800107c:	f002 f813 	bl	80030a6 <HAL_GPIO_TogglePin>
    #endif  /* STL_EVAL_MODE */
  } /* End of periodic Self-test routine */
}
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b002      	add	sp, #8
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000040 	.word	0x20000040
 800108c:	aaaaaaaa 	.word	0xaaaaaaaa
 8001090:	20000064 	.word	0x20000064
 8001094:	20000030 	.word	0x20000030
 8001098:	080065bc 	.word	0x080065bc
 800109c:	20000054 	.word	0x20000054
 80010a0:	080065d8 	.word	0x080065d8
 80010a4:	2000010c 	.word	0x2000010c
 80010a8:	40004400 	.word	0x40004400
 80010ac:	080065ec 	.word	0x080065ec
 80010b0:	08006614 	.word	0x08006614
 80010b4:	08006640 	.word	0x08006640
 80010b8:	0800666c 	.word	0x0800666c
 80010bc:	20000048 	.word	0x20000048
 80010c0:	2000006c 	.word	0x2000006c
 80010c4:	08006dc0 	.word	0x08006dc0
 80010c8:	08006688 	.word	0x08006688
 80010cc:	080066b4 	.word	0x080066b4
 80010d0:	080066ec 	.word	0x080066ec

080010d4 <STL_CheckStack>:
  * @brief  This function verifies that Stack didn't overflow
  * @param  : None
  * @retval : ErrorStatus = (ERROR, SUCCESS)
  */
ErrorStatus STL_CheckStack(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
  ErrorStatus result = SUCCESS;
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
  
  CtrlFlowCnt += STACK_OVERFLOW_CALLEE;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <STL_CheckStack+0x70>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	333b      	adds	r3, #59	; 0x3b
 80010e6:	001a      	movs	r2, r3
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <STL_CheckStack+0x70>)
 80010ea:	601a      	str	r2, [r3, #0]

  if ( aStackOverFlowPtrn[0] != 0xEEEEEEEEuL )
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <STL_CheckStack+0x74>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a16      	ldr	r2, [pc, #88]	; (800114c <STL_CheckStack+0x78>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d002      	beq.n	80010fc <STL_CheckStack+0x28>
  {
    result = ERROR;
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	2201      	movs	r2, #1
 80010fa:	701a      	strb	r2, [r3, #0]
  }
  if ( aStackOverFlowPtrn[1] != 0xCCCCCCCCuL )
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <STL_CheckStack+0x74>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4a13      	ldr	r2, [pc, #76]	; (8001150 <STL_CheckStack+0x7c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d002      	beq.n	800110c <STL_CheckStack+0x38>
  {
    result = ERROR;
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
  }
  if ( aStackOverFlowPtrn[2] != 0xBBBBBBBBuL )
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <STL_CheckStack+0x74>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	4a10      	ldr	r2, [pc, #64]	; (8001154 <STL_CheckStack+0x80>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d002      	beq.n	800111c <STL_CheckStack+0x48>
  {
    result = ERROR;
 8001116:	1dfb      	adds	r3, r7, #7
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
  }
  if ( aStackOverFlowPtrn[3] != 0xDDDDDDDDuL )
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <STL_CheckStack+0x74>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <STL_CheckStack+0x84>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d002      	beq.n	800112c <STL_CheckStack+0x58>
  {
    result = ERROR;
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
  }

  CtrlFlowCntInv -= STACK_OVERFLOW_CALLEE;
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <STL_CheckStack+0x88>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3b3b      	subs	r3, #59	; 0x3b
 8001132:	001a      	movs	r2, r3
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <STL_CheckStack+0x88>)
 8001136:	601a      	str	r2, [r3, #0]

  return (result);
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	781b      	ldrb	r3, [r3, #0]
}
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000030 	.word	0x20000030
 8001148:	20000640 	.word	0x20000640
 800114c:	eeeeeeee 	.word	0xeeeeeeee
 8001150:	cccccccc 	.word	0xcccccccc
 8001154:	bbbbbbbb 	.word	0xbbbbbbbb
 8001158:	dddddddd 	.word	0xdddddddd
 800115c:	20000054 	.word	0x20000054

08001160 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001164:	f3bf 8f4f 	dsb	sy
}
 8001168:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_SystemReset+0x1c>)
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <__NVIC_SystemReset+0x20>)
 800116e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001170:	f3bf 8f4f 	dsb	sy
}
 8001174:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	e7fd      	b.n	8001176 <__NVIC_SystemReset+0x16>
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	05fa0004 	.word	0x05fa0004

08001184 <FailSafePOR>:
  *    user to keep application safe while define proper recovery operation
  * @param  : None
  * @retval : None
  */
void FailSafePOR(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* disable any checking services at SystTick interrupt */
  TickCounter = TickCounterInv = 0u;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <FailSafePOR+0x30>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <FailSafePOR+0x30>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <FailSafePOR+0x34>)
 8001194:	601a      	str	r2, [r3, #0]
  
  #ifdef STL_VERBOSE_POR
    printf(" >>>>>>>>>> POR FailSafe Mode <<<<<<<<<<\n\r");
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <FailSafePOR+0x38>)
 8001198:	0018      	movs	r0, r3
 800119a:	f004 f931 	bl	8005400 <iprintf>
  #endif  /* STL_VERBOSE_POR */
  
  #if defined STL_EVAL_MODE
    /* LED_ERR On for debug purposes */
    BSP_LED_On(LED_ERR);
 800119e:	23a0      	movs	r3, #160	; 0xa0
 80011a0:	05db      	lsls	r3, r3, #23
 80011a2:	2201      	movs	r2, #1
 80011a4:	2180      	movs	r1, #128	; 0x80
 80011a6:	0018      	movs	r0, r3
 80011a8:	f001 ff60 	bl	800306c <HAL_GPIO_WritePin>
    
  while(1)
  {
    #ifndef NO_RESET_AT_FAIL_MODE
      /* Generate system reset */
      HAL_NVIC_SystemReset();
 80011ac:	f001 fbb3 	bl	8002916 <HAL_NVIC_SystemReset>
 80011b0:	e7fc      	b.n	80011ac <FailSafePOR+0x28>
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	20000060 	.word	0x20000060
 80011b8:	2000003c 	.word	0x2000003c
 80011bc:	08006714 	.word	0x08006714

080011c0 <STL_StartUp>:
  * @param  : None
  *   Flash interface initialized, Systick timer ON (2ms timebase)
  * @retval : None
  */
void STL_StartUp(void)
{
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
  uint32_t crc_result;
  uint32_t index;
  ClockStatus clk_sts;
	
  /* block run time tests performed at SysTick interrupt */
  TickCounter= TickCounterInv= 0;
 80011c6:	4bed      	ldr	r3, [pc, #948]	; (800157c <STL_StartUp+0x3bc>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	4beb      	ldr	r3, [pc, #940]	; (800157c <STL_StartUp+0x3bc>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4beb      	ldr	r3, [pc, #940]	; (8001580 <STL_StartUp+0x3c0>)
 80011d2:	601a      	str	r2, [r3, #0]
  
  /* Reset of all peripherals, Initializes the Flash interface and the Systick */
  HAL_Init();
 80011d4:	f001 fa4c 	bl	8002670 <HAL_Init>

  #ifdef STL_VERBOSE_POR
    /* Update the SystemCoreClock global variable as USART Baud rate setting depends on it */
  	SystemCoreClockUpdate();
 80011d8:	f000 fec4 	bl	8001f64 <SystemCoreClockUpdate>
    USART_Configuration();
 80011dc:	f7ff fac0 	bl	8000760 <USART_Configuration>
    printf("\n\n\r *******  Self Test Library Init  *******\n\r");
 80011e0:	4be8      	ldr	r3, [pc, #928]	; (8001584 <STL_StartUp+0x3c4>)
 80011e2:	0018      	movs	r0, r3
 80011e4:	f004 f90c 	bl	8005400 <iprintf>
  #endif

  #if defined STL_EVAL_MODE
    /* init LEDs on evaluation board  to indicate phases of startup */
    BSP_LED_Init(LED_VLM);
 80011e8:	2020      	movs	r0, #32
 80011ea:	f7ff fa8b 	bl	8000704 <User_signal_Init>
    BSP_LED_Init(LED_NVM);
 80011ee:	2040      	movs	r0, #64	; 0x40
 80011f0:	f7ff fa88 	bl	8000704 <User_signal_Init>
    BSP_LED_Init(LED_ERR);
 80011f4:	2080      	movs	r0, #128	; 0x80
 80011f6:	f7ff fa85 	bl	8000704 <User_signal_Init>
  /*--------------------------------------------------------------------------*/
  /*------------------- CPU registers and flags self test --------------------*/
  /*--------------------------------------------------------------------------*/

  /* Initialization of counters for control flow monitoring */
  init_control_flow();
 80011fa:	4be3      	ldr	r3, [pc, #908]	; (8001588 <STL_StartUp+0x3c8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	4be1      	ldr	r3, [pc, #900]	; (8001588 <STL_StartUp+0x3c8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	43da      	mvns	r2, r3
 8001206:	4be1      	ldr	r3, [pc, #900]	; (800158c <STL_StartUp+0x3cc>)
 8001208:	601a      	str	r2, [r3, #0]

  control_flow_call(CPU_TEST_CALLER);
 800120a:	4bdf      	ldr	r3, [pc, #892]	; (8001588 <STL_StartUp+0x3c8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	1c9a      	adds	r2, r3, #2
 8001210:	4bdd      	ldr	r3, [pc, #884]	; (8001588 <STL_StartUp+0x3c8>)
 8001212:	601a      	str	r2, [r3, #0]
  /* WARNING: all registers destroyed when exiting this function (including
  preserved registers R4 to R11) while excluding stack pointer R13) */
  if (STL_StartUpCPUTest() != CPUTEST_SUCCESS)
 8001214:	f001 f92e 	bl	8002474 <STL_StartUpCPUTest>
 8001218:	0003      	movs	r3, r0
 800121a:	2b01      	cmp	r3, #1
 800121c:	d006      	beq.n	800122c <STL_StartUp+0x6c>
  {
    #ifdef STL_VERBOSE_POR
      printf("Start-up CPU Test Failure\n\r");
 800121e:	4bdc      	ldr	r3, [pc, #880]	; (8001590 <STL_StartUp+0x3d0>)
 8001220:	0018      	movs	r0, r3
 8001222:	f004 f8ed 	bl	8005400 <iprintf>
    #endif /* STL_VERBOSE_POR */
    
    FailSafePOR();
 8001226:	f7ff ffad 	bl	8001184 <FailSafePOR>
 800122a:	e008      	b.n	800123e <STL_StartUp+0x7e>
  }
  else  /* CPU Test OK */
  {
    control_flow_resume(CPU_TEST_CALLER);
 800122c:	4bd7      	ldr	r3, [pc, #860]	; (800158c <STL_StartUp+0x3cc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	1e9a      	subs	r2, r3, #2
 8001232:	4bd6      	ldr	r3, [pc, #856]	; (800158c <STL_StartUp+0x3cc>)
 8001234:	601a      	str	r2, [r3, #0]
    
    #ifdef STL_VERBOSE_POR
      printf(" Start-up CPU Test OK\n\r");
 8001236:	4bd7      	ldr	r3, [pc, #860]	; (8001594 <STL_StartUp+0x3d4>)
 8001238:	0018      	movs	r0, r3
 800123a:	f004 f8e1 	bl	8005400 <iprintf>

  /*--------------------------------------------------------------------------*/
  /*--------------------- WDOGs functionality self test ----------------------*/
  /*--------------------------------------------------------------------------*/

  control_flow_call(WDG_TEST_CALLER);
 800123e:	4bd2      	ldr	r3, [pc, #840]	; (8001588 <STL_StartUp+0x3c8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	1d5a      	adds	r2, r3, #5
 8001244:	4bd0      	ldr	r3, [pc, #832]	; (8001588 <STL_StartUp+0x3c8>)
 8001246:	601a      	str	r2, [r3, #0]

  /* two phases IWDG & WWDG test, system reset is performed here */
  STL_WDGSelfTest();
 8001248:	f000 fa3e 	bl	80016c8 <STL_WDGSelfTest>
  
  control_flow_resume(WDG_TEST_CALLER);
 800124c:	4bcf      	ldr	r3, [pc, #828]	; (800158c <STL_StartUp+0x3cc>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	1f5a      	subs	r2, r3, #5
 8001252:	4bce      	ldr	r3, [pc, #824]	; (800158c <STL_StartUp+0x3cc>)
 8001254:	601a      	str	r2, [r3, #0]
  /*--------------------------------------------------------------------------*/
  /*--------------------- Switch ON PLL for maximum speed --------------------*/
  /*--------------------------------------------------------------------------*/
  #ifdef STL_VERBOSE_POR
    /* finish communication flow prior system clock change */
    while (HAL_UART_GetState(&UartHandle) == HAL_UART_STATE_BUSY_TX)
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	4bcf      	ldr	r3, [pc, #828]	; (8001598 <STL_StartUp+0x3d8>)
 800125a:	0018      	movs	r0, r3
 800125c:	f003 fc1a 	bl	8004a94 <HAL_UART_GetState>
 8001260:	0003      	movs	r3, r0
 8001262:	2b21      	cmp	r3, #33	; 0x21
 8001264:	d0f8      	beq.n	8001258 <STL_StartUp+0x98>
    { }
  #endif /* STL_VERBOSE_POR */
  
  /* No Control flow check here (not safety critical) */
  /* Switch on the PLL to speed-up Flash and RAM tests */
  StartUpClock_Config();
 8001266:	f7ff f9dd 	bl	8000624 <StartUpClock_Config>

  #ifdef STL_VERBOSE_POR
    /* Re-init communication channel with modified clock setting */
    HAL_UART_DeInit(&UartHandle);
 800126a:	4bcb      	ldr	r3, [pc, #812]	; (8001598 <STL_StartUp+0x3d8>)
 800126c:	0018      	movs	r0, r3
 800126e:	f003 fb1f 	bl	80048b0 <HAL_UART_DeInit>
    HAL_UART_Init(&UartHandle);
 8001272:	4bc9      	ldr	r3, [pc, #804]	; (8001598 <STL_StartUp+0x3d8>)
 8001274:	0018      	movs	r0, r3
 8001276:	f003 fac7 	bl	8004808 <HAL_UART_Init>
  /*--------------------- Invariable memory CRC check ------------------------*/
  /*--------------------------------------------------------------------------*/
  
  #ifdef STL_EVAL_MODE
    /* init LED pins in push pull slow output mode */
    BSP_LED_Init(LED_VLM);
 800127a:	2020      	movs	r0, #32
 800127c:	f7ff fa42 	bl	8000704 <User_signal_Init>
    BSP_LED_Init(LED_NVM);
 8001280:	2040      	movs	r0, #64	; 0x40
 8001282:	f7ff fa3f 	bl	8000704 <User_signal_Init>
    BSP_LED_Init(LED_ERR);
 8001286:	2080      	movs	r0, #128	; 0x80
 8001288:	f7ff fa3c 	bl	8000704 <User_signal_Init>
    
    /* LED_NVM On for debug purposes */
    BSP_LED_On(LED_NVM);
 800128c:	23a0      	movs	r3, #160	; 0xa0
 800128e:	05db      	lsls	r3, r3, #23
 8001290:	2201      	movs	r2, #1
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	0018      	movs	r0, r3
 8001296:	f001 fee9 	bl	800306c <HAL_GPIO_WritePin>
  #endif /* STL_EVAL_MODE */

  control_flow_call(CRC32_TEST_CALLER);
 800129a:	4bbb      	ldr	r3, [pc, #748]	; (8001588 <STL_StartUp+0x3c8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	330b      	adds	r3, #11
 80012a0:	001a      	movs	r2, r3
 80012a2:	4bb9      	ldr	r3, [pc, #740]	; (8001588 <STL_StartUp+0x3c8>)
 80012a4:	601a      	str	r2, [r3, #0]
  /* Compute the 32-bit crc of the whole Flash by CRC unit except the checksum
     pattern stored at top of FLASH */
  for (volatile int i = 0; i < 32000000; i++); // delay 1 sec
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	e002      	b.n	80012b2 <STL_StartUp+0xf2>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3301      	adds	r3, #1
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4ab9      	ldr	r2, [pc, #740]	; (800159c <STL_StartUp+0x3dc>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	ddf8      	ble.n	80012ac <STL_StartUp+0xec>
  __CRC_CLK_ENABLE();
 80012ba:	4bb9      	ldr	r3, [pc, #740]	; (80015a0 <STL_StartUp+0x3e0>)
 80012bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012be:	4bb8      	ldr	r3, [pc, #736]	; (80015a0 <STL_StartUp+0x3e0>)
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	0149      	lsls	r1, r1, #5
 80012c4:	430a      	orrs	r2, r1
 80012c6:	631a      	str	r2, [r3, #48]	; 0x30
 80012c8:	4bb5      	ldr	r3, [pc, #724]	; (80015a0 <STL_StartUp+0x3e0>)
 80012ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	015b      	lsls	r3, r3, #5
 80012d0:	4013      	ands	r3, r2
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
  
  CrcHandle.Instance = CRC;
 80012d6:	4bb3      	ldr	r3, [pc, #716]	; (80015a4 <STL_StartUp+0x3e4>)
 80012d8:	4ab3      	ldr	r2, [pc, #716]	; (80015a8 <STL_StartUp+0x3e8>)
 80012da:	601a      	str	r2, [r3, #0]
  #ifdef  CRC_UNIT_CONFIGURABLE
    CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_ENABLE;
 80012dc:	4bb1      	ldr	r3, [pc, #708]	; (80015a4 <STL_StartUp+0x3e4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	711a      	strb	r2, [r3, #4]
    CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_ENABLE;
 80012e2:	4bb0      	ldr	r3, [pc, #704]	; (80015a4 <STL_StartUp+0x3e4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	715a      	strb	r2, [r3, #5]
    CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 80012e8:	4bae      	ldr	r3, [pc, #696]	; (80015a4 <STL_StartUp+0x3e4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
    CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLED;
 80012ee:	4bad      	ldr	r3, [pc, #692]	; (80015a4 <STL_StartUp+0x3e4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
    CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_WORDS;
 80012f4:	4bab      	ldr	r3, [pc, #684]	; (80015a4 <STL_StartUp+0x3e4>)
 80012f6:	2203      	movs	r2, #3
 80012f8:	621a      	str	r2, [r3, #32]
  #endif
  HAL_CRC_Init(&CrcHandle);
 80012fa:	4baa      	ldr	r3, [pc, #680]	; (80015a4 <STL_StartUp+0x3e4>)
 80012fc:	0018      	movs	r0, r3
 80012fe:	f001 fb1b 	bl	8002938 <HAL_CRC_Init>

/* the next lines replaces the standard HAL function call
   crc_result = HAL_CRC_Calculate(&CrcHandle, (uint32_t *)ROM_START, (uint32_t)ROM_SIZEinWORDS); 
  due to bug at IAR linker - check sum computation can't support both big & little endian  */
     
  for(index = 0; index < (uint32_t)ROM_SIZEinWORDS; index++)
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e00e      	b.n	8001326 <STL_StartUp+0x166>
  {
    CRC->DR = __REV(*((uint32_t *)ROM_START + index));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	0512      	lsls	r2, r2, #20
 8001310:	4694      	mov	ip, r2
 8001312:	4463      	add	r3, ip
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4ba4      	ldr	r3, [pc, #656]	; (80015a8 <STL_StartUp+0x3e8>)
 8001318:	60ba      	str	r2, [r7, #8]
  return __builtin_bswap32(value);
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	ba12      	rev	r2, r2
 800131e:	601a      	str	r2, [r3, #0]
  for(index = 0; index < (uint32_t)ROM_SIZEinWORDS; index++)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	4ba1      	ldr	r3, [pc, #644]	; (80015ac <STL_StartUp+0x3ec>)
 8001328:	22f8      	movs	r2, #248	; 0xf8
 800132a:	0612      	lsls	r2, r2, #24
 800132c:	4694      	mov	ip, r2
 800132e:	4463      	add	r3, ip
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	429a      	cmp	r2, r3
 8001336:	d3e7      	bcc.n	8001308 <STL_StartUp+0x148>
  }
  crc_result = CRC->DR;
 8001338:	4b9b      	ldr	r3, [pc, #620]	; (80015a8 <STL_StartUp+0x3e8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	613b      	str	r3, [r7, #16]
  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_default=Pm088,Pm141
    /* ==============================================================================*/
  #endif  /* __IAR_SYSTEMS_ICC__ */
          
  control_flow_resume(CRC32_TEST_CALLER);
 800133e:	4b93      	ldr	r3, [pc, #588]	; (800158c <STL_StartUp+0x3cc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	3b0b      	subs	r3, #11
 8001344:	001a      	movs	r2, r3
 8001346:	4b91      	ldr	r3, [pc, #580]	; (800158c <STL_StartUp+0x3cc>)
 8001348:	601a      	str	r2, [r3, #0]

  /* Store pattern for regular 32-bit crc computation */
  control_flow_call(CRC_TEST_CALLER);
 800134a:	4b8f      	ldr	r3, [pc, #572]	; (8001588 <STL_StartUp+0x3c8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3311      	adds	r3, #17
 8001350:	001a      	movs	r2, r3
 8001352:	4b8d      	ldr	r3, [pc, #564]	; (8001588 <STL_StartUp+0x3c8>)
 8001354:	601a      	str	r2, [r3, #0]
  #if defined(__CC_ARM) || defined(__GNUC__)             /* KEIL or GCC Compiler */
    /* Computed 32-bit crc check is temporary stored at crc_result. This value must be copied
       into __Check_Sum address placed at the end of Flash area (see file startup_stm32fxx.s)
       Condition here can be reversed for debugging */

    if(crc_result != *(uint32_t *)(&REF_CRC32))
 8001356:	4b95      	ldr	r3, [pc, #596]	; (80015ac <STL_StartUp+0x3ec>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d006      	beq.n	800136e <STL_StartUp+0x1ae>
  #endif  /* __CC_ARM */   
    {
      #ifdef STL_VERBOSE_POR
        printf("FLASH 32-bit CRC Error at Start-up\n\r");
 8001360:	4b93      	ldr	r3, [pc, #588]	; (80015b0 <STL_StartUp+0x3f0>)
 8001362:	0018      	movs	r0, r3
 8001364:	f004 f84c 	bl	8005400 <iprintf>
      #endif  /* STL_VERBOSE_POR */
      FailSafePOR();
 8001368:	f7ff ff0c 	bl	8001184 <FailSafePOR>
 800136c:	e009      	b.n	8001382 <STL_StartUp+0x1c2>
    }
    else
    { /* Test OK */
      #ifdef STL_VERBOSE_POR
        printf(" Start-up FLASH 32-bit CRC OK\n\r");
 800136e:	4b91      	ldr	r3, [pc, #580]	; (80015b4 <STL_StartUp+0x3f4>)
 8001370:	0018      	movs	r0, r3
 8001372:	f004 f845 	bl	8005400 <iprintf>
      #endif  /* STL_VERBOSE_POR */

      /* If else statement is not executed, it will be detected by control flow monitoring */
      control_flow_resume(CRC_TEST_CALLER);  
 8001376:	4b85      	ldr	r3, [pc, #532]	; (800158c <STL_StartUp+0x3cc>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3b11      	subs	r3, #17
 800137c:	001a      	movs	r2, r3
 800137e:	4b83      	ldr	r3, [pc, #524]	; (800158c <STL_StartUp+0x3cc>)
 8001380:	601a      	str	r2, [r3, #0]
    }
    
  HAL_CRC_DeInit(&CrcHandle);
 8001382:	4b88      	ldr	r3, [pc, #544]	; (80015a4 <STL_StartUp+0x3e4>)
 8001384:	0018      	movs	r0, r3
 8001386:	f001 fb3d 	bl	8002a04 <HAL_CRC_DeInit>
  #ifdef STL_EVAL_MODE
    /* LED_NVM Off for debug purposes */
    BSP_LED_Off(LED_NVM);
 800138a:	23a0      	movs	r3, #160	; 0xa0
 800138c:	05db      	lsls	r3, r3, #23
 800138e:	2200      	movs	r2, #0
 8001390:	2140      	movs	r1, #64	; 0x40
 8001392:	0018      	movs	r0, r3
 8001394:	f001 fe6a 	bl	800306c <HAL_GPIO_WritePin>
  #endif /* STL_EVAL_MODE */

  /*--------------------------------------------------------------------------*/
  /*   Verify Control flow before RAM init (which clears Ctrl flow counters)  */
  /*--------------------------------------------------------------------------*/
  if (control_flow_check_point(CHECKPOINT1) == ERROR)
 8001398:	2026      	movs	r0, #38	; 0x26
 800139a:	f000 facd 	bl	8001938 <control_flow_check_point>
 800139e:	0003      	movs	r3, r0
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d106      	bne.n	80013b2 <STL_StartUp+0x1f2>
  {
     #ifdef STL_VERBOSE_POR
       printf("Control Flow Error Checkpoint 1\n\r");
 80013a4:	4b84      	ldr	r3, [pc, #528]	; (80015b8 <STL_StartUp+0x3f8>)
 80013a6:	0018      	movs	r0, r3
 80013a8:	f004 f82a 	bl	8005400 <iprintf>
     #endif  /* STL_VERBOSE_POR */
     FailSafePOR();
 80013ac:	f7ff feea 	bl	8001184 <FailSafePOR>
 80013b0:	e003      	b.n	80013ba <STL_StartUp+0x1fa>
  }
  else
  {
   #ifdef STL_VERBOSE_POR
    printf(" Control Flow Checkpoint 1 OK \n\r");
 80013b2:	4b82      	ldr	r3, [pc, #520]	; (80015bc <STL_StartUp+0x3fc>)
 80013b4:	0018      	movs	r0, r3
 80013b6:	f004 f823 	bl	8005400 <iprintf>
  /*--------------------------------------------------------------------------*/
  /* --------------------- Variable memory functional test -------------------*/
  /*--------------------------------------------------------------------------*/
  #ifdef STL_EVAL_MODE
    /* LED_VLM On for debug purposes */
    BSP_LED_On(LED_VLM);
 80013ba:	23a0      	movs	r3, #160	; 0xa0
 80013bc:	05db      	lsls	r3, r3, #23
 80013be:	2201      	movs	r2, #1
 80013c0:	2120      	movs	r1, #32
 80013c2:	0018      	movs	r0, r3
 80013c4:	f001 fe52 	bl	800306c <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	46c0      	nop			; (mov r8, r8)
  
  /* no stack operation can be performed during the test */  
	__disable_irq();
  
  /* WARNING: Stack is zero-initialized when exiting from this routine */
  if (STL_FullRamMarchC(RAM_START, RAM_END, BCKGRND) != SUCCESS)
 80013cc:	497c      	ldr	r1, [pc, #496]	; (80015c0 <STL_StartUp+0x400>)
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	059b      	lsls	r3, r3, #22
 80013d2:	2200      	movs	r2, #0
 80013d4:	0018      	movs	r0, r3
 80013d6:	f000 fead 	bl	8002134 <STL_FullRamMarchC>
 80013da:	1e03      	subs	r3, r0, #0
 80013dc:	d016      	beq.n	800140c <STL_StartUp+0x24c>
  __ASM volatile ("cpsie i" : : : "memory");
 80013de:	b662      	cpsie	i
}
 80013e0:	46c0      	nop			; (mov r8, r8)
  {
    #ifdef STL_VERBOSE_POR
      /* restore interrupt capability */
      __enable_irq();
      /* restore destroyed content of HAL structure for UART */
      UartHandle.Instance = USARTx;
 80013e2:	4b6d      	ldr	r3, [pc, #436]	; (8001598 <STL_StartUp+0x3d8>)
 80013e4:	4a77      	ldr	r2, [pc, #476]	; (80015c4 <STL_StartUp+0x404>)
 80013e6:	601a      	str	r2, [r3, #0]
      UartHandle.ErrorCode = HAL_UART_ERROR_NONE;
 80013e8:	4b6b      	ldr	r3, [pc, #428]	; (8001598 <STL_StartUp+0x3d8>)
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	2100      	movs	r1, #0
 80013ee:	5099      	str	r1, [r3, r2]
      __HAL_UART_RESET_HANDLE_STATE(&UartHandle);
 80013f0:	4b69      	ldr	r3, [pc, #420]	; (8001598 <STL_StartUp+0x3d8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	679a      	str	r2, [r3, #120]	; 0x78
 80013f6:	4b68      	ldr	r3, [pc, #416]	; (8001598 <STL_StartUp+0x3d8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	67da      	str	r2, [r3, #124]	; 0x7c

      #ifdef __GNUC__
      /* restore the data segment initializers from flash to SRAM (repeat  procedure from startup) */
        extern void Startup_Copy_Handler (void);
        Startup_Copy_Handler();
 80013fc:	f000 fe56 	bl	80020ac <Startup_Copy_Handler>
        printf("RAM Test Failure\n\r");
 8001400:	4b71      	ldr	r3, [pc, #452]	; (80015c8 <STL_StartUp+0x408>)
 8001402:	0018      	movs	r0, r3
 8001404:	f003 fffc 	bl	8005400 <iprintf>
      #ifdef __IAR_SYSTEMS_ICC__
        __iar_data_init3();
        printf("RAM Test Failure\n\r");
      #endif /* __IAR_SYSTEMS_ICC__ */
    #endif  /* STL_VERBOSE_POR */
    FailSafePOR();
 8001408:	f7ff febc 	bl	8001184 <FailSafePOR>
  __ASM volatile ("cpsie i" : : : "memory");
 800140c:	b662      	cpsie	i
}
 800140e:	46c0      	nop			; (mov r8, r8)
  }
  #ifdef STL_VERBOSE_POR
    /* restore interrupt capability */
    __enable_irq();
    /* restore destroyed content of HAL structure for UART */
    UartHandle.Instance = USARTx;
 8001410:	4b61      	ldr	r3, [pc, #388]	; (8001598 <STL_StartUp+0x3d8>)
 8001412:	4a6c      	ldr	r2, [pc, #432]	; (80015c4 <STL_StartUp+0x404>)
 8001414:	601a      	str	r2, [r3, #0]
    UartHandle.ErrorCode = HAL_UART_ERROR_NONE;
 8001416:	4b60      	ldr	r3, [pc, #384]	; (8001598 <STL_StartUp+0x3d8>)
 8001418:	2280      	movs	r2, #128	; 0x80
 800141a:	2100      	movs	r1, #0
 800141c:	5099      	str	r1, [r3, r2]
    __HAL_UART_RESET_HANDLE_STATE(&UartHandle);
 800141e:	4b5e      	ldr	r3, [pc, #376]	; (8001598 <STL_StartUp+0x3d8>)
 8001420:	2200      	movs	r2, #0
 8001422:	679a      	str	r2, [r3, #120]	; 0x78
 8001424:	4b5c      	ldr	r3, [pc, #368]	; (8001598 <STL_StartUp+0x3d8>)
 8001426:	2200      	movs	r2, #0
 8001428:	67da      	str	r2, [r3, #124]	; 0x7c
    
    /* restore the data segment initializers from flash to SRAM (repeat procedure from IAR & GCC startup) */
    #ifdef __GNUC__
      extern void Startup_Copy_Handler (void);
      Startup_Copy_Handler();
 800142a:	f000 fe3f 	bl	80020ac <Startup_Copy_Handler>
      printf(" Full RAM Test OK\n\r");
 800142e:	4b67      	ldr	r3, [pc, #412]	; (80015cc <STL_StartUp+0x40c>)
 8001430:	0018      	movs	r0, r3
 8001432:	f003 ffe5 	bl	8005400 <iprintf>
  __ASM volatile ("cpsie i" : : : "memory");
 8001436:	b662      	cpsie	i
}
 8001438:	46c0      	nop			; (mov r8, r8)
  /* restore interrupt capability */
  __enable_irq();
  
  /* Initialization of counters for control flow monitoring 
     (destroyed during RAM test) */
  init_control_flow();
 800143a:	4b53      	ldr	r3, [pc, #332]	; (8001588 <STL_StartUp+0x3c8>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	4b51      	ldr	r3, [pc, #324]	; (8001588 <STL_StartUp+0x3c8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	43da      	mvns	r2, r3
 8001446:	4b51      	ldr	r3, [pc, #324]	; (800158c <STL_StartUp+0x3cc>)
 8001448:	601a      	str	r2, [r3, #0]

      /* LED_VLM Off for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_Off(LED_VLM);
    #endif /* __IAR_SYSTEMS_ICC__ */
    #ifdef __GNUC__  /* GCC Compiler */
      Startup_Copy_Handler();
 800144a:	f000 fe2f 	bl	80020ac <Startup_Copy_Handler>
      /* LED_VLM Off for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_Off(LED_VLM);
 800144e:	23a0      	movs	r3, #160	; 0xa0
 8001450:	05db      	lsls	r3, r3, #23
 8001452:	2200      	movs	r2, #0
 8001454:	2120      	movs	r1, #32
 8001456:	0018      	movs	r0, r3
 8001458:	f001 fe08 	bl	800306c <HAL_GPIO_WritePin>


  /*--------------------------------------------------------------------------*/
  /*------------- Store reference 32-bit CRC in RAM after RAM test -----------*/
  /*--------------------------------------------------------------------------*/
  control_flow_call(CRC_STORE_CALLER);
 800145c:	4b4a      	ldr	r3, [pc, #296]	; (8001588 <STL_StartUp+0x3c8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3313      	adds	r3, #19
 8001462:	001a      	movs	r2, r3
 8001464:	4b48      	ldr	r3, [pc, #288]	; (8001588 <STL_StartUp+0x3c8>)
 8001466:	601a      	str	r2, [r3, #0]
  
  /* restore destroyed content of HAL structure for CRC */
  CrcHandle.Instance = CRC;
 8001468:	4b4e      	ldr	r3, [pc, #312]	; (80015a4 <STL_StartUp+0x3e4>)
 800146a:	4a4f      	ldr	r2, [pc, #316]	; (80015a8 <STL_StartUp+0x3e8>)
 800146c:	601a      	str	r2, [r3, #0]
  CrcHandle.State= HAL_CRC_STATE_READY;
 800146e:	4b4d      	ldr	r3, [pc, #308]	; (80015a4 <STL_StartUp+0x3e4>)
 8001470:	2201      	movs	r2, #1
 8001472:	775a      	strb	r2, [r3, #29]
  #ifdef  CRC_UNIT_CONFIGURABLE
    CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_ENABLE;
 8001474:	4b4b      	ldr	r3, [pc, #300]	; (80015a4 <STL_StartUp+0x3e4>)
 8001476:	2200      	movs	r2, #0
 8001478:	711a      	strb	r2, [r3, #4]
    CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_ENABLE;
 800147a:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <STL_StartUp+0x3e4>)
 800147c:	2200      	movs	r2, #0
 800147e:	715a      	strb	r2, [r3, #5]
    CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 8001480:	4b48      	ldr	r3, [pc, #288]	; (80015a4 <STL_StartUp+0x3e4>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
    CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLED;
 8001486:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <STL_StartUp+0x3e4>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
    CrcHandle.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800148c:	4b45      	ldr	r3, [pc, #276]	; (80015a4 <STL_StartUp+0x3e4>)
 800148e:	2203      	movs	r2, #3
 8001490:	621a      	str	r2, [r3, #32]
  #endif
  
  /* read and store content of CRC calculation result */
  RefCrc32 = HAL_CRC_Accumulate(&CrcHandle, 0u, 0u);  
 8001492:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <STL_StartUp+0x3e4>)
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	0018      	movs	r0, r3
 800149a:	f001 faf4 	bl	8002a86 <HAL_CRC_Accumulate>
 800149e:	0002      	movs	r2, r0
 80014a0:	4b4b      	ldr	r3, [pc, #300]	; (80015d0 <STL_StartUp+0x410>)
 80014a2:	601a      	str	r2, [r3, #0]
  RefCrc32Inv = ~RefCrc32;
 80014a4:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <STL_StartUp+0x410>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	43da      	mvns	r2, r3
 80014aa:	4b4a      	ldr	r3, [pc, #296]	; (80015d4 <STL_StartUp+0x414>)
 80014ac:	601a      	str	r2, [r3, #0]
  
  control_flow_resume(CRC_STORE_CALLER);  
 80014ae:	4b37      	ldr	r3, [pc, #220]	; (800158c <STL_StartUp+0x3cc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3b13      	subs	r3, #19
 80014b4:	001a      	movs	r2, r3
 80014b6:	4b35      	ldr	r3, [pc, #212]	; (800158c <STL_StartUp+0x3cc>)
 80014b8:	601a      	str	r2, [r3, #0]
      /* LED_NVM On for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_On(LED_NVM);
    #endif /* __IAR_SYSTEMS_ICC__ */
    #ifdef __GNUC__  /* GCC Compiler */
      /* LED_VLM On for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_On(LED_NVM);
 80014ba:	23a0      	movs	r3, #160	; 0xa0
 80014bc:	05db      	lsls	r3, r3, #23
 80014be:	2201      	movs	r2, #1
 80014c0:	2140      	movs	r1, #64	; 0x40
 80014c2:	0018      	movs	r0, r3
 80014c4:	f001 fdd2 	bl	800306c <HAL_GPIO_WritePin>
    #endif /* __GNUC__ */
  #endif /* STL_EVAL_MODE */
    
  #ifdef STL_VERBOSE_POR
    /* finish communication flow prior system clock change */
    while (HAL_UART_GetState(&UartHandle) == HAL_UART_STATE_BUSY_TX)
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	4b33      	ldr	r3, [pc, #204]	; (8001598 <STL_StartUp+0x3d8>)
 80014cc:	0018      	movs	r0, r3
 80014ce:	f003 fae1 	bl	8004a94 <HAL_UART_GetState>
 80014d2:	0003      	movs	r3, r0
 80014d4:	2b21      	cmp	r3, #33	; 0x21
 80014d6:	d0f8      	beq.n	80014ca <STL_StartUp+0x30a>
    { }
  #endif /* STL_VERBOSE_POR */
  
  control_flow_call(CLOCK_TEST_CALLER);
 80014d8:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <STL_StartUp+0x3c8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3317      	adds	r3, #23
 80014de:	001a      	movs	r2, r3
 80014e0:	4b29      	ldr	r3, [pc, #164]	; (8001588 <STL_StartUp+0x3c8>)
 80014e2:	601a      	str	r2, [r3, #0]
  
  /* test LSI & HSE clock systems */
  clk_sts = STL_ClockStartUpTest();
 80014e4:	250f      	movs	r5, #15
 80014e6:	197c      	adds	r4, r7, r5
 80014e8:	f7ff fa74 	bl	80009d4 <STL_ClockStartUpTest>
 80014ec:	0003      	movs	r3, r0
 80014ee:	7023      	strb	r3, [r4, #0]
  
  #ifdef STL_VERBOSE_POR
    /* Re-init communication channel with modified clock setting */
    UartHandle.Instance        = USARTx;
 80014f0:	4b29      	ldr	r3, [pc, #164]	; (8001598 <STL_StartUp+0x3d8>)
 80014f2:	4a34      	ldr	r2, [pc, #208]	; (80015c4 <STL_StartUp+0x404>)
 80014f4:	601a      	str	r2, [r3, #0]
    HAL_UART_DeInit(&UartHandle);
 80014f6:	4b28      	ldr	r3, [pc, #160]	; (8001598 <STL_StartUp+0x3d8>)
 80014f8:	0018      	movs	r0, r3
 80014fa:	f003 f9d9 	bl	80048b0 <HAL_UART_DeInit>
    
    UartHandle.Init.BaudRate   = 115200;
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <STL_StartUp+0x3d8>)
 8001500:	22e1      	movs	r2, #225	; 0xe1
 8001502:	0252      	lsls	r2, r2, #9
 8001504:	605a      	str	r2, [r3, #4]
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <STL_StartUp+0x3d8>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
    UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <STL_StartUp+0x3d8>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
    UartHandle.Init.Parity     = UART_PARITY_NONE;
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <STL_StartUp+0x3d8>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
    UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <STL_StartUp+0x3d8>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
    UartHandle.Init.Mode       = UART_MODE_TX;
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <STL_StartUp+0x3d8>)
 8001520:	2208      	movs	r2, #8
 8001522:	615a      	str	r2, [r3, #20]
    HAL_UART_Init(&UartHandle);
 8001524:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <STL_StartUp+0x3d8>)
 8001526:	0018      	movs	r0, r3
 8001528:	f003 f96e 	bl	8004808 <HAL_UART_Init>
    /* print out the test result */
    switch(clk_sts)
 800152c:	197b      	adds	r3, r7, r5
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b0a      	cmp	r3, #10
 8001532:	d85f      	bhi.n	80015f4 <STL_StartUp+0x434>
 8001534:	009a      	lsls	r2, r3, #2
 8001536:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <STL_StartUp+0x418>)
 8001538:	18d3      	adds	r3, r2, r3
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	469f      	mov	pc, r3
    {
      case LSI_START_FAIL:
        printf("LSI start-up failure \n\r");
 800153e:	4b27      	ldr	r3, [pc, #156]	; (80015dc <STL_StartUp+0x41c>)
 8001540:	0018      	movs	r0, r3
 8001542:	f003 ff5d 	bl	8005400 <iprintf>
        break;
 8001546:	e059      	b.n	80015fc <STL_StartUp+0x43c>
  
      case HSE_START_FAIL:
        printf("HSE start-up failure \n\r");
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <STL_StartUp+0x420>)
 800154a:	0018      	movs	r0, r3
 800154c:	f003 ff58 	bl	8005400 <iprintf>
        break;
 8001550:	e054      	b.n	80015fc <STL_StartUp+0x43c>
  
      case HSI_HSE_SWITCH_FAIL:
      case HSE_HSI_SWITCH_FAIL:
      case PLL_OFF_FAIL:
        printf("Clock switch failure \n\r");
 8001552:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <STL_StartUp+0x424>)
 8001554:	0018      	movs	r0, r3
 8001556:	f003 ff53 	bl	8005400 <iprintf>
        break;
 800155a:	e04f      	b.n	80015fc <STL_StartUp+0x43c>
  
      case XCROSS_CONFIG_FAIL:
        printf("Clock Xcross measurement failure \n\r");
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <STL_StartUp+0x428>)
 800155e:	0018      	movs	r0, r3
 8001560:	f003 ff4e 	bl	8005400 <iprintf>
        break;
 8001564:	e04a      	b.n	80015fc <STL_StartUp+0x43c>
  
      case EXT_SOURCE_FAIL:
        printf("HSE clock found out of range\n\r");
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <STL_StartUp+0x42c>)
 8001568:	0018      	movs	r0, r3
 800156a:	f003 ff49 	bl	8005400 <iprintf>
        break;
 800156e:	e045      	b.n	80015fc <STL_StartUp+0x43c>
        
      case FREQ_OK:
        printf(" Clock frequency OK \n\r");
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <STL_StartUp+0x430>)
 8001572:	0018      	movs	r0, r3
 8001574:	f003 ff44 	bl	8005400 <iprintf>
        break;
 8001578:	e040      	b.n	80015fc <STL_StartUp+0x43c>
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	20000060 	.word	0x20000060
 8001580:	2000003c 	.word	0x2000003c
 8001584:	08006740 	.word	0x08006740
 8001588:	20000030 	.word	0x20000030
 800158c:	20000054 	.word	0x20000054
 8001590:	08006770 	.word	0x08006770
 8001594:	0800678c 	.word	0x0800678c
 8001598:	2000010c 	.word	0x2000010c
 800159c:	01e847ff 	.word	0x01e847ff
 80015a0:	40021000 	.word	0x40021000
 80015a4:	20000200 	.word	0x20000200
 80015a8:	40023000 	.word	0x40023000
 80015ac:	08006dc0 	.word	0x08006dc0
 80015b0:	080067a4 	.word	0x080067a4
 80015b4:	080067cc 	.word	0x080067cc
 80015b8:	080067ec 	.word	0x080067ec
 80015bc:	08006810 	.word	0x08006810
 80015c0:	20001fff 	.word	0x20001fff
 80015c4:	40004400 	.word	0x40004400
 80015c8:	08006834 	.word	0x08006834
 80015cc:	08006848 	.word	0x08006848
 80015d0:	20000050 	.word	0x20000050
 80015d4:	20000074 	.word	0x20000074
 80015d8:	08006bec 	.word	0x08006bec
 80015dc:	0800685c 	.word	0x0800685c
 80015e0:	08006874 	.word	0x08006874
 80015e4:	0800688c 	.word	0x0800688c
 80015e8:	080068a4 	.word	0x080068a4
 80015ec:	080068c8 	.word	0x080068c8
 80015f0:	080068e8 	.word	0x080068e8
        
      default:
        printf("Abnormal exit from clock test\n\r");
 80015f4:	4b29      	ldr	r3, [pc, #164]	; (800169c <STL_StartUp+0x4dc>)
 80015f6:	0018      	movs	r0, r3
 80015f8:	f003 ff02 	bl	8005400 <iprintf>
    }
  #endif /* STL_VERBOSE_POR */
  
  if(clk_sts != FREQ_OK)
 80015fc:	230f      	movs	r3, #15
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b0a      	cmp	r3, #10
 8001604:	d001      	beq.n	800160a <STL_StartUp+0x44a>
  {
      FailSafePOR();
 8001606:	f7ff fdbd 	bl	8001184 <FailSafePOR>
  }
    
  control_flow_resume(CLOCK_TEST_CALLER);  
 800160a:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <STL_StartUp+0x4e0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3b17      	subs	r3, #23
 8001610:	001a      	movs	r2, r3
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <STL_StartUp+0x4e0>)
 8001614:	601a      	str	r2, [r3, #0]
      /* LED_NVM Off for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_Off(LED_NVM);
    #endif /* __IAR_SYSTEMS_ICC__ */
    #ifdef __GNUC__  /* GCC Compiler */
      /* LED_NVM Off for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_Off(LED_NVM);
 8001616:	23a0      	movs	r3, #160	; 0xa0
 8001618:	05db      	lsls	r3, r3, #23
 800161a:	2200      	movs	r2, #0
 800161c:	2140      	movs	r1, #64	; 0x40
 800161e:	0018      	movs	r0, r3
 8001620:	f001 fd24 	bl	800306c <HAL_GPIO_WritePin>

  /*--------------------------------------------------------------------------*/
  /* --------------- Initialize stack overflow pattern ---------------------- */
  /*--------------------------------------------------------------------------*/

  control_flow_call(STACK_OVERFLOW_TEST);
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <STL_StartUp+0x4e4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3335      	adds	r3, #53	; 0x35
 800162a:	001a      	movs	r2, r3
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <STL_StartUp+0x4e4>)
 800162e:	601a      	str	r2, [r3, #0]
  
  aStackOverFlowPtrn[0] = 0xEEEEEEEEuL;
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <STL_StartUp+0x4e8>)
 8001632:	4a1e      	ldr	r2, [pc, #120]	; (80016ac <STL_StartUp+0x4ec>)
 8001634:	601a      	str	r2, [r3, #0]
  aStackOverFlowPtrn[1] = 0xCCCCCCCCuL;
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <STL_StartUp+0x4e8>)
 8001638:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <STL_StartUp+0x4f0>)
 800163a:	605a      	str	r2, [r3, #4]
  aStackOverFlowPtrn[2] = 0xBBBBBBBBuL;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <STL_StartUp+0x4e8>)
 800163e:	4a1d      	ldr	r2, [pc, #116]	; (80016b4 <STL_StartUp+0x4f4>)
 8001640:	609a      	str	r2, [r3, #8]
  aStackOverFlowPtrn[3] = 0xDDDDDDDDuL;
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <STL_StartUp+0x4e8>)
 8001644:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <STL_StartUp+0x4f8>)
 8001646:	60da      	str	r2, [r3, #12]
  
  control_flow_resume(STACK_OVERFLOW_TEST);  
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <STL_StartUp+0x4e0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3b35      	subs	r3, #53	; 0x35
 800164e:	001a      	movs	r2, r3
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <STL_StartUp+0x4e0>)
 8001652:	601a      	str	r2, [r3, #0]

  /*--------------------------------------------------------------------------*/
  /* -----  Verify Control flow before Starting main program execution ------ */
  /*--------------------------------------------------------------------------*/
   
  if (control_flow_check_point(CHECKPOINT2) == ERROR)
 8001654:	207c      	movs	r0, #124	; 0x7c
 8001656:	f000 f96f 	bl	8001938 <control_flow_check_point>
 800165a:	0003      	movs	r3, r0
 800165c:	2b01      	cmp	r3, #1
 800165e:	d105      	bne.n	800166c <STL_StartUp+0x4ac>
  {
     #ifdef STL_VERBOSE_POR
       printf("Control Flow Error Checkpoint 2\n\r");
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <STL_StartUp+0x4fc>)
 8001662:	0018      	movs	r0, r3
 8001664:	f003 fecc 	bl	8005400 <iprintf>
     #endif  /* STL_VERBOSE_POR */
     FailSafePOR();
 8001668:	f7ff fd8c 	bl	8001184 <FailSafePOR>
   }
   #ifdef STL_VERBOSE_POR
    printf(" Control Flow Checkpoint 2 OK \n\r");
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <STL_StartUp+0x500>)
 800166e:	0018      	movs	r0, r3
 8001670:	f003 fec6 	bl	8005400 <iprintf>
  
    /* finish communication flow prior system clock change */
    while (HAL_UART_GetState(&UartHandle) == HAL_UART_STATE_BUSY_TX)
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <STL_StartUp+0x504>)
 8001678:	0018      	movs	r0, r3
 800167a:	f003 fa0b 	bl	8004a94 <HAL_UART_GetState>
 800167e:	0003      	movs	r3, r0
 8001680:	2b21      	cmp	r3, #33	; 0x21
 8001682:	d0f8      	beq.n	8001676 <STL_StartUp+0x4b6>
    { }
   #endif  /* STL_VERBOSE_POR */
     
   /* startup test completed successfully - restart the application */
   GotoCompilerStartUp();
 8001684:	f000 fd12 	bl	80020ac <Startup_Copy_Handler>
 8001688:	f000 fc2e 	bl	8001ee8 <SystemInit>
 800168c:	f003 fe8c 	bl	80053a8 <__libc_init_array>
 8001690:	f7fe ff14 	bl	80004bc <main>
}
 8001694:	46c0      	nop			; (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b006      	add	sp, #24
 800169a:	bdb0      	pop	{r4, r5, r7, pc}
 800169c:	08006900 	.word	0x08006900
 80016a0:	20000054 	.word	0x20000054
 80016a4:	20000030 	.word	0x20000030
 80016a8:	20000640 	.word	0x20000640
 80016ac:	eeeeeeee 	.word	0xeeeeeeee
 80016b0:	cccccccc 	.word	0xcccccccc
 80016b4:	bbbbbbbb 	.word	0xbbbbbbbb
 80016b8:	dddddddd 	.word	0xdddddddd
 80016bc:	08006920 	.word	0x08006920
 80016c0:	08006944 	.word	0x08006944
 80016c4:	2000010c 	.word	0x2000010c

080016c8 <STL_WDGSelfTest>:
  * @brief  Verifies the watchdog by forcing watchdog resets
  * @param  : None
  * @retval : None
  */
void STL_WDGSelfTest(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_suppress=Pm026
  #endif /* __IAR_SYSTEMS_ICC__ */

  #ifdef STL_VERBOSE_POR  
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)  != RESET) printf("Pin reset \r\n");
 80016cc:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <STL_WDGSelfTest+0x228>)
 80016ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	04db      	lsls	r3, r3, #19
 80016d4:	4013      	ands	r3, r2
 80016d6:	d003      	beq.n	80016e0 <STL_WDGSelfTest+0x18>
 80016d8:	4b86      	ldr	r3, [pc, #536]	; (80018f4 <STL_WDGSelfTest+0x22c>)
 80016da:	0018      	movs	r0, r3
 80016dc:	f003 ff1c 	bl	8005518 <puts>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)  != RESET) printf("POR reset \r\n");
 80016e0:	4b83      	ldr	r3, [pc, #524]	; (80018f0 <STL_WDGSelfTest+0x228>)
 80016e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	051b      	lsls	r3, r3, #20
 80016e8:	4013      	ands	r3, r2
 80016ea:	d003      	beq.n	80016f4 <STL_WDGSelfTest+0x2c>
 80016ec:	4b82      	ldr	r3, [pc, #520]	; (80018f8 <STL_WDGSelfTest+0x230>)
 80016ee:	0018      	movs	r0, r3
 80016f0:	f003 ff12 	bl	8005518 <puts>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)  != RESET) printf("SW reset \r\n");
 80016f4:	4b7e      	ldr	r3, [pc, #504]	; (80018f0 <STL_WDGSelfTest+0x228>)
 80016f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	055b      	lsls	r3, r3, #21
 80016fc:	4013      	ands	r3, r2
 80016fe:	d003      	beq.n	8001708 <STL_WDGSelfTest+0x40>
 8001700:	4b7e      	ldr	r3, [pc, #504]	; (80018fc <STL_WDGSelfTest+0x234>)
 8001702:	0018      	movs	r0, r3
 8001704:	f003 ff08 	bl	8005518 <puts>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) printf("IWDG reset \r\n");
 8001708:	4b79      	ldr	r3, [pc, #484]	; (80018f0 <STL_WDGSelfTest+0x228>)
 800170a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	059b      	lsls	r3, r3, #22
 8001710:	4013      	ands	r3, r2
 8001712:	d003      	beq.n	800171c <STL_WDGSelfTest+0x54>
 8001714:	4b7a      	ldr	r3, [pc, #488]	; (8001900 <STL_WDGSelfTest+0x238>)
 8001716:	0018      	movs	r0, r3
 8001718:	f003 fefe 	bl	8005518 <puts>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET) printf("WWDG reset \r\n");
 800171c:	4b74      	ldr	r3, [pc, #464]	; (80018f0 <STL_WDGSelfTest+0x228>)
 800171e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	05db      	lsls	r3, r3, #23
 8001724:	4013      	ands	r3, r2
 8001726:	d003      	beq.n	8001730 <STL_WDGSelfTest+0x68>
 8001728:	4b76      	ldr	r3, [pc, #472]	; (8001904 <STL_WDGSelfTest+0x23c>)
 800172a:	0018      	movs	r0, r3
 800172c:	f003 fef4 	bl	8005518 <puts>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET) printf("LP reset \r\n");
 8001730:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <STL_WDGSelfTest+0x228>)
 8001732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001734:	2b00      	cmp	r3, #0
 8001736:	da03      	bge.n	8001740 <STL_WDGSelfTest+0x78>
 8001738:	4b73      	ldr	r3, [pc, #460]	; (8001908 <STL_WDGSelfTest+0x240>)
 800173a:	0018      	movs	r0, r3
 800173c:	f003 feec 	bl	8005518 <puts>
  #endif /* STL_VERBOSE_POR */

  /* start watchdogs test if one of the 4 conditions below is valid */
  if ( (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)\
 8001740:	4b6b      	ldr	r3, [pc, #428]	; (80018f0 <STL_WDGSelfTest+0x228>)
 8001742:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	051b      	lsls	r3, r3, #20
 8001748:	4013      	ands	r3, r2
 800174a:	d11b      	bne.n	8001784 <STL_WDGSelfTest+0xbc>
   ||  (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET)\
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <STL_WDGSelfTest+0x228>)
 800174e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	055b      	lsls	r3, r3, #21
 8001754:	4013      	ands	r3, r2
 8001756:	d115      	bne.n	8001784 <STL_WDGSelfTest+0xbc>
   ||  (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET)\
 8001758:	4b65      	ldr	r3, [pc, #404]	; (80018f0 <STL_WDGSelfTest+0x228>)
 800175a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800175c:	2b00      	cmp	r3, #0
 800175e:	db11      	blt.n	8001784 <STL_WDGSelfTest+0xbc>
   || ((__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == RESET)))
 8001760:	4b63      	ldr	r3, [pc, #396]	; (80018f0 <STL_WDGSelfTest+0x228>)
 8001762:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	04db      	lsls	r3, r3, #19
 8001768:	4013      	ands	r3, r2
 800176a:	d035      	beq.n	80017d8 <STL_WDGSelfTest+0x110>
 800176c:	4b60      	ldr	r3, [pc, #384]	; (80018f0 <STL_WDGSelfTest+0x228>)
 800176e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	059b      	lsls	r3, r3, #22
 8001774:	4013      	ands	r3, r2
 8001776:	d12f      	bne.n	80017d8 <STL_WDGSelfTest+0x110>
 8001778:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <STL_WDGSelfTest+0x228>)
 800177a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	05db      	lsls	r3, r3, #23
 8001780:	4013      	ands	r3, r2
 8001782:	d129      	bne.n	80017d8 <STL_WDGSelfTest+0x110>
  {
    #ifdef STL_VERBOSE_POR
      printf("... Power-on or software reset, testing IWDG ... \r\n");
 8001784:	4b61      	ldr	r3, [pc, #388]	; (800190c <STL_WDGSelfTest+0x244>)
 8001786:	0018      	movs	r0, r3
 8001788:	f003 fec6 	bl	8005518 <puts>
    #endif  /* STL_VERBOSE_POR */

    #if defined(STL_EVAL_MODE)
      /* IWDG at debug mode */
      __DBGMCU_CLK_ENABLE();
 800178c:	4b58      	ldr	r3, [pc, #352]	; (80018f0 <STL_WDGSelfTest+0x228>)
 800178e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001790:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <STL_WDGSelfTest+0x228>)
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	03c9      	lsls	r1, r1, #15
 8001796:	430a      	orrs	r2, r1
 8001798:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_FREEZE_IWDG_DBGMCU();
 800179a:	4b5d      	ldr	r3, [pc, #372]	; (8001910 <STL_WDGSelfTest+0x248>)
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	4b5c      	ldr	r3, [pc, #368]	; (8001910 <STL_WDGSelfTest+0x248>)
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	0149      	lsls	r1, r1, #5
 80017a4:	430a      	orrs	r2, r1
 80017a6:	609a      	str	r2, [r3, #8]
    #endif  /* STL_EVAL_MODE */

    /* Clear all flags before resuming test */
    __HAL_RCC_CLEAR_FLAG();
 80017a8:	4b51      	ldr	r3, [pc, #324]	; (80018f0 <STL_WDGSelfTest+0x228>)
 80017aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ac:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <STL_WDGSelfTest+0x228>)
 80017ae:	2180      	movs	r1, #128	; 0x80
 80017b0:	0409      	lsls	r1, r1, #16
 80017b2:	430a      	orrs	r2, r1
 80017b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Setup IWDG to minimum period */
    IwdgHandle.Instance = IWDG;
 80017b6:	4b57      	ldr	r3, [pc, #348]	; (8001914 <STL_WDGSelfTest+0x24c>)
 80017b8:	4a57      	ldr	r2, [pc, #348]	; (8001918 <STL_WDGSelfTest+0x250>)
 80017ba:	601a      	str	r2, [r3, #0]
    IwdgHandle.Init.Prescaler = IWDG_PRESCALER_4;
 80017bc:	4b55      	ldr	r3, [pc, #340]	; (8001914 <STL_WDGSelfTest+0x24c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	605a      	str	r2, [r3, #4]
    IwdgHandle.Init.Reload = 1U;
 80017c2:	4b54      	ldr	r3, [pc, #336]	; (8001914 <STL_WDGSelfTest+0x24c>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	609a      	str	r2, [r3, #8]
    #ifdef IWDG_FEATURES_BY_WINDOW_OPTION
      IwdgHandle.Init.Window = IWDG_WINDOW_DISABLE;
 80017c8:	4b52      	ldr	r3, [pc, #328]	; (8001914 <STL_WDGSelfTest+0x24c>)
 80017ca:	4a54      	ldr	r2, [pc, #336]	; (800191c <STL_WDGSelfTest+0x254>)
 80017cc:	60da      	str	r2, [r3, #12]
    #endif /* IWDG_FEATURES_BY_WINDOW_OPTION */
    /* Initialization */
    HAL_IWDG_Init(&IwdgHandle);
 80017ce:	4b51      	ldr	r3, [pc, #324]	; (8001914 <STL_WDGSelfTest+0x24c>)
 80017d0:	0018      	movs	r0, r3
 80017d2:	f001 fc83 	bl	80030dc <HAL_IWDG_Init>

    /* Wait for an independent watchdog reset */
    while(1)
 80017d6:	e7fe      	b.n	80017d6 <STL_WDGSelfTest+0x10e>
    { }
  }
  else  /* Watchdog test or software reset triggered by application failure */
  {
    /* If WWDG only was set, re-start the complete test (indicates a reset triggered by safety routines */
    if ((__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)  != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET))
 80017d8:	4b45      	ldr	r3, [pc, #276]	; (80018f0 <STL_WDGSelfTest+0x228>)
 80017da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	04db      	lsls	r3, r3, #19
 80017e0:	4013      	ands	r3, r2
 80017e2:	d018      	beq.n	8001816 <STL_WDGSelfTest+0x14e>
 80017e4:	4b42      	ldr	r3, [pc, #264]	; (80018f0 <STL_WDGSelfTest+0x228>)
 80017e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	059b      	lsls	r3, r3, #22
 80017ec:	4013      	ands	r3, r2
 80017ee:	d112      	bne.n	8001816 <STL_WDGSelfTest+0x14e>
 80017f0:	4b3f      	ldr	r3, [pc, #252]	; (80018f0 <STL_WDGSelfTest+0x228>)
 80017f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	05db      	lsls	r3, r3, #23
 80017f8:	4013      	ands	r3, r2
 80017fa:	d00c      	beq.n	8001816 <STL_WDGSelfTest+0x14e>
    {
      __HAL_RCC_CLEAR_FLAG();
 80017fc:	4b3c      	ldr	r3, [pc, #240]	; (80018f0 <STL_WDGSelfTest+0x228>)
 80017fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001800:	4b3b      	ldr	r3, [pc, #236]	; (80018f0 <STL_WDGSelfTest+0x228>)
 8001802:	2180      	movs	r1, #128	; 0x80
 8001804:	0409      	lsls	r1, r1, #16
 8001806:	430a      	orrs	r2, r1
 8001808:	651a      	str	r2, [r3, #80]	; 0x50
      #ifdef STL_VERBOSE_POR
        printf("... WWDG reset, re-start WDG test ... \r\n");
 800180a:	4b45      	ldr	r3, [pc, #276]	; (8001920 <STL_WDGSelfTest+0x258>)
 800180c:	0018      	movs	r0, r3
 800180e:	f003 fe83 	bl	8005518 <puts>
      #endif  /* STL_VERBOSE_POR */
      NVIC_SystemReset();
 8001812:	f7ff fca5 	bl	8001160 <__NVIC_SystemReset>
    }
    else  /* If IWDG only was set, continue the test with WWDG test*/
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)  != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == RESET))
 8001816:	4b36      	ldr	r3, [pc, #216]	; (80018f0 <STL_WDGSelfTest+0x228>)
 8001818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	04db      	lsls	r3, r3, #19
 800181e:	4013      	ands	r3, r2
 8001820:	d038      	beq.n	8001894 <STL_WDGSelfTest+0x1cc>
 8001822:	4b33      	ldr	r3, [pc, #204]	; (80018f0 <STL_WDGSelfTest+0x228>)
 8001824:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	059b      	lsls	r3, r3, #22
 800182a:	4013      	ands	r3, r2
 800182c:	d032      	beq.n	8001894 <STL_WDGSelfTest+0x1cc>
 800182e:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <STL_WDGSelfTest+0x228>)
 8001830:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	05db      	lsls	r3, r3, #23
 8001836:	4013      	ands	r3, r2
 8001838:	d12c      	bne.n	8001894 <STL_WDGSelfTest+0x1cc>
      { /* If IWDG only was set, test WWDG*/
        #ifdef STL_VERBOSE_POR
          printf("... IWDG reset from test or application, testing WWDG\r\n");
 800183a:	4b3a      	ldr	r3, [pc, #232]	; (8001924 <STL_WDGSelfTest+0x25c>)
 800183c:	0018      	movs	r0, r3
 800183e:	f003 fe6b 	bl	8005518 <puts>
        #endif  /* STL_VERBOSE_POR */
          
        #if defined(STL_EVAL_MODE)
          /* WWDG at debug mode */
          __DBGMCU_CLK_ENABLE();
 8001842:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <STL_WDGSelfTest+0x228>)
 8001844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001846:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <STL_WDGSelfTest+0x228>)
 8001848:	2180      	movs	r1, #128	; 0x80
 800184a:	03c9      	lsls	r1, r1, #15
 800184c:	430a      	orrs	r2, r1
 800184e:	635a      	str	r2, [r3, #52]	; 0x34
          __HAL_FREEZE_WWDG_DBGMCU();
 8001850:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <STL_WDGSelfTest+0x248>)
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <STL_WDGSelfTest+0x248>)
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	0109      	lsls	r1, r1, #4
 800185a:	430a      	orrs	r2, r1
 800185c:	609a      	str	r2, [r3, #8]
        #endif  /* STL_EVAL_MODE */
          
         /* Setup WWDG to minimum period */
        __WWDG_CLK_ENABLE();
 800185e:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <STL_WDGSelfTest+0x228>)
 8001860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <STL_WDGSelfTest+0x228>)
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	0109      	lsls	r1, r1, #4
 8001868:	430a      	orrs	r2, r1
 800186a:	639a      	str	r2, [r3, #56]	; 0x38
        WwdgHandle.Instance = WWDG;
 800186c:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <STL_WDGSelfTest+0x260>)
 800186e:	4a2f      	ldr	r2, [pc, #188]	; (800192c <STL_WDGSelfTest+0x264>)
 8001870:	601a      	str	r2, [r3, #0]
        WwdgHandle.Init.Prescaler = WWDG_PRESCALER_1;
 8001872:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <STL_WDGSelfTest+0x260>)
 8001874:	2200      	movs	r2, #0
 8001876:	605a      	str	r2, [r3, #4]
        WwdgHandle.Init.Counter = 64U;
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <STL_WDGSelfTest+0x260>)
 800187a:	2240      	movs	r2, #64	; 0x40
 800187c:	60da      	str	r2, [r3, #12]
        WwdgHandle.Init.Window = 63U;
 800187e:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <STL_WDGSelfTest+0x260>)
 8001880:	223f      	movs	r2, #63	; 0x3f
 8001882:	609a      	str	r2, [r3, #8]
        WwdgHandle.Init.EWIMode = WWDG_EWI_DISABLE;
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <STL_WDGSelfTest+0x260>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
        HAL_WWDG_Init(&WwdgHandle);
 800188a:	4b27      	ldr	r3, [pc, #156]	; (8001928 <STL_WDGSelfTest+0x260>)
 800188c:	0018      	movs	r0, r3
 800188e:	f003 fd57 	bl	8005340 <HAL_WWDG_Init>

        while(1)
 8001892:	e7fe      	b.n	8001892 <STL_WDGSelfTest+0x1ca>
        { }
      }
      else  /* If both flags IWDG & WWDG flags are set, means that watchdog test is completed */
      {
        if ((__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)  != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET))
 8001894:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <STL_WDGSelfTest+0x228>)
 8001896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	04db      	lsls	r3, r3, #19
 800189c:	4013      	ands	r3, r2
 800189e:	d017      	beq.n	80018d0 <STL_WDGSelfTest+0x208>
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <STL_WDGSelfTest+0x228>)
 80018a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	059b      	lsls	r3, r3, #22
 80018a8:	4013      	ands	r3, r2
 80018aa:	d011      	beq.n	80018d0 <STL_WDGSelfTest+0x208>
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <STL_WDGSelfTest+0x228>)
 80018ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	05db      	lsls	r3, r3, #23
 80018b4:	4013      	ands	r3, r2
 80018b6:	d00b      	beq.n	80018d0 <STL_WDGSelfTest+0x208>
        {
          __HAL_RCC_CLEAR_FLAG();
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <STL_WDGSelfTest+0x228>)
 80018ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <STL_WDGSelfTest+0x228>)
 80018be:	2180      	movs	r1, #128	; 0x80
 80018c0:	0409      	lsls	r1, r1, #16
 80018c2:	430a      	orrs	r2, r1
 80018c4:	651a      	str	r2, [r3, #80]	; 0x50
          #ifdef STL_VERBOSE_POR
            printf("... WWDG reset, WDG test completed ... \r\n");
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <STL_WDGSelfTest+0x268>)
 80018c8:	0018      	movs	r0, r3
 80018ca:	f003 fe25 	bl	8005518 <puts>

  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_default=Pm026
  #endif /* __IAR_SYSTEMS_ICC__ */
  /* ==============================================================================*/
}
 80018ce:	e00c      	b.n	80018ea <STL_WDGSelfTest+0x222>
          __HAL_RCC_CLEAR_FLAG();
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <STL_WDGSelfTest+0x228>)
 80018d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <STL_WDGSelfTest+0x228>)
 80018d6:	2180      	movs	r1, #128	; 0x80
 80018d8:	0409      	lsls	r1, r1, #16
 80018da:	430a      	orrs	r2, r1
 80018dc:	651a      	str	r2, [r3, #80]	; 0x50
            printf("...Unexpected Flag configuration, re-start WDG test... \r\n");
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <STL_WDGSelfTest+0x26c>)
 80018e0:	0018      	movs	r0, r3
 80018e2:	f003 fe19 	bl	8005518 <puts>
        NVIC_SystemReset();
 80018e6:	f7ff fc3b 	bl	8001160 <__NVIC_SystemReset>
}
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	40021000 	.word	0x40021000
 80018f4:	08006968 	.word	0x08006968
 80018f8:	08006974 	.word	0x08006974
 80018fc:	08006980 	.word	0x08006980
 8001900:	0800698c 	.word	0x0800698c
 8001904:	0800699c 	.word	0x0800699c
 8001908:	080069ac 	.word	0x080069ac
 800190c:	080069b8 	.word	0x080069b8
 8001910:	40015800 	.word	0x40015800
 8001914:	200001dc 	.word	0x200001dc
 8001918:	40003000 	.word	0x40003000
 800191c:	00000fff 	.word	0x00000fff
 8001920:	080069ec 	.word	0x080069ec
 8001924:	08006a14 	.word	0x08006a14
 8001928:	200001ec 	.word	0x200001ec
 800192c:	40002c00 	.word	0x40002c00
 8001930:	08006a4c 	.word	0x08006a4c
 8001934:	08006a78 	.word	0x08006a78

08001938 <control_flow_check_point>:
  * @brief  Verifies the consistency and value of control flow counters
  * @param  : check value of the positive counter
  * @retval : ErrorStatus (SUCCESS, ERROR)
  */
ErrorStatus control_flow_check_point(uint32_t chck)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  ErrorStatus Result= SUCCESS;
 8001940:	230f      	movs	r3, #15
 8001942:	18fb      	adds	r3, r7, r3
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
  
  if ((CtrlFlowCnt != (chck)) || ((CtrlFlowCnt ^ CtrlFlowCntInv) != 0xFFFFFFFFuL))
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <control_flow_check_point+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	d106      	bne.n	8001960 <control_flow_check_point+0x28>
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <control_flow_check_point+0x40>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <control_flow_check_point+0x44>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4053      	eors	r3, r2
 800195c:	3301      	adds	r3, #1
 800195e:	d003      	beq.n	8001968 <control_flow_check_point+0x30>
  {
    Result= ERROR;
 8001960:	230f      	movs	r3, #15
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
  }
  return(Result);
 8001968:	230f      	movs	r3, #15
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	781b      	ldrb	r3, [r3, #0]
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	b004      	add	sp, #16
 8001974:	bd80      	pop	{r7, pc}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	20000030 	.word	0x20000030
 800197c:	20000054 	.word	0x20000054

08001980 <STL_TranspMarchInit>:
  *   transparent functional test.
  * @param  : None
  * @retval : None
  */
void STL_TranspMarchInit(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* start address of the test has to be aligned to 16 address range */	  
   pRunTimeRamChk = (uint32_t *)((uint32_t)CLASS_B_START & 0xFFFFFFFCuL);
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <STL_TranspMarchInit+0x1c>)
 8001986:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <STL_TranspMarchInit+0x20>)
 8001988:	601a      	str	r2, [r3, #0]
   pRunTimeRamChkInv = (uint32_t *)(uint32_t)(~(uint32_t)pRunTimeRamChk);
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <STL_TranspMarchInit+0x1c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	43db      	mvns	r3, r3
 8001990:	001a      	movs	r2, r3
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <STL_TranspMarchInit+0x24>)
 8001994:	601a      	str	r2, [r3, #0]
}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000020 	.word	0x20000020
 80019a0:	20000030 	.word	0x20000030
 80019a4:	20000024 	.word	0x20000024

080019a8 <STL_TranspMarch>:
  * @param  : None
  * @retval : ClassBTestStatus (TEST_RUNNING, CLASS_B_DATA_FAIL,
  *   TEST_FAILURE, TEST_OK)
  */
ClassBTestStatus STL_TranspMarch(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  ClassBTestStatus result = TEST_RUNNING;
 80019ae:	1dfb      	adds	r3, r7, #7
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
  
  /* Check Class B var integrity */
  if ((((uint32_t)pRunTimeRamChk) ^ ((uint32_t)pRunTimeRamChkInv)) == 0xFFFFFFFFuL)
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <STL_TranspMarch+0x9c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	001a      	movs	r2, r3
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <STL_TranspMarch+0xa0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4053      	eors	r3, r2
 80019c0:	3301      	adds	r3, #1
 80019c2:	d136      	bne.n	8001a32 <STL_TranspMarch+0x8a>
  {
    if (pRunTimeRamChk >= CLASS_B_END)
 80019c4:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <STL_TranspMarch+0x9c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a20      	ldr	r2, [pc, #128]	; (8001a4c <STL_TranspMarch+0xa4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d916      	bls.n	80019fc <STL_TranspMarch+0x54>
    {
      /*------------- March test applied on the RAM Buffer itself --------------- */
      if (STL_TranspRamMarchCXStep(&aRunTimeRamBuf[0], &aRunTimeRamBuf[0], BCKGRND) == MARCH_STEP_SUCCESS)         
 80019ce:	4920      	ldr	r1, [pc, #128]	; (8001a50 <STL_TranspMarch+0xa8>)
 80019d0:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <STL_TranspMarch+0xa8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	0018      	movs	r0, r3
 80019d6:	f000 fc19 	bl	800220c <STL_TranspRamMarchCXStep>
 80019da:	0003      	movs	r3, r0
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d103      	bne.n	80019e8 <STL_TranspMarch+0x40>
      {
        /* All the RAM test is completed successfully */
        result = TEST_OK;
 80019e0:	1dfb      	adds	r3, r7, #7
 80019e2:	2204      	movs	r2, #4
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e002      	b.n	80019ee <STL_TranspMarch+0x46>
      }
      else  /* Buffer is not functional */
      {
        result = TEST_FAILURE;
 80019e8:	1dfb      	adds	r3, r7, #7
 80019ea:	2203      	movs	r2, #3
 80019ec:	701a      	strb	r2, [r3, #0]
      }
      /* Init next cycle of the transparent RAM test starting from the begin of the Class B area */
      pRunTimeRamChk = CLASS_B_START;
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <STL_TranspMarch+0x9c>)
 80019f0:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <STL_TranspMarch+0xac>)
 80019f2:	601a      	str	r2, [r3, #0]
      pRunTimeRamChkInv = ((uint32_t *)~((uint32_t)CLASS_B_START));
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <STL_TranspMarch+0xa0>)
 80019f6:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <STL_TranspMarch+0xb0>)
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e01d      	b.n	8001a38 <STL_TranspMarch+0x90>
    }
    else
    { /* ------------- March test applied on Class B data area ------------------ */
      /* !!! Application has to ensure that no write or read operation
               is performed within Class B RAM area during this test !!!      */
      if (STL_TranspRamMarchCXStep(pRunTimeRamChk, &aRunTimeRamBuf[1], BCKGRND) == MARCH_STEP_SUCCESS)         
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <STL_TranspMarch+0x9c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4916      	ldr	r1, [pc, #88]	; (8001a5c <STL_TranspMarch+0xb4>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	0018      	movs	r0, r3
 8001a06:	f000 fc01 	bl	800220c <STL_TranspRamMarchCXStep>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d10c      	bne.n	8001a2a <STL_TranspMarch+0x82>
      {
        /* Prepare next Row Transparent RAM test */
        pRunTimeRamChk += RT_RAM_BLOCKSIZE - (2u * RT_RAM_BLOCK_OVERLAP);
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <STL_TranspMarch+0x9c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3310      	adds	r3, #16
 8001a16:	001a      	movs	r2, r3
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <STL_TranspMarch+0x9c>)
 8001a1a:	601a      	str	r2, [r3, #0]
        pRunTimeRamChkInv = (uint32_t *)(uint32_t)(~(uint32_t)pRunTimeRamChk);
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <STL_TranspMarch+0x9c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	001a      	movs	r2, r3
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <STL_TranspMarch+0xa0>)
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e006      	b.n	8001a38 <STL_TranspMarch+0x90>
      }
      else
      {
        result = TEST_FAILURE;  /* Word line under test was not functional */
 8001a2a:	1dfb      	adds	r3, r7, #7
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	e002      	b.n	8001a38 <STL_TranspMarch+0x90>
      }
    }
  }
  else  /* Class B error on pRunTimeRamChk */
  {
    result = CLASS_B_DATA_FAIL;
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
  }
  return (result);  
 8001a38:	1dfb      	adds	r3, r7, #7
 8001a3a:	781b      	ldrb	r3, [r3, #0]
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b002      	add	sp, #8
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000020 	.word	0x20000020
 8001a48:	20000024 	.word	0x20000024
 8001a4c:	2000007a 	.word	0x2000007a
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000030 	.word	0x20000030
 8001a58:	dfffffcf 	.word	0xdfffffcf
 8001a5c:	20000004 	.word	0x20000004

08001a60 <HAL_MspInit>:
  * @brief  Initializes the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually  
            modified by the user
   */ 
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  : None
  * @retval : None
  */
void NMI_Handler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
#ifdef STL_VERBOSE
  if (__HAL_RCC_GET_IT_SOURCE(RCC_IT_CSS))
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <NMI_Handler+0x54>)
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	401a      	ands	r2, r3
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d10e      	bne.n	8001aa0 <NMI_Handler+0x34>
  {
    while(__HAL_USART_GET_FLAG(&UartHandle, USART_FLAG_TC) == 0)
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <NMI_Handler+0x58>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	2240      	movs	r2, #64	; 0x40
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b40      	cmp	r3, #64	; 0x40
 8001a90:	d1f8      	bne.n	8001a84 <NMI_Handler+0x18>
    {   /* Wait previous transmission completion */
    }
    /* Re-configure USART baud rate to have 115200 bds with HSI clock (8MHz) */
    USART_Configuration();
 8001a92:	f7fe fe65 	bl	8000760 <USART_Configuration>
    printf("\n\r Clock Source failure (Clock Security System)\n\r");
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <NMI_Handler+0x5c>)
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f003 fcb1 	bl	8005400 <iprintf>
 8001a9e:	e003      	b.n	8001aa8 <NMI_Handler+0x3c>
  }
  else
  {
    printf("\n\r NMI Exception\n\r");
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <NMI_Handler+0x60>)
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f003 fcac 	bl	8005400 <iprintf>
  }
#endif /* STL_VERBOSE */

#if defined STL_EVAL_MODE
  /* LED_ERR Off for debug purposes */
  BSP_LED_Off(LED_ERR);
 8001aa8:	23a0      	movs	r3, #160	; 0xa0
 8001aaa:	05db      	lsls	r3, r3, #23
 8001aac:	2200      	movs	r2, #0
 8001aae:	2180      	movs	r1, #128	; 0x80
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f001 fadb 	bl	800306c <HAL_GPIO_WritePin>
#endif  /* STL_EVAL_MODE */

  FailSafePOR();
 8001ab6:	f7ff fb65 	bl	8001184 <FailSafePOR>
}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	2000010c 	.word	0x2000010c
 8001ac8:	08006ab4 	.word	0x08006ab4
 8001acc:	08006ae8 	.word	0x08006ae8

08001ad0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  : None
  * @retval : None
  */
void HardFault_Handler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
#ifdef STL_VERBOSE
  printf("\n\r Hard fault Exception \n\r");
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <HardFault_Handler+0x24>)
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f003 fc92 	bl	8005400 <iprintf>
#endif /* STL_VERBOSE */

#if defined STL_EVAL_MODE
  /* LED_ERR Off for debug purposes */
  BSP_LED_Off(LED_ERR);
 8001adc:	23a0      	movs	r3, #160	; 0xa0
 8001ade:	05db      	lsls	r3, r3, #23
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f001 fac1 	bl	800306c <HAL_GPIO_WritePin>
#endif  /* STL_EVAL_MODE */

  FailSafePOR();
 8001aea:	f7ff fb4b 	bl	8001184 <FailSafePOR>
}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	08006afc 	.word	0x08006afc

08001af8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  : None
  * @retval : None
  */
void SVC_Handler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
#ifdef STL_VERBOSE
  printf("\n\r SVCall Exception \n\r");
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <SVC_Handler+0x18>)
 8001afe:	0018      	movs	r0, r3
 8001b00:	f003 fc7e 	bl	8005400 <iprintf>
#endif /* STL_VERBOSE */

  FailSafePOR();
 8001b04:	f7ff fb3e 	bl	8001184 <FailSafePOR>
}
 8001b08:	46c0      	nop			; (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	08006b18 	.word	0x08006b18

08001b14 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  : None
  * @retval : None
  */
void PendSV_Handler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
#ifdef STL_VERBOSE
  printf("\n\r PendSVC Exception \n\r");
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <PendSV_Handler+0x18>)
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f003 fc70 	bl	8005400 <iprintf>
#endif /* STL_VERBOSE */

  FailSafePOR();
 8001b20:	f7ff fb30 	bl	8001184 <FailSafePOR>
}
 8001b24:	46c0      	nop			; (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	08006b50 	.word	0x08006b50

08001b30 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  : None
  * @retval : None
  */
void SysTick_Handler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001b36:	f000 fdef 	bl	8002718 <HAL_IncTick>
    
  /* Verify TickCounter integrity */
  if ((TickCounter ^ TickCounterInv) == 0xFFFFFFFFuL)
 8001b3a:	4b40      	ldr	r3, [pc, #256]	; (8001c3c <SysTick_Handler+0x10c>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b40      	ldr	r3, [pc, #256]	; (8001c40 <SysTick_Handler+0x110>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4053      	eors	r3, r2
 8001b44:	3301      	adds	r3, #1
 8001b46:	d000      	beq.n	8001b4a <SysTick_Handler+0x1a>
 8001b48:	e073      	b.n	8001c32 <SysTick_Handler+0x102>
  {
    TickCounter++;
 8001b4a:	4b3c      	ldr	r3, [pc, #240]	; (8001c3c <SysTick_Handler+0x10c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <SysTick_Handler+0x10c>)
 8001b52:	601a      	str	r2, [r3, #0]
    TickCounterInv = ~TickCounter;
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <SysTick_Handler+0x10c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	43da      	mvns	r2, r3
 8001b5a:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <SysTick_Handler+0x110>)
 8001b5c:	601a      	str	r2, [r3, #0]

    if (TickCounter >= SYSTICK_10ms_TB)
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <SysTick_Handler+0x10c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b09      	cmp	r3, #9
 8001b64:	d965      	bls.n	8001c32 <SysTick_Handler+0x102>
    {
      uint32_t RamTestResult;

      #if defined STL_EVAL_MODE
        /* Toggle LED_VLM for debug purposes */
        BSP_LED_Toggle(LED_VLM);
 8001b66:	23a0      	movs	r3, #160	; 0xa0
 8001b68:	05db      	lsls	r3, r3, #23
 8001b6a:	2120      	movs	r1, #32
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f001 fa9a 	bl	80030a6 <HAL_GPIO_TogglePin>
      #endif  /* STL_EVAL_MODE */

      /* Reset timebase counter */
      TickCounter = 0u;
 8001b72:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <SysTick_Handler+0x10c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
      TickCounterInv = 0xFFFFFFFFuL;
 8001b78:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <SysTick_Handler+0x110>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4252      	negs	r2, r2
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Set Flag read in main loop */
      TimeBaseFlag = 0xAAAAAAAAuL;
 8001b80:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <SysTick_Handler+0x114>)
 8001b82:	4a31      	ldr	r2, [pc, #196]	; (8001c48 <SysTick_Handler+0x118>)
 8001b84:	601a      	str	r2, [r3, #0]
      TimeBaseFlagInv = 0x55555555uL;
 8001b86:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <SysTick_Handler+0x11c>)
 8001b88:	4a31      	ldr	r2, [pc, #196]	; (8001c50 <SysTick_Handler+0x120>)
 8001b8a:	601a      	str	r2, [r3, #0]

      ISRCtrlFlowCnt += RAM_MARCHC_ISR_CALLER;
 8001b8c:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <SysTick_Handler+0x124>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	1dda      	adds	r2, r3, #7
 8001b92:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <SysTick_Handler+0x124>)
 8001b94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b96:	b672      	cpsid	i
}
 8001b98:	46c0      	nop			; (mov r8, r8)
			__disable_irq();
      RamTestResult = STL_TranspMarch();
 8001b9a:	f7ff ff05 	bl	80019a8 <STL_TranspMarch>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ba2:	b662      	cpsie	i
}
 8001ba4:	46c0      	nop			; (mov r8, r8)
			__enable_irq();
      ISRCtrlFlowCntInv -= RAM_MARCHC_ISR_CALLER;
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <SysTick_Handler+0x128>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	1fda      	subs	r2, r3, #7
 8001bac:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <SysTick_Handler+0x128>)
 8001bae:	601a      	str	r2, [r3, #0]

      switch ( RamTestResult )
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d013      	beq.n	8001bde <SysTick_Handler+0xae>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d109      	bne.n	8001bd0 <SysTick_Handler+0xa0>
          #ifdef STL_VERBOSE
          /* avoid any long string output here in the interrupt, '#' marks ram test completed ok */
            #ifndef __GNUC__
              putchar((int16_t)'#');
            #else
              __io_putchar((int16_t)'#');
 8001bbc:	2023      	movs	r0, #35	; 0x23
 8001bbe:	f7fe fe53 	bl	8000868 <__io_putchar>
            #endif /* __GNUC__ */
          #endif  /* STL_VERBOSE */
          #ifdef STL_EVAL_MODE
            /* Toggle LED_VLM for debug purposes */
            BSP_LED_Toggle(LED_VLM);
 8001bc2:	23a0      	movs	r3, #160	; 0xa0
 8001bc4:	05db      	lsls	r3, r3, #23
 8001bc6:	2120      	movs	r1, #32
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f001 fa6c 	bl	80030a6 <HAL_GPIO_TogglePin>
          #endif /* STL_EVAL_MODE */
          #if defined(STL_EVAL_LCD)
            ++MyRAMCounter;
          #endif /* STL_EVAL_LCD */
          break;
 8001bce:	e007      	b.n	8001be0 <SysTick_Handler+0xb0>
        case TEST_FAILURE:
        case CLASS_B_DATA_FAIL:
        default:
          #ifdef STL_VERBOSE
            printf("\n\r >>>>>>>>>>>>>>>>>>>  RAM Error (March C- Run-time check)\n\r");
 8001bd0:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <SysTick_Handler+0x12c>)
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f003 fc14 	bl	8005400 <iprintf>
          #endif  /* STL_VERBOSE */
          FailSafePOR();
 8001bd8:	f7ff fad4 	bl	8001184 <FailSafePOR>
          break;
 8001bdc:	e000      	b.n	8001be0 <SysTick_Handler+0xb0>
          break;
 8001bde:	46c0      	nop			; (mov r8, r8)
      } /* End of the switch */

      /* Do we reached the end of RAM test? */
      /* Verify 1st ISRCtrlFlowCnt integrity */
      if ((ISRCtrlFlowCnt ^ ISRCtrlFlowCntInv) == 0xFFFFFFFFuL)
 8001be0:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <SysTick_Handler+0x124>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <SysTick_Handler+0x128>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4053      	eors	r3, r2
 8001bea:	3301      	adds	r3, #1
 8001bec:	d115      	bne.n	8001c1a <SysTick_Handler+0xea>
      {
        if (RamTestResult == TEST_OK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d118      	bne.n	8001c26 <SysTick_Handler+0xf6>
  /* ==============================================================================*/
  /* MISRA violation of rule 17.4 - pointer arithmetic is used to check RAM test control flow */
	#ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
		#pragma diag_suppress=Pm088
	#endif /* __IAR_SYSTEMS_ICC__ */
          if (ISRCtrlFlowCnt != RAM_TEST_COMPLETED)
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <SysTick_Handler+0x124>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b6c      	cmp	r3, #108	; 0x6c
 8001bfa:	d006      	beq.n	8001c0a <SysTick_Handler+0xda>
		#pragma diag_default=Pm088
	#endif /* __IAR_SYSTEMS_ICC__ */
  /* ==============================================================================*/
          {
          #ifdef STL_VERBOSE
            printf("\n\r Control Flow error (RAM test) \n\r");
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <SysTick_Handler+0x130>)
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f003 fbfe 	bl	8005400 <iprintf>
          #endif  /* STL_VERBOSE */
          FailSafePOR();
 8001c04:	f7ff fabe 	bl	8001184 <FailSafePOR>
 8001c08:	e00d      	b.n	8001c26 <SysTick_Handler+0xf6>
          }
          else  /* Full RAM was scanned */
          {
            ISRCtrlFlowCnt = 0u;
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <SysTick_Handler+0x124>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
            ISRCtrlFlowCntInv = 0xFFFFFFFFuL;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <SysTick_Handler+0x128>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	4252      	negs	r2, r2
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	e005      	b.n	8001c26 <SysTick_Handler+0xf6>
        } /* End of RAM completed if*/
      } /* End of control flow monitoring */
      else
      {
      #ifdef STL_VERBOSE
        printf("\n\r Control Flow error in ISR \n\r");
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <SysTick_Handler+0x134>)
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f003 fbef 	bl	8005400 <iprintf>
      #endif  /* STL_VERBOSE */
      FailSafePOR();
 8001c22:	f7ff faaf 	bl	8001184 <FailSafePOR>
      }
      #if defined STL_EVAL_MODE
        /* Toggle LED_VLM for debug purposes */
        BSP_LED_Toggle(LED_VLM);
 8001c26:	23a0      	movs	r3, #160	; 0xa0
 8001c28:	05db      	lsls	r3, r3, #23
 8001c2a:	2120      	movs	r1, #32
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f001 fa3a 	bl	80030a6 <HAL_GPIO_TogglePin>
      #endif  /* STL_EVAL_MODE */
    } /* End of the 10 ms timebase interrupt */
  }  
}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b002      	add	sp, #8
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	2000003c 	.word	0x2000003c
 8001c40:	20000060 	.word	0x20000060
 8001c44:	20000040 	.word	0x20000040
 8001c48:	aaaaaaaa 	.word	0xaaaaaaaa
 8001c4c:	20000064 	.word	0x20000064
 8001c50:	55555555 	.word	0x55555555
 8001c54:	20000034 	.word	0x20000034
 8001c58:	20000058 	.word	0x20000058
 8001c5c:	08006b68 	.word	0x08006b68
 8001c60:	08006ba8 	.word	0x08006ba8
 8001c64:	08006bcc 	.word	0x08006bcc

08001c68 <TIM21_IRQHandler>:
  * @brief  This function handles TIM21 global interrupt request.
  * @param  : None
  * @retval : None
  */
void TIM21_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  uint16_t tmpCC1_last_cpy;
   
  if ((TIM21->SR & TIM_SR_CC1IF) != 0u )
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <TIM21_IRQHandler+0x78>)
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	d02e      	beq.n	8001cd6 <TIM21_IRQHandler+0x6e>
  {
    /* store previous captured value */
    tmpCC1_last_cpy = tmpCC1_last; 
 8001c78:	1dbb      	adds	r3, r7, #6
 8001c7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ce4 <TIM21_IRQHandler+0x7c>)
 8001c7c:	8812      	ldrh	r2, [r2, #0]
 8001c7e:	801a      	strh	r2, [r3, #0]
    /* get currently captured value */
    tmpCC1_last = (uint16_t)(TIM21->CCR1);
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <TIM21_IRQHandler+0x78>)
 8001c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <TIM21_IRQHandler+0x7c>)
 8001c88:	801a      	strh	r2, [r3, #0]
    /* The CC4IF flag is already cleared here be reading CCR4 register */

    /* overight results only in case the data is required */
    if (LSIPeriodFlag == 0u)
 8001c8a:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <TIM21_IRQHandler+0x80>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d121      	bne.n	8001cd6 <TIM21_IRQHandler+0x6e>
    {
      /* take correct measurement only */
      if ((TIM21->SR & TIM_SR_CC1OF) == 0u)
 8001c92:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <TIM21_IRQHandler+0x78>)
 8001c94:	691a      	ldr	r2, [r3, #16]
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d115      	bne.n	8001cca <TIM21_IRQHandler+0x62>
      {
        /* Compute period length */
        PeriodValue = ((uint32_t)(tmpCC1_last) - (uint32_t)(tmpCC1_last_cpy)) & 0xFFFFuL;
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <TIM21_IRQHandler+0x7c>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	1dbb      	adds	r3, r7, #6
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	001a      	movs	r2, r3
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <TIM21_IRQHandler+0x84>)
 8001cb0:	601a      	str	r2, [r3, #0]
        PeriodValueInv = ~PeriodValue;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <TIM21_IRQHandler+0x84>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <TIM21_IRQHandler+0x88>)
 8001cba:	601a      	str	r2, [r3, #0]
              
        /* Set Flag tested at main loop */
        LSIPeriodFlag = 0xAAAAAAAAuL;
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <TIM21_IRQHandler+0x80>)
 8001cbe:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <TIM21_IRQHandler+0x8c>)
 8001cc0:	601a      	str	r2, [r3, #0]
        LSIPeriodFlagInv = 0x55555555uL;
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <TIM21_IRQHandler+0x90>)
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <TIM21_IRQHandler+0x94>)
 8001cc6:	601a      	str	r2, [r3, #0]
        TIM21->SR &= (uint16_t)(~TIM_SR_CC1OF);
      }
    }
    /* ignore computation in case data is not required */
  }
}
 8001cc8:	e005      	b.n	8001cd6 <TIM21_IRQHandler+0x6e>
        TIM21->SR &= (uint16_t)(~TIM_SR_CC1OF);
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <TIM21_IRQHandler+0x78>)
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <TIM21_IRQHandler+0x78>)
 8001cd0:	490b      	ldr	r1, [pc, #44]	; (8001d00 <TIM21_IRQHandler+0x98>)
 8001cd2:	400a      	ands	r2, r1
 8001cd4:	611a      	str	r2, [r3, #16]
}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b002      	add	sp, #8
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	40010800 	.word	0x40010800
 8001ce4:	20000224 	.word	0x20000224
 8001ce8:	20000044 	.word	0x20000044
 8001cec:	20000038 	.word	0x20000038
 8001cf0:	2000005c 	.word	0x2000005c
 8001cf4:	aaaaaaaa 	.word	0xaaaaaaaa
 8001cf8:	20000068 	.word	0x20000068
 8001cfc:	55555555 	.word	0x55555555
 8001d00:	0000fdff 	.word	0x0000fdff

08001d04 <STL_InitClock_Xcross_Measurement>:
  * @brief Configure TIM21 to measure LSI period
  * @param  : None
  * @retval : ErrorStatus = (ERROR, SUCCESS)
  */
ErrorStatus STL_InitClock_Xcross_Measurement(void)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b097      	sub	sp, #92	; 0x5c
 8001d08:	af00      	add	r7, sp, #0
  ErrorStatus result = SUCCESS;
 8001d0a:	2457      	movs	r4, #87	; 0x57
 8001d0c:	193b      	adds	r3, r7, r4
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
  TIM_HandleTypeDef  tim_capture_handle;
  TIM_IC_InitTypeDef tim_input_config;
  
  /*## Enable peripherals and GPIO Clocks ####################################*/
  /* TIMx Peripheral clock enable */
  __TIM21_CLK_ENABLE();
 8001d12:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <STL_InitClock_Xcross_Measurement+0xd8>)
 8001d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d16:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <STL_InitClock_Xcross_Measurement+0xd8>)
 8001d18:	2104      	movs	r1, #4
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /*## Configure the NVIC for TIMx ###########################################*/
  HAL_NVIC_SetPriority(TIM21_IRQn, 0u, 0u);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	2014      	movs	r0, #20
 8001d24:	f000 fdd2 	bl	80028cc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM21 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8001d28:	2014      	movs	r0, #20
 8001d2a:	f000 fde4 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* TIM21 configuration: Input Capture mode ---------------------
  The LSI oscillator is connected to TIM21 CH1.
  The Rising edge is used as active edge, ICC input divided by 8
  The TIM21 CCR1 is used to compute the frequency value. 
  ------------------------------------------------------------ */
  tim_capture_handle.Instance = TIM21;
 8001d2e:	2014      	movs	r0, #20
 8001d30:	183b      	adds	r3, r7, r0
 8001d32:	4a2b      	ldr	r2, [pc, #172]	; (8001de0 <STL_InitClock_Xcross_Measurement+0xdc>)
 8001d34:	601a      	str	r2, [r3, #0]
  tim_capture_handle.Init.Prescaler         = 0u; 
 8001d36:	183b      	adds	r3, r7, r0
 8001d38:	2200      	movs	r2, #0
 8001d3a:	605a      	str	r2, [r3, #4]
  tim_capture_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;  
 8001d3c:	183b      	adds	r3, r7, r0
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  tim_capture_handle.Init.Period            = 0xFFFFFFFFul; 
 8001d42:	183b      	adds	r3, r7, r0
 8001d44:	2201      	movs	r2, #1
 8001d46:	4252      	negs	r2, r2
 8001d48:	60da      	str	r2, [r3, #12]
  tim_capture_handle.Init.ClockDivision     = 0u;     
 8001d4a:	183b      	adds	r3, r7, r0
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  /* define internal HAL driver status here as handle structure is defined locally */
  __HAL_RESET_HANDLE_STATE(&tim_capture_handle);
 8001d50:	183b      	adds	r3, r7, r0
 8001d52:	2239      	movs	r2, #57	; 0x39
 8001d54:	2100      	movs	r1, #0
 8001d56:	5499      	strb	r1, [r3, r2]
  if(HAL_TIM_IC_Init(&tim_capture_handle) != HAL_OK)
 8001d58:	183b      	adds	r3, r7, r0
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f002 f9ee 	bl	800413c <HAL_TIM_IC_Init>
 8001d60:	1e03      	subs	r3, r0, #0
 8001d62:	d002      	beq.n	8001d6a <STL_InitClock_Xcross_Measurement+0x66>
  {
    /* Initialization Error */
    result = ERROR;
 8001d64:	193b      	adds	r3, r7, r4
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
  }
  /* Connect internally the TIM21_CH1 Input Capture to the LSI clock output */
  HAL_TIMEx_RemapConfig(&tim_capture_handle, TIM21_TI1_LSI);
 8001d6a:	2414      	movs	r4, #20
 8001d6c:	193b      	adds	r3, r7, r4
 8001d6e:	2114      	movs	r1, #20
 8001d70:	0018      	movs	r0, r3
 8001d72:	f002 fd2c 	bl	80047ce <HAL_TIMEx_RemapConfig>
  
  /* Configure the TIM21 Input Capture of channel 1 */
  tim_input_config.ICPolarity  = TIM_ICPOLARITY_RISING;
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
  tim_input_config.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2201      	movs	r2, #1
 8001d80:	605a      	str	r2, [r3, #4]
  tim_input_config.ICPrescaler = TIM_ICPSC_DIV8;
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	220c      	movs	r2, #12
 8001d86:	609a      	str	r2, [r3, #8]
  tim_input_config.ICFilter    = 0u;
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
  if(HAL_TIM_IC_ConfigChannel(&tim_capture_handle, &tim_input_config, TIM_CHANNEL_1) != HAL_OK)
 8001d8e:	1d39      	adds	r1, r7, #4
 8001d90:	193b      	adds	r3, r7, r4
 8001d92:	2200      	movs	r2, #0
 8001d94:	0018      	movs	r0, r3
 8001d96:	f002 fae1 	bl	800435c <HAL_TIM_IC_ConfigChannel>
 8001d9a:	1e03      	subs	r3, r0, #0
 8001d9c:	d003      	beq.n	8001da6 <STL_InitClock_Xcross_Measurement+0xa2>
  {
    /* Initialization Error */
    result = ERROR;
 8001d9e:	2357      	movs	r3, #87	; 0x57
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Reset the flags */
  tim_capture_handle.Instance->SR = 0u;
 8001da6:	2114      	movs	r1, #20
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  LSIPeriodFlag = 0u;
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <STL_InitClock_Xcross_Measurement+0xe0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
  
  /* Start the TIM Input Capture measurement in interrupt mode */
  if(HAL_TIM_IC_Start_IT(&tim_capture_handle, TIM_CHANNEL_1) != HAL_OK)
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	2100      	movs	r1, #0
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f002 fa06 	bl	80041cc <HAL_TIM_IC_Start_IT>
 8001dc0:	1e03      	subs	r3, r0, #0
 8001dc2:	d003      	beq.n	8001dcc <STL_InitClock_Xcross_Measurement+0xc8>
  {
    /* Initialization Error */
    result = ERROR;
 8001dc4:	2357      	movs	r3, #87	; 0x57
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	2201      	movs	r2, #1
 8001dca:	701a      	strb	r2, [r3, #0]
  }
  return(result);
 8001dcc:	2357      	movs	r3, #87	; 0x57
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	781b      	ldrb	r3, [r3, #0]
}
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b017      	add	sp, #92	; 0x5c
 8001dd8:	bd90      	pop	{r4, r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010800 	.word	0x40010800
 8001de4:	20000044 	.word	0x20000044

08001de8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	e00a      	b.n	8001e10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dfa:	e000      	b.n	8001dfe <_read+0x16>
 8001dfc:	bf00      	nop
 8001dfe:	0001      	movs	r1, r0
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	60ba      	str	r2, [r7, #8]
 8001e06:	b2ca      	uxtb	r2, r1
 8001e08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dbf0      	blt.n	8001dfa <_read+0x12>
  }

  return len;
 8001e18:	687b      	ldr	r3, [r7, #4]
}
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b006      	add	sp, #24
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	425b      	negs	r3, r3
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b002      	add	sp, #8
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2280      	movs	r2, #128	; 0x80
 8001e44:	0192      	lsls	r2, r2, #6
 8001e46:	605a      	str	r2, [r3, #4]
  return 0;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b002      	add	sp, #8
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_isatty>:

int _isatty(int file)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b002      	add	sp, #8
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	0018      	movs	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b004      	add	sp, #16
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e84:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <_sbrk+0x5c>)
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <_sbrk+0x60>)
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <_sbrk+0x64>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <_sbrk+0x68>)
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	18d3      	adds	r3, r2, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d207      	bcs.n	8001ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eac:	f003 fa76 	bl	800539c <__errno>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	425b      	negs	r3, r3
 8001eba:	e009      	b.n	8001ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <_sbrk+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	18d2      	adds	r2, r2, r3
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <_sbrk+0x64>)
 8001ecc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b006      	add	sp, #24
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20002000 	.word	0x20002000
 8001edc:	00000800 	.word	0x00000800
 8001ee0:	20000228 	.word	0x20000228
 8001ee4:	20000240 	.word	0x20000240

08001ee8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <SystemInit+0x64>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <SystemInit+0x64>)
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	0049      	lsls	r1, r1, #1
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <SystemInit+0x64>)
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <SystemInit+0x64>)
 8001f00:	4913      	ldr	r1, [pc, #76]	; (8001f50 <SystemInit+0x68>)
 8001f02:	400a      	ands	r2, r1
 8001f04:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <SystemInit+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <SystemInit+0x64>)
 8001f0c:	4911      	ldr	r1, [pc, #68]	; (8001f54 <SystemInit+0x6c>)
 8001f0e:	400a      	ands	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <SystemInit+0x64>)
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <SystemInit+0x64>)
 8001f18:	2101      	movs	r1, #1
 8001f1a:	438a      	bics	r2, r1
 8001f1c:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <SystemInit+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <SystemInit+0x64>)
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <SystemInit+0x70>)
 8001f26:	400a      	ands	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <SystemInit+0x64>)
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <SystemInit+0x64>)
 8001f30:	490a      	ldr	r1, [pc, #40]	; (8001f5c <SystemInit+0x74>)
 8001f32:	400a      	ands	r2, r1
 8001f34:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <SystemInit+0x64>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <SystemInit+0x78>)
 8001f3e:	2280      	movs	r2, #128	; 0x80
 8001f40:	0512      	lsls	r2, r2, #20
 8001f42:	609a      	str	r2, [r3, #8]
#endif
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	88ff400c 	.word	0x88ff400c
 8001f54:	fef6fff6 	.word	0xfef6fff6
 8001f58:	fffbffff 	.word	0xfffbffff
 8001f5c:	ff02ffff 	.word	0xff02ffff
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmul = 0U, plldiv = 0U, pllsource = 0U, msirange = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001f7e:	4b45      	ldr	r3, [pc, #276]	; (8002094 <SystemCoreClockUpdate+0x130>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	220c      	movs	r2, #12
 8001f84:	4013      	ands	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	d025      	beq.n	8001fda <SystemCoreClockUpdate+0x76>
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b0c      	cmp	r3, #12
 8001f92:	d85e      	bhi.n	8002052 <SystemCoreClockUpdate+0xee>
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d01b      	beq.n	8001fd2 <SystemCoreClockUpdate+0x6e>
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d858      	bhi.n	8002052 <SystemCoreClockUpdate+0xee>
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <SystemCoreClockUpdate+0x4a>
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d00e      	beq.n	8001fca <SystemCoreClockUpdate+0x66>
 8001fac:	e051      	b.n	8002052 <SystemCoreClockUpdate+0xee>
  {
    case 0x00U:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13U;
 8001fae:	4b39      	ldr	r3, [pc, #228]	; (8002094 <SystemCoreClockUpdate+0x130>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	0b5b      	lsrs	r3, r3, #13
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	2280      	movs	r2, #128	; 0x80
 8001fc0:	0212      	lsls	r2, r2, #8
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	4b34      	ldr	r3, [pc, #208]	; (8002098 <SystemCoreClockUpdate+0x134>)
 8001fc6:	601a      	str	r2, [r3, #0]
      break;
 8001fc8:	e051      	b.n	800206e <SystemCoreClockUpdate+0x10a>
    case 0x04U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8001fca:	4b33      	ldr	r3, [pc, #204]	; (8002098 <SystemCoreClockUpdate+0x134>)
 8001fcc:	4a33      	ldr	r2, [pc, #204]	; (800209c <SystemCoreClockUpdate+0x138>)
 8001fce:	601a      	str	r2, [r3, #0]
      break;
 8001fd0:	e04d      	b.n	800206e <SystemCoreClockUpdate+0x10a>
    case 0x08U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8001fd2:	4b31      	ldr	r3, [pc, #196]	; (8002098 <SystemCoreClockUpdate+0x134>)
 8001fd4:	4a32      	ldr	r2, [pc, #200]	; (80020a0 <SystemCoreClockUpdate+0x13c>)
 8001fd6:	601a      	str	r2, [r3, #0]
      break;
 8001fd8:	e049      	b.n	800206e <SystemCoreClockUpdate+0x10a>
    case 0x0CU:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8001fda:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <SystemCoreClockUpdate+0x130>)
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	23f0      	movs	r3, #240	; 0xf0
 8001fe0:	039b      	lsls	r3, r3, #14
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8001fe6:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <SystemCoreClockUpdate+0x130>)
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	23c0      	movs	r3, #192	; 0xc0
 8001fec:	041b      	lsls	r3, r3, #16
 8001fee:	4013      	ands	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18U)];
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	0c9b      	lsrs	r3, r3, #18
 8001ff6:	4a2b      	ldr	r2, [pc, #172]	; (80020a4 <SystemCoreClockUpdate+0x140>)
 8001ff8:	5cd3      	ldrb	r3, [r2, r3]
 8001ffa:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22U) + 1U;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	0d9b      	lsrs	r3, r3, #22
 8002000:	3301      	adds	r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <SystemCoreClockUpdate+0x130>)
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	025b      	lsls	r3, r3, #9
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00U)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d111      	bne.n	800203a <SystemCoreClockUpdate+0xd6>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8002016:	6939      	ldr	r1, [r7, #16]
 8002018:	000a      	movs	r2, r1
 800201a:	0152      	lsls	r2, r2, #5
 800201c:	1a52      	subs	r2, r2, r1
 800201e:	0193      	lsls	r3, r2, #6
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	185b      	adds	r3, r3, r1
 8002026:	029b      	lsls	r3, r3, #10
 8002028:	68f9      	ldr	r1, [r7, #12]
 800202a:	0018      	movs	r0, r3
 800202c:	f7fe f876 	bl	800011c <__udivsi3>
 8002030:	0003      	movs	r3, r0
 8002032:	001a      	movs	r2, r3
 8002034:	4b18      	ldr	r3, [pc, #96]	; (8002098 <SystemCoreClockUpdate+0x134>)
 8002036:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8002038:	e019      	b.n	800206e <SystemCoreClockUpdate+0x10a>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <SystemCoreClockUpdate+0x13c>)
 800203e:	4353      	muls	r3, r2
 8002040:	68f9      	ldr	r1, [r7, #12]
 8002042:	0018      	movs	r0, r3
 8002044:	f7fe f86a 	bl	800011c <__udivsi3>
 8002048:	0003      	movs	r3, r0
 800204a:	001a      	movs	r2, r3
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <SystemCoreClockUpdate+0x134>)
 800204e:	601a      	str	r2, [r3, #0]
      break;
 8002050:	e00d      	b.n	800206e <SystemCoreClockUpdate+0x10a>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13U;
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <SystemCoreClockUpdate+0x130>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	0b5b      	lsrs	r3, r3, #13
 8002058:	2207      	movs	r2, #7
 800205a:	4013      	ands	r3, r2
 800205c:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3301      	adds	r3, #1
 8002062:	2280      	movs	r2, #128	; 0x80
 8002064:	0212      	lsls	r2, r2, #8
 8002066:	409a      	lsls	r2, r3
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <SystemCoreClockUpdate+0x134>)
 800206a:	601a      	str	r2, [r3, #0]
      break;
 800206c:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <SystemCoreClockUpdate+0x130>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	220f      	movs	r2, #15
 8002076:	4013      	ands	r3, r2
 8002078:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <SystemCoreClockUpdate+0x144>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <SystemCoreClockUpdate+0x134>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	40da      	lsrs	r2, r3
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <SystemCoreClockUpdate+0x134>)
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	46bd      	mov	sp, r7
 800208e:	b006      	add	sp, #24
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	40021000 	.word	0x40021000
 8002098:	20000080 	.word	0x20000080
 800209c:	00f42400 	.word	0x00f42400
 80020a0:	0030d400 	.word	0x0030d400
 80020a4:	08006c30 	.word	0x08006c30
 80020a8:	08006c18 	.word	0x08006c18

080020ac <Startup_Copy_Handler>:
  .section  .text.Copy_Handler
  .weak  Startup_Copy_Handler
  .type  Startup_Copy_Handler, %function
Startup_Copy_Handler:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80020ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020ae:	e003      	b.n	80020b8 <LoopCopyDataInit>

080020b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <LoopFillZerobss+0x8>)
  ldr  r3, [r3, r1]
 80020b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020b6:	3104      	adds	r1, #4

080020b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80020b8:	4807      	ldr	r0, [pc, #28]	; (80020d8 <LoopFillZerobss+0xc>)
  ldr  r3, =_edata
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <LoopFillZerobss+0x10>)
  adds  r2, r0, r1
 80020bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020c0:	d3f6      	bcc.n	80020b0 <CopyDataInit>
  ldr  r2, =_sbss
 80020c2:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <LoopFillZerobss+0x14>)
  b  LoopFillZerobss
 80020c4:	e002      	b.n	80020cc <LoopFillZerobss>

080020c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80020c6:	2300      	movs	r3, #0
  str  r3, [r2]
 80020c8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ca:	3204      	adds	r2, #4

080020cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <LoopFillZerobss+0x18>)
  cmp  r2, r3
 80020ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020d0:	d3f9      	bcc.n	80020c6 <FillZerobss>
  bx  lr    
 80020d2:	4770      	bx	lr
  ldr  r3, =_sidata
 80020d4:	08006d2c 	.word	0x08006d2c
  ldr  r0, =_sdata
 80020d8:	20000080 	.word	0x20000080
  ldr  r3, =_edata
 80020dc:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 80020e0:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 80020e4:	20000240 	.word	0x20000240

080020e8 <Reset_Handler>:
*/
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80020e8:	4806      	ldr	r0, [pc, #24]	; (8002104 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80020ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  bl   Startup_Copy_Handler
 80020ec:	f7ff ffde 	bl	80020ac <Startup_Copy_Handler>

/* implement STL start-up procedures - it calls appli entry point when resume */
  ldr  r0, =STL_StartUp
 80020f0:	4805      	ldr	r0, [pc, #20]	; (8002108 <LoopForever+0x8>)
  bx   r0
 80020f2:	4700      	bx	r0

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80020f4:	f7ff fef8 	bl	8001ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020f8:	f003 f956 	bl	80053a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020fc:	f7fe f9de 	bl	80004bc <main>

08002100 <LoopForever>:

LoopForever:
    b LoopForever
 8002100:	e7fe      	b.n	8002100 <LoopForever>
 8002102:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002104:	20002000 	.word	0x20002000
  ldr  r0, =STL_StartUp
 8002108:	080011c1 	.word	0x080011c1

0800210c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800210c:	e7fe      	b.n	800210c <ADC1_COMP_IRQHandler>
	...

08002110 <__ARTISAN_RAM_ORDER>:
 8002110:	fff8 ffff 0000 0000 0004 0000 000c 0000     ................
 8002120:	0008 0000 0010 0000 0014 0000 001c 0000     ................
 8002130:	0018 0000                                   ....

08002134 <STL_FullRamMarchC>:
  .section  .text.STL_FullRamMarchC
  .type  STL_FullRamMarchC, %function
  .size  STL_FullRamMarchC, .-STL_FullRamMarchC

STL_FullRamMarchC:
  MOVS  R4, #0x1       /* Test success status by default */
 8002134:	2401      	movs	r4, #1
  
  MOVS  R3,R2          /* setup inverted background pattern */
 8002136:	0013      	movs	r3, r2
  RSBS  R3, R3, #0
 8002138:	425b      	negs	r3, r3
  SUBS  R3,R3, #1
 800213a:	3b01      	subs	r3, #1
  
/* *** Step 1 *** */
/* Write background pattern with addresses increasing */
  MOVS  R5,R0
 800213c:	0005      	movs	r5, r0

0800213e <__FULL1_LOOP>:
__FULL1_LOOP:
  CMP   R5,R1
 800213e:	428d      	cmp	r5, r1
  BHI   __FULLSTEP_2
 8002140:	d802      	bhi.n	8002148 <__FULLSTEP_2>
  STR   R2,[R5, #+0]
 8002142:	602a      	str	r2, [r5, #0]
  ADDS  R5,R5,#+4
 8002144:	3504      	adds	r5, #4
  B     __FULL1_LOOP
 8002146:	e7fa      	b.n	800213e <__FULL1_LOOP>

08002148 <__FULLSTEP_2>:
    
/* *** Step 2 *** */
/* Verify background and write inverted background with addresses increasing */
__FULLSTEP_2:
  MOVS  R5,R0
 8002148:	0005      	movs	r5, r0

0800214a <__FULL2_LOOP>:
__FULL2_LOOP:
  CMP   R5,R1
 800214a:	428d      	cmp	r5, r1
  BHI   __FULLSTEP_3
 800214c:	d811      	bhi.n	8002172 <__FULLSTEP_3>
  LDR   R6,[R5,#+0]
 800214e:	682e      	ldr	r6, [r5, #0]
  CMP   R6,R2
 8002150:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 8002152:	d157      	bne.n	8002204 <__FULL_ERR>
  STR   R3,[R5,#+0]
 8002154:	602b      	str	r3, [r5, #0]
  LDR   R6,[R5,#+4]
 8002156:	686e      	ldr	r6, [r5, #4]
  CMP   R6,R2
 8002158:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 800215a:	d153      	bne.n	8002204 <__FULL_ERR>
  STR   R3,[R5,#+4]
 800215c:	606b      	str	r3, [r5, #4]
#ifdef ARTISAN
  LDR   R6,[R5,#+12]
 800215e:	68ee      	ldr	r6, [r5, #12]
  CMP   R6,R2
 8002160:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 8002162:	d14f      	bne.n	8002204 <__FULL_ERR>
  STR   R3,[R5,#+12]
 8002164:	60eb      	str	r3, [r5, #12]
  LDR   R6,[R5,#+8]
 8002166:	68ae      	ldr	r6, [r5, #8]
  CMP   R6,R2
 8002168:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 800216a:	d14b      	bne.n	8002204 <__FULL_ERR>
  STR   R3,[R5,#+8]
 800216c:	60ab      	str	r3, [r5, #8]
  LDR   R6,[R5,#+12]
  CMP   R6,R2
  BNE   __FULL_ERR
  STR   R3,[R5,#+12]
 #endif /* ARTISAN */
  ADDS  R5,R5,#+16
 800216e:	3510      	adds	r5, #16
  B     __FULL2_LOOP
 8002170:	e7eb      	b.n	800214a <__FULL2_LOOP>

08002172 <__FULLSTEP_3>:
  
/* *** Step 3 *** */
/* Verify inverted background and write background with addresses increasing   */
__FULLSTEP_3:
  MOVS  R5,R0
 8002172:	0005      	movs	r5, r0

08002174 <__FULL3_LOOP>:
__FULL3_LOOP:
  CMP   R5,R1
 8002174:	428d      	cmp	r5, r1
  BHI   __FULLSTEP_4  
 8002176:	d811      	bhi.n	800219c <__FULLSTEP_4>
  LDR   R6,[R5,#+0]
 8002178:	682e      	ldr	r6, [r5, #0]
  CMP   R6,R3
 800217a:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 800217c:	d142      	bne.n	8002204 <__FULL_ERR>
  STR   R2,[R5,#+0]
 800217e:	602a      	str	r2, [r5, #0]
  LDR   R6,[R5,#+4]
 8002180:	686e      	ldr	r6, [r5, #4]
  CMP   R6,R3
 8002182:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 8002184:	d13e      	bne.n	8002204 <__FULL_ERR>
  STR   R2,[R5,#+4]
 8002186:	606a      	str	r2, [r5, #4]
#ifdef ARTISAN
  LDR   R6,[R5,#+12]
 8002188:	68ee      	ldr	r6, [r5, #12]
  CMP   R6,R3
 800218a:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 800218c:	d13a      	bne.n	8002204 <__FULL_ERR>
  STR   R2,[R5,#+12]
 800218e:	60ea      	str	r2, [r5, #12]
  LDR   R6,[R5,#+8]
 8002190:	68ae      	ldr	r6, [r5, #8]
  CMP   R6,R3
 8002192:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 8002194:	d136      	bne.n	8002204 <__FULL_ERR>
  STR   R2,[R5,#+8]
 8002196:	60aa      	str	r2, [r5, #8]
  LDR   R6,[R5,#+12]
  CMP   R6,R3
  BNE   __FULL_ERR
  STR   R2,[R5,#+12]
#endif /* ARTISAN */
  ADDS  R5,R5,#+16
 8002198:	3510      	adds	r5, #16
  B     __FULL3_LOOP
 800219a:	e7eb      	b.n	8002174 <__FULL3_LOOP>

0800219c <__FULLSTEP_4>:

/* *** Step 4 *** */
/* Verify background and write inverted background with addresses decreasing */
__FULLSTEP_4:
  MOVS  R5,R1
 800219c:	000d      	movs	r5, r1
  SUBS  R5,R5,#+15
 800219e:	3d0f      	subs	r5, #15

080021a0 <__FULL4_LOOP>:
__FULL4_LOOP:
  CMP   R5,R0
 80021a0:	4285      	cmp	r5, r0
  BLO   __FULLSTEP_5
 80021a2:	d311      	bcc.n	80021c8 <__FULLSTEP_5>
#ifdef ARTISAN
  LDR   R6,[R5,#+8]
 80021a4:	68ae      	ldr	r6, [r5, #8]
  CMP   R6,R2
 80021a6:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 80021a8:	d12c      	bne.n	8002204 <__FULL_ERR>
  STR   R3,[R5,#+8]
 80021aa:	60ab      	str	r3, [r5, #8]
  LDR   R6,[R5,#+12]
 80021ac:	68ee      	ldr	r6, [r5, #12]
  CMP   R6,R2
 80021ae:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 80021b0:	d128      	bne.n	8002204 <__FULL_ERR>
  STR   R3,[R5,#+12]
 80021b2:	60eb      	str	r3, [r5, #12]
  LDR   R6,[R5,#+8]
  CMP   R6,R2
  BNE   __FULL_ERR
  STR   R3,[R5,#+8]
 #endif /* ARTISAN */
  LDR   R6,[R5,#+4]
 80021b4:	686e      	ldr	r6, [r5, #4]
  CMP   R6,R2
 80021b6:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 80021b8:	d124      	bne.n	8002204 <__FULL_ERR>
  STR   R3,[R5,#+4]
 80021ba:	606b      	str	r3, [r5, #4]
  LDR   R6,[R5,#+0]
 80021bc:	682e      	ldr	r6, [r5, #0]
  CMP   R6,R2
 80021be:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 80021c0:	d120      	bne.n	8002204 <__FULL_ERR>
  STR   R3,[R5,#+0]
 80021c2:	602b      	str	r3, [r5, #0]
  SUBS  R5,R5,#+16
 80021c4:	3d10      	subs	r5, #16
  B     __FULL4_LOOP
 80021c6:	e7eb      	b.n	80021a0 <__FULL4_LOOP>

080021c8 <__FULLSTEP_5>:
  
/* *** Step 5 *** */
/* Verify inverted background and write background with addresses decreasing */
__FULLSTEP_5:
  MOVS  R5,R1
 80021c8:	000d      	movs	r5, r1
  SUBS  R5,R5,#+15
 80021ca:	3d0f      	subs	r5, #15

080021cc <__FULL5_LOOP>:
__FULL5_LOOP:
  CMP   R5,R0
 80021cc:	4285      	cmp	r5, r0
  BLO   __FULLSTEP_6
 80021ce:	d311      	bcc.n	80021f4 <__FULLSTEP_6>
#ifdef ARTISAN
  LDR   R6,[R5,#+8]
 80021d0:	68ae      	ldr	r6, [r5, #8]
  CMP   R6,R3
 80021d2:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 80021d4:	d116      	bne.n	8002204 <__FULL_ERR>
  STR   R2,[R5,#+8]
 80021d6:	60aa      	str	r2, [r5, #8]
  LDR   R6,[R5,#+12]
 80021d8:	68ee      	ldr	r6, [r5, #12]
  CMP   R6,R3
 80021da:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 80021dc:	d112      	bne.n	8002204 <__FULL_ERR>
  STR   R2,[R5,#+12]
 80021de:	60ea      	str	r2, [r5, #12]
  LDR   R6,[R5,#+8]
  CMP   R6,R3
  BNE   __FULL_ERR
  STR   R2,[R5,#+8]
 #endif /* ARTISAN */
  LDR   R6,[R5,#+4]
 80021e0:	686e      	ldr	r6, [r5, #4]
  CMP   R6,R3
 80021e2:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 80021e4:	d10e      	bne.n	8002204 <__FULL_ERR>
  STR   R2,[R5,#+4]
 80021e6:	606a      	str	r2, [r5, #4]
  LDR   R6,[R5,#+0]
 80021e8:	682e      	ldr	r6, [r5, #0]
  CMP   R6,R3
 80021ea:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 80021ec:	d10a      	bne.n	8002204 <__FULL_ERR>
  STR   R2,[R5,#+0]
 80021ee:	602a      	str	r2, [r5, #0]
  SUBS  R5,R5,#+16
 80021f0:	3d10      	subs	r5, #16
  B     __FULL5_LOOP
 80021f2:	e7eb      	b.n	80021cc <__FULL5_LOOP>

080021f4 <__FULLSTEP_6>:

/* *** Step 6 *** */
/* Verify background with addresses increasing */
__FULLSTEP_6:
  MOVS  R5,R0
 80021f4:	0005      	movs	r5, r0

080021f6 <__FULL6_LOOP>:
__FULL6_LOOP:
  CMP   R5,R1
 80021f6:	428d      	cmp	r5, r1
  BHI   __FULL_RET
 80021f8:	d805      	bhi.n	8002206 <__FULL_RET>
  LDR   R6,[R5,#+0]
 80021fa:	682e      	ldr	r6, [r5, #0]
  CMP   R6,R2
 80021fc:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 80021fe:	d101      	bne.n	8002204 <__FULL_ERR>
  ADDS  R5,R5,#+4
 8002200:	3504      	adds	r5, #4
  B     __FULL6_LOOP
 8002202:	e7f8      	b.n	80021f6 <__FULL6_LOOP>

08002204 <__FULL_ERR>:

__FULL_ERR:
  MOVS  R4,#0       /* error result */
 8002204:	2400      	movs	r4, #0

08002206 <__FULL_RET>:

__FULL_RET:
  MOVS  R0,R4
 8002206:	0020      	movs	r0, r4
  BX    LR          /* return to the caller */
 8002208:	4770      	bx	lr
	...

0800220c <STL_TranspRamMarchCXStep>:
  .section  .text.STL_TranspRamMarchCXStep
  .type  STL_TranspRamMarchCXStep, %function
  .size  STL_TranspRamMarchCXStep, .-STL_TranspRamMarchCXStep

STL_TranspRamMarchCXStep:
  PUSH  {R4-R7}
 800220c:	b4f0      	push	{r4, r5, r6, r7}

  LDR   R5,=ISRCtrlFlowCnt  /* Control flow control */
 800220e:	4d31      	ldr	r5, [pc, #196]	; (80022d4 <__STEP_RET+0x4>)
  LDR   R6,[R5]
 8002210:	682e      	ldr	r6, [r5, #0]
  ADDS  R6,R6,#11
 8002212:	360b      	adds	r6, #11
  STR   R6,[R5]
 8002214:	602e      	str	r6, [r5, #0]
  
  MOVS  R3,R2               /* setup inverted background pattern (R3) */
 8002216:	0013      	movs	r3, r2
  RSBS  R3, R3, #0
 8002218:	425b      	negs	r3, r3
  SUBS  R3,R3, #1  
 800221a:	3b01      	subs	r3, #1

#ifdef ARTISAN
  LDR   R4, =__ARTISAN_RAM_ORDER /* setup pointer to physical order of the addresses (R4) */
 800221c:	4c2e      	ldr	r4, [pc, #184]	; (80022d8 <__STEP_RET+0x8>)
#else
  LDR   R4, =__STANDARD_RAM_ORDER
#endif /* ARTISAN */

  MOVS  R5,R0       /* backup buffer to be tested? */
 800221e:	0005      	movs	r5, r0
  CMP   R5,R1
 8002220:	428d      	cmp	r5, r1
  BEQ   __BUFF_TEST
 8002222:	d02e      	beq.n	8002282 <__BUFF_TEST>
  
/* ***************** test of the RAM slice ********************* */
  MOVS  R5, #0       /* NO - save content of the RAM slice into the backup buffer */
 8002224:	2500      	movs	r5, #0

08002226 <__SAVE_LOOP>:
__SAVE_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 8002226:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* load data from RAM */
 8002228:	5987      	ldr	r7, [r0, r6]
  ADDS  R5,R5,#4     /* original data are stored starting from second item of the buffer */
 800222a:	3504      	adds	r5, #4
  STR   R7,[R1, R5]  /* (first and last items are used for testing purpose exclusively) */
 800222c:	514f      	str	r7, [r1, r5]
  CMP   R5, #20
 800222e:	2d14      	cmp	r5, #20
  BLE   __SAVE_LOOP
 8002230:	ddf9      	ble.n	8002226 <__SAVE_LOOP>
  
/* *** Step 1 *** */
/* Write background pattern with addresses increasing */
  MOVS  R5, #0
 8002232:	2500      	movs	r5, #0

08002234 <__STEP1_LOOP>:
__STEP1_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 8002234:	5966      	ldr	r6, [r4, r5]
  STR   R2,[R0, R6]  /* store background pattern */
 8002236:	5182      	str	r2, [r0, r6]
  ADDS  R5,R5,#4
 8002238:	3504      	adds	r5, #4
  CMP   R5, #20
 800223a:	2d14      	cmp	r5, #20
  BLE   __STEP1_LOOP
 800223c:	ddfa      	ble.n	8002234 <__STEP1_LOOP>
  
/* *** Step 2 *** */
/* Verify background and write inverted background with addresses increasing */
  MOVS  R5, #0
 800223e:	2500      	movs	r5, #0

08002240 <__STEP2_LOOP>:
__STEP2_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 8002240:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify background pattern */
 8002242:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R2
 8002244:	4297      	cmp	r7, r2
  BNE   __STEP_ERR
 8002246:	d142      	bne.n	80022ce <__STEP_ERR>
  STR   R3,[R0, R6]  /* store inverted background pattern */
 8002248:	5183      	str	r3, [r0, r6]
  ADDS  R5,R5,#4
 800224a:	3504      	adds	r5, #4
  CMP   R5, #20
 800224c:	2d14      	cmp	r5, #20
  BLE   __STEP2_LOOP
 800224e:	ddf7      	ble.n	8002240 <__STEP2_LOOP>
  BHI   __STEP4_LOOP
#endif /* March-X  */
  
/* *** Step 5 *** */
/* Verify inverted background and write background with addresses decreasing  */
  MOVS  R5, #24
 8002250:	2518      	movs	r5, #24

08002252 <__STEP5_LOOP>:
__STEP5_LOOP:
  SUBS  R5,R5,#4
 8002252:	3d04      	subs	r5, #4
  LDR   R6,[R4, R5]  /* load data offset */
 8002254:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify inverted background pattern */
 8002256:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R3
 8002258:	429f      	cmp	r7, r3
  BNE   __STEP_ERR
 800225a:	d138      	bne.n	80022ce <__STEP_ERR>
  STR   R2,[R0, R6]  /* store background pattrern */
 800225c:	5182      	str	r2, [r0, r6]
  CMP   R5, #0
 800225e:	2d00      	cmp	r5, #0
  BHI   __STEP5_LOOP
 8002260:	d8f7      	bhi.n	8002252 <__STEP5_LOOP>

/* *** Step 6 *** */
/* Verify background with addresses increasing */
  MOVS  R5, #0
 8002262:	2500      	movs	r5, #0

08002264 <__STEP6_LOOP>:
__STEP6_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 8002264:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify background pattern */
 8002266:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R2
 8002268:	4297      	cmp	r7, r2
  BNE   __STEP_ERR
 800226a:	d130      	bne.n	80022ce <__STEP_ERR>
  ADDS  R5,R5,#4
 800226c:	3504      	adds	r5, #4
  CMP   R5, #20
 800226e:	2d14      	cmp	r5, #20
  BLE   __STEP6_LOOP
 8002270:	ddf8      	ble.n	8002264 <__STEP6_LOOP>

  MOVS  R5, #24      /* restore content of the RAM slice back from the backup buffer */
 8002272:	2518      	movs	r5, #24

08002274 <__RESTORE_LOOP>:
__RESTORE_LOOP:
  LDR   R7,[R1, R5]  /* (first and last items are used for testing purpose exclusively) */
 8002274:	594f      	ldr	r7, [r1, r5]
  SUBS  R5,R5,#4     /* original data are stored starting from second item of the buffer */
 8002276:	3d04      	subs	r5, #4
  LDR   R6,[R4, R5]  /* load data offset */
 8002278:	5966      	ldr	r6, [r4, r5]
  STR   R7,[R0, R6]  /* load data from RAM */
 800227a:	5187      	str	r7, [r0, r6]
  CMP   R5, #0
 800227c:	2d00      	cmp	r5, #0
  BHI   __RESTORE_LOOP
 800227e:	d8f9      	bhi.n	8002274 <__RESTORE_LOOP>
  
  B     __MARCH_RET
 8002280:	e01f      	b.n	80022c2 <__MARCH_RET>

08002282 <__BUFF_TEST>:

/* ************** test of the buffer itself ******************** */
__BUFF_TEST:
/* *** Step 1 ***  */
/* Write background pattern with addresses increasing */
  MOVS  R5, #4
 8002282:	2504      	movs	r5, #4

08002284 <__BUFF1_LOOP>:
__BUFF1_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 8002284:	5966      	ldr	r6, [r4, r5]
  STR   R2,[R0, R6]  /* store background pattern */
 8002286:	5182      	str	r2, [r0, r6]
  ADDS   R5,R5,#4
 8002288:	3504      	adds	r5, #4
  CMP   R5, #32
 800228a:	2d20      	cmp	r5, #32
  BLE   __BUFF1_LOOP
 800228c:	ddfa      	ble.n	8002284 <__BUFF1_LOOP>
  
/* *** Step 2 *** */
/* Verify background and write inverted background with addresses increasing */
  MOVS  R5, #4
 800228e:	2504      	movs	r5, #4

08002290 <__BUFF2_LOOP>:
__BUFF2_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 8002290:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify background pattern */
 8002292:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R2
 8002294:	4297      	cmp	r7, r2
  BNE   __STEP_ERR
 8002296:	d11a      	bne.n	80022ce <__STEP_ERR>
  STR   R3,[R0, R6]  /* store inverted background pattern */
 8002298:	5183      	str	r3, [r0, r6]
  ADDS  R5,R5,#4
 800229a:	3504      	adds	r5, #4
  CMP   R5, #32
 800229c:	2d20      	cmp	r5, #32
  BLE   __BUFF2_LOOP
 800229e:	ddf7      	ble.n	8002290 <__BUFF2_LOOP>
  BHI   __BUFF4_LOOP
#endif /* March-X  */

/* *** Step 5 *** */
/* Verify inverted background and write background with addresses decreasing */
  MOVS  R5, #36
 80022a0:	2524      	movs	r5, #36	; 0x24

080022a2 <__BUFF5_LOOP>:
__BUFF5_LOOP:
  SUBS  R5,R5,#4
 80022a2:	3d04      	subs	r5, #4
  LDR   R6,[R4, R5]  /* load data offset  */
 80022a4:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify inverted background pattern */
 80022a6:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R3
 80022a8:	429f      	cmp	r7, r3
  BNE   __STEP_ERR
 80022aa:	d110      	bne.n	80022ce <__STEP_ERR>
  STR   R2,[R0, R6]  /* store background pattrern */
 80022ac:	5182      	str	r2, [r0, r6]
  CMP   R5, #4
 80022ae:	2d04      	cmp	r5, #4
  BHI   __BUFF5_LOOP
 80022b0:	d8f7      	bhi.n	80022a2 <__BUFF5_LOOP>

/* *** Step 6 *** */
/* Verify background with addresses increasing */
  MOVS  R5, #4
 80022b2:	2504      	movs	r5, #4

080022b4 <__BUFF6_LOOP>:
__BUFF6_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 80022b4:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify background pattern */
 80022b6:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R2
 80022b8:	4297      	cmp	r7, r2
  BNE   __STEP_ERR
 80022ba:	d108      	bne.n	80022ce <__STEP_ERR>
  ADDS  R5,R5,#4
 80022bc:	3504      	adds	r5, #4
  CMP   R5, #32
 80022be:	2d20      	cmp	r5, #32
  BLE   __BUFF6_LOOP
 80022c0:	ddf8      	ble.n	80022b4 <__BUFF6_LOOP>

080022c2 <__MARCH_RET>:

__MARCH_RET:
  LDR   R4,=ISRCtrlFlowCntInv  /* Control flow control */
 80022c2:	4c06      	ldr	r4, [pc, #24]	; (80022dc <__STEP_RET+0xc>)
  LDR   R5,[R4]
 80022c4:	6825      	ldr	r5, [r4, #0]
  SUBS  R5,R5,#11
 80022c6:	3d0b      	subs	r5, #11
  STR   R5,[R4]
 80022c8:	6025      	str	r5, [r4, #0]
  
  MOVS  R0, #1       /* Correct return */
 80022ca:	2001      	movs	r0, #1
  B     __STEP_RET
 80022cc:	e000      	b.n	80022d0 <__STEP_RET>

080022ce <__STEP_ERR>:
  
__STEP_ERR:
  MOVS  R0, #0       /* error result */
 80022ce:	2000      	movs	r0, #0

080022d0 <__STEP_RET>:
  
__STEP_RET:
  POP   {R4-R7}
 80022d0:	bcf0      	pop	{r4, r5, r6, r7}
  BX    LR           /* return to the caller */
 80022d2:	4770      	bx	lr
  LDR   R5,=ISRCtrlFlowCnt  /* Control flow control */
 80022d4:	20000034 	.word	0x20000034
  LDR   R4, =__ARTISAN_RAM_ORDER /* setup pointer to physical order of the addresses (R4) */
 80022d8:	08002110 	.word	0x08002110
  LDR   R4,=ISRCtrlFlowCntInv  /* Control flow control */
 80022dc:	20000058 	.word	0x20000058

080022e0 <STL_RunTimeCPUTest>:
  .section  .text.STL_RunTimeCPUTest
  .type  STL_RunTimeCPUTest, %function
  .size  STL_RunTimeCPUTest, .-STL_RunTimeCPUTest

STL_RunTimeCPUTest:
    PUSH {R4-R7}        /* Safe registers */
 80022e0:	b4f0      	push	{r4, r5, r6, r7}

    /* This is for control flow test (ENTRY point) */
    LDR R0,=CtrlFlowCnt
 80022e2:	485a      	ldr	r0, [pc, #360]	; (800244c <CPUTstCont+0xaa>)
    /* Assumes R1 OK   If not, error will be detected by R1 test and Ctrl flow test later on */
    LDR R1,[R0]
 80022e4:	6801      	ldr	r1, [r0, #0]
    ADDS R1,R1,#0x3	    /* CtrlFlowCnt += OxO3 */
 80022e6:	3103      	adds	r1, #3
    STR R1,[R0]
 80022e8:	6001      	str	r1, [r0, #0]

    /* Register R1 */
    LDR R0, =conAA
 80022ea:	4859      	ldr	r0, [pc, #356]	; (8002450 <CPUTstCont+0xae>)
    LDR R1,[R0]
 80022ec:	6801      	ldr	r1, [r0, #0]
    LDR R0,[R0]
 80022ee:	6800      	ldr	r0, [r0, #0]
    CMP R0,R1
 80022f0:	4288      	cmp	r0, r1
    BNE CPUTestFail
 80022f2:	d154      	bne.n	800239e <CPUTestFail>
    LDR R0, =con55
 80022f4:	4857      	ldr	r0, [pc, #348]	; (8002454 <CPUTstCont+0xb2>)
    LDR R1,[R0]
 80022f6:	6801      	ldr	r1, [r0, #0]
    LDR R0,[R0]
 80022f8:	6800      	ldr	r0, [r0, #0]
    CMP R0,R1
 80022fa:	4288      	cmp	r0, r1
    BNE CPUTestFail
 80022fc:	d14f      	bne.n	800239e <CPUTestFail>
    MOVS R1, #0x1        /* For ramp test */
 80022fe:	2101      	movs	r1, #1

    /* Register R2 */
    LDR R0, =conAA
 8002300:	4853      	ldr	r0, [pc, #332]	; (8002450 <CPUTstCont+0xae>)
    LDR R2,[R0]
 8002302:	6802      	ldr	r2, [r0, #0]
    LDR R0,[R0]
 8002304:	6800      	ldr	r0, [r0, #0]
    CMP R0,R2
 8002306:	4290      	cmp	r0, r2
    BNE CPUTestFail
 8002308:	d149      	bne.n	800239e <CPUTestFail>
    LDR R0, =con55
 800230a:	4852      	ldr	r0, [pc, #328]	; (8002454 <CPUTstCont+0xb2>)
    LDR R2,[R0]
 800230c:	6802      	ldr	r2, [r0, #0]
    LDR R0,[R0]
 800230e:	6800      	ldr	r0, [r0, #0]
    CMP R0,R2
 8002310:	4290      	cmp	r0, r2
    BNE CPUTestFail
 8002312:	d144      	bne.n	800239e <CPUTestFail>
    MOVS R2, #0x2          /* For ramp test */
 8002314:	2202      	movs	r2, #2

    /* Register R3 */
    LDR R0, =conAA
 8002316:	484e      	ldr	r0, [pc, #312]	; (8002450 <CPUTstCont+0xae>)
    LDR R3,[R0]
 8002318:	6803      	ldr	r3, [r0, #0]
    LDR R0,[R0]
 800231a:	6800      	ldr	r0, [r0, #0]
    CMP R0,R3
 800231c:	4298      	cmp	r0, r3
    BNE CPUTestFail
 800231e:	d13e      	bne.n	800239e <CPUTestFail>
    LDR R0, =con55
 8002320:	484c      	ldr	r0, [pc, #304]	; (8002454 <CPUTstCont+0xb2>)
    LDR R3,[R0]
 8002322:	6803      	ldr	r3, [r0, #0]
    LDR R0,[R0]
 8002324:	6800      	ldr	r0, [r0, #0]
    CMP R0,R3
 8002326:	4298      	cmp	r0, r3
    BNE CPUTestFail
 8002328:	d139      	bne.n	800239e <CPUTestFail>
    MOVS R3, #0x3          /* For ramp test */
 800232a:	2303      	movs	r3, #3

    /* Register R4 */
    LDR R0, =conAA
 800232c:	4848      	ldr	r0, [pc, #288]	; (8002450 <CPUTstCont+0xae>)
    LDR R4,[R0]
 800232e:	6804      	ldr	r4, [r0, #0]
    LDR R0,[R0]
 8002330:	6800      	ldr	r0, [r0, #0]
    CMP R0,R4
 8002332:	42a0      	cmp	r0, r4
    BNE CPUTestFail
 8002334:	d133      	bne.n	800239e <CPUTestFail>
    LDR R0, =con55
 8002336:	4847      	ldr	r0, [pc, #284]	; (8002454 <CPUTstCont+0xb2>)
    LDR R4,[R0]
 8002338:	6804      	ldr	r4, [r0, #0]
    LDR R0,[R0]
 800233a:	6800      	ldr	r0, [r0, #0]
    CMP R0,R4
 800233c:	42a0      	cmp	r0, r4
    BNE CPUTestFail
 800233e:	d12e      	bne.n	800239e <CPUTestFail>
    MOVS R4, #0x4           /* For ramp test */
 8002340:	2404      	movs	r4, #4

    /* Register R5 */
    LDR R0, =conAA
 8002342:	4843      	ldr	r0, [pc, #268]	; (8002450 <CPUTstCont+0xae>)
    LDR R5,[R0]
 8002344:	6805      	ldr	r5, [r0, #0]
    LDR R0,[R0]
 8002346:	6800      	ldr	r0, [r0, #0]
    CMP R0,R5
 8002348:	42a8      	cmp	r0, r5
    BNE CPUTestFail
 800234a:	d128      	bne.n	800239e <CPUTestFail>
    LDR R0, =con55
 800234c:	4841      	ldr	r0, [pc, #260]	; (8002454 <CPUTstCont+0xb2>)
    LDR R5,[R0]
 800234e:	6805      	ldr	r5, [r0, #0]
    LDR R0,[R0]
 8002350:	6800      	ldr	r0, [r0, #0]
    CMP R0,R5
 8002352:	42a8      	cmp	r0, r5
    BNE CPUTestFail
 8002354:	d123      	bne.n	800239e <CPUTestFail>
    MOVS R5, #0x5           /* For ramp test */
 8002356:	2505      	movs	r5, #5

    /* Register R6 */
    LDR R0, =conAA
 8002358:	483d      	ldr	r0, [pc, #244]	; (8002450 <CPUTstCont+0xae>)
    LDR R6,[R0]
 800235a:	6806      	ldr	r6, [r0, #0]
    LDR R0,[R0]
 800235c:	6800      	ldr	r0, [r0, #0]
    CMP R0,R6
 800235e:	42b0      	cmp	r0, r6
    BNE CPUTestFail
 8002360:	d11d      	bne.n	800239e <CPUTestFail>
    LDR R0, =con55
 8002362:	483c      	ldr	r0, [pc, #240]	; (8002454 <CPUTstCont+0xb2>)
    LDR R6,[R0]
 8002364:	6806      	ldr	r6, [r0, #0]
    LDR R0,[R0]
 8002366:	6800      	ldr	r0, [r0, #0]
    CMP R0,R6
 8002368:	42b0      	cmp	r0, r6
    BNE CPUTestFail
 800236a:	d118      	bne.n	800239e <CPUTestFail>
    MOVS R6, #0x6            /* For ramp test */
 800236c:	2606      	movs	r6, #6

    /* Register R7 */
    LDR R0, =conAA
 800236e:	4838      	ldr	r0, [pc, #224]	; (8002450 <CPUTstCont+0xae>)
    LDR R7,[R0]
 8002370:	6807      	ldr	r7, [r0, #0]
    LDR R0,[R0]
 8002372:	6800      	ldr	r0, [r0, #0]
    CMP R0,R7
 8002374:	42b8      	cmp	r0, r7
    BNE CPUTestFail
 8002376:	d112      	bne.n	800239e <CPUTestFail>
    LDR R0, =con55
 8002378:	4836      	ldr	r0, [pc, #216]	; (8002454 <CPUTstCont+0xb2>)
    LDR R7,[R0]
 800237a:	6807      	ldr	r7, [r0, #0]
    LDR R0,[R0]
 800237c:	6800      	ldr	r0, [r0, #0]
    CMP R0,R7
 800237e:	42b8      	cmp	r0, r7
    BNE CPUTestFail
 8002380:	d10d      	bne.n	800239e <CPUTestFail>
    MOVS R7, #0x7            /* For ramp test */
 8002382:	2707      	movs	r7, #7

    /* Register R8 */
    LDR R0, =conAA
 8002384:	4832      	ldr	r0, [pc, #200]	; (8002450 <CPUTstCont+0xae>)
    LDR R0,[R0]
 8002386:	6800      	ldr	r0, [r0, #0]
    MOV R8,R0
 8002388:	4680      	mov	r8, r0
    CMP R0,R8
 800238a:	4540      	cmp	r0, r8
    BNE CPUTestFail
 800238c:	d107      	bne.n	800239e <CPUTestFail>
    LDR R0, =con55
 800238e:	4831      	ldr	r0, [pc, #196]	; (8002454 <CPUTstCont+0xb2>)
    LDR R0,[R0]
 8002390:	6800      	ldr	r0, [r0, #0]
    MOV R8,R0
 8002392:	4680      	mov	r8, r0
    CMP R0,R8
 8002394:	4540      	cmp	r0, r8
    BNE CPUTestFail
 8002396:	d102      	bne.n	800239e <CPUTestFail>
    MOVS R0, #0x08           /* For ramp test */
 8002398:	2008      	movs	r0, #8
    MOV	R8,R0
 800239a:	4680      	mov	r8, r0

    BAL CPUTstCont
 800239c:	e001      	b.n	80023a2 <CPUTstCont>

0800239e <CPUTestFail>:

CPUTestFail:
    BLAL FailSafePOR
 800239e:	f7fe fef1 	bl	8001184 <FailSafePOR>

080023a2 <CPUTstCont>:

CPUTstCont:
    /* Register R9 */
    LDR R0, =conAA
 80023a2:	482b      	ldr	r0, [pc, #172]	; (8002450 <CPUTstCont+0xae>)
    LDR R0,[R0]
 80023a4:	6800      	ldr	r0, [r0, #0]
    MOV R9,R0
 80023a6:	4681      	mov	r9, r0
    CMP R0,R9
 80023a8:	4548      	cmp	r0, r9
    BNE CPUTestFail
 80023aa:	d1f8      	bne.n	800239e <CPUTestFail>
    LDR R0, =con55
 80023ac:	4829      	ldr	r0, [pc, #164]	; (8002454 <CPUTstCont+0xb2>)
    LDR R0,[R0]
 80023ae:	6800      	ldr	r0, [r0, #0]
    MOV R9,R0
 80023b0:	4681      	mov	r9, r0
    CMP R0,R9
 80023b2:	4548      	cmp	r0, r9
    BNE CPUTestFail
 80023b4:	d1f3      	bne.n	800239e <CPUTestFail>
    MOVS R0, #0x09            /* For ramp test */
 80023b6:	2009      	movs	r0, #9
    MOV	R9,R0
 80023b8:	4681      	mov	r9, r0

    /* Register R10 */
    LDR R0, =conAA
 80023ba:	4825      	ldr	r0, [pc, #148]	; (8002450 <CPUTstCont+0xae>)
    LDR R0,[R0]
 80023bc:	6800      	ldr	r0, [r0, #0]
    MOV R10,R0
 80023be:	4682      	mov	sl, r0
    CMP R0,R10
 80023c0:	4550      	cmp	r0, sl
    BNE CPUTestFail
 80023c2:	d1ec      	bne.n	800239e <CPUTestFail>
    LDR R0, =con55
 80023c4:	4823      	ldr	r0, [pc, #140]	; (8002454 <CPUTstCont+0xb2>)
    LDR R0,[R0]
 80023c6:	6800      	ldr	r0, [r0, #0]
    MOV R10,R0
 80023c8:	4682      	mov	sl, r0
    CMP R0,R10
 80023ca:	4550      	cmp	r0, sl
    BNE CPUTestFail
 80023cc:	d1e7      	bne.n	800239e <CPUTestFail>
    MOVS R0, #0x0A           /* For ramp test */
 80023ce:	200a      	movs	r0, #10
    MOV	R10,R0
 80023d0:	4682      	mov	sl, r0

    /* Register R11 */
    LDR R0, =conAA
 80023d2:	481f      	ldr	r0, [pc, #124]	; (8002450 <CPUTstCont+0xae>)
    LDR R0,[R0]
 80023d4:	6800      	ldr	r0, [r0, #0]
    MOV R11,R0
 80023d6:	4683      	mov	fp, r0
    CMP R0,R11
 80023d8:	4558      	cmp	r0, fp
    BNE CPUTestFail
 80023da:	d1e0      	bne.n	800239e <CPUTestFail>
    LDR R0, =con55
 80023dc:	481d      	ldr	r0, [pc, #116]	; (8002454 <CPUTstCont+0xb2>)
    LDR R0,[R0]
 80023de:	6800      	ldr	r0, [r0, #0]
    MOV R11,R0
 80023e0:	4683      	mov	fp, r0
    CMP R0,R11
 80023e2:	4558      	cmp	r0, fp
    BNE CPUTestFail
 80023e4:	d1db      	bne.n	800239e <CPUTestFail>
    MOVS R0, #0x0B           /* For ramp test */
 80023e6:	200b      	movs	r0, #11
    MOV	R11,R0
 80023e8:	4683      	mov	fp, r0

    /* Register R12 */
    LDR R0, =conAA
 80023ea:	4819      	ldr	r0, [pc, #100]	; (8002450 <CPUTstCont+0xae>)
    LDR R0,[R0]
 80023ec:	6800      	ldr	r0, [r0, #0]
    MOV R12,R0
 80023ee:	4684      	mov	ip, r0
    CMP R0,R12
 80023f0:	4560      	cmp	r0, ip
    BNE CPUTestFail
 80023f2:	d1d4      	bne.n	800239e <CPUTestFail>
    LDR R0, =con55
 80023f4:	4817      	ldr	r0, [pc, #92]	; (8002454 <CPUTstCont+0xb2>)
    LDR R0,[R0]
 80023f6:	6800      	ldr	r0, [r0, #0]
    MOV R12,R0
 80023f8:	4684      	mov	ip, r0
    CMP R0,R12
 80023fa:	4560      	cmp	r0, ip
    BNE CPUTestFail
 80023fc:	d1cf      	bne.n	800239e <CPUTestFail>
    MOVS R0, #0x0C            /* For ramp test */
 80023fe:	200c      	movs	r0, #12
    MOV	R12,R0
 8002400:	4684      	mov	ip, r0
    LDR R0, =CPUTstCont
 8002402:	4815      	ldr	r0, [pc, #84]	; (8002458 <CPUTstCont+0xb6>)

    /* Link register R14	cannot be tested an error should be detected by	Ctrl flow test later */

    /* Ramp pattern verification	(R0 is not tested) */
    CMP R1, #0x01
 8002404:	2901      	cmp	r1, #1
    BNE CPUTestFail
 8002406:	d1ca      	bne.n	800239e <CPUTestFail>
    CMP R2, #0x02
 8002408:	2a02      	cmp	r2, #2
    BNE CPUTestFail
 800240a:	d1c8      	bne.n	800239e <CPUTestFail>
    CMP R3, #0x03
 800240c:	2b03      	cmp	r3, #3
    BNE CPUTestFail
 800240e:	d1c6      	bne.n	800239e <CPUTestFail>
    CMP R4, #0x04
 8002410:	2c04      	cmp	r4, #4
    BNE CPUTestFail
 8002412:	d1c4      	bne.n	800239e <CPUTestFail>
    CMP R5, #0x05
 8002414:	2d05      	cmp	r5, #5
    BNE CPUTestFail
 8002416:	d1c2      	bne.n	800239e <CPUTestFail>
    CMP R6, #0x06
 8002418:	2e06      	cmp	r6, #6
    BNE CPUTestFail
 800241a:	d1c0      	bne.n	800239e <CPUTestFail>
    CMP R7, #0x07
 800241c:	2f07      	cmp	r7, #7
    BNE CPUTestFail
 800241e:	d1be      	bne.n	800239e <CPUTestFail>
    MOVS R0, #0x08
 8002420:	2008      	movs	r0, #8
    CMP R0,R8
 8002422:	4540      	cmp	r0, r8
    BNE CPUTestFail
 8002424:	d1bb      	bne.n	800239e <CPUTestFail>
    MOVS R0, #0x09
 8002426:	2009      	movs	r0, #9
    CMP R0,R9
 8002428:	4548      	cmp	r0, r9
    BNE CPUTestFail
 800242a:	d1b8      	bne.n	800239e <CPUTestFail>
    MOVS R0, #0x0A
 800242c:	200a      	movs	r0, #10
    CMP R0,R10
 800242e:	4550      	cmp	r0, sl
    BNE CPUTestFail
 8002430:	d1b5      	bne.n	800239e <CPUTestFail>
    MOVS R0, #0x0B
 8002432:	200b      	movs	r0, #11
    CMP R0,R11
 8002434:	4558      	cmp	r0, fp
    BNE CPUTestFail
 8002436:	d1b2      	bne.n	800239e <CPUTestFail>
    MOVS R0, #0x0C
 8002438:	200c      	movs	r0, #12
    CMP R0,R12
 800243a:	4560      	cmp	r0, ip
    BNE CPUTestFail
 800243c:	d1af      	bne.n	800239e <CPUTestFail>

    /* Control flow test (EXIT point) */
    LDR R0,=CtrlFlowCntInv
 800243e:	4807      	ldr	r0, [pc, #28]	; (800245c <CPUTstCont+0xba>)
    LDR R1,[R0]
 8002440:	6801      	ldr	r1, [r0, #0]
    SUBS R1,R1,#0x3	    /* CtrlFlowCntInv -= OxO3 */
 8002442:	3903      	subs	r1, #3
    STR R1,[R0]
 8002444:	6001      	str	r1, [r0, #0]

    POP {R4-R7}         /* Restore registers */
 8002446:	bcf0      	pop	{r4, r5, r6, r7}

    MOVS R0, #0x1       /* CPUTEST_SUCCESS */
 8002448:	2001      	movs	r0, #1
    BX LR               /* return to the caller */
 800244a:	4770      	bx	lr
    LDR R0,=CtrlFlowCnt
 800244c:	20000030 	.word	0x20000030
    LDR R0, =conAA
 8002450:	08002460 	.word	0x08002460
    LDR R0, =con55
 8002454:	08002464 	.word	0x08002464
    LDR R0, =CPUTstCont
 8002458:	080023a2 	.word	0x080023a2
    LDR R0,=CtrlFlowCntInv
 800245c:	20000054 	.word	0x20000054

08002460 <__TEST_PATTERNS>:
 8002460:	aaaaaaaa                                ....

08002464 <con55>:
 8002464:	55555555 	.word	0x55555555

08002468 <con80>:
 8002468:	80000000 	.word	0x80000000

0800246c <conA8>:
 800246c:	aaaaaaa8 	.word	0xaaaaaaa8

08002470 <con54>:
 8002470:	55555554 	.word	0x55555554

08002474 <STL_StartUpCPUTest>:
  .section  .text.STL_StartUpCPUTest
  .type  STL_StartUpCPUTest, %function
  .size  STL_StartUpCPUTest, .-STL_StartUpCPUTest

STL_StartUpCPUTest:
    PUSH {R4-R6}               /* Safe critical registers */
 8002474:	b470      	push	{r4, r5, r6}

    MOVS R0, #0x00      	  
 8002476:	2000      	movs	r0, #0
    UXTB R0,R0
 8002478:	b2c0      	uxtb	r0, r0
    ADDS R0,#0				   /* Set Z(ero) Flag */
 800247a:	3000      	adds	r0, #0
    BNE CPUTestFail            /* Fails if Z clear */
 800247c:	d168      	bne.n	8002550 <CPUTestFail>
    BMI CPUTestFail            /* Fails if N is set */
 800247e:	d467      	bmi.n	8002550 <CPUTestFail>
    SUBS R0,#1                 /* Set N(egative) Flag */
 8002480:	3801      	subs	r0, #1
    BPL CPUTestFail            /* Fails if N clear */
 8002482:	d565      	bpl.n	8002550 <CPUTestFail>
    ADDS R0,#2                 /* Set C(arry) Flag and do not set Z */
 8002484:	3002      	adds	r0, #2
    BCC CPUTestFail            /* Fails if C clear */
 8002486:	d363      	bcc.n	8002550 <CPUTestFail>
    BEQ CPUTestFail            /* Fails if Z is set */
 8002488:	d062      	beq.n	8002550 <CPUTestFail>
    BMI CPUTestFail            /* Fails if N is set */
 800248a:	d461      	bmi.n	8002550 <CPUTestFail>

    LDR R0,=con80      	  	   /* Prepares Overflow test */
 800248c:	4870      	ldr	r0, [pc, #448]	; (8002650 <CPUTstCont+0xfc>)
    LDR R0,[R0]
 800248e:	6800      	ldr	r0, [r0, #0]
    ADDS R0, R0, R0            /* Set V(overflow) Flag */
 8002490:	1800      	adds	r0, r0, r0
    BVC CPUTestFail            /* Fails if V clear */
 8002492:	d75d      	bvc.n	8002550 <CPUTestFail>

    /*  This is for control flow test (ENTRY point) */
    LDR R0,=CtrlFlowCnt
 8002494:	486f      	ldr	r0, [pc, #444]	; (8002654 <CPUTstCont+0x100>)
    /* Assumes R1 OK If not, error will be detected by R1 test and Ctrl flow test later on */
    LDR R1,[R0]
 8002496:	6801      	ldr	r1, [r0, #0]
    ADDS R1,R1,#0x3	           /* CtrlFlowCnt += OxO3 */
 8002498:	3103      	adds	r1, #3
    STR R1,[R0]
 800249a:	6001      	str	r1, [r0, #0]

    /* Register R1 */
    LDR R0, =conAA
 800249c:	486e      	ldr	r0, [pc, #440]	; (8002658 <CPUTstCont+0x104>)
    LDR R1,[R0]
 800249e:	6801      	ldr	r1, [r0, #0]
    LDR R0,[R0]
 80024a0:	6800      	ldr	r0, [r0, #0]
    CMP R0,R1
 80024a2:	4288      	cmp	r0, r1
    BNE CPUTestFail
 80024a4:	d154      	bne.n	8002550 <CPUTestFail>
    LDR R0, =con55
 80024a6:	486d      	ldr	r0, [pc, #436]	; (800265c <CPUTstCont+0x108>)
    LDR R1,[R0]
 80024a8:	6801      	ldr	r1, [r0, #0]
    LDR R0,[R0]
 80024aa:	6800      	ldr	r0, [r0, #0]
    CMP R0,R1
 80024ac:	4288      	cmp	r0, r1
    BNE CPUTestFail
 80024ae:	d14f      	bne.n	8002550 <CPUTestFail>
    MOVS R1, #0x1              /* For ramp test */
 80024b0:	2101      	movs	r1, #1

    /* Register R2 */
    LDR R0, =conAA
 80024b2:	4869      	ldr	r0, [pc, #420]	; (8002658 <CPUTstCont+0x104>)
    LDR R2,[R0]
 80024b4:	6802      	ldr	r2, [r0, #0]
    LDR R0,[R0]
 80024b6:	6800      	ldr	r0, [r0, #0]
    CMP R0,R2
 80024b8:	4290      	cmp	r0, r2
    BNE CPUTestFail
 80024ba:	d149      	bne.n	8002550 <CPUTestFail>
    LDR R0, =con55
 80024bc:	4867      	ldr	r0, [pc, #412]	; (800265c <CPUTstCont+0x108>)
    LDR R2,[R0]
 80024be:	6802      	ldr	r2, [r0, #0]
    LDR R0,[R0]
 80024c0:	6800      	ldr	r0, [r0, #0]
    CMP R0,R2
 80024c2:	4290      	cmp	r0, r2
    BNE CPUTestFail
 80024c4:	d144      	bne.n	8002550 <CPUTestFail>
    MOVS R2, #0x2              /* For ramp test */
 80024c6:	2202      	movs	r2, #2

    /* Register R3 */
    LDR R0, =conAA
 80024c8:	4863      	ldr	r0, [pc, #396]	; (8002658 <CPUTstCont+0x104>)
    LDR R3,[R0]
 80024ca:	6803      	ldr	r3, [r0, #0]
    LDR R0,[R0]
 80024cc:	6800      	ldr	r0, [r0, #0]
    CMP R0,R3
 80024ce:	4298      	cmp	r0, r3
    BNE CPUTestFail
 80024d0:	d13e      	bne.n	8002550 <CPUTestFail>
    LDR R0, =con55
 80024d2:	4862      	ldr	r0, [pc, #392]	; (800265c <CPUTstCont+0x108>)
    LDR R3,[R0]
 80024d4:	6803      	ldr	r3, [r0, #0]
    LDR R0,[R0]
 80024d6:	6800      	ldr	r0, [r0, #0]
    CMP R0,R3
 80024d8:	4298      	cmp	r0, r3
    BNE CPUTestFail
 80024da:	d139      	bne.n	8002550 <CPUTestFail>
    MOVS R3, #0x3              /* For ramp test */
 80024dc:	2303      	movs	r3, #3

    /* Register R4 */
    LDR R0, =conAA
 80024de:	485e      	ldr	r0, [pc, #376]	; (8002658 <CPUTstCont+0x104>)
    LDR R4,[R0]
 80024e0:	6804      	ldr	r4, [r0, #0]
    LDR R0,[R0]
 80024e2:	6800      	ldr	r0, [r0, #0]
    CMP R0,R4
 80024e4:	42a0      	cmp	r0, r4
    BNE CPUTestFail
 80024e6:	d133      	bne.n	8002550 <CPUTestFail>
    LDR R0, =con55
 80024e8:	485c      	ldr	r0, [pc, #368]	; (800265c <CPUTstCont+0x108>)
    LDR R4,[R0]
 80024ea:	6804      	ldr	r4, [r0, #0]
    LDR R0,[R0]
 80024ec:	6800      	ldr	r0, [r0, #0]
    CMP R0,R4
 80024ee:	42a0      	cmp	r0, r4
    BNE CPUTestFail
 80024f0:	d12e      	bne.n	8002550 <CPUTestFail>
    MOVS R4, #0x4              /* For ramp test */
 80024f2:	2404      	movs	r4, #4

    /* Register R5 */
    LDR R0, =conAA
 80024f4:	4858      	ldr	r0, [pc, #352]	; (8002658 <CPUTstCont+0x104>)
    LDR R5,[R0]
 80024f6:	6805      	ldr	r5, [r0, #0]
    LDR R0,[R0]
 80024f8:	6800      	ldr	r0, [r0, #0]
    CMP R0,R5
 80024fa:	42a8      	cmp	r0, r5
    BNE CPUTestFail
 80024fc:	d128      	bne.n	8002550 <CPUTestFail>
    LDR R0, =con55
 80024fe:	4857      	ldr	r0, [pc, #348]	; (800265c <CPUTstCont+0x108>)
    LDR R5,[R0]
 8002500:	6805      	ldr	r5, [r0, #0]
    LDR R0,[R0]
 8002502:	6800      	ldr	r0, [r0, #0]
    CMP R0,R5
 8002504:	42a8      	cmp	r0, r5
    BNE CPUTestFail
 8002506:	d123      	bne.n	8002550 <CPUTestFail>
    MOVS R5, #0x5              /* For ramp test */
 8002508:	2505      	movs	r5, #5

    /* Register R6 */
    LDR R0, =conAA
 800250a:	4853      	ldr	r0, [pc, #332]	; (8002658 <CPUTstCont+0x104>)
    LDR R6,[R0]
 800250c:	6806      	ldr	r6, [r0, #0]
    LDR R0,[R0]
 800250e:	6800      	ldr	r0, [r0, #0]
    CMP R0,R6
 8002510:	42b0      	cmp	r0, r6
    BNE CPUTestFail
 8002512:	d11d      	bne.n	8002550 <CPUTestFail>
    LDR R0, =con55
 8002514:	4851      	ldr	r0, [pc, #324]	; (800265c <CPUTstCont+0x108>)
    LDR R6,[R0]
 8002516:	6806      	ldr	r6, [r0, #0]
    LDR R0,[R0]
 8002518:	6800      	ldr	r0, [r0, #0]
    CMP R0,R6
 800251a:	42b0      	cmp	r0, r6
    BNE CPUTestFail
 800251c:	d118      	bne.n	8002550 <CPUTestFail>
    MOVS R6, #0x6              /* For ramp test */
 800251e:	2606      	movs	r6, #6

    /* Register R7 */
    LDR R0, =conAA
 8002520:	484d      	ldr	r0, [pc, #308]	; (8002658 <CPUTstCont+0x104>)
    LDR R7,[R0]
 8002522:	6807      	ldr	r7, [r0, #0]
    LDR R0,[R0]
 8002524:	6800      	ldr	r0, [r0, #0]
    CMP R0,R7
 8002526:	42b8      	cmp	r0, r7
    BNE CPUTestFail
 8002528:	d112      	bne.n	8002550 <CPUTestFail>
    LDR R0, =con55
 800252a:	484c      	ldr	r0, [pc, #304]	; (800265c <CPUTstCont+0x108>)
    LDR R7,[R0]
 800252c:	6807      	ldr	r7, [r0, #0]
    LDR R0,[R0]
 800252e:	6800      	ldr	r0, [r0, #0]
    CMP R0,R7
 8002530:	42b8      	cmp	r0, r7
    BNE CPUTestFail
 8002532:	d10d      	bne.n	8002550 <CPUTestFail>
    MOVS R7, #0x7              /* For ramp test */
 8002534:	2707      	movs	r7, #7

    /* Register R8 */
    LDR R0, =conAA
 8002536:	4848      	ldr	r0, [pc, #288]	; (8002658 <CPUTstCont+0x104>)
    LDR R0,[R0]
 8002538:	6800      	ldr	r0, [r0, #0]
    MOV R8,R0
 800253a:	4680      	mov	r8, r0
    CMP R0,R8
 800253c:	4540      	cmp	r0, r8
    BNE CPUTestFail
 800253e:	d107      	bne.n	8002550 <CPUTestFail>
    LDR R0, =con55
 8002540:	4846      	ldr	r0, [pc, #280]	; (800265c <CPUTstCont+0x108>)
    LDR R0,[R0]
 8002542:	6800      	ldr	r0, [r0, #0]
    MOV R8,R0
 8002544:	4680      	mov	r8, r0
    CMP R0,R8
 8002546:	4540      	cmp	r0, r8
    BNE CPUTestFail
 8002548:	d102      	bne.n	8002550 <CPUTestFail>
    MOVS R0, #0x08             /* For ramp test */
 800254a:	2008      	movs	r0, #8
    MOV	R8,R0
 800254c:	4680      	mov	r8, r0

    BAL CPUTstCont
 800254e:	e001      	b.n	8002554 <CPUTstCont>

08002550 <CPUTestFail>:

CPUTestFail:
    BLAL FailSafePOR
 8002550:	f7fe fe18 	bl	8001184 <FailSafePOR>

08002554 <CPUTstCont>:

CPUTstCont:
    /* Register R9 */
    LDR R0, =conAA
 8002554:	4840      	ldr	r0, [pc, #256]	; (8002658 <CPUTstCont+0x104>)
    LDR R0,[R0]
 8002556:	6800      	ldr	r0, [r0, #0]
    MOV R9,R0
 8002558:	4681      	mov	r9, r0
    CMP R0,R9
 800255a:	4548      	cmp	r0, r9
    BNE CPUTestFail
 800255c:	d1f8      	bne.n	8002550 <CPUTestFail>
    LDR R0, =con55
 800255e:	483f      	ldr	r0, [pc, #252]	; (800265c <CPUTstCont+0x108>)
    LDR R0,[R0]
 8002560:	6800      	ldr	r0, [r0, #0]
    MOV R9,R0
 8002562:	4681      	mov	r9, r0
    CMP R0,R9
 8002564:	4548      	cmp	r0, r9
    BNE CPUTestFail
 8002566:	d1f3      	bne.n	8002550 <CPUTestFail>
    MOVS R0, #0x09             /* For ramp test */
 8002568:	2009      	movs	r0, #9
    MOV	R9,R0
 800256a:	4681      	mov	r9, r0

    /* Register R10 */
    LDR R0, =conAA
 800256c:	483a      	ldr	r0, [pc, #232]	; (8002658 <CPUTstCont+0x104>)
    LDR R0,[R0]
 800256e:	6800      	ldr	r0, [r0, #0]
    MOV R10,R0
 8002570:	4682      	mov	sl, r0
    CMP R0,R10
 8002572:	4550      	cmp	r0, sl
    BNE CPUTestFail
 8002574:	d1ec      	bne.n	8002550 <CPUTestFail>
    LDR R0, =con55
 8002576:	4839      	ldr	r0, [pc, #228]	; (800265c <CPUTstCont+0x108>)
    LDR R0,[R0]
 8002578:	6800      	ldr	r0, [r0, #0]
    MOV R10,R0
 800257a:	4682      	mov	sl, r0
    CMP R0,R10
 800257c:	4550      	cmp	r0, sl
    BNE CPUTestFail
 800257e:	d1e7      	bne.n	8002550 <CPUTestFail>
    MOVS R0, #0x0A             /* For ramp test */
 8002580:	200a      	movs	r0, #10
    MOV	R10,R0
 8002582:	4682      	mov	sl, r0

    /* Register R11 */
    LDR R0, =conAA
 8002584:	4834      	ldr	r0, [pc, #208]	; (8002658 <CPUTstCont+0x104>)
    LDR R0,[R0]
 8002586:	6800      	ldr	r0, [r0, #0]
    MOV R11,R0
 8002588:	4683      	mov	fp, r0
    CMP R0,R11
 800258a:	4558      	cmp	r0, fp
    BNE CPUTestFail
 800258c:	d1e0      	bne.n	8002550 <CPUTestFail>
    LDR R0, =con55
 800258e:	4833      	ldr	r0, [pc, #204]	; (800265c <CPUTstCont+0x108>)
    LDR R0,[R0]
 8002590:	6800      	ldr	r0, [r0, #0]
    MOV R11,R0
 8002592:	4683      	mov	fp, r0
    CMP R0,R11
 8002594:	4558      	cmp	r0, fp
    BNE CPUTestFail
 8002596:	d1db      	bne.n	8002550 <CPUTestFail>
    MOVS R0, #0x0B             /* For ramp test */
 8002598:	200b      	movs	r0, #11
    MOV	R11,R0
 800259a:	4683      	mov	fp, r0

    /* Register R12 */
    LDR R0, =conAA
 800259c:	482e      	ldr	r0, [pc, #184]	; (8002658 <CPUTstCont+0x104>)
    LDR R0,[R0]
 800259e:	6800      	ldr	r0, [r0, #0]
    MOV R12,R0
 80025a0:	4684      	mov	ip, r0
    CMP R0,R12
 80025a2:	4560      	cmp	r0, ip
    BNE CPUTestFail
 80025a4:	d1d4      	bne.n	8002550 <CPUTestFail>
    LDR R0, =con55
 80025a6:	482d      	ldr	r0, [pc, #180]	; (800265c <CPUTstCont+0x108>)
    LDR R0,[R0]
 80025a8:	6800      	ldr	r0, [r0, #0]
    MOV R12,R0
 80025aa:	4684      	mov	ip, r0
    CMP R0,R12
 80025ac:	4560      	cmp	r0, ip
    BNE CPUTestFail
 80025ae:	d1cf      	bne.n	8002550 <CPUTestFail>
    MOVS R0, #0x0C             /* For ramp test */
 80025b0:	200c      	movs	r0, #12
    MOV	R12,R0
 80025b2:	4684      	mov	ip, r0
    LDR R0, =CPUTstCont
 80025b4:	482a      	ldr	r0, [pc, #168]	; (8002660 <CPUTstCont+0x10c>)

    /* Ramp pattern verification	(R0 is not tested) */
    CMP R1, #0x01
 80025b6:	2901      	cmp	r1, #1
    BNE CPUTestFail
 80025b8:	d1ca      	bne.n	8002550 <CPUTestFail>
    CMP R2, #0x02
 80025ba:	2a02      	cmp	r2, #2
    BNE CPUTestFail
 80025bc:	d1c8      	bne.n	8002550 <CPUTestFail>
    CMP R3, #0x03
 80025be:	2b03      	cmp	r3, #3
    BNE CPUTestFail
 80025c0:	d1c6      	bne.n	8002550 <CPUTestFail>
    CMP R4, #0x04
 80025c2:	2c04      	cmp	r4, #4
    BNE CPUTestFail
 80025c4:	d1c4      	bne.n	8002550 <CPUTestFail>
    CMP R5, #0x05
 80025c6:	2d05      	cmp	r5, #5
    BNE CPUTestFail
 80025c8:	d1c2      	bne.n	8002550 <CPUTestFail>
    CMP R6, #0x06
 80025ca:	2e06      	cmp	r6, #6
    BNE CPUTestFail
 80025cc:	d1c0      	bne.n	8002550 <CPUTestFail>
    CMP R7, #0x07
 80025ce:	2f07      	cmp	r7, #7
    BNE CPUTestFail
 80025d0:	d1be      	bne.n	8002550 <CPUTestFail>
    MOVS R0, #0x08
 80025d2:	2008      	movs	r0, #8
    CMP R0,R8
 80025d4:	4540      	cmp	r0, r8
    BNE CPUTestFail
 80025d6:	d1bb      	bne.n	8002550 <CPUTestFail>
    MOVS R0, #0x09
 80025d8:	2009      	movs	r0, #9
    CMP R0,R9
 80025da:	4548      	cmp	r0, r9
    BNE CPUTestFail
 80025dc:	d1b8      	bne.n	8002550 <CPUTestFail>
    MOVS R0, #0x0A
 80025de:	200a      	movs	r0, #10
    CMP R0,R10
 80025e0:	4550      	cmp	r0, sl
    BNE CPUTestFail
 80025e2:	d1b5      	bne.n	8002550 <CPUTestFail>
    MOVS R0, #0x0B
 80025e4:	200b      	movs	r0, #11
    CMP R0,R11
 80025e6:	4558      	cmp	r0, fp
    BNE CPUTestFail
 80025e8:	d1b2      	bne.n	8002550 <CPUTestFail>
    MOVS R0, #0x0C
 80025ea:	200c      	movs	r0, #12
    CMP R0,R12
 80025ec:	4560      	cmp	r0, ip
    BNE CPUTestFail
 80025ee:	d1af      	bne.n	8002550 <CPUTestFail>

    /* Process Stack pointer (banked Register R13) */
    MRS R0,PSP           /* Save process stack value */
 80025f0:	f3ef 8009 	mrs	r0, PSP
    LDR R1, =conA8       /* Test is different (PSP is word aligned, 2 LSB cleared) */
 80025f4:	491b      	ldr	r1, [pc, #108]	; (8002664 <CPUTstCont+0x110>)
    LDR R1,[R1]
 80025f6:	6809      	ldr	r1, [r1, #0]
    MSR PSP,R1           /* load process stack value */
 80025f8:	f381 8809 	msr	PSP, r1
    MRS R2,PSP           /* Get back process stack value */
 80025fc:	f3ef 8209 	mrs	r2, PSP
    CMP R2,R1            /* Verify value */
 8002600:	428a      	cmp	r2, r1
    BNE CPUTestFail
 8002602:	d1a5      	bne.n	8002550 <CPUTestFail>
    LDR R1, =con54       /* Test is different (PSP is word aligned, 2 LSB cleared) */
 8002604:	4918      	ldr	r1, [pc, #96]	; (8002668 <CPUTstCont+0x114>)
    LDR R1,[R1]
 8002606:	6809      	ldr	r1, [r1, #0]
    MSR PSP,R1           /* load process stack value */
 8002608:	f381 8809 	msr	PSP, r1
    MRS R2,PSP           /* Get back process stack value */
 800260c:	f3ef 8209 	mrs	r2, PSP
    CMP R2,R1            /* Verify value */
 8002610:	428a      	cmp	r2, r1
    BNE CPUTestFail
 8002612:	d19d      	bne.n	8002550 <CPUTestFail>
    MSR PSP, R0          /* Restore process stack value */
 8002614:	f380 8809 	msr	PSP, r0

    /* Stack pointer (Register R13) */
    MRS R0,MSP           /* Save stack pointer value */
 8002618:	f3ef 8008 	mrs	r0, MSP
    LDR R1, =conA8       /* Test is different (SP is word aligned, 2 LSB cleared) */
 800261c:	4911      	ldr	r1, [pc, #68]	; (8002664 <CPUTstCont+0x110>)
    LDR R1,[R1]
 800261e:	6809      	ldr	r1, [r1, #0]
    MSR MSP,R1			 /* load SP value */
 8002620:	f381 8808 	msr	MSP, r1
    MRS R2,MSP			 /* Get back SP value */
 8002624:	f3ef 8208 	mrs	r2, MSP
    CMP R2,R1			 /* Verify value */
 8002628:	428a      	cmp	r2, r1
    BNE CPUTestFail
 800262a:	d191      	bne.n	8002550 <CPUTestFail>
    LDR R1, =con54
 800262c:	490e      	ldr	r1, [pc, #56]	; (8002668 <CPUTstCont+0x114>)
    LDR R1,[R1]			 /* load SP value */
 800262e:	6809      	ldr	r1, [r1, #0]
    MSR MSP,R1			 /* Get back SP value */
 8002630:	f381 8808 	msr	MSP, r1
    MRS R2,MSP			 /* Verify value */
 8002634:	f3ef 8208 	mrs	r2, MSP
    CMP R2,R1
 8002638:	428a      	cmp	r2, r1
    BNE CPUTestFail
 800263a:	d189      	bne.n	8002550 <CPUTestFail>
    MSR MSP,R0			 /* Restore stack pointer value */
 800263c:	f380 8808 	msr	MSP, r0

    /* Link register R14	cannot be tested an error should be detected by	Ctrl flow test later */

    /* Control flow test (EXIT point) */
    LDR R0,=CtrlFlowCntInv
 8002640:	480a      	ldr	r0, [pc, #40]	; (800266c <CPUTstCont+0x118>)
    LDR R1,[R0]
 8002642:	6801      	ldr	r1, [r0, #0]
    SUBS R1,R1,#0x3	     /* CtrlFlowCntInv -= OxO3 */
 8002644:	3903      	subs	r1, #3
    STR R1,[R0]
 8002646:	6001      	str	r1, [r0, #0]

    POP {R4-R6}			 /* Restore critical registers */
 8002648:	bc70      	pop	{r4, r5, r6}

    /* If next instruction is not executed, R0 will hold a value different from 0 */
    MOVS R0, #0x1        /* CPUTEST_SUCCESS */
 800264a:	2001      	movs	r0, #1
    BX LR                /* return to the caller */
 800264c:	4770      	bx	lr
 800264e:	0000      	.short	0x0000
    LDR R0,=con80      	  	   /* Prepares Overflow test */
 8002650:	08002468 	.word	0x08002468
    LDR R0,=CtrlFlowCnt
 8002654:	20000030 	.word	0x20000030
    LDR R0, =conAA
 8002658:	08002460 	.word	0x08002460
    LDR R0, =con55
 800265c:	08002464 	.word	0x08002464
    LDR R0, =CPUTstCont
 8002660:	08002554 	.word	0x08002554
    LDR R1, =conA8       /* Test is different (PSP is word aligned, 2 LSB cleared) */
 8002664:	0800246c 	.word	0x0800246c
    LDR R1, =con54       /* Test is different (PSP is word aligned, 2 LSB cleared) */
 8002668:	08002470 	.word	0x08002470
    LDR R0,=CtrlFlowCntInv
 800266c:	20000054 	.word	0x20000054

08002670 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002676:	1dfb      	adds	r3, r7, #7
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_Init+0x3c>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <HAL_Init+0x3c>)
 8002682:	2140      	movs	r1, #64	; 0x40
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002688:	2003      	movs	r0, #3
 800268a:	f000 f811 	bl	80026b0 <HAL_InitTick>
 800268e:	1e03      	subs	r3, r0, #0
 8002690:	d003      	beq.n	800269a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002692:	1dfb      	adds	r3, r7, #7
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e001      	b.n	800269e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800269a:	f7ff f9e1 	bl	8001a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800269e:	1dfb      	adds	r3, r7, #7
 80026a0:	781b      	ldrb	r3, [r3, #0]
}
 80026a2:	0018      	movs	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b002      	add	sp, #8
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	40022000 	.word	0x40022000

080026b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <HAL_InitTick+0x5c>)
 80026ba:	681c      	ldr	r4, [r3, #0]
 80026bc:	4b14      	ldr	r3, [pc, #80]	; (8002710 <HAL_InitTick+0x60>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	0019      	movs	r1, r3
 80026c2:	23fa      	movs	r3, #250	; 0xfa
 80026c4:	0098      	lsls	r0, r3, #2
 80026c6:	f7fd fd29 	bl	800011c <__udivsi3>
 80026ca:	0003      	movs	r3, r0
 80026cc:	0019      	movs	r1, r3
 80026ce:	0020      	movs	r0, r4
 80026d0:	f7fd fd24 	bl	800011c <__udivsi3>
 80026d4:	0003      	movs	r3, r0
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 f921 	bl	800291e <HAL_SYSTICK_Config>
 80026dc:	1e03      	subs	r3, r0, #0
 80026de:	d001      	beq.n	80026e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e00f      	b.n	8002704 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d80b      	bhi.n	8002702 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	2301      	movs	r3, #1
 80026ee:	425b      	negs	r3, r3
 80026f0:	2200      	movs	r2, #0
 80026f2:	0018      	movs	r0, r3
 80026f4:	f000 f8ea 	bl	80028cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_InitTick+0x64>)
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	e000      	b.n	8002704 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
}
 8002704:	0018      	movs	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	b003      	add	sp, #12
 800270a:	bd90      	pop	{r4, r7, pc}
 800270c:	20000080 	.word	0x20000080
 8002710:	20000088 	.word	0x20000088
 8002714:	20000084 	.word	0x20000084

08002718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_IncTick+0x1c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	001a      	movs	r2, r3
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_IncTick+0x20>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	18d2      	adds	r2, r2, r3
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_IncTick+0x20>)
 800272a:	601a      	str	r2, [r3, #0]
}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	20000088 	.word	0x20000088
 8002738:	2000022c 	.word	0x2000022c

0800273c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  return uwTick;
 8002740:	4b02      	ldr	r3, [pc, #8]	; (800274c <HAL_GetTick+0x10>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	0018      	movs	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	2000022c 	.word	0x2000022c

08002750 <__NVIC_EnableIRQ>:
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	0002      	movs	r2, r0
 8002758:	1dfb      	adds	r3, r7, #7
 800275a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800275c:	1dfb      	adds	r3, r7, #7
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b7f      	cmp	r3, #127	; 0x7f
 8002762:	d809      	bhi.n	8002778 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002764:	1dfb      	adds	r3, r7, #7
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	001a      	movs	r2, r3
 800276a:	231f      	movs	r3, #31
 800276c:	401a      	ands	r2, r3
 800276e:	4b04      	ldr	r3, [pc, #16]	; (8002780 <__NVIC_EnableIRQ+0x30>)
 8002770:	2101      	movs	r1, #1
 8002772:	4091      	lsls	r1, r2
 8002774:	000a      	movs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}
 8002780:	e000e100 	.word	0xe000e100

08002784 <__NVIC_SetPriority>:
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	0002      	movs	r2, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	1dfb      	adds	r3, r7, #7
 8002790:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002792:	1dfb      	adds	r3, r7, #7
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b7f      	cmp	r3, #127	; 0x7f
 8002798:	d828      	bhi.n	80027ec <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800279a:	4a2f      	ldr	r2, [pc, #188]	; (8002858 <__NVIC_SetPriority+0xd4>)
 800279c:	1dfb      	adds	r3, r7, #7
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	b25b      	sxtb	r3, r3
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	33c0      	adds	r3, #192	; 0xc0
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	589b      	ldr	r3, [r3, r2]
 80027aa:	1dfa      	adds	r2, r7, #7
 80027ac:	7812      	ldrb	r2, [r2, #0]
 80027ae:	0011      	movs	r1, r2
 80027b0:	2203      	movs	r2, #3
 80027b2:	400a      	ands	r2, r1
 80027b4:	00d2      	lsls	r2, r2, #3
 80027b6:	21ff      	movs	r1, #255	; 0xff
 80027b8:	4091      	lsls	r1, r2
 80027ba:	000a      	movs	r2, r1
 80027bc:	43d2      	mvns	r2, r2
 80027be:	401a      	ands	r2, r3
 80027c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	019b      	lsls	r3, r3, #6
 80027c6:	22ff      	movs	r2, #255	; 0xff
 80027c8:	401a      	ands	r2, r3
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	0018      	movs	r0, r3
 80027d0:	2303      	movs	r3, #3
 80027d2:	4003      	ands	r3, r0
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027d8:	481f      	ldr	r0, [pc, #124]	; (8002858 <__NVIC_SetPriority+0xd4>)
 80027da:	1dfb      	adds	r3, r7, #7
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	430a      	orrs	r2, r1
 80027e4:	33c0      	adds	r3, #192	; 0xc0
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	501a      	str	r2, [r3, r0]
}
 80027ea:	e031      	b.n	8002850 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027ec:	4a1b      	ldr	r2, [pc, #108]	; (800285c <__NVIC_SetPriority+0xd8>)
 80027ee:	1dfb      	adds	r3, r7, #7
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	0019      	movs	r1, r3
 80027f4:	230f      	movs	r3, #15
 80027f6:	400b      	ands	r3, r1
 80027f8:	3b08      	subs	r3, #8
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3306      	adds	r3, #6
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	18d3      	adds	r3, r2, r3
 8002802:	3304      	adds	r3, #4
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	1dfa      	adds	r2, r7, #7
 8002808:	7812      	ldrb	r2, [r2, #0]
 800280a:	0011      	movs	r1, r2
 800280c:	2203      	movs	r2, #3
 800280e:	400a      	ands	r2, r1
 8002810:	00d2      	lsls	r2, r2, #3
 8002812:	21ff      	movs	r1, #255	; 0xff
 8002814:	4091      	lsls	r1, r2
 8002816:	000a      	movs	r2, r1
 8002818:	43d2      	mvns	r2, r2
 800281a:	401a      	ands	r2, r3
 800281c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	019b      	lsls	r3, r3, #6
 8002822:	22ff      	movs	r2, #255	; 0xff
 8002824:	401a      	ands	r2, r3
 8002826:	1dfb      	adds	r3, r7, #7
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	0018      	movs	r0, r3
 800282c:	2303      	movs	r3, #3
 800282e:	4003      	ands	r3, r0
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002834:	4809      	ldr	r0, [pc, #36]	; (800285c <__NVIC_SetPriority+0xd8>)
 8002836:	1dfb      	adds	r3, r7, #7
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	001c      	movs	r4, r3
 800283c:	230f      	movs	r3, #15
 800283e:	4023      	ands	r3, r4
 8002840:	3b08      	subs	r3, #8
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	430a      	orrs	r2, r1
 8002846:	3306      	adds	r3, #6
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	18c3      	adds	r3, r0, r3
 800284c:	3304      	adds	r3, #4
 800284e:	601a      	str	r2, [r3, #0]
}
 8002850:	46c0      	nop			; (mov r8, r8)
 8002852:	46bd      	mov	sp, r7
 8002854:	b003      	add	sp, #12
 8002856:	bd90      	pop	{r4, r7, pc}
 8002858:	e000e100 	.word	0xe000e100
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_SystemReset>:
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002864:	f3bf 8f4f 	dsb	sy
}
 8002868:	46c0      	nop			; (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800286a:	4b04      	ldr	r3, [pc, #16]	; (800287c <__NVIC_SystemReset+0x1c>)
 800286c:	4a04      	ldr	r2, [pc, #16]	; (8002880 <__NVIC_SystemReset+0x20>)
 800286e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002870:	f3bf 8f4f 	dsb	sy
}
 8002874:	46c0      	nop			; (mov r8, r8)
    __NOP();
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	e7fd      	b.n	8002876 <__NVIC_SystemReset+0x16>
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	e000ed00 	.word	0xe000ed00
 8002880:	05fa0004 	.word	0x05fa0004

08002884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	1e5a      	subs	r2, r3, #1
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	045b      	lsls	r3, r3, #17
 8002894:	429a      	cmp	r2, r3
 8002896:	d301      	bcc.n	800289c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002898:	2301      	movs	r3, #1
 800289a:	e010      	b.n	80028be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <SysTick_Config+0x44>)
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	3a01      	subs	r2, #1
 80028a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a4:	2301      	movs	r3, #1
 80028a6:	425b      	negs	r3, r3
 80028a8:	2103      	movs	r1, #3
 80028aa:	0018      	movs	r0, r3
 80028ac:	f7ff ff6a 	bl	8002784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <SysTick_Config+0x44>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <SysTick_Config+0x44>)
 80028b8:	2207      	movs	r2, #7
 80028ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028bc:	2300      	movs	r3, #0
}
 80028be:	0018      	movs	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b002      	add	sp, #8
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	e000e010 	.word	0xe000e010

080028cc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	210f      	movs	r1, #15
 80028d8:	187b      	adds	r3, r7, r1
 80028da:	1c02      	adds	r2, r0, #0
 80028dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b25b      	sxtb	r3, r3
 80028e6:	0011      	movs	r1, r2
 80028e8:	0018      	movs	r0, r3
 80028ea:	f7ff ff4b 	bl	8002784 <__NVIC_SetPriority>
}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b004      	add	sp, #16
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	0002      	movs	r2, r0
 80028fe:	1dfb      	adds	r3, r7, #7
 8002900:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002902:	1dfb      	adds	r3, r7, #7
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	b25b      	sxtb	r3, r3
 8002908:	0018      	movs	r0, r3
 800290a:	f7ff ff21 	bl	8002750 <__NVIC_EnableIRQ>
}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	46bd      	mov	sp, r7
 8002912:	b002      	add	sp, #8
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800291a:	f7ff ffa1 	bl	8002860 <__NVIC_SystemReset>

0800291e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	0018      	movs	r0, r3
 800292a:	f7ff ffab 	bl	8002884 <SysTick_Config>
 800292e:	0003      	movs	r3, r0
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b002      	add	sp, #8
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e056      	b.n	80029f8 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7f5b      	ldrb	r3, [r3, #29]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d106      	bne.n	8002962 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	0018      	movs	r0, r3
 800295e:	f000 f882 	bl	8002a66 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	791b      	ldrb	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10c      	bne.n	800298a <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <HAL_CRC_Init+0xc8>)
 8002976:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2118      	movs	r1, #24
 8002984:	438a      	bics	r2, r1
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	e00b      	b.n	80029a2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6899      	ldr	r1, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0018      	movs	r0, r3
 8002996:	f000 f985 	bl	8002ca4 <HAL_CRCEx_Polynomial_Set>
 800299a:	1e03      	subs	r3, r0, #0
 800299c:	d001      	beq.n	80029a2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e02a      	b.n	80029f8 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	795b      	ldrb	r3, [r3, #5]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d105      	bne.n	80029b6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2201      	movs	r2, #1
 80029b0:	4252      	negs	r2, r2
 80029b2:	611a      	str	r2, [r3, #16]
 80029b4:	e004      	b.n	80029c0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6912      	ldr	r2, [r2, #16]
 80029be:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2260      	movs	r2, #96	; 0x60
 80029c8:	4393      	bics	r3, r2
 80029ca:	0019      	movs	r1, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2280      	movs	r2, #128	; 0x80
 80029e0:	4393      	bics	r3, r2
 80029e2:	0019      	movs	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699a      	ldr	r2, [r3, #24]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	0018      	movs	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b002      	add	sp, #8
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	04c11db7 	.word	0x04c11db7

08002a04 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e023      	b.n	8002a5e <HAL_CRC_DeInit+0x5a>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7f5b      	ldrb	r3, [r3, #29]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d101      	bne.n	8002a24 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
 8002a22:	e01c      	b.n	8002a5e <HAL_CRC_DeInit+0x5a>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	775a      	strb	r2, [r3, #29]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2101      	movs	r1, #1
 8002a36:	430a      	orrs	r2, r1
 8002a38:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	791b      	ldrb	r3, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2200      	movs	r2, #0
 8002a46:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 f813 	bl	8002a76 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	775a      	strb	r2, [r3, #29]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	0018      	movs	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b002      	add	sp, #8
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_CRC_MspInit>:
  * @brief  Initializes the CRC MSP.
  * @param  hcrc CRC handle
  * @retval None
  */
__weak void HAL_CRC_MspInit(CRC_HandleTypeDef *hcrc)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hcrc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CRC_MspInit can be implemented in the user file
   */
}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b002      	add	sp, #8
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_CRC_MspDeInit>:
  * @brief  DeInitialize the CRC MSP.
  * @param  hcrc CRC handle
  * @retval None
  */
__weak void HAL_CRC_MspDeInit(CRC_HandleTypeDef *hcrc)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hcrc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CRC_MspDeInit can be implemented in the user file
   */
}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b002      	add	sp, #8
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d005      	beq.n	8002ab0 <HAL_CRC_Accumulate+0x2a>
 8002aa4:	d82d      	bhi.n	8002b02 <HAL_CRC_Accumulate+0x7c>
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d019      	beq.n	8002ade <HAL_CRC_Accumulate+0x58>
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d020      	beq.n	8002af0 <HAL_CRC_Accumulate+0x6a>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8002aae:	e028      	b.n	8002b02 <HAL_CRC_Accumulate+0x7c>
      for (index = 0U; index < BufferLength; index++)
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	e00a      	b.n	8002acc <HAL_CRC_Accumulate+0x46>
        hcrc->Instance->DR = pBuffer[index];
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	18d2      	adds	r2, r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d3f0      	bcc.n	8002ab6 <HAL_CRC_Accumulate+0x30>
      temp = hcrc->Instance->DR;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	613b      	str	r3, [r7, #16]
      break;
 8002adc:	e012      	b.n	8002b04 <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f000 f815 	bl	8002b14 <CRC_Handle_8>
 8002aea:	0003      	movs	r3, r0
 8002aec:	613b      	str	r3, [r7, #16]
      break;
 8002aee:	e009      	b.n	8002b04 <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	0018      	movs	r0, r3
 8002af8:	f000 f89d 	bl	8002c36 <CRC_Handle_16>
 8002afc:	0003      	movs	r3, r0
 8002afe:	613b      	str	r3, [r7, #16]
      break;
 8002b00:	e000      	b.n	8002b04 <HAL_CRC_Accumulate+0x7e>
      break;
 8002b02:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002b0a:	693b      	ldr	r3, [r7, #16]
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b006      	add	sp, #24
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002b20:	2300      	movs	r3, #0
 8002b22:	61fb      	str	r3, [r7, #28]
 8002b24:	e023      	b.n	8002b6e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	18d3      	adds	r3, r2, r3
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	3301      	adds	r3, #1
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	18cb      	adds	r3, r1, r3
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002b40:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	3302      	adds	r3, #2
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	18cb      	adds	r3, r1, r3
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002b50:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	3303      	adds	r3, #3
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	18cb      	adds	r3, r1, r3
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002b64:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002b66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	089b      	lsrs	r3, r3, #2
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d3d6      	bcc.n	8002b26 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d053      	beq.n	8002c28 <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2203      	movs	r2, #3
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d107      	bne.n	8002b9a <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	18d2      	adds	r2, r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	7812      	ldrb	r2, [r2, #0]
 8002b98:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d119      	bne.n	8002bd8 <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	18d3      	adds	r3, r2, r3
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	b21a      	sxth	r2, r3
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	18cb      	adds	r3, r1, r3
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	b21b      	sxth	r3, r3
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	b21a      	sxth	r2, r3
 8002bc4:	211a      	movs	r1, #26
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	187a      	adds	r2, r7, r1
 8002bd4:	8812      	ldrh	r2, [r2, #0]
 8002bd6:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2203      	movs	r2, #3
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d122      	bne.n	8002c28 <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	18d3      	adds	r3, r2, r3
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	b21a      	sxth	r2, r3
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	68b9      	ldr	r1, [r7, #8]
 8002bf8:	18cb      	adds	r3, r1, r3
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b21b      	sxth	r3, r3
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	b21a      	sxth	r2, r3
 8002c02:	211a      	movs	r1, #26
 8002c04:	187b      	adds	r3, r7, r1
 8002c06:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	187a      	adds	r2, r7, r1
 8002c12:	8812      	ldrh	r2, [r2, #0]
 8002c14:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	18d2      	adds	r2, r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	7812      	ldrb	r2, [r2, #0]
 8002c26:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
}
 8002c2e:	0018      	movs	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b008      	add	sp, #32
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b086      	sub	sp, #24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	e013      	b.n	8002c70 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	18d3      	adds	r3, r2, r3
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	041a      	lsls	r2, r3, #16
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	3302      	adds	r3, #2
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	18cb      	adds	r3, r1, r3
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	0019      	movs	r1, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d3e6      	bcc.n	8002c48 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d009      	beq.n	8002c96 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	18d3      	adds	r3, r2, r3
 8002c90:	881a      	ldrh	r2, [r3, #0]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b006      	add	sp, #24
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb0:	2317      	movs	r3, #23
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002cb8:	231f      	movs	r3, #31
 8002cba:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002cbc:	46c0      	nop			; (mov r8, r8)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1e5a      	subs	r2, r3, #1
 8002cc2:	613a      	str	r2, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_CRCEx_Polynomial_Set+0x36>
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	221f      	movs	r2, #31
 8002ccc:	4013      	ands	r3, r2
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	40da      	lsrs	r2, r3
 8002cd2:	0013      	movs	r3, r2
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d0f1      	beq.n	8002cbe <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b18      	cmp	r3, #24
 8002cde:	d00f      	beq.n	8002d00 <HAL_CRCEx_Polynomial_Set+0x5c>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b18      	cmp	r3, #24
 8002ce4:	d824      	bhi.n	8002d30 <HAL_CRCEx_Polynomial_Set+0x8c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d011      	beq.n	8002d10 <HAL_CRCEx_Polynomial_Set+0x6c>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b10      	cmp	r3, #16
 8002cf0:	d81e      	bhi.n	8002d30 <HAL_CRCEx_Polynomial_Set+0x8c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <HAL_CRCEx_Polynomial_Set+0x96>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d010      	beq.n	8002d20 <HAL_CRCEx_Polynomial_Set+0x7c>
 8002cfe:	e017      	b.n	8002d30 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d91b      	bls.n	8002d3e <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8002d06:	2317      	movs	r3, #23
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8002d0e:	e016      	b.n	8002d3e <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2b07      	cmp	r3, #7
 8002d14:	d915      	bls.n	8002d42 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8002d16:	2317      	movs	r3, #23
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8002d1e:	e010      	b.n	8002d42 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b0f      	cmp	r3, #15
 8002d24:	d90f      	bls.n	8002d46 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8002d26:	2317      	movs	r3, #23
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8002d2e:	e00a      	b.n	8002d46 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002d30:	2317      	movs	r3, #23
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
      break;
 8002d38:	e006      	b.n	8002d48 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	e004      	b.n	8002d48 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	e002      	b.n	8002d48 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	e000      	b.n	8002d48 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002d46:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8002d48:	2317      	movs	r3, #23
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10e      	bne.n	8002d70 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2218      	movs	r2, #24
 8002d62:	4393      	bics	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002d70:	2317      	movs	r3, #23
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	781b      	ldrb	r3, [r3, #0]
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b006      	add	sp, #24
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002d96:	e14f      	b.n	8003038 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4091      	lsls	r1, r2
 8002da2:	000a      	movs	r2, r1
 8002da4:	4013      	ands	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d100      	bne.n	8002db0 <HAL_GPIO_Init+0x30>
 8002dae:	e140      	b.n	8003032 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2203      	movs	r2, #3
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d005      	beq.n	8002dc8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d130      	bne.n	8002e2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	0013      	movs	r3, r2
 8002dd8:	43da      	mvns	r2, r3
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	409a      	lsls	r2, r3
 8002dea:	0013      	movs	r3, r2
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dfe:	2201      	movs	r2, #1
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	409a      	lsls	r2, r3
 8002e04:	0013      	movs	r3, r2
 8002e06:	43da      	mvns	r2, r3
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	091b      	lsrs	r3, r3, #4
 8002e14:	2201      	movs	r2, #1
 8002e16:	401a      	ands	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	0013      	movs	r3, r2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2203      	movs	r2, #3
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d017      	beq.n	8002e66 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	2203      	movs	r2, #3
 8002e42:	409a      	lsls	r2, r3
 8002e44:	0013      	movs	r3, r2
 8002e46:	43da      	mvns	r2, r3
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	409a      	lsls	r2, r3
 8002e58:	0013      	movs	r3, r2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d123      	bne.n	8002eba <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	08da      	lsrs	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3208      	adds	r2, #8
 8002e7a:	0092      	lsls	r2, r2, #2
 8002e7c:	58d3      	ldr	r3, [r2, r3]
 8002e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2207      	movs	r2, #7
 8002e84:	4013      	ands	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	220f      	movs	r2, #15
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	0013      	movs	r3, r2
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2107      	movs	r1, #7
 8002e9e:	400b      	ands	r3, r1
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	0013      	movs	r3, r2
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	08da      	lsrs	r2, r3, #3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3208      	adds	r2, #8
 8002eb4:	0092      	lsls	r2, r2, #2
 8002eb6:	6939      	ldr	r1, [r7, #16]
 8002eb8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	0013      	movs	r3, r2
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	401a      	ands	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	0013      	movs	r3, r2
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	23c0      	movs	r3, #192	; 0xc0
 8002ef4:	029b      	lsls	r3, r3, #10
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d100      	bne.n	8002efc <HAL_GPIO_Init+0x17c>
 8002efa:	e09a      	b.n	8003032 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efc:	4b54      	ldr	r3, [pc, #336]	; (8003050 <HAL_GPIO_Init+0x2d0>)
 8002efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f00:	4b53      	ldr	r3, [pc, #332]	; (8003050 <HAL_GPIO_Init+0x2d0>)
 8002f02:	2101      	movs	r1, #1
 8002f04:	430a      	orrs	r2, r1
 8002f06:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f08:	4a52      	ldr	r2, [pc, #328]	; (8003054 <HAL_GPIO_Init+0x2d4>)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	3302      	adds	r3, #2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	589b      	ldr	r3, [r3, r2]
 8002f14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	220f      	movs	r2, #15
 8002f20:	409a      	lsls	r2, r3
 8002f22:	0013      	movs	r3, r2
 8002f24:	43da      	mvns	r2, r3
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	23a0      	movs	r3, #160	; 0xa0
 8002f30:	05db      	lsls	r3, r3, #23
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d019      	beq.n	8002f6a <HAL_GPIO_Init+0x1ea>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a47      	ldr	r2, [pc, #284]	; (8003058 <HAL_GPIO_Init+0x2d8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d013      	beq.n	8002f66 <HAL_GPIO_Init+0x1e6>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a46      	ldr	r2, [pc, #280]	; (800305c <HAL_GPIO_Init+0x2dc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00d      	beq.n	8002f62 <HAL_GPIO_Init+0x1e2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a45      	ldr	r2, [pc, #276]	; (8003060 <HAL_GPIO_Init+0x2e0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <HAL_GPIO_Init+0x1de>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a44      	ldr	r2, [pc, #272]	; (8003064 <HAL_GPIO_Init+0x2e4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d101      	bne.n	8002f5a <HAL_GPIO_Init+0x1da>
 8002f56:	2305      	movs	r3, #5
 8002f58:	e008      	b.n	8002f6c <HAL_GPIO_Init+0x1ec>
 8002f5a:	2306      	movs	r3, #6
 8002f5c:	e006      	b.n	8002f6c <HAL_GPIO_Init+0x1ec>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e004      	b.n	8002f6c <HAL_GPIO_Init+0x1ec>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e002      	b.n	8002f6c <HAL_GPIO_Init+0x1ec>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_GPIO_Init+0x1ec>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	2103      	movs	r1, #3
 8002f70:	400a      	ands	r2, r1
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	4093      	lsls	r3, r2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f7c:	4935      	ldr	r1, [pc, #212]	; (8003054 <HAL_GPIO_Init+0x2d4>)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	3302      	adds	r3, #2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f8a:	4b37      	ldr	r3, [pc, #220]	; (8003068 <HAL_GPIO_Init+0x2e8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	43da      	mvns	r2, r3
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	025b      	lsls	r3, r3, #9
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fae:	4b2e      	ldr	r3, [pc, #184]	; (8003068 <HAL_GPIO_Init+0x2e8>)
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002fb4:	4b2c      	ldr	r3, [pc, #176]	; (8003068 <HAL_GPIO_Init+0x2e8>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	029b      	lsls	r3, r3, #10
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fd8:	4b23      	ldr	r3, [pc, #140]	; (8003068 <HAL_GPIO_Init+0x2e8>)
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_GPIO_Init+0x2e8>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	035b      	lsls	r3, r3, #13
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003002:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_GPIO_Init+0x2e8>)
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003008:	4b17      	ldr	r3, [pc, #92]	; (8003068 <HAL_GPIO_Init+0x2e8>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	43da      	mvns	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	039b      	lsls	r3, r3, #14
 8003020:	4013      	ands	r3, r2
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800302c:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <HAL_GPIO_Init+0x2e8>)
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3301      	adds	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	40da      	lsrs	r2, r3
 8003040:	1e13      	subs	r3, r2, #0
 8003042:	d000      	beq.n	8003046 <HAL_GPIO_Init+0x2c6>
 8003044:	e6a8      	b.n	8002d98 <HAL_GPIO_Init+0x18>
  }
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46c0      	nop			; (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	b006      	add	sp, #24
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40021000 	.word	0x40021000
 8003054:	40010000 	.word	0x40010000
 8003058:	50000400 	.word	0x50000400
 800305c:	50000800 	.word	0x50000800
 8003060:	50000c00 	.word	0x50000c00
 8003064:	50001c00 	.word	0x50001c00
 8003068:	40010400 	.word	0x40010400

0800306c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	0008      	movs	r0, r1
 8003076:	0011      	movs	r1, r2
 8003078:	1cbb      	adds	r3, r7, #2
 800307a:	1c02      	adds	r2, r0, #0
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	1c7b      	adds	r3, r7, #1
 8003080:	1c0a      	adds	r2, r1, #0
 8003082:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003084:	1c7b      	adds	r3, r7, #1
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d004      	beq.n	8003096 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800308c:	1cbb      	adds	r3, r7, #2
 800308e:	881a      	ldrh	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003094:	e003      	b.n	800309e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003096:	1cbb      	adds	r3, r7, #2
 8003098:	881a      	ldrh	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b002      	add	sp, #8
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	000a      	movs	r2, r1
 80030b0:	1cbb      	adds	r3, r7, #2
 80030b2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030ba:	1cbb      	adds	r3, r7, #2
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4013      	ands	r3, r2
 80030c2:	041a      	lsls	r2, r3, #16
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	1cb9      	adds	r1, r7, #2
 80030ca:	8809      	ldrh	r1, [r1, #0]
 80030cc:	400b      	ands	r3, r1
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	619a      	str	r2, [r3, #24]
}
 80030d4:	46c0      	nop			; (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b004      	add	sp, #16
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e03d      	b.n	800316a <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a20      	ldr	r2, [pc, #128]	; (8003174 <HAL_IWDG_Init+0x98>)
 80030f4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1f      	ldr	r2, [pc, #124]	; (8003178 <HAL_IWDG_Init+0x9c>)
 80030fc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6852      	ldr	r2, [r2, #4]
 8003106:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6892      	ldr	r2, [r2, #8]
 8003110:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003112:	f7ff fb13 	bl	800273c <HAL_GetTick>
 8003116:	0003      	movs	r3, r0
 8003118:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800311a:	e00e      	b.n	800313a <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800311c:	f7ff fb0e 	bl	800273c <HAL_GetTick>
 8003120:	0002      	movs	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b2a      	cmp	r3, #42	; 0x2a
 8003128:	d907      	bls.n	800313a <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2207      	movs	r2, #7
 8003132:	4013      	ands	r3, r2
 8003134:	d001      	beq.n	800313a <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e017      	b.n	800316a <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2207      	movs	r2, #7
 8003142:	4013      	ands	r3, r2
 8003144:	d1ea      	bne.n	800311c <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	429a      	cmp	r2, r3
 8003152:	d005      	beq.n	8003160 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	68d2      	ldr	r2, [r2, #12]
 800315c:	611a      	str	r2, [r3, #16]
 800315e:	e003      	b.n	8003168 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a05      	ldr	r2, [pc, #20]	; (800317c <HAL_IWDG_Init+0xa0>)
 8003166:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	0018      	movs	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	b004      	add	sp, #16
 8003170:	bd80      	pop	{r7, pc}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	0000cccc 	.word	0x0000cccc
 8003178:	00005555 	.word	0x00005555
 800317c:	0000aaaa 	.word	0x0000aaaa

08003180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003180:	b5b0      	push	{r4, r5, r7, lr}
 8003182:	b08a      	sub	sp, #40	; 0x28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d102      	bne.n	8003194 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f000 fbaf 	bl	80038f2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003194:	4bcf      	ldr	r3, [pc, #828]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	220c      	movs	r2, #12
 800319a:	4013      	ands	r3, r2
 800319c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800319e:	4bcd      	ldr	r3, [pc, #820]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	025b      	lsls	r3, r3, #9
 80031a6:	4013      	ands	r3, r2
 80031a8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2201      	movs	r2, #1
 80031b0:	4013      	ands	r3, r2
 80031b2:	d100      	bne.n	80031b6 <HAL_RCC_OscConfig+0x36>
 80031b4:	e07e      	b.n	80032b4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d007      	beq.n	80031cc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d112      	bne.n	80031e8 <HAL_RCC_OscConfig+0x68>
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	025b      	lsls	r3, r3, #9
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d10d      	bne.n	80031e8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	4bc1      	ldr	r3, [pc, #772]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	029b      	lsls	r3, r3, #10
 80031d4:	4013      	ands	r3, r2
 80031d6:	d100      	bne.n	80031da <HAL_RCC_OscConfig+0x5a>
 80031d8:	e06b      	b.n	80032b2 <HAL_RCC_OscConfig+0x132>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d167      	bne.n	80032b2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f000 fb85 	bl	80038f2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	025b      	lsls	r3, r3, #9
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d107      	bne.n	8003204 <HAL_RCC_OscConfig+0x84>
 80031f4:	4bb7      	ldr	r3, [pc, #732]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4bb6      	ldr	r3, [pc, #728]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80031fa:	2180      	movs	r1, #128	; 0x80
 80031fc:	0249      	lsls	r1, r1, #9
 80031fe:	430a      	orrs	r2, r1
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e027      	b.n	8003254 <HAL_RCC_OscConfig+0xd4>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	23a0      	movs	r3, #160	; 0xa0
 800320a:	02db      	lsls	r3, r3, #11
 800320c:	429a      	cmp	r2, r3
 800320e:	d10e      	bne.n	800322e <HAL_RCC_OscConfig+0xae>
 8003210:	4bb0      	ldr	r3, [pc, #704]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4baf      	ldr	r3, [pc, #700]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003216:	2180      	movs	r1, #128	; 0x80
 8003218:	02c9      	lsls	r1, r1, #11
 800321a:	430a      	orrs	r2, r1
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	4bad      	ldr	r3, [pc, #692]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4bac      	ldr	r3, [pc, #688]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0249      	lsls	r1, r1, #9
 8003228:	430a      	orrs	r2, r1
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	e012      	b.n	8003254 <HAL_RCC_OscConfig+0xd4>
 800322e:	4ba9      	ldr	r3, [pc, #676]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4ba8      	ldr	r3, [pc, #672]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003234:	49a8      	ldr	r1, [pc, #672]	; (80034d8 <HAL_RCC_OscConfig+0x358>)
 8003236:	400a      	ands	r2, r1
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	4ba6      	ldr	r3, [pc, #664]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	025b      	lsls	r3, r3, #9
 8003242:	4013      	ands	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4ba2      	ldr	r3, [pc, #648]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4ba1      	ldr	r3, [pc, #644]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 800324e:	49a3      	ldr	r1, [pc, #652]	; (80034dc <HAL_RCC_OscConfig+0x35c>)
 8003250:	400a      	ands	r2, r1
 8003252:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d015      	beq.n	8003288 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7ff fa6e 	bl	800273c <HAL_GetTick>
 8003260:	0003      	movs	r3, r0
 8003262:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003264:	e009      	b.n	800327a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003266:	f7ff fa69 	bl	800273c <HAL_GetTick>
 800326a:	0002      	movs	r2, r0
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b64      	cmp	r3, #100	; 0x64
 8003272:	d902      	bls.n	800327a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	f000 fb3c 	bl	80038f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800327a:	4b96      	ldr	r3, [pc, #600]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	029b      	lsls	r3, r3, #10
 8003282:	4013      	ands	r3, r2
 8003284:	d0ef      	beq.n	8003266 <HAL_RCC_OscConfig+0xe6>
 8003286:	e015      	b.n	80032b4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7ff fa58 	bl	800273c <HAL_GetTick>
 800328c:	0003      	movs	r3, r0
 800328e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003292:	f7ff fa53 	bl	800273c <HAL_GetTick>
 8003296:	0002      	movs	r2, r0
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b64      	cmp	r3, #100	; 0x64
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e326      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032a4:	4b8b      	ldr	r3, [pc, #556]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	2380      	movs	r3, #128	; 0x80
 80032aa:	029b      	lsls	r3, r3, #10
 80032ac:	4013      	ands	r3, r2
 80032ae:	d1f0      	bne.n	8003292 <HAL_RCC_OscConfig+0x112>
 80032b0:	e000      	b.n	80032b4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2202      	movs	r2, #2
 80032ba:	4013      	ands	r3, r2
 80032bc:	d100      	bne.n	80032c0 <HAL_RCC_OscConfig+0x140>
 80032be:	e08b      	b.n	80033d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	2b0c      	cmp	r3, #12
 80032d0:	d13e      	bne.n	8003350 <HAL_RCC_OscConfig+0x1d0>
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d13b      	bne.n	8003350 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80032d8:	4b7e      	ldr	r3, [pc, #504]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2204      	movs	r2, #4
 80032de:	4013      	ands	r3, r2
 80032e0:	d004      	beq.n	80032ec <HAL_RCC_OscConfig+0x16c>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e302      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ec:	4b79      	ldr	r3, [pc, #484]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4a7b      	ldr	r2, [pc, #492]	; (80034e0 <HAL_RCC_OscConfig+0x360>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	0019      	movs	r1, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	021a      	lsls	r2, r3, #8
 80032fc:	4b75      	ldr	r3, [pc, #468]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003302:	4b74      	ldr	r3, [pc, #464]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2209      	movs	r2, #9
 8003308:	4393      	bics	r3, r2
 800330a:	0019      	movs	r1, r3
 800330c:	4b71      	ldr	r3, [pc, #452]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	430a      	orrs	r2, r1
 8003312:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003314:	f000 fcd2 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8003318:	0001      	movs	r1, r0
 800331a:	4b6e      	ldr	r3, [pc, #440]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	220f      	movs	r2, #15
 8003322:	4013      	ands	r3, r2
 8003324:	4a6f      	ldr	r2, [pc, #444]	; (80034e4 <HAL_RCC_OscConfig+0x364>)
 8003326:	5cd3      	ldrb	r3, [r2, r3]
 8003328:	000a      	movs	r2, r1
 800332a:	40da      	lsrs	r2, r3
 800332c:	4b6e      	ldr	r3, [pc, #440]	; (80034e8 <HAL_RCC_OscConfig+0x368>)
 800332e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003330:	4b6e      	ldr	r3, [pc, #440]	; (80034ec <HAL_RCC_OscConfig+0x36c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2513      	movs	r5, #19
 8003336:	197c      	adds	r4, r7, r5
 8003338:	0018      	movs	r0, r3
 800333a:	f7ff f9b9 	bl	80026b0 <HAL_InitTick>
 800333e:	0003      	movs	r3, r0
 8003340:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003342:	197b      	adds	r3, r7, r5
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d046      	beq.n	80033d8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800334a:	197b      	adds	r3, r7, r5
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	e2d0      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d027      	beq.n	80033a6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003356:	4b5f      	ldr	r3, [pc, #380]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2209      	movs	r2, #9
 800335c:	4393      	bics	r3, r2
 800335e:	0019      	movs	r1, r3
 8003360:	4b5c      	ldr	r3, [pc, #368]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	430a      	orrs	r2, r1
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7ff f9e8 	bl	800273c <HAL_GetTick>
 800336c:	0003      	movs	r3, r0
 800336e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003372:	f7ff f9e3 	bl	800273c <HAL_GetTick>
 8003376:	0002      	movs	r2, r0
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e2b6      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003384:	4b53      	ldr	r3, [pc, #332]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2204      	movs	r2, #4
 800338a:	4013      	ands	r3, r2
 800338c:	d0f1      	beq.n	8003372 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338e:	4b51      	ldr	r3, [pc, #324]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4a53      	ldr	r2, [pc, #332]	; (80034e0 <HAL_RCC_OscConfig+0x360>)
 8003394:	4013      	ands	r3, r2
 8003396:	0019      	movs	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	021a      	lsls	r2, r3, #8
 800339e:	4b4d      	ldr	r3, [pc, #308]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
 80033a4:	e018      	b.n	80033d8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a6:	4b4b      	ldr	r3, [pc, #300]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4b4a      	ldr	r3, [pc, #296]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80033ac:	2101      	movs	r1, #1
 80033ae:	438a      	bics	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b2:	f7ff f9c3 	bl	800273c <HAL_GetTick>
 80033b6:	0003      	movs	r3, r0
 80033b8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033bc:	f7ff f9be 	bl	800273c <HAL_GetTick>
 80033c0:	0002      	movs	r2, r0
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e291      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033ce:	4b41      	ldr	r3, [pc, #260]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2204      	movs	r2, #4
 80033d4:	4013      	ands	r3, r2
 80033d6:	d1f1      	bne.n	80033bc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2210      	movs	r2, #16
 80033de:	4013      	ands	r3, r2
 80033e0:	d100      	bne.n	80033e4 <HAL_RCC_OscConfig+0x264>
 80033e2:	e0a1      	b.n	8003528 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d140      	bne.n	800346c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033ea:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	2380      	movs	r3, #128	; 0x80
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4013      	ands	r3, r2
 80033f4:	d005      	beq.n	8003402 <HAL_RCC_OscConfig+0x282>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e277      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003402:	4b34      	ldr	r3, [pc, #208]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4a3a      	ldr	r2, [pc, #232]	; (80034f0 <HAL_RCC_OscConfig+0x370>)
 8003408:	4013      	ands	r3, r2
 800340a:	0019      	movs	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003410:	4b30      	ldr	r3, [pc, #192]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003416:	4b2f      	ldr	r3, [pc, #188]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	0a19      	lsrs	r1, r3, #8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	061a      	lsls	r2, r3, #24
 8003424:	4b2b      	ldr	r3, [pc, #172]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	0b5b      	lsrs	r3, r3, #13
 8003430:	3301      	adds	r3, #1
 8003432:	2280      	movs	r2, #128	; 0x80
 8003434:	0212      	lsls	r2, r2, #8
 8003436:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003438:	4b26      	ldr	r3, [pc, #152]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	210f      	movs	r1, #15
 8003440:	400b      	ands	r3, r1
 8003442:	4928      	ldr	r1, [pc, #160]	; (80034e4 <HAL_RCC_OscConfig+0x364>)
 8003444:	5ccb      	ldrb	r3, [r1, r3]
 8003446:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003448:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <HAL_RCC_OscConfig+0x368>)
 800344a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800344c:	4b27      	ldr	r3, [pc, #156]	; (80034ec <HAL_RCC_OscConfig+0x36c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2513      	movs	r5, #19
 8003452:	197c      	adds	r4, r7, r5
 8003454:	0018      	movs	r0, r3
 8003456:	f7ff f92b 	bl	80026b0 <HAL_InitTick>
 800345a:	0003      	movs	r3, r0
 800345c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800345e:	197b      	adds	r3, r7, r5
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d060      	beq.n	8003528 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003466:	197b      	adds	r3, r7, r5
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	e242      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d03f      	beq.n	80034f4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003474:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	4b16      	ldr	r3, [pc, #88]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 800347a:	2180      	movs	r1, #128	; 0x80
 800347c:	0049      	lsls	r1, r1, #1
 800347e:	430a      	orrs	r2, r1
 8003480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003482:	f7ff f95b 	bl	800273c <HAL_GetTick>
 8003486:	0003      	movs	r3, r0
 8003488:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800348c:	f7ff f956 	bl	800273c <HAL_GetTick>
 8003490:	0002      	movs	r2, r0
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e229      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4013      	ands	r3, r2
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4a10      	ldr	r2, [pc, #64]	; (80034f0 <HAL_RCC_OscConfig+0x370>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034be:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	0a19      	lsrs	r1, r3, #8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	061a      	lsls	r2, r3, #24
 80034cc:	4b01      	ldr	r3, [pc, #4]	; (80034d4 <HAL_RCC_OscConfig+0x354>)
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	e029      	b.n	8003528 <HAL_RCC_OscConfig+0x3a8>
 80034d4:	40021000 	.word	0x40021000
 80034d8:	fffeffff 	.word	0xfffeffff
 80034dc:	fffbffff 	.word	0xfffbffff
 80034e0:	ffffe0ff 	.word	0xffffe0ff
 80034e4:	08006c18 	.word	0x08006c18
 80034e8:	20000080 	.word	0x20000080
 80034ec:	20000084 	.word	0x20000084
 80034f0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034f4:	4bbd      	ldr	r3, [pc, #756]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4bbc      	ldr	r3, [pc, #752]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 80034fa:	49bd      	ldr	r1, [pc, #756]	; (80037f0 <HAL_RCC_OscConfig+0x670>)
 80034fc:	400a      	ands	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7ff f91c 	bl	800273c <HAL_GetTick>
 8003504:	0003      	movs	r3, r0
 8003506:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800350a:	f7ff f917 	bl	800273c <HAL_GetTick>
 800350e:	0002      	movs	r2, r0
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e1ea      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800351c:	4bb3      	ldr	r3, [pc, #716]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4013      	ands	r3, r2
 8003526:	d1f0      	bne.n	800350a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2208      	movs	r2, #8
 800352e:	4013      	ands	r3, r2
 8003530:	d036      	beq.n	80035a0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d019      	beq.n	800356e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353a:	4bac      	ldr	r3, [pc, #688]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 800353c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800353e:	4bab      	ldr	r3, [pc, #684]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003540:	2101      	movs	r1, #1
 8003542:	430a      	orrs	r2, r1
 8003544:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003546:	f7ff f8f9 	bl	800273c <HAL_GetTick>
 800354a:	0003      	movs	r3, r0
 800354c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003550:	f7ff f8f4 	bl	800273c <HAL_GetTick>
 8003554:	0002      	movs	r2, r0
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e1c7      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003562:	4ba2      	ldr	r3, [pc, #648]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003566:	2202      	movs	r2, #2
 8003568:	4013      	ands	r3, r2
 800356a:	d0f1      	beq.n	8003550 <HAL_RCC_OscConfig+0x3d0>
 800356c:	e018      	b.n	80035a0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356e:	4b9f      	ldr	r3, [pc, #636]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003572:	4b9e      	ldr	r3, [pc, #632]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003574:	2101      	movs	r1, #1
 8003576:	438a      	bics	r2, r1
 8003578:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357a:	f7ff f8df 	bl	800273c <HAL_GetTick>
 800357e:	0003      	movs	r3, r0
 8003580:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003584:	f7ff f8da 	bl	800273c <HAL_GetTick>
 8003588:	0002      	movs	r2, r0
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e1ad      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003596:	4b95      	ldr	r3, [pc, #596]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359a:	2202      	movs	r2, #2
 800359c:	4013      	ands	r3, r2
 800359e:	d1f1      	bne.n	8003584 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2204      	movs	r2, #4
 80035a6:	4013      	ands	r3, r2
 80035a8:	d100      	bne.n	80035ac <HAL_RCC_OscConfig+0x42c>
 80035aa:	e0ae      	b.n	800370a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ac:	2027      	movs	r0, #39	; 0x27
 80035ae:	183b      	adds	r3, r7, r0
 80035b0:	2200      	movs	r2, #0
 80035b2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b4:	4b8d      	ldr	r3, [pc, #564]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 80035b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	055b      	lsls	r3, r3, #21
 80035bc:	4013      	ands	r3, r2
 80035be:	d109      	bne.n	80035d4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c0:	4b8a      	ldr	r3, [pc, #552]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 80035c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c4:	4b89      	ldr	r3, [pc, #548]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 80035c6:	2180      	movs	r1, #128	; 0x80
 80035c8:	0549      	lsls	r1, r1, #21
 80035ca:	430a      	orrs	r2, r1
 80035cc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80035ce:	183b      	adds	r3, r7, r0
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	4b87      	ldr	r3, [pc, #540]	; (80037f4 <HAL_RCC_OscConfig+0x674>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	4013      	ands	r3, r2
 80035de:	d11a      	bne.n	8003616 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e0:	4b84      	ldr	r3, [pc, #528]	; (80037f4 <HAL_RCC_OscConfig+0x674>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b83      	ldr	r3, [pc, #524]	; (80037f4 <HAL_RCC_OscConfig+0x674>)
 80035e6:	2180      	movs	r1, #128	; 0x80
 80035e8:	0049      	lsls	r1, r1, #1
 80035ea:	430a      	orrs	r2, r1
 80035ec:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ee:	f7ff f8a5 	bl	800273c <HAL_GetTick>
 80035f2:	0003      	movs	r3, r0
 80035f4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f8:	f7ff f8a0 	bl	800273c <HAL_GetTick>
 80035fc:	0002      	movs	r2, r0
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e173      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360a:	4b7a      	ldr	r3, [pc, #488]	; (80037f4 <HAL_RCC_OscConfig+0x674>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4013      	ands	r3, r2
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	429a      	cmp	r2, r3
 8003620:	d107      	bne.n	8003632 <HAL_RCC_OscConfig+0x4b2>
 8003622:	4b72      	ldr	r3, [pc, #456]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003626:	4b71      	ldr	r3, [pc, #452]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003628:	2180      	movs	r1, #128	; 0x80
 800362a:	0049      	lsls	r1, r1, #1
 800362c:	430a      	orrs	r2, r1
 800362e:	651a      	str	r2, [r3, #80]	; 0x50
 8003630:	e031      	b.n	8003696 <HAL_RCC_OscConfig+0x516>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10c      	bne.n	8003654 <HAL_RCC_OscConfig+0x4d4>
 800363a:	4b6c      	ldr	r3, [pc, #432]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 800363c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800363e:	4b6b      	ldr	r3, [pc, #428]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003640:	496b      	ldr	r1, [pc, #428]	; (80037f0 <HAL_RCC_OscConfig+0x670>)
 8003642:	400a      	ands	r2, r1
 8003644:	651a      	str	r2, [r3, #80]	; 0x50
 8003646:	4b69      	ldr	r3, [pc, #420]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003648:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800364a:	4b68      	ldr	r3, [pc, #416]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 800364c:	496a      	ldr	r1, [pc, #424]	; (80037f8 <HAL_RCC_OscConfig+0x678>)
 800364e:	400a      	ands	r2, r1
 8003650:	651a      	str	r2, [r3, #80]	; 0x50
 8003652:	e020      	b.n	8003696 <HAL_RCC_OscConfig+0x516>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	23a0      	movs	r3, #160	; 0xa0
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	429a      	cmp	r2, r3
 800365e:	d10e      	bne.n	800367e <HAL_RCC_OscConfig+0x4fe>
 8003660:	4b62      	ldr	r3, [pc, #392]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003664:	4b61      	ldr	r3, [pc, #388]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003666:	2180      	movs	r1, #128	; 0x80
 8003668:	00c9      	lsls	r1, r1, #3
 800366a:	430a      	orrs	r2, r1
 800366c:	651a      	str	r2, [r3, #80]	; 0x50
 800366e:	4b5f      	ldr	r3, [pc, #380]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003672:	4b5e      	ldr	r3, [pc, #376]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003674:	2180      	movs	r1, #128	; 0x80
 8003676:	0049      	lsls	r1, r1, #1
 8003678:	430a      	orrs	r2, r1
 800367a:	651a      	str	r2, [r3, #80]	; 0x50
 800367c:	e00b      	b.n	8003696 <HAL_RCC_OscConfig+0x516>
 800367e:	4b5b      	ldr	r3, [pc, #364]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003682:	4b5a      	ldr	r3, [pc, #360]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003684:	495a      	ldr	r1, [pc, #360]	; (80037f0 <HAL_RCC_OscConfig+0x670>)
 8003686:	400a      	ands	r2, r1
 8003688:	651a      	str	r2, [r3, #80]	; 0x50
 800368a:	4b58      	ldr	r3, [pc, #352]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 800368c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800368e:	4b57      	ldr	r3, [pc, #348]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003690:	4959      	ldr	r1, [pc, #356]	; (80037f8 <HAL_RCC_OscConfig+0x678>)
 8003692:	400a      	ands	r2, r1
 8003694:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d015      	beq.n	80036ca <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369e:	f7ff f84d 	bl	800273c <HAL_GetTick>
 80036a2:	0003      	movs	r3, r0
 80036a4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036a6:	e009      	b.n	80036bc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7ff f848 	bl	800273c <HAL_GetTick>
 80036ac:	0002      	movs	r2, r0
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	4a52      	ldr	r2, [pc, #328]	; (80037fc <HAL_RCC_OscConfig+0x67c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e11a      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036bc:	4b4b      	ldr	r3, [pc, #300]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 80036be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4013      	ands	r3, r2
 80036c6:	d0ef      	beq.n	80036a8 <HAL_RCC_OscConfig+0x528>
 80036c8:	e014      	b.n	80036f4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ca:	f7ff f837 	bl	800273c <HAL_GetTick>
 80036ce:	0003      	movs	r3, r0
 80036d0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036d2:	e009      	b.n	80036e8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d4:	f7ff f832 	bl	800273c <HAL_GetTick>
 80036d8:	0002      	movs	r2, r0
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	4a47      	ldr	r2, [pc, #284]	; (80037fc <HAL_RCC_OscConfig+0x67c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e104      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036e8:	4b40      	ldr	r3, [pc, #256]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 80036ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4013      	ands	r3, r2
 80036f2:	d1ef      	bne.n	80036d4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036f4:	2327      	movs	r3, #39	; 0x27
 80036f6:	18fb      	adds	r3, r7, r3
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d105      	bne.n	800370a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fe:	4b3b      	ldr	r3, [pc, #236]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003702:	4b3a      	ldr	r3, [pc, #232]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003704:	493e      	ldr	r1, [pc, #248]	; (8003800 <HAL_RCC_OscConfig+0x680>)
 8003706:	400a      	ands	r2, r1
 8003708:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2220      	movs	r2, #32
 8003710:	4013      	ands	r3, r2
 8003712:	d049      	beq.n	80037a8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d026      	beq.n	800376a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800371c:	4b33      	ldr	r3, [pc, #204]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	4b32      	ldr	r3, [pc, #200]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003722:	2101      	movs	r1, #1
 8003724:	430a      	orrs	r2, r1
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	4b30      	ldr	r3, [pc, #192]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 800372a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800372c:	4b2f      	ldr	r3, [pc, #188]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 800372e:	2101      	movs	r1, #1
 8003730:	430a      	orrs	r2, r1
 8003732:	635a      	str	r2, [r3, #52]	; 0x34
 8003734:	4b33      	ldr	r3, [pc, #204]	; (8003804 <HAL_RCC_OscConfig+0x684>)
 8003736:	6a1a      	ldr	r2, [r3, #32]
 8003738:	4b32      	ldr	r3, [pc, #200]	; (8003804 <HAL_RCC_OscConfig+0x684>)
 800373a:	2180      	movs	r1, #128	; 0x80
 800373c:	0189      	lsls	r1, r1, #6
 800373e:	430a      	orrs	r2, r1
 8003740:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003742:	f7fe fffb 	bl	800273c <HAL_GetTick>
 8003746:	0003      	movs	r3, r0
 8003748:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800374c:	f7fe fff6 	bl	800273c <HAL_GetTick>
 8003750:	0002      	movs	r2, r0
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e0c9      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800375e:	4b23      	ldr	r3, [pc, #140]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2202      	movs	r2, #2
 8003764:	4013      	ands	r3, r2
 8003766:	d0f1      	beq.n	800374c <HAL_RCC_OscConfig+0x5cc>
 8003768:	e01e      	b.n	80037a8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800376a:	4b20      	ldr	r3, [pc, #128]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 8003770:	2101      	movs	r1, #1
 8003772:	438a      	bics	r2, r1
 8003774:	609a      	str	r2, [r3, #8]
 8003776:	4b23      	ldr	r3, [pc, #140]	; (8003804 <HAL_RCC_OscConfig+0x684>)
 8003778:	6a1a      	ldr	r2, [r3, #32]
 800377a:	4b22      	ldr	r3, [pc, #136]	; (8003804 <HAL_RCC_OscConfig+0x684>)
 800377c:	4922      	ldr	r1, [pc, #136]	; (8003808 <HAL_RCC_OscConfig+0x688>)
 800377e:	400a      	ands	r2, r1
 8003780:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7fe ffdb 	bl	800273c <HAL_GetTick>
 8003786:	0003      	movs	r3, r0
 8003788:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800378c:	f7fe ffd6 	bl	800273c <HAL_GetTick>
 8003790:	0002      	movs	r2, r0
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e0a9      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800379e:	4b13      	ldr	r3, [pc, #76]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2202      	movs	r2, #2
 80037a4:	4013      	ands	r3, r2
 80037a6:	d1f1      	bne.n	800378c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d100      	bne.n	80037b2 <HAL_RCC_OscConfig+0x632>
 80037b0:	e09e      	b.n	80038f0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	2b0c      	cmp	r3, #12
 80037b6:	d100      	bne.n	80037ba <HAL_RCC_OscConfig+0x63a>
 80037b8:	e077      	b.n	80038aa <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d158      	bne.n	8003874 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4b09      	ldr	r3, [pc, #36]	; (80037ec <HAL_RCC_OscConfig+0x66c>)
 80037c8:	4910      	ldr	r1, [pc, #64]	; (800380c <HAL_RCC_OscConfig+0x68c>)
 80037ca:	400a      	ands	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ce:	f7fe ffb5 	bl	800273c <HAL_GetTick>
 80037d2:	0003      	movs	r3, r0
 80037d4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80037d6:	e01b      	b.n	8003810 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d8:	f7fe ffb0 	bl	800273c <HAL_GetTick>
 80037dc:	0002      	movs	r2, r0
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d914      	bls.n	8003810 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e083      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	40021000 	.word	0x40021000
 80037f0:	fffffeff 	.word	0xfffffeff
 80037f4:	40007000 	.word	0x40007000
 80037f8:	fffffbff 	.word	0xfffffbff
 80037fc:	00001388 	.word	0x00001388
 8003800:	efffffff 	.word	0xefffffff
 8003804:	40010000 	.word	0x40010000
 8003808:	ffffdfff 	.word	0xffffdfff
 800380c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003810:	4b3a      	ldr	r3, [pc, #232]	; (80038fc <HAL_RCC_OscConfig+0x77c>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	2380      	movs	r3, #128	; 0x80
 8003816:	049b      	lsls	r3, r3, #18
 8003818:	4013      	ands	r3, r2
 800381a:	d1dd      	bne.n	80037d8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800381c:	4b37      	ldr	r3, [pc, #220]	; (80038fc <HAL_RCC_OscConfig+0x77c>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4a37      	ldr	r2, [pc, #220]	; (8003900 <HAL_RCC_OscConfig+0x780>)
 8003822:	4013      	ands	r3, r2
 8003824:	0019      	movs	r1, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003834:	431a      	orrs	r2, r3
 8003836:	4b31      	ldr	r3, [pc, #196]	; (80038fc <HAL_RCC_OscConfig+0x77c>)
 8003838:	430a      	orrs	r2, r1
 800383a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800383c:	4b2f      	ldr	r3, [pc, #188]	; (80038fc <HAL_RCC_OscConfig+0x77c>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <HAL_RCC_OscConfig+0x77c>)
 8003842:	2180      	movs	r1, #128	; 0x80
 8003844:	0449      	lsls	r1, r1, #17
 8003846:	430a      	orrs	r2, r1
 8003848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384a:	f7fe ff77 	bl	800273c <HAL_GetTick>
 800384e:	0003      	movs	r3, r0
 8003850:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003854:	f7fe ff72 	bl	800273c <HAL_GetTick>
 8003858:	0002      	movs	r2, r0
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e045      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003866:	4b25      	ldr	r3, [pc, #148]	; (80038fc <HAL_RCC_OscConfig+0x77c>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	049b      	lsls	r3, r3, #18
 800386e:	4013      	ands	r3, r2
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x6d4>
 8003872:	e03d      	b.n	80038f0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003874:	4b21      	ldr	r3, [pc, #132]	; (80038fc <HAL_RCC_OscConfig+0x77c>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b20      	ldr	r3, [pc, #128]	; (80038fc <HAL_RCC_OscConfig+0x77c>)
 800387a:	4922      	ldr	r1, [pc, #136]	; (8003904 <HAL_RCC_OscConfig+0x784>)
 800387c:	400a      	ands	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe ff5c 	bl	800273c <HAL_GetTick>
 8003884:	0003      	movs	r3, r0
 8003886:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388a:	f7fe ff57 	bl	800273c <HAL_GetTick>
 800388e:	0002      	movs	r2, r0
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e02a      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <HAL_RCC_OscConfig+0x77c>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	049b      	lsls	r3, r3, #18
 80038a4:	4013      	ands	r3, r2
 80038a6:	d1f0      	bne.n	800388a <HAL_RCC_OscConfig+0x70a>
 80038a8:	e022      	b.n	80038f0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e01d      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038b6:	4b11      	ldr	r3, [pc, #68]	; (80038fc <HAL_RCC_OscConfig+0x77c>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	025b      	lsls	r3, r3, #9
 80038c2:	401a      	ands	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d10f      	bne.n	80038ec <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	23f0      	movs	r3, #240	; 0xf0
 80038d0:	039b      	lsls	r3, r3, #14
 80038d2:	401a      	ands	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d107      	bne.n	80038ec <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	23c0      	movs	r3, #192	; 0xc0
 80038e0:	041b      	lsls	r3, r3, #16
 80038e2:	401a      	ands	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	0018      	movs	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b00a      	add	sp, #40	; 0x28
 80038f8:	bdb0      	pop	{r4, r5, r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	40021000 	.word	0x40021000
 8003900:	ff02ffff 	.word	0xff02ffff
 8003904:	feffffff 	.word	0xfeffffff

08003908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003908:	b5b0      	push	{r4, r5, r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e128      	b.n	8003b6e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800391c:	4b96      	ldr	r3, [pc, #600]	; (8003b78 <HAL_RCC_ClockConfig+0x270>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2201      	movs	r2, #1
 8003922:	4013      	ands	r3, r2
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d91e      	bls.n	8003968 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b93      	ldr	r3, [pc, #588]	; (8003b78 <HAL_RCC_ClockConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2201      	movs	r2, #1
 8003930:	4393      	bics	r3, r2
 8003932:	0019      	movs	r1, r3
 8003934:	4b90      	ldr	r3, [pc, #576]	; (8003b78 <HAL_RCC_ClockConfig+0x270>)
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800393c:	f7fe fefe 	bl	800273c <HAL_GetTick>
 8003940:	0003      	movs	r3, r0
 8003942:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003944:	e009      	b.n	800395a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003946:	f7fe fef9 	bl	800273c <HAL_GetTick>
 800394a:	0002      	movs	r2, r0
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	4a8a      	ldr	r2, [pc, #552]	; (8003b7c <HAL_RCC_ClockConfig+0x274>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e109      	b.n	8003b6e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b87      	ldr	r3, [pc, #540]	; (8003b78 <HAL_RCC_ClockConfig+0x270>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2201      	movs	r2, #1
 8003960:	4013      	ands	r3, r2
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d1ee      	bne.n	8003946 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2202      	movs	r2, #2
 800396e:	4013      	ands	r3, r2
 8003970:	d009      	beq.n	8003986 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003972:	4b83      	ldr	r3, [pc, #524]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	22f0      	movs	r2, #240	; 0xf0
 8003978:	4393      	bics	r3, r2
 800397a:	0019      	movs	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	4b7f      	ldr	r3, [pc, #508]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 8003982:	430a      	orrs	r2, r1
 8003984:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2201      	movs	r2, #1
 800398c:	4013      	ands	r3, r2
 800398e:	d100      	bne.n	8003992 <HAL_RCC_ClockConfig+0x8a>
 8003990:	e089      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d107      	bne.n	80039aa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800399a:	4b79      	ldr	r3, [pc, #484]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	029b      	lsls	r3, r3, #10
 80039a2:	4013      	ands	r3, r2
 80039a4:	d120      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e0e1      	b.n	8003b6e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039b2:	4b73      	ldr	r3, [pc, #460]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	049b      	lsls	r3, r3, #18
 80039ba:	4013      	ands	r3, r2
 80039bc:	d114      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e0d5      	b.n	8003b6e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d106      	bne.n	80039d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039ca:	4b6d      	ldr	r3, [pc, #436]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2204      	movs	r2, #4
 80039d0:	4013      	ands	r3, r2
 80039d2:	d109      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0ca      	b.n	8003b6e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80039d8:	4b69      	ldr	r3, [pc, #420]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4013      	ands	r3, r2
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0c2      	b.n	8003b6e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039e8:	4b65      	ldr	r3, [pc, #404]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2203      	movs	r2, #3
 80039ee:	4393      	bics	r3, r2
 80039f0:	0019      	movs	r1, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	4b62      	ldr	r3, [pc, #392]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 80039f8:	430a      	orrs	r2, r1
 80039fa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039fc:	f7fe fe9e 	bl	800273c <HAL_GetTick>
 8003a00:	0003      	movs	r3, r0
 8003a02:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d111      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a0c:	e009      	b.n	8003a22 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a0e:	f7fe fe95 	bl	800273c <HAL_GetTick>
 8003a12:	0002      	movs	r2, r0
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	4a58      	ldr	r2, [pc, #352]	; (8003b7c <HAL_RCC_ClockConfig+0x274>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e0a5      	b.n	8003b6e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a22:	4b57      	ldr	r3, [pc, #348]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	220c      	movs	r2, #12
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d1ef      	bne.n	8003a0e <HAL_RCC_ClockConfig+0x106>
 8003a2e:	e03a      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d111      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a38:	e009      	b.n	8003a4e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3a:	f7fe fe7f 	bl	800273c <HAL_GetTick>
 8003a3e:	0002      	movs	r2, r0
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	4a4d      	ldr	r2, [pc, #308]	; (8003b7c <HAL_RCC_ClockConfig+0x274>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e08f      	b.n	8003b6e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a4e:	4b4c      	ldr	r3, [pc, #304]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	220c      	movs	r2, #12
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b0c      	cmp	r3, #12
 8003a58:	d1ef      	bne.n	8003a3a <HAL_RCC_ClockConfig+0x132>
 8003a5a:	e024      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d11b      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a64:	e009      	b.n	8003a7a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a66:	f7fe fe69 	bl	800273c <HAL_GetTick>
 8003a6a:	0002      	movs	r2, r0
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	4a42      	ldr	r2, [pc, #264]	; (8003b7c <HAL_RCC_ClockConfig+0x274>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e079      	b.n	8003b6e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a7a:	4b41      	ldr	r3, [pc, #260]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	220c      	movs	r2, #12
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d1ef      	bne.n	8003a66 <HAL_RCC_ClockConfig+0x15e>
 8003a86:	e00e      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a88:	f7fe fe58 	bl	800273c <HAL_GetTick>
 8003a8c:	0002      	movs	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	4a3a      	ldr	r2, [pc, #232]	; (8003b7c <HAL_RCC_ClockConfig+0x274>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e068      	b.n	8003b6e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a9c:	4b38      	ldr	r3, [pc, #224]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	220c      	movs	r2, #12
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa6:	4b34      	ldr	r3, [pc, #208]	; (8003b78 <HAL_RCC_ClockConfig+0x270>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	4013      	ands	r3, r2
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d21e      	bcs.n	8003af2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab4:	4b30      	ldr	r3, [pc, #192]	; (8003b78 <HAL_RCC_ClockConfig+0x270>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	4393      	bics	r3, r2
 8003abc:	0019      	movs	r1, r3
 8003abe:	4b2e      	ldr	r3, [pc, #184]	; (8003b78 <HAL_RCC_ClockConfig+0x270>)
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ac6:	f7fe fe39 	bl	800273c <HAL_GetTick>
 8003aca:	0003      	movs	r3, r0
 8003acc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	e009      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad0:	f7fe fe34 	bl	800273c <HAL_GetTick>
 8003ad4:	0002      	movs	r2, r0
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	4a28      	ldr	r2, [pc, #160]	; (8003b7c <HAL_RCC_ClockConfig+0x274>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e044      	b.n	8003b6e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae4:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <HAL_RCC_ClockConfig+0x270>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	4013      	ands	r3, r2
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d1ee      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2204      	movs	r2, #4
 8003af8:	4013      	ands	r3, r2
 8003afa:	d009      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003afc:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a20      	ldr	r2, [pc, #128]	; (8003b84 <HAL_RCC_ClockConfig+0x27c>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	0019      	movs	r1, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2208      	movs	r2, #8
 8003b16:	4013      	ands	r3, r2
 8003b18:	d00a      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b1a:	4b19      	ldr	r3, [pc, #100]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	4a1a      	ldr	r2, [pc, #104]	; (8003b88 <HAL_RCC_ClockConfig+0x280>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	0019      	movs	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	00da      	lsls	r2, r3, #3
 8003b2a:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b30:	f000 f8c4 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8003b34:	0001      	movs	r1, r0
 8003b36:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <HAL_RCC_ClockConfig+0x278>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	220f      	movs	r2, #15
 8003b3e:	4013      	ands	r3, r2
 8003b40:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <HAL_RCC_ClockConfig+0x284>)
 8003b42:	5cd3      	ldrb	r3, [r2, r3]
 8003b44:	000a      	movs	r2, r1
 8003b46:	40da      	lsrs	r2, r3
 8003b48:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <HAL_RCC_ClockConfig+0x288>)
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b4c:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_RCC_ClockConfig+0x28c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	250b      	movs	r5, #11
 8003b52:	197c      	adds	r4, r7, r5
 8003b54:	0018      	movs	r0, r3
 8003b56:	f7fe fdab 	bl	80026b0 <HAL_InitTick>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003b5e:	197b      	adds	r3, r7, r5
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003b66:	197b      	adds	r3, r7, r5
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	0018      	movs	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b004      	add	sp, #16
 8003b74:	bdb0      	pop	{r4, r5, r7, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	40022000 	.word	0x40022000
 8003b7c:	00001388 	.word	0x00001388
 8003b80:	40021000 	.word	0x40021000
 8003b84:	fffff8ff 	.word	0xfffff8ff
 8003b88:	ffffc7ff 	.word	0xffffc7ff
 8003b8c:	08006c18 	.word	0x08006c18
 8003b90:	20000080 	.word	0x20000080
 8003b94:	20000084 	.word	0x20000084

08003b98 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b08d      	sub	sp, #52	; 0x34
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 8003ba4:	241c      	movs	r4, #28
 8003ba6:	193b      	adds	r3, r7, r4
 8003ba8:	0018      	movs	r0, r3
 8003baa:	2314      	movs	r3, #20
 8003bac:	001a      	movs	r2, r3
 8003bae:	2100      	movs	r1, #0
 8003bb0:	f001 fc1e 	bl	80053f0 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003bb4:	0020      	movs	r0, r4
 8003bb6:	183b      	adds	r3, r7, r0
 8003bb8:	2202      	movs	r2, #2
 8003bba:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003bbc:	183b      	adds	r3, r7, r0
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 8003bc2:	183b      	adds	r3, r7, r0
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d11a      	bne.n	8003c04 <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 8003bce:	183b      	adds	r3, r7, r0
 8003bd0:	2280      	movs	r2, #128	; 0x80
 8003bd2:	0052      	lsls	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8003bd6:	183b      	adds	r3, r7, r0
 8003bd8:	2200      	movs	r2, #0
 8003bda:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003bdc:	4b2d      	ldr	r3, [pc, #180]	; (8003c94 <HAL_RCC_MCOConfig+0xfc>)
 8003bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be0:	4b2c      	ldr	r3, [pc, #176]	; (8003c94 <HAL_RCC_MCOConfig+0xfc>)
 8003be2:	2101      	movs	r1, #1
 8003be4:	430a      	orrs	r2, r1
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003be8:	4b2a      	ldr	r3, [pc, #168]	; (8003c94 <HAL_RCC_MCOConfig+0xfc>)
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	2201      	movs	r2, #1
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
 8003bf2:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8003bf4:	183a      	adds	r2, r7, r0
 8003bf6:	23a0      	movs	r3, #160	; 0xa0
 8003bf8:	05db      	lsls	r3, r3, #23
 8003bfa:	0011      	movs	r1, r2
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f7ff f8bf 	bl	8002d80 <HAL_GPIO_Init>
 8003c02:	e038      	b.n	8003c76 <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d11a      	bne.n	8003c40 <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 8003c0a:	201c      	movs	r0, #28
 8003c0c:	183b      	adds	r3, r7, r0
 8003c0e:	2280      	movs	r2, #128	; 0x80
 8003c10:	0192      	lsls	r2, r2, #6
 8003c12:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 8003c14:	183b      	adds	r3, r7, r0
 8003c16:	2200      	movs	r2, #0
 8003c18:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 8003c1a:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <HAL_RCC_MCOConfig+0xfc>)
 8003c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1e:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <HAL_RCC_MCOConfig+0xfc>)
 8003c20:	2102      	movs	r1, #2
 8003c22:	430a      	orrs	r2, r1
 8003c24:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c26:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <HAL_RCC_MCOConfig+0xfc>)
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 8003c32:	183b      	adds	r3, r7, r0
 8003c34:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <HAL_RCC_MCOConfig+0x100>)
 8003c36:	0019      	movs	r1, r3
 8003c38:	0010      	movs	r0, r2
 8003c3a:	f7ff f8a1 	bl	8002d80 <HAL_GPIO_Init>
 8003c3e:	e01a      	b.n	8003c76 <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 8003c40:	201c      	movs	r0, #28
 8003c42:	183b      	adds	r3, r7, r0
 8003c44:	2280      	movs	r2, #128	; 0x80
 8003c46:	0092      	lsls	r2, r2, #2
 8003c48:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8003c4a:	183b      	adds	r3, r7, r0
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 8003c50:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <HAL_RCC_MCOConfig+0xfc>)
 8003c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c54:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <HAL_RCC_MCOConfig+0xfc>)
 8003c56:	2101      	movs	r1, #1
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c5c:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <HAL_RCC_MCOConfig+0xfc>)
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	2201      	movs	r2, #1
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 8003c68:	183a      	adds	r2, r7, r0
 8003c6a:	23a0      	movs	r3, #160	; 0xa0
 8003c6c:	05db      	lsls	r3, r3, #23
 8003c6e:	0011      	movs	r1, r2
 8003c70:	0018      	movs	r0, r3
 8003c72:	f7ff f885 	bl	8002d80 <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003c76:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <HAL_RCC_MCOConfig+0xfc>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	4a08      	ldr	r2, [pc, #32]	; (8003c9c <HAL_RCC_MCOConfig+0x104>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	0019      	movs	r1, r3
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <HAL_RCC_MCOConfig+0xfc>)
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	60da      	str	r2, [r3, #12]
}
 8003c8c:	46c0      	nop			; (mov r8, r8)
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b00d      	add	sp, #52	; 0x34
 8003c92:	bd90      	pop	{r4, r7, pc}
 8003c94:	40021000 	.word	0x40021000
 8003c98:	50000400 	.word	0x50000400
 8003c9c:	80ffffff 	.word	0x80ffffff

08003ca0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <HAL_RCC_EnableCSS+0x18>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b03      	ldr	r3, [pc, #12]	; (8003cb8 <HAL_RCC_EnableCSS+0x18>)
 8003caa:	2180      	movs	r1, #128	; 0x80
 8003cac:	0309      	lsls	r1, r1, #12
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40021000 	.word	0x40021000

08003cbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cbc:	b5b0      	push	{r4, r5, r7, lr}
 8003cbe:	b08e      	sub	sp, #56	; 0x38
 8003cc0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003cc2:	4b4c      	ldr	r3, [pc, #304]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cca:	230c      	movs	r3, #12
 8003ccc:	4013      	ands	r3, r2
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d014      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0x40>
 8003cd2:	d900      	bls.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x1a>
 8003cd4:	e07b      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x112>
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d002      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x24>
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d00b      	beq.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cde:	e076      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ce0:	4b44      	ldr	r3, [pc, #272]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2210      	movs	r2, #16
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d002      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003cea:	4b43      	ldr	r3, [pc, #268]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003cec:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003cee:	e07c      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003cf0:	4b42      	ldr	r3, [pc, #264]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x140>)
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cf4:	e079      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cf6:	4b42      	ldr	r3, [pc, #264]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x144>)
 8003cf8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cfa:	e076      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfe:	0c9a      	lsrs	r2, r3, #18
 8003d00:	230f      	movs	r3, #15
 8003d02:	401a      	ands	r2, r3
 8003d04:	4b3f      	ldr	r3, [pc, #252]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x148>)
 8003d06:	5c9b      	ldrb	r3, [r3, r2]
 8003d08:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0c:	0d9a      	lsrs	r2, r3, #22
 8003d0e:	2303      	movs	r3, #3
 8003d10:	4013      	ands	r3, r2
 8003d12:	3301      	adds	r3, #1
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d16:	4b37      	ldr	r3, [pc, #220]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	025b      	lsls	r3, r3, #9
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d01a      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	4a35      	ldr	r2, [pc, #212]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x144>)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	69b8      	ldr	r0, [r7, #24]
 8003d30:	69f9      	ldr	r1, [r7, #28]
 8003d32:	f7fc fa9f 	bl	8000274 <__aeabi_lmul>
 8003d36:	0002      	movs	r2, r0
 8003d38:	000b      	movs	r3, r1
 8003d3a:	0010      	movs	r0, r2
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f7fc fa73 	bl	8000234 <__aeabi_uldivmod>
 8003d4e:	0002      	movs	r2, r0
 8003d50:	000b      	movs	r3, r1
 8003d52:	0013      	movs	r3, r2
 8003d54:	637b      	str	r3, [r7, #52]	; 0x34
 8003d56:	e037      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003d58:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d01a      	beq.n	8003d98 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	4a23      	ldr	r2, [pc, #140]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	68b8      	ldr	r0, [r7, #8]
 8003d70:	68f9      	ldr	r1, [r7, #12]
 8003d72:	f7fc fa7f 	bl	8000274 <__aeabi_lmul>
 8003d76:	0002      	movs	r2, r0
 8003d78:	000b      	movs	r3, r1
 8003d7a:	0010      	movs	r0, r2
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f7fc fa53 	bl	8000234 <__aeabi_uldivmod>
 8003d8e:	0002      	movs	r2, r0
 8003d90:	000b      	movs	r3, r1
 8003d92:	0013      	movs	r3, r2
 8003d94:	637b      	str	r3, [r7, #52]	; 0x34
 8003d96:	e017      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	0019      	movs	r1, r3
 8003da0:	4a16      	ldr	r2, [pc, #88]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x140>)
 8003da2:	2300      	movs	r3, #0
 8003da4:	f7fc fa66 	bl	8000274 <__aeabi_lmul>
 8003da8:	0002      	movs	r2, r0
 8003daa:	000b      	movs	r3, r1
 8003dac:	0010      	movs	r0, r2
 8003dae:	0019      	movs	r1, r3
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	001c      	movs	r4, r3
 8003db4:	2300      	movs	r3, #0
 8003db6:	001d      	movs	r5, r3
 8003db8:	0022      	movs	r2, r4
 8003dba:	002b      	movs	r3, r5
 8003dbc:	f7fc fa3a 	bl	8000234 <__aeabi_uldivmod>
 8003dc0:	0002      	movs	r2, r0
 8003dc2:	000b      	movs	r3, r1
 8003dc4:	0013      	movs	r3, r2
 8003dc6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003dcc:	e00d      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	0b5b      	lsrs	r3, r3, #13
 8003dd4:	2207      	movs	r2, #7
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	2280      	movs	r2, #128	; 0x80
 8003de0:	0212      	lsls	r2, r2, #8
 8003de2:	409a      	lsls	r2, r3
 8003de4:	0013      	movs	r3, r2
 8003de6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003de8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b00e      	add	sp, #56	; 0x38
 8003df2:	bdb0      	pop	{r4, r5, r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	003d0900 	.word	0x003d0900
 8003dfc:	00f42400 	.word	0x00f42400
 8003e00:	0030d400 	.word	0x0030d400
 8003e04:	08006c30 	.word	0x08006c30

08003e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e0c:	4b02      	ldr	r3, [pc, #8]	; (8003e18 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	20000080 	.word	0x20000080

08003e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e20:	f7ff fff2 	bl	8003e08 <HAL_RCC_GetHCLKFreq>
 8003e24:	0001      	movs	r1, r0
 8003e26:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	2207      	movs	r2, #7
 8003e2e:	4013      	ands	r3, r2
 8003e30:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e32:	5cd3      	ldrb	r3, [r2, r3]
 8003e34:	40d9      	lsrs	r1, r3
 8003e36:	000b      	movs	r3, r1
}
 8003e38:	0018      	movs	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	40021000 	.word	0x40021000
 8003e44:	08006c28 	.word	0x08006c28

08003e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e4c:	f7ff ffdc 	bl	8003e08 <HAL_RCC_GetHCLKFreq>
 8003e50:	0001      	movs	r1, r0
 8003e52:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	0adb      	lsrs	r3, r3, #11
 8003e58:	2207      	movs	r2, #7
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	4a04      	ldr	r2, [pc, #16]	; (8003e70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e5e:	5cd3      	ldrb	r3, [r2, r3]
 8003e60:	40d9      	lsrs	r1, r3
 8003e62:	000b      	movs	r3, r1
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	08006c28 	.word	0x08006c28

08003e74 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003e7c:	2317      	movs	r3, #23
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d106      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	2380      	movs	r3, #128	; 0x80
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	4013      	ands	r3, r2
 8003e98:	d100      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003e9a:	e0d9      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e9c:	4b9c      	ldr	r3, [pc, #624]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	055b      	lsls	r3, r3, #21
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d10a      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea8:	4b99      	ldr	r3, [pc, #612]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eac:	4b98      	ldr	r3, [pc, #608]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	0549      	lsls	r1, r1, #21
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003eb6:	2317      	movs	r3, #23
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	2201      	movs	r2, #1
 8003ebc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebe:	4b95      	ldr	r3, [pc, #596]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d11a      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eca:	4b92      	ldr	r3, [pc, #584]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4b91      	ldr	r3, [pc, #580]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003ed0:	2180      	movs	r1, #128	; 0x80
 8003ed2:	0049      	lsls	r1, r1, #1
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed8:	f7fe fc30 	bl	800273c <HAL_GetTick>
 8003edc:	0003      	movs	r3, r0
 8003ede:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee2:	f7fe fc2b 	bl	800273c <HAL_GetTick>
 8003ee6:	0002      	movs	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b64      	cmp	r3, #100	; 0x64
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e108      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef4:	4b87      	ldr	r3, [pc, #540]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	4013      	ands	r3, r2
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003f00:	4b83      	ldr	r3, [pc, #524]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	23c0      	movs	r3, #192	; 0xc0
 8003f06:	039b      	lsls	r3, r3, #14
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	23c0      	movs	r3, #192	; 0xc0
 8003f12:	039b      	lsls	r3, r3, #14
 8003f14:	4013      	ands	r3, r2
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d107      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	23c0      	movs	r3, #192	; 0xc0
 8003f22:	039b      	lsls	r3, r3, #14
 8003f24:	4013      	ands	r3, r2
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d013      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	23c0      	movs	r3, #192	; 0xc0
 8003f32:	029b      	lsls	r3, r3, #10
 8003f34:	401a      	ands	r2, r3
 8003f36:	23c0      	movs	r3, #192	; 0xc0
 8003f38:	029b      	lsls	r3, r3, #10
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d10a      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003f3e:	4b74      	ldr	r3, [pc, #464]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	029b      	lsls	r3, r3, #10
 8003f46:	401a      	ands	r2, r3
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	029b      	lsls	r3, r3, #10
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0d8      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003f54:	4b6e      	ldr	r3, [pc, #440]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003f56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f58:	23c0      	movs	r3, #192	; 0xc0
 8003f5a:	029b      	lsls	r3, r3, #10
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d049      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	23c0      	movs	r3, #192	; 0xc0
 8003f6c:	029b      	lsls	r3, r3, #10
 8003f6e:	4013      	ands	r3, r2
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d004      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d10d      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	23c0      	movs	r3, #192	; 0xc0
 8003f86:	029b      	lsls	r3, r3, #10
 8003f88:	4013      	ands	r3, r2
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d034      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d02e      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003f9c:	4b5c      	ldr	r3, [pc, #368]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa0:	4a5d      	ldr	r2, [pc, #372]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fa6:	4b5a      	ldr	r3, [pc, #360]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003fa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003faa:	4b59      	ldr	r3, [pc, #356]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003fac:	2180      	movs	r1, #128	; 0x80
 8003fae:	0309      	lsls	r1, r1, #12
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb4:	4b56      	ldr	r3, [pc, #344]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003fb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fb8:	4b55      	ldr	r3, [pc, #340]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003fba:	4958      	ldr	r1, [pc, #352]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003fbc:	400a      	ands	r2, r1
 8003fbe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003fc0:	4b53      	ldr	r3, [pc, #332]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d014      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fe fbb4 	bl	800273c <HAL_GetTick>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fd8:	e009      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fe fbaf 	bl	800273c <HAL_GetTick>
 8003fde:	0002      	movs	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	4a4e      	ldr	r2, [pc, #312]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e08b      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fee:	4b48      	ldr	r3, [pc, #288]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003ff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ff2:	2380      	movs	r3, #128	; 0x80
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d0ef      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	23c0      	movs	r3, #192	; 0xc0
 8004000:	029b      	lsls	r3, r3, #10
 8004002:	401a      	ands	r2, r3
 8004004:	23c0      	movs	r3, #192	; 0xc0
 8004006:	029b      	lsls	r3, r3, #10
 8004008:	429a      	cmp	r2, r3
 800400a:	d10c      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800400c:	4b40      	ldr	r3, [pc, #256]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a44      	ldr	r2, [pc, #272]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004012:	4013      	ands	r3, r2
 8004014:	0019      	movs	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	23c0      	movs	r3, #192	; 0xc0
 800401c:	039b      	lsls	r3, r3, #14
 800401e:	401a      	ands	r2, r3
 8004020:	4b3b      	ldr	r3, [pc, #236]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004022:	430a      	orrs	r2, r1
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	4b3a      	ldr	r3, [pc, #232]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004028:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	23c0      	movs	r3, #192	; 0xc0
 8004030:	029b      	lsls	r3, r3, #10
 8004032:	401a      	ands	r2, r3
 8004034:	4b36      	ldr	r3, [pc, #216]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004036:	430a      	orrs	r2, r1
 8004038:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800403a:	2317      	movs	r3, #23
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d105      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004044:	4b32      	ldr	r3, [pc, #200]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004048:	4b31      	ldr	r3, [pc, #196]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800404a:	4937      	ldr	r1, [pc, #220]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800404c:	400a      	ands	r2, r1
 800404e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2201      	movs	r2, #1
 8004056:	4013      	ands	r3, r2
 8004058:	d009      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800405a:	4b2d      	ldr	r3, [pc, #180]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800405c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405e:	2203      	movs	r2, #3
 8004060:	4393      	bics	r3, r2
 8004062:	0019      	movs	r1, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	4b29      	ldr	r3, [pc, #164]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800406a:	430a      	orrs	r2, r1
 800406c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2202      	movs	r2, #2
 8004074:	4013      	ands	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004078:	4b25      	ldr	r3, [pc, #148]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800407a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407c:	220c      	movs	r2, #12
 800407e:	4393      	bics	r3, r2
 8004080:	0019      	movs	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	4b22      	ldr	r3, [pc, #136]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004088:	430a      	orrs	r2, r1
 800408a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2204      	movs	r2, #4
 8004092:	4013      	ands	r3, r2
 8004094:	d009      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004096:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409a:	4a24      	ldr	r2, [pc, #144]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800409c:	4013      	ands	r3, r2
 800409e:	0019      	movs	r1, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695a      	ldr	r2, [r3, #20]
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040a6:	430a      	orrs	r2, r1
 80040a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2208      	movs	r2, #8
 80040b0:	4013      	ands	r3, r2
 80040b2:	d009      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040b4:	4b16      	ldr	r3, [pc, #88]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b8:	4a1d      	ldr	r2, [pc, #116]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	0019      	movs	r1, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	4b13      	ldr	r3, [pc, #76]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040c4:	430a      	orrs	r2, r1
 80040c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2240      	movs	r2, #64	; 0x40
 80040ce:	4013      	ands	r3, r2
 80040d0:	d009      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040d2:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d6:	4a17      	ldr	r2, [pc, #92]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80040d8:	4013      	ands	r3, r2
 80040da:	0019      	movs	r1, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1a      	ldr	r2, [r3, #32]
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040e2:	430a      	orrs	r2, r1
 80040e4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2280      	movs	r2, #128	; 0x80
 80040ec:	4013      	ands	r3, r2
 80040ee:	d009      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f4:	4a10      	ldr	r2, [pc, #64]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	0019      	movs	r1, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69da      	ldr	r2, [r3, #28]
 80040fe:	4b04      	ldr	r3, [pc, #16]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004100:	430a      	orrs	r2, r1
 8004102:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	0018      	movs	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	b006      	add	sp, #24
 800410c:	bd80      	pop	{r7, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	40021000 	.word	0x40021000
 8004114:	40007000 	.word	0x40007000
 8004118:	fffcffff 	.word	0xfffcffff
 800411c:	fff7ffff 	.word	0xfff7ffff
 8004120:	00001388 	.word	0x00001388
 8004124:	ffcfffff 	.word	0xffcfffff
 8004128:	efffffff 	.word	0xefffffff
 800412c:	fffff3ff 	.word	0xfffff3ff
 8004130:	ffffcfff 	.word	0xffffcfff
 8004134:	fbffffff 	.word	0xfbffffff
 8004138:	fff3ffff 	.word	0xfff3ffff

0800413c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e032      	b.n	80041b4 <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2239      	movs	r2, #57	; 0x39
 8004152:	5c9b      	ldrb	r3, [r3, r2]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d107      	bne.n	800416a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2238      	movs	r2, #56	; 0x38
 800415e:	2100      	movs	r1, #0
 8004160:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	0018      	movs	r0, r3
 8004166:	f000 f829 	bl	80041bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2239      	movs	r2, #57	; 0x39
 800416e:	2102      	movs	r1, #2
 8004170:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3304      	adds	r3, #4
 800417a:	0019      	movs	r1, r3
 800417c:	0010      	movs	r0, r2
 800417e:	f000 f991 	bl	80044a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	223e      	movs	r2, #62	; 0x3e
 8004186:	2101      	movs	r1, #1
 8004188:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	223a      	movs	r2, #58	; 0x3a
 800418e:	2101      	movs	r1, #1
 8004190:	5499      	strb	r1, [r3, r2]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	223b      	movs	r2, #59	; 0x3b
 8004196:	2101      	movs	r1, #1
 8004198:	5499      	strb	r1, [r3, r2]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	223c      	movs	r2, #60	; 0x3c
 800419e:	2101      	movs	r1, #1
 80041a0:	5499      	strb	r1, [r3, r2]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	223d      	movs	r2, #61	; 0x3d
 80041a6:	2101      	movs	r1, #1
 80041a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2239      	movs	r2, #57	; 0x39
 80041ae:	2101      	movs	r1, #1
 80041b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b002      	add	sp, #8
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041d6:	230f      	movs	r3, #15
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	2200      	movs	r2, #0
 80041dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d104      	bne.n	80041ee <HAL_TIM_IC_Start_IT+0x22>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	223a      	movs	r2, #58	; 0x3a
 80041e8:	5c9b      	ldrb	r3, [r3, r2]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	e013      	b.n	8004216 <HAL_TIM_IC_Start_IT+0x4a>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d104      	bne.n	80041fe <HAL_TIM_IC_Start_IT+0x32>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	223b      	movs	r2, #59	; 0x3b
 80041f8:	5c9b      	ldrb	r3, [r3, r2]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	e00b      	b.n	8004216 <HAL_TIM_IC_Start_IT+0x4a>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d104      	bne.n	800420e <HAL_TIM_IC_Start_IT+0x42>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	223c      	movs	r2, #60	; 0x3c
 8004208:	5c9b      	ldrb	r3, [r3, r2]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	e003      	b.n	8004216 <HAL_TIM_IC_Start_IT+0x4a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	223d      	movs	r2, #61	; 0x3d
 8004212:	5c9b      	ldrb	r3, [r3, r2]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	210e      	movs	r1, #14
 8004218:	187a      	adds	r2, r7, r1
 800421a:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800421c:	187b      	adds	r3, r7, r1
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d001      	beq.n	8004228 <HAL_TIM_IC_Start_IT+0x5c>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e090      	b.n	800434a <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d104      	bne.n	8004238 <HAL_TIM_IC_Start_IT+0x6c>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	223a      	movs	r2, #58	; 0x3a
 8004232:	2102      	movs	r1, #2
 8004234:	5499      	strb	r1, [r3, r2]
 8004236:	e013      	b.n	8004260 <HAL_TIM_IC_Start_IT+0x94>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b04      	cmp	r3, #4
 800423c:	d104      	bne.n	8004248 <HAL_TIM_IC_Start_IT+0x7c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	223b      	movs	r2, #59	; 0x3b
 8004242:	2102      	movs	r1, #2
 8004244:	5499      	strb	r1, [r3, r2]
 8004246:	e00b      	b.n	8004260 <HAL_TIM_IC_Start_IT+0x94>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2b08      	cmp	r3, #8
 800424c:	d104      	bne.n	8004258 <HAL_TIM_IC_Start_IT+0x8c>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	223c      	movs	r2, #60	; 0x3c
 8004252:	2102      	movs	r1, #2
 8004254:	5499      	strb	r1, [r3, r2]
 8004256:	e003      	b.n	8004260 <HAL_TIM_IC_Start_IT+0x94>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	223d      	movs	r2, #61	; 0x3d
 800425c:	2102      	movs	r1, #2
 800425e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d02a      	beq.n	80042bc <HAL_TIM_IC_Start_IT+0xf0>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b0c      	cmp	r3, #12
 800426a:	d830      	bhi.n	80042ce <HAL_TIM_IC_Start_IT+0x102>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b08      	cmp	r3, #8
 8004270:	d01b      	beq.n	80042aa <HAL_TIM_IC_Start_IT+0xde>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d82a      	bhi.n	80042ce <HAL_TIM_IC_Start_IT+0x102>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_TIM_IC_Start_IT+0xba>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d009      	beq.n	8004298 <HAL_TIM_IC_Start_IT+0xcc>
 8004284:	e023      	b.n	80042ce <HAL_TIM_IC_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2102      	movs	r1, #2
 8004292:	430a      	orrs	r2, r1
 8004294:	60da      	str	r2, [r3, #12]
      break;
 8004296:	e01f      	b.n	80042d8 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2104      	movs	r1, #4
 80042a4:	430a      	orrs	r2, r1
 80042a6:	60da      	str	r2, [r3, #12]
      break;
 80042a8:	e016      	b.n	80042d8 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2108      	movs	r1, #8
 80042b6:	430a      	orrs	r2, r1
 80042b8:	60da      	str	r2, [r3, #12]
      break;
 80042ba:	e00d      	b.n	80042d8 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2110      	movs	r1, #16
 80042c8:	430a      	orrs	r2, r1
 80042ca:	60da      	str	r2, [r3, #12]
      break;
 80042cc:	e004      	b.n	80042d8 <HAL_TIM_IC_Start_IT+0x10c>
    }

    default:
      status = HAL_ERROR;
 80042ce:	230f      	movs	r3, #15
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	2201      	movs	r2, #1
 80042d4:	701a      	strb	r2, [r3, #0]
      break;
 80042d6:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80042d8:	230f      	movs	r3, #15
 80042da:	18fb      	adds	r3, r7, r3
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d130      	bne.n	8004344 <HAL_TIM_IC_Start_IT+0x178>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6839      	ldr	r1, [r7, #0]
 80042e8:	2201      	movs	r2, #1
 80042ea:	0018      	movs	r0, r3
 80042ec:	f000 fa4c 	bl	8004788 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	05db      	lsls	r3, r3, #23
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d009      	beq.n	8004310 <HAL_TIM_IC_Start_IT+0x144>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a14      	ldr	r2, [pc, #80]	; (8004354 <HAL_TIM_IC_Start_IT+0x188>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_TIM_IC_Start_IT+0x144>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a13      	ldr	r2, [pc, #76]	; (8004358 <HAL_TIM_IC_Start_IT+0x18c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d111      	bne.n	8004334 <HAL_TIM_IC_Start_IT+0x168>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	2207      	movs	r2, #7
 8004318:	4013      	ands	r3, r2
 800431a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b06      	cmp	r3, #6
 8004320:	d010      	beq.n	8004344 <HAL_TIM_IC_Start_IT+0x178>
      {
        __HAL_TIM_ENABLE(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2101      	movs	r1, #1
 800432e:	430a      	orrs	r2, r1
 8004330:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004332:	e007      	b.n	8004344 <HAL_TIM_IC_Start_IT+0x178>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2101      	movs	r1, #1
 8004340:	430a      	orrs	r2, r1
 8004342:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004344:	230f      	movs	r3, #15
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	781b      	ldrb	r3, [r3, #0]
}
 800434a:	0018      	movs	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	b004      	add	sp, #16
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	40010800 	.word	0x40010800
 8004358:	40011400 	.word	0x40011400

0800435c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004368:	2317      	movs	r3, #23
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2238      	movs	r2, #56	; 0x38
 8004374:	5c9b      	ldrb	r3, [r3, r2]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_TIM_IC_ConfigChannel+0x22>
 800437a:	2302      	movs	r3, #2
 800437c:	e08c      	b.n	8004498 <HAL_TIM_IC_ConfigChannel+0x13c>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2238      	movs	r2, #56	; 0x38
 8004382:	2101      	movs	r1, #1
 8004384:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d11b      	bne.n	80043c4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6819      	ldr	r1, [r3, #0]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f000 f8d6 	bl	800454c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	210c      	movs	r1, #12
 80043ac:	438a      	bics	r2, r1
 80043ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6999      	ldr	r1, [r3, #24]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	619a      	str	r2, [r3, #24]
 80043c2:	e062      	b.n	800448a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d11c      	bne.n	8004404 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6819      	ldr	r1, [r3, #0]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f000 f90d 	bl	80045f8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699a      	ldr	r2, [r3, #24]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	492d      	ldr	r1, [pc, #180]	; (80044a0 <HAL_TIM_IC_ConfigChannel+0x144>)
 80043ea:	400a      	ands	r2, r1
 80043ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6999      	ldr	r1, [r3, #24]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	021a      	lsls	r2, r3, #8
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	619a      	str	r2, [r3, #24]
 8004402:	e042      	b.n	800448a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b08      	cmp	r3, #8
 8004408:	d11b      	bne.n	8004442 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6819      	ldr	r1, [r3, #0]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f000 f92f 	bl	800467c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69da      	ldr	r2, [r3, #28]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	210c      	movs	r1, #12
 800442a:	438a      	bics	r2, r1
 800442c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69d9      	ldr	r1, [r3, #28]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	61da      	str	r2, [r3, #28]
 8004440:	e023      	b.n	800448a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b0c      	cmp	r3, #12
 8004446:	d11c      	bne.n	8004482 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6819      	ldr	r1, [r3, #0]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f000 f950 	bl	80046fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	490e      	ldr	r1, [pc, #56]	; (80044a0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8004468:	400a      	ands	r2, r1
 800446a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69d9      	ldr	r1, [r3, #28]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	021a      	lsls	r2, r3, #8
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	61da      	str	r2, [r3, #28]
 8004480:	e003      	b.n	800448a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8004482:	2317      	movs	r3, #23
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	2201      	movs	r2, #1
 8004488:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2238      	movs	r2, #56	; 0x38
 800448e:	2100      	movs	r1, #0
 8004490:	5499      	strb	r1, [r3, r2]

  return status;
 8004492:	2317      	movs	r3, #23
 8004494:	18fb      	adds	r3, r7, r3
 8004496:	781b      	ldrb	r3, [r3, #0]
}
 8004498:	0018      	movs	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	b006      	add	sp, #24
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	fffff3ff 	.word	0xfffff3ff

080044a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	2380      	movs	r3, #128	; 0x80
 80044b8:	05db      	lsls	r3, r3, #23
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d007      	beq.n	80044ce <TIM_Base_SetConfig+0x2a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a1f      	ldr	r2, [pc, #124]	; (8004540 <TIM_Base_SetConfig+0x9c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d003      	beq.n	80044ce <TIM_Base_SetConfig+0x2a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <TIM_Base_SetConfig+0xa0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d108      	bne.n	80044e0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2270      	movs	r2, #112	; 0x70
 80044d2:	4393      	bics	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	2380      	movs	r3, #128	; 0x80
 80044e4:	05db      	lsls	r3, r3, #23
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d007      	beq.n	80044fa <TIM_Base_SetConfig+0x56>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a14      	ldr	r2, [pc, #80]	; (8004540 <TIM_Base_SetConfig+0x9c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d003      	beq.n	80044fa <TIM_Base_SetConfig+0x56>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a13      	ldr	r2, [pc, #76]	; (8004544 <TIM_Base_SetConfig+0xa0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d108      	bne.n	800450c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4a12      	ldr	r2, [pc, #72]	; (8004548 <TIM_Base_SetConfig+0xa4>)
 80044fe:	4013      	ands	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2280      	movs	r2, #128	; 0x80
 8004510:	4393      	bics	r3, r2
 8004512:	001a      	movs	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	615a      	str	r2, [r3, #20]
}
 8004538:	46c0      	nop			; (mov r8, r8)
 800453a:	46bd      	mov	sp, r7
 800453c:	b004      	add	sp, #16
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40010800 	.word	0x40010800
 8004544:	40011400 	.word	0x40011400
 8004548:	fffffcff 	.word	0xfffffcff

0800454c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	2201      	movs	r2, #1
 8004560:	4393      	bics	r3, r2
 8004562:	001a      	movs	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	05db      	lsls	r3, r3, #23
 800457a:	429a      	cmp	r2, r3
 800457c:	d007      	beq.n	800458e <TIM_TI1_SetConfig+0x42>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <TIM_TI1_SetConfig+0xa4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d003      	beq.n	800458e <TIM_TI1_SetConfig+0x42>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4a1a      	ldr	r2, [pc, #104]	; (80045f4 <TIM_TI1_SetConfig+0xa8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d101      	bne.n	8004592 <TIM_TI1_SetConfig+0x46>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <TIM_TI1_SetConfig+0x48>
 8004592:	2300      	movs	r3, #0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2203      	movs	r2, #3
 800459c:	4393      	bics	r3, r2
 800459e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	e003      	b.n	80045b2 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2201      	movs	r2, #1
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	22f0      	movs	r2, #240	; 0xf0
 80045b6:	4393      	bics	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	22ff      	movs	r2, #255	; 0xff
 80045c0:	4013      	ands	r3, r2
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	220a      	movs	r2, #10
 80045cc:	4393      	bics	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	220a      	movs	r2, #10
 80045d4:	4013      	ands	r3, r2
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	621a      	str	r2, [r3, #32]
}
 80045e8:	46c0      	nop			; (mov r8, r8)
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b006      	add	sp, #24
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40010800 	.word	0x40010800
 80045f4:	40011400 	.word	0x40011400

080045f8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	2210      	movs	r2, #16
 800460c:	4393      	bics	r3, r2
 800460e:	001a      	movs	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	4a14      	ldr	r2, [pc, #80]	; (8004674 <TIM_TI2_SetConfig+0x7c>)
 8004624:	4013      	ands	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	021b      	lsls	r3, r3, #8
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	4a10      	ldr	r2, [pc, #64]	; (8004678 <TIM_TI2_SetConfig+0x80>)
 8004636:	4013      	ands	r3, r2
 8004638:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	031b      	lsls	r3, r3, #12
 800463e:	041b      	lsls	r3, r3, #16
 8004640:	0c1b      	lsrs	r3, r3, #16
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	22a0      	movs	r2, #160	; 0xa0
 800464c:	4393      	bics	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	22a0      	movs	r2, #160	; 0xa0
 8004656:	4013      	ands	r3, r2
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	621a      	str	r2, [r3, #32]
}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	46bd      	mov	sp, r7
 800466e:	b006      	add	sp, #24
 8004670:	bd80      	pop	{r7, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	fffffcff 	.word	0xfffffcff
 8004678:	ffff0fff 	.word	0xffff0fff

0800467c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	4a19      	ldr	r2, [pc, #100]	; (80046f4 <TIM_TI3_SetConfig+0x78>)
 8004690:	401a      	ands	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2203      	movs	r2, #3
 80046a6:	4393      	bics	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	22f0      	movs	r2, #240	; 0xf0
 80046b6:	4393      	bics	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	22ff      	movs	r2, #255	; 0xff
 80046c0:	4013      	ands	r3, r2
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4a0b      	ldr	r2, [pc, #44]	; (80046f8 <TIM_TI3_SetConfig+0x7c>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	021a      	lsls	r2, r3, #8
 80046d4:	23a0      	movs	r3, #160	; 0xa0
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	4013      	ands	r3, r2
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	621a      	str	r2, [r3, #32]
}
 80046ec:	46c0      	nop			; (mov r8, r8)
 80046ee:	46bd      	mov	sp, r7
 80046f0:	b006      	add	sp, #24
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	fffffeff 	.word	0xfffffeff
 80046f8:	fffff5ff 	.word	0xfffff5ff

080046fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	4a1a      	ldr	r2, [pc, #104]	; (8004778 <TIM_TI4_SetConfig+0x7c>)
 8004710:	401a      	ands	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	4a15      	ldr	r2, [pc, #84]	; (800477c <TIM_TI4_SetConfig+0x80>)
 8004726:	4013      	ands	r3, r2
 8004728:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	4a12      	ldr	r2, [pc, #72]	; (8004780 <TIM_TI4_SetConfig+0x84>)
 8004738:	4013      	ands	r3, r2
 800473a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	031b      	lsls	r3, r3, #12
 8004740:	041b      	lsls	r3, r3, #16
 8004742:	0c1b      	lsrs	r3, r3, #16
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4a0d      	ldr	r2, [pc, #52]	; (8004784 <TIM_TI4_SetConfig+0x88>)
 800474e:	4013      	ands	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	031a      	lsls	r2, r3, #12
 8004756:	23a0      	movs	r3, #160	; 0xa0
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	4013      	ands	r3, r2
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	46bd      	mov	sp, r7
 8004772:	b006      	add	sp, #24
 8004774:	bd80      	pop	{r7, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	ffffefff 	.word	0xffffefff
 800477c:	fffffcff 	.word	0xfffffcff
 8004780:	ffff0fff 	.word	0xffff0fff
 8004784:	ffff5fff 	.word	0xffff5fff

08004788 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	221f      	movs	r2, #31
 8004798:	4013      	ands	r3, r2
 800479a:	2201      	movs	r2, #1
 800479c:	409a      	lsls	r2, r3
 800479e:	0013      	movs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	43d2      	mvns	r2, r2
 80047aa:	401a      	ands	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a1a      	ldr	r2, [r3, #32]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	211f      	movs	r1, #31
 80047b8:	400b      	ands	r3, r1
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	4099      	lsls	r1, r3
 80047be:	000b      	movs	r3, r1
 80047c0:	431a      	orrs	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	621a      	str	r2, [r3, #32]
}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b006      	add	sp, #24
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2238      	movs	r2, #56	; 0x38
 80047dc:	5c9b      	ldrb	r3, [r3, r2]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_TIMEx_RemapConfig+0x18>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e00c      	b.n	8004800 <HAL_TIMEx_RemapConfig+0x32>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2238      	movs	r2, #56	; 0x38
 80047ea:	2101      	movs	r1, #1
 80047ec:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2238      	movs	r2, #56	; 0x38
 80047fa:	2100      	movs	r1, #0
 80047fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	0018      	movs	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	b002      	add	sp, #8
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e044      	b.n	80048a4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800481e:	2b00      	cmp	r3, #0
 8004820:	d107      	bne.n	8004832 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2274      	movs	r2, #116	; 0x74
 8004826:	2100      	movs	r1, #0
 8004828:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	0018      	movs	r0, r3
 800482e:	f000 f879 	bl	8004924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2224      	movs	r2, #36	; 0x24
 8004836:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2101      	movs	r1, #1
 8004844:	438a      	bics	r2, r1
 8004846:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	0018      	movs	r0, r3
 800484c:	f000 f934 	bl	8004ab8 <UART_SetConfig>
 8004850:	0003      	movs	r3, r0
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e024      	b.n	80048a4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	0018      	movs	r0, r3
 8004866:	f000 fbab 	bl	8004fc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	490d      	ldr	r1, [pc, #52]	; (80048ac <HAL_UART_Init+0xa4>)
 8004876:	400a      	ands	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	212a      	movs	r1, #42	; 0x2a
 8004886:	438a      	bics	r2, r1
 8004888:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2101      	movs	r1, #1
 8004896:	430a      	orrs	r2, r1
 8004898:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	0018      	movs	r0, r3
 800489e:	f000 fc43 	bl	8005128 <UART_CheckIdleState>
 80048a2:	0003      	movs	r3, r0
}
 80048a4:	0018      	movs	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b002      	add	sp, #8
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	ffffb7ff 	.word	0xffffb7ff

080048b0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e02c      	b.n	800491c <HAL_UART_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2224      	movs	r2, #36	; 0x24
 80048c6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2101      	movs	r1, #1
 80048d4:	438a      	bics	r2, r1
 80048d6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2200      	movs	r2, #0
 80048e6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2200      	movs	r2, #0
 80048ee:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	0018      	movs	r0, r3
 80048f4:	f000 f81e 	bl	8004934 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2280      	movs	r2, #128	; 0x80
 80048fc:	2100      	movs	r1, #0
 80048fe:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2274      	movs	r2, #116	; 0x74
 8004916:	2100      	movs	r1, #0
 8004918:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	0018      	movs	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	b002      	add	sp, #8
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800492c:	46c0      	nop			; (mov r8, r8)
 800492e:	46bd      	mov	sp, r7
 8004930:	b002      	add	sp, #8
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 800493c:	46c0      	nop			; (mov r8, r8)
 800493e:	46bd      	mov	sp, r7
 8004940:	b002      	add	sp, #8
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	; 0x28
 8004948:	af02      	add	r7, sp, #8
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	1dbb      	adds	r3, r7, #6
 8004952:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004958:	2b20      	cmp	r3, #32
 800495a:	d000      	beq.n	800495e <HAL_UART_Transmit+0x1a>
 800495c:	e095      	b.n	8004a8a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_UART_Transmit+0x28>
 8004964:	1dbb      	adds	r3, r7, #6
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e08d      	b.n	8004a8c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	015b      	lsls	r3, r3, #5
 8004978:	429a      	cmp	r2, r3
 800497a:	d109      	bne.n	8004990 <HAL_UART_Transmit+0x4c>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d105      	bne.n	8004990 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2201      	movs	r2, #1
 8004988:	4013      	ands	r3, r2
 800498a:	d001      	beq.n	8004990 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e07d      	b.n	8004a8c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2274      	movs	r2, #116	; 0x74
 8004994:	5c9b      	ldrb	r3, [r3, r2]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_UART_Transmit+0x5a>
 800499a:	2302      	movs	r3, #2
 800499c:	e076      	b.n	8004a8c <HAL_UART_Transmit+0x148>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2274      	movs	r2, #116	; 0x74
 80049a2:	2101      	movs	r1, #1
 80049a4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2280      	movs	r2, #128	; 0x80
 80049aa:	2100      	movs	r1, #0
 80049ac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2221      	movs	r2, #33	; 0x21
 80049b2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049b4:	f7fd fec2 	bl	800273c <HAL_GetTick>
 80049b8:	0003      	movs	r3, r0
 80049ba:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	1dba      	adds	r2, r7, #6
 80049c0:	2150      	movs	r1, #80	; 0x50
 80049c2:	8812      	ldrh	r2, [r2, #0]
 80049c4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	1dba      	adds	r2, r7, #6
 80049ca:	2152      	movs	r1, #82	; 0x52
 80049cc:	8812      	ldrh	r2, [r2, #0]
 80049ce:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	015b      	lsls	r3, r3, #5
 80049d8:	429a      	cmp	r2, r3
 80049da:	d108      	bne.n	80049ee <HAL_UART_Transmit+0xaa>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d104      	bne.n	80049ee <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	e003      	b.n	80049f6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2274      	movs	r2, #116	; 0x74
 80049fa:	2100      	movs	r1, #0
 80049fc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80049fe:	e02c      	b.n	8004a5a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	0013      	movs	r3, r2
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2180      	movs	r1, #128	; 0x80
 8004a0e:	f000 fbd3 	bl	80051b8 <UART_WaitOnFlagUntilTimeout>
 8004a12:	1e03      	subs	r3, r0, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e038      	b.n	8004a8c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	001a      	movs	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	05d2      	lsls	r2, r2, #23
 8004a2c:	0dd2      	lsrs	r2, r2, #23
 8004a2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	3302      	adds	r3, #2
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	e007      	b.n	8004a48 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	781a      	ldrb	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	3301      	adds	r3, #1
 8004a46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2252      	movs	r2, #82	; 0x52
 8004a4c:	5a9b      	ldrh	r3, [r3, r2]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b299      	uxth	r1, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2252      	movs	r2, #82	; 0x52
 8004a58:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2252      	movs	r2, #82	; 0x52
 8004a5e:	5a9b      	ldrh	r3, [r3, r2]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1cc      	bne.n	8004a00 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	0013      	movs	r3, r2
 8004a70:	2200      	movs	r2, #0
 8004a72:	2140      	movs	r1, #64	; 0x40
 8004a74:	f000 fba0 	bl	80051b8 <UART_WaitOnFlagUntilTimeout>
 8004a78:	1e03      	subs	r3, r0, #0
 8004a7a:	d001      	beq.n	8004a80 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e005      	b.n	8004a8c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e000      	b.n	8004a8c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004a8a:	2302      	movs	r3, #2
  }
}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b008      	add	sp, #32
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aa0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aa6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4313      	orrs	r3, r2
}
 8004aae:	0018      	movs	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	b004      	add	sp, #16
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab8:	b5b0      	push	{r4, r5, r7, lr}
 8004aba:	b08e      	sub	sp, #56	; 0x38
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ac0:	231a      	movs	r3, #26
 8004ac2:	2218      	movs	r2, #24
 8004ac4:	189b      	adds	r3, r3, r2
 8004ac6:	19db      	adds	r3, r3, r7
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4ac6      	ldr	r2, [pc, #792]	; (8004e04 <UART_SetConfig+0x34c>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	0019      	movs	r1, r3
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004af6:	430a      	orrs	r2, r1
 8004af8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	4ac1      	ldr	r2, [pc, #772]	; (8004e08 <UART_SetConfig+0x350>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	0019      	movs	r1, r3
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4abb      	ldr	r2, [pc, #748]	; (8004e0c <UART_SetConfig+0x354>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	4ab7      	ldr	r2, [pc, #732]	; (8004e10 <UART_SetConfig+0x358>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	0019      	movs	r1, r3
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4ab3      	ldr	r2, [pc, #716]	; (8004e14 <UART_SetConfig+0x35c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d131      	bne.n	8004bb0 <UART_SetConfig+0xf8>
 8004b4c:	4bb2      	ldr	r3, [pc, #712]	; (8004e18 <UART_SetConfig+0x360>)
 8004b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b50:	2203      	movs	r2, #3
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d01d      	beq.n	8004b94 <UART_SetConfig+0xdc>
 8004b58:	d823      	bhi.n	8004ba2 <UART_SetConfig+0xea>
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d00c      	beq.n	8004b78 <UART_SetConfig+0xc0>
 8004b5e:	d820      	bhi.n	8004ba2 <UART_SetConfig+0xea>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <UART_SetConfig+0xb2>
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d00e      	beq.n	8004b86 <UART_SetConfig+0xce>
 8004b68:	e01b      	b.n	8004ba2 <UART_SetConfig+0xea>
 8004b6a:	231b      	movs	r3, #27
 8004b6c:	2218      	movs	r2, #24
 8004b6e:	189b      	adds	r3, r3, r2
 8004b70:	19db      	adds	r3, r3, r7
 8004b72:	2201      	movs	r2, #1
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	e09c      	b.n	8004cb2 <UART_SetConfig+0x1fa>
 8004b78:	231b      	movs	r3, #27
 8004b7a:	2218      	movs	r2, #24
 8004b7c:	189b      	adds	r3, r3, r2
 8004b7e:	19db      	adds	r3, r3, r7
 8004b80:	2202      	movs	r2, #2
 8004b82:	701a      	strb	r2, [r3, #0]
 8004b84:	e095      	b.n	8004cb2 <UART_SetConfig+0x1fa>
 8004b86:	231b      	movs	r3, #27
 8004b88:	2218      	movs	r2, #24
 8004b8a:	189b      	adds	r3, r3, r2
 8004b8c:	19db      	adds	r3, r3, r7
 8004b8e:	2204      	movs	r2, #4
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	e08e      	b.n	8004cb2 <UART_SetConfig+0x1fa>
 8004b94:	231b      	movs	r3, #27
 8004b96:	2218      	movs	r2, #24
 8004b98:	189b      	adds	r3, r3, r2
 8004b9a:	19db      	adds	r3, r3, r7
 8004b9c:	2208      	movs	r2, #8
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	e087      	b.n	8004cb2 <UART_SetConfig+0x1fa>
 8004ba2:	231b      	movs	r3, #27
 8004ba4:	2218      	movs	r2, #24
 8004ba6:	189b      	adds	r3, r3, r2
 8004ba8:	19db      	adds	r3, r3, r7
 8004baa:	2210      	movs	r2, #16
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	e080      	b.n	8004cb2 <UART_SetConfig+0x1fa>
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a99      	ldr	r2, [pc, #612]	; (8004e1c <UART_SetConfig+0x364>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d131      	bne.n	8004c1e <UART_SetConfig+0x166>
 8004bba:	4b97      	ldr	r3, [pc, #604]	; (8004e18 <UART_SetConfig+0x360>)
 8004bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbe:	220c      	movs	r2, #12
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b0c      	cmp	r3, #12
 8004bc4:	d01d      	beq.n	8004c02 <UART_SetConfig+0x14a>
 8004bc6:	d823      	bhi.n	8004c10 <UART_SetConfig+0x158>
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d00c      	beq.n	8004be6 <UART_SetConfig+0x12e>
 8004bcc:	d820      	bhi.n	8004c10 <UART_SetConfig+0x158>
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <UART_SetConfig+0x120>
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d00e      	beq.n	8004bf4 <UART_SetConfig+0x13c>
 8004bd6:	e01b      	b.n	8004c10 <UART_SetConfig+0x158>
 8004bd8:	231b      	movs	r3, #27
 8004bda:	2218      	movs	r2, #24
 8004bdc:	189b      	adds	r3, r3, r2
 8004bde:	19db      	adds	r3, r3, r7
 8004be0:	2200      	movs	r2, #0
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	e065      	b.n	8004cb2 <UART_SetConfig+0x1fa>
 8004be6:	231b      	movs	r3, #27
 8004be8:	2218      	movs	r2, #24
 8004bea:	189b      	adds	r3, r3, r2
 8004bec:	19db      	adds	r3, r3, r7
 8004bee:	2202      	movs	r2, #2
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	e05e      	b.n	8004cb2 <UART_SetConfig+0x1fa>
 8004bf4:	231b      	movs	r3, #27
 8004bf6:	2218      	movs	r2, #24
 8004bf8:	189b      	adds	r3, r3, r2
 8004bfa:	19db      	adds	r3, r3, r7
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	e057      	b.n	8004cb2 <UART_SetConfig+0x1fa>
 8004c02:	231b      	movs	r3, #27
 8004c04:	2218      	movs	r2, #24
 8004c06:	189b      	adds	r3, r3, r2
 8004c08:	19db      	adds	r3, r3, r7
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	e050      	b.n	8004cb2 <UART_SetConfig+0x1fa>
 8004c10:	231b      	movs	r3, #27
 8004c12:	2218      	movs	r2, #24
 8004c14:	189b      	adds	r3, r3, r2
 8004c16:	19db      	adds	r3, r3, r7
 8004c18:	2210      	movs	r2, #16
 8004c1a:	701a      	strb	r2, [r3, #0]
 8004c1c:	e049      	b.n	8004cb2 <UART_SetConfig+0x1fa>
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a7a      	ldr	r2, [pc, #488]	; (8004e0c <UART_SetConfig+0x354>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d13e      	bne.n	8004ca6 <UART_SetConfig+0x1ee>
 8004c28:	4b7b      	ldr	r3, [pc, #492]	; (8004e18 <UART_SetConfig+0x360>)
 8004c2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c2c:	23c0      	movs	r3, #192	; 0xc0
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	4013      	ands	r3, r2
 8004c32:	22c0      	movs	r2, #192	; 0xc0
 8004c34:	0112      	lsls	r2, r2, #4
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d027      	beq.n	8004c8a <UART_SetConfig+0x1d2>
 8004c3a:	22c0      	movs	r2, #192	; 0xc0
 8004c3c:	0112      	lsls	r2, r2, #4
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d82a      	bhi.n	8004c98 <UART_SetConfig+0x1e0>
 8004c42:	2280      	movs	r2, #128	; 0x80
 8004c44:	0112      	lsls	r2, r2, #4
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d011      	beq.n	8004c6e <UART_SetConfig+0x1b6>
 8004c4a:	2280      	movs	r2, #128	; 0x80
 8004c4c:	0112      	lsls	r2, r2, #4
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d822      	bhi.n	8004c98 <UART_SetConfig+0x1e0>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d004      	beq.n	8004c60 <UART_SetConfig+0x1a8>
 8004c56:	2280      	movs	r2, #128	; 0x80
 8004c58:	00d2      	lsls	r2, r2, #3
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00e      	beq.n	8004c7c <UART_SetConfig+0x1c4>
 8004c5e:	e01b      	b.n	8004c98 <UART_SetConfig+0x1e0>
 8004c60:	231b      	movs	r3, #27
 8004c62:	2218      	movs	r2, #24
 8004c64:	189b      	adds	r3, r3, r2
 8004c66:	19db      	adds	r3, r3, r7
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	e021      	b.n	8004cb2 <UART_SetConfig+0x1fa>
 8004c6e:	231b      	movs	r3, #27
 8004c70:	2218      	movs	r2, #24
 8004c72:	189b      	adds	r3, r3, r2
 8004c74:	19db      	adds	r3, r3, r7
 8004c76:	2202      	movs	r2, #2
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	e01a      	b.n	8004cb2 <UART_SetConfig+0x1fa>
 8004c7c:	231b      	movs	r3, #27
 8004c7e:	2218      	movs	r2, #24
 8004c80:	189b      	adds	r3, r3, r2
 8004c82:	19db      	adds	r3, r3, r7
 8004c84:	2204      	movs	r2, #4
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	e013      	b.n	8004cb2 <UART_SetConfig+0x1fa>
 8004c8a:	231b      	movs	r3, #27
 8004c8c:	2218      	movs	r2, #24
 8004c8e:	189b      	adds	r3, r3, r2
 8004c90:	19db      	adds	r3, r3, r7
 8004c92:	2208      	movs	r2, #8
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	e00c      	b.n	8004cb2 <UART_SetConfig+0x1fa>
 8004c98:	231b      	movs	r3, #27
 8004c9a:	2218      	movs	r2, #24
 8004c9c:	189b      	adds	r3, r3, r2
 8004c9e:	19db      	adds	r3, r3, r7
 8004ca0:	2210      	movs	r2, #16
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	e005      	b.n	8004cb2 <UART_SetConfig+0x1fa>
 8004ca6:	231b      	movs	r3, #27
 8004ca8:	2218      	movs	r2, #24
 8004caa:	189b      	adds	r3, r3, r2
 8004cac:	19db      	adds	r3, r3, r7
 8004cae:	2210      	movs	r2, #16
 8004cb0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a55      	ldr	r2, [pc, #340]	; (8004e0c <UART_SetConfig+0x354>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d000      	beq.n	8004cbe <UART_SetConfig+0x206>
 8004cbc:	e084      	b.n	8004dc8 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cbe:	231b      	movs	r3, #27
 8004cc0:	2218      	movs	r2, #24
 8004cc2:	189b      	adds	r3, r3, r2
 8004cc4:	19db      	adds	r3, r3, r7
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d01d      	beq.n	8004d08 <UART_SetConfig+0x250>
 8004ccc:	dc20      	bgt.n	8004d10 <UART_SetConfig+0x258>
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d015      	beq.n	8004cfe <UART_SetConfig+0x246>
 8004cd2:	dc1d      	bgt.n	8004d10 <UART_SetConfig+0x258>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <UART_SetConfig+0x226>
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d005      	beq.n	8004ce8 <UART_SetConfig+0x230>
 8004cdc:	e018      	b.n	8004d10 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cde:	f7ff f89d 	bl	8003e1c <HAL_RCC_GetPCLK1Freq>
 8004ce2:	0003      	movs	r3, r0
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ce6:	e01c      	b.n	8004d22 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ce8:	4b4b      	ldr	r3, [pc, #300]	; (8004e18 <UART_SetConfig+0x360>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2210      	movs	r2, #16
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d002      	beq.n	8004cf8 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004cf2:	4b4b      	ldr	r3, [pc, #300]	; (8004e20 <UART_SetConfig+0x368>)
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004cf6:	e014      	b.n	8004d22 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8004cf8:	4b4a      	ldr	r3, [pc, #296]	; (8004e24 <UART_SetConfig+0x36c>)
 8004cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cfc:	e011      	b.n	8004d22 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cfe:	f7fe ffdd 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8004d02:	0003      	movs	r3, r0
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d06:	e00c      	b.n	8004d22 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d08:	2380      	movs	r3, #128	; 0x80
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d0e:	e008      	b.n	8004d22 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004d14:	231a      	movs	r3, #26
 8004d16:	2218      	movs	r2, #24
 8004d18:	189b      	adds	r3, r3, r2
 8004d1a:	19db      	adds	r3, r3, r7
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	701a      	strb	r2, [r3, #0]
        break;
 8004d20:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d100      	bne.n	8004d2a <UART_SetConfig+0x272>
 8004d28:	e133      	b.n	8004f92 <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	0013      	movs	r3, r2
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	189b      	adds	r3, r3, r2
 8004d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d305      	bcc.n	8004d46 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d906      	bls.n	8004d54 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8004d46:	231a      	movs	r3, #26
 8004d48:	2218      	movs	r2, #24
 8004d4a:	189b      	adds	r3, r3, r2
 8004d4c:	19db      	adds	r3, r3, r7
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	e11e      	b.n	8004f92 <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	6939      	ldr	r1, [r7, #16]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	000b      	movs	r3, r1
 8004d62:	0e1b      	lsrs	r3, r3, #24
 8004d64:	0010      	movs	r0, r2
 8004d66:	0205      	lsls	r5, r0, #8
 8004d68:	431d      	orrs	r5, r3
 8004d6a:	000b      	movs	r3, r1
 8004d6c:	021c      	lsls	r4, r3, #8
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	085b      	lsrs	r3, r3, #1
 8004d74:	60bb      	str	r3, [r7, #8]
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	68b8      	ldr	r0, [r7, #8]
 8004d7c:	68f9      	ldr	r1, [r7, #12]
 8004d7e:	1900      	adds	r0, r0, r4
 8004d80:	4169      	adcs	r1, r5
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	607b      	str	r3, [r7, #4]
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f7fb fa50 	bl	8000234 <__aeabi_uldivmod>
 8004d94:	0002      	movs	r2, r0
 8004d96:	000b      	movs	r3, r1
 8004d98:	0013      	movs	r3, r2
 8004d9a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d9e:	23c0      	movs	r3, #192	; 0xc0
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d309      	bcc.n	8004dba <UART_SetConfig+0x302>
 8004da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	035b      	lsls	r3, r3, #13
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d204      	bcs.n	8004dba <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db6:	60da      	str	r2, [r3, #12]
 8004db8:	e0eb      	b.n	8004f92 <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 8004dba:	231a      	movs	r3, #26
 8004dbc:	2218      	movs	r2, #24
 8004dbe:	189b      	adds	r3, r3, r2
 8004dc0:	19db      	adds	r3, r3, r7
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	e0e4      	b.n	8004f92 <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d000      	beq.n	8004dd6 <UART_SetConfig+0x31e>
 8004dd4:	e086      	b.n	8004ee4 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 8004dd6:	231b      	movs	r3, #27
 8004dd8:	2218      	movs	r2, #24
 8004dda:	189b      	adds	r3, r3, r2
 8004ddc:	19db      	adds	r3, r3, r7
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d837      	bhi.n	8004e54 <UART_SetConfig+0x39c>
 8004de4:	009a      	lsls	r2, r3, #2
 8004de6:	4b10      	ldr	r3, [pc, #64]	; (8004e28 <UART_SetConfig+0x370>)
 8004de8:	18d3      	adds	r3, r2, r3
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dee:	f7ff f815 	bl	8003e1c <HAL_RCC_GetPCLK1Freq>
 8004df2:	0003      	movs	r3, r0
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004df6:	e036      	b.n	8004e66 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004df8:	f7ff f826 	bl	8003e48 <HAL_RCC_GetPCLK2Freq>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e00:	e031      	b.n	8004e66 <UART_SetConfig+0x3ae>
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	efff69f3 	.word	0xefff69f3
 8004e08:	ffffcfff 	.word	0xffffcfff
 8004e0c:	40004800 	.word	0x40004800
 8004e10:	fffff4ff 	.word	0xfffff4ff
 8004e14:	40013800 	.word	0x40013800
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	40004400 	.word	0x40004400
 8004e20:	003d0900 	.word	0x003d0900
 8004e24:	00f42400 	.word	0x00f42400
 8004e28:	08006c3c 	.word	0x08006c3c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e2c:	4b60      	ldr	r3, [pc, #384]	; (8004fb0 <UART_SetConfig+0x4f8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2210      	movs	r2, #16
 8004e32:	4013      	ands	r3, r2
 8004e34:	d002      	beq.n	8004e3c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004e36:	4b5f      	ldr	r3, [pc, #380]	; (8004fb4 <UART_SetConfig+0x4fc>)
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e3a:	e014      	b.n	8004e66 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8004e3c:	4b5e      	ldr	r3, [pc, #376]	; (8004fb8 <UART_SetConfig+0x500>)
 8004e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e40:	e011      	b.n	8004e66 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e42:	f7fe ff3b 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8004e46:	0003      	movs	r3, r0
 8004e48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e4a:	e00c      	b.n	8004e66 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e52:	e008      	b.n	8004e66 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004e58:	231a      	movs	r3, #26
 8004e5a:	2218      	movs	r2, #24
 8004e5c:	189b      	adds	r3, r3, r2
 8004e5e:	19db      	adds	r3, r3, r7
 8004e60:	2201      	movs	r2, #1
 8004e62:	701a      	strb	r2, [r3, #0]
        break;
 8004e64:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d100      	bne.n	8004e6e <UART_SetConfig+0x3b6>
 8004e6c:	e091      	b.n	8004f92 <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e70:	005a      	lsls	r2, r3, #1
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	18d2      	adds	r2, r2, r3
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	0019      	movs	r1, r3
 8004e80:	0010      	movs	r0, r2
 8004e82:	f7fb f94b 	bl	800011c <__udivsi3>
 8004e86:	0003      	movs	r3, r0
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	2b0f      	cmp	r3, #15
 8004e90:	d921      	bls.n	8004ed6 <UART_SetConfig+0x41e>
 8004e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e94:	2380      	movs	r3, #128	; 0x80
 8004e96:	025b      	lsls	r3, r3, #9
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d21c      	bcs.n	8004ed6 <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	200e      	movs	r0, #14
 8004ea2:	2418      	movs	r4, #24
 8004ea4:	1903      	adds	r3, r0, r4
 8004ea6:	19db      	adds	r3, r3, r7
 8004ea8:	210f      	movs	r1, #15
 8004eaa:	438a      	bics	r2, r1
 8004eac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	085b      	lsrs	r3, r3, #1
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2207      	movs	r2, #7
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	b299      	uxth	r1, r3
 8004eba:	1903      	adds	r3, r0, r4
 8004ebc:	19db      	adds	r3, r3, r7
 8004ebe:	1902      	adds	r2, r0, r4
 8004ec0:	19d2      	adds	r2, r2, r7
 8004ec2:	8812      	ldrh	r2, [r2, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	1902      	adds	r2, r0, r4
 8004ece:	19d2      	adds	r2, r2, r7
 8004ed0:	8812      	ldrh	r2, [r2, #0]
 8004ed2:	60da      	str	r2, [r3, #12]
 8004ed4:	e05d      	b.n	8004f92 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8004ed6:	231a      	movs	r3, #26
 8004ed8:	2218      	movs	r2, #24
 8004eda:	189b      	adds	r3, r3, r2
 8004edc:	19db      	adds	r3, r3, r7
 8004ede:	2201      	movs	r2, #1
 8004ee0:	701a      	strb	r2, [r3, #0]
 8004ee2:	e056      	b.n	8004f92 <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ee4:	231b      	movs	r3, #27
 8004ee6:	2218      	movs	r2, #24
 8004ee8:	189b      	adds	r3, r3, r2
 8004eea:	19db      	adds	r3, r3, r7
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d822      	bhi.n	8004f38 <UART_SetConfig+0x480>
 8004ef2:	009a      	lsls	r2, r3, #2
 8004ef4:	4b31      	ldr	r3, [pc, #196]	; (8004fbc <UART_SetConfig+0x504>)
 8004ef6:	18d3      	adds	r3, r2, r3
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004efc:	f7fe ff8e 	bl	8003e1c <HAL_RCC_GetPCLK1Freq>
 8004f00:	0003      	movs	r3, r0
 8004f02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f04:	e021      	b.n	8004f4a <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f06:	f7fe ff9f 	bl	8003e48 <HAL_RCC_GetPCLK2Freq>
 8004f0a:	0003      	movs	r3, r0
 8004f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f0e:	e01c      	b.n	8004f4a <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f10:	4b27      	ldr	r3, [pc, #156]	; (8004fb0 <UART_SetConfig+0x4f8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2210      	movs	r2, #16
 8004f16:	4013      	ands	r3, r2
 8004f18:	d002      	beq.n	8004f20 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004f1a:	4b26      	ldr	r3, [pc, #152]	; (8004fb4 <UART_SetConfig+0x4fc>)
 8004f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f1e:	e014      	b.n	8004f4a <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 8004f20:	4b25      	ldr	r3, [pc, #148]	; (8004fb8 <UART_SetConfig+0x500>)
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f24:	e011      	b.n	8004f4a <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f26:	f7fe fec9 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8004f2a:	0003      	movs	r3, r0
 8004f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f2e:	e00c      	b.n	8004f4a <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f36:	e008      	b.n	8004f4a <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004f3c:	231a      	movs	r3, #26
 8004f3e:	2218      	movs	r2, #24
 8004f40:	189b      	adds	r3, r3, r2
 8004f42:	19db      	adds	r3, r3, r7
 8004f44:	2201      	movs	r2, #1
 8004f46:	701a      	strb	r2, [r3, #0]
        break;
 8004f48:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d020      	beq.n	8004f92 <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	085a      	lsrs	r2, r3, #1
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	18d2      	adds	r2, r2, r3
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	0019      	movs	r1, r3
 8004f60:	0010      	movs	r0, r2
 8004f62:	f7fb f8db 	bl	800011c <__udivsi3>
 8004f66:	0003      	movs	r3, r0
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	2b0f      	cmp	r3, #15
 8004f70:	d909      	bls.n	8004f86 <UART_SetConfig+0x4ce>
 8004f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	025b      	lsls	r3, r3, #9
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d204      	bcs.n	8004f86 <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f82:	60da      	str	r2, [r3, #12]
 8004f84:	e005      	b.n	8004f92 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8004f86:	231a      	movs	r3, #26
 8004f88:	2218      	movs	r2, #24
 8004f8a:	189b      	adds	r3, r3, r2
 8004f8c:	19db      	adds	r3, r3, r7
 8004f8e:	2201      	movs	r2, #1
 8004f90:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	2200      	movs	r2, #0
 8004f96:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f9e:	231a      	movs	r3, #26
 8004fa0:	2218      	movs	r2, #24
 8004fa2:	189b      	adds	r3, r3, r2
 8004fa4:	19db      	adds	r3, r3, r7
 8004fa6:	781b      	ldrb	r3, [r3, #0]
}
 8004fa8:	0018      	movs	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	b00e      	add	sp, #56	; 0x38
 8004fae:	bdb0      	pop	{r4, r5, r7, pc}
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	003d0900 	.word	0x003d0900
 8004fb8:	00f42400 	.word	0x00f42400
 8004fbc:	08006c60 	.word	0x08006c60

08004fc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	2201      	movs	r2, #1
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d00b      	beq.n	8004fea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4a4a      	ldr	r2, [pc, #296]	; (8005104 <UART_AdvFeatureConfig+0x144>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	0019      	movs	r1, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	2202      	movs	r2, #2
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d00b      	beq.n	800500c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	4a43      	ldr	r2, [pc, #268]	; (8005108 <UART_AdvFeatureConfig+0x148>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	0019      	movs	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	2204      	movs	r2, #4
 8005012:	4013      	ands	r3, r2
 8005014:	d00b      	beq.n	800502e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	4a3b      	ldr	r2, [pc, #236]	; (800510c <UART_AdvFeatureConfig+0x14c>)
 800501e:	4013      	ands	r3, r2
 8005020:	0019      	movs	r1, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	2208      	movs	r2, #8
 8005034:	4013      	ands	r3, r2
 8005036:	d00b      	beq.n	8005050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	4a34      	ldr	r2, [pc, #208]	; (8005110 <UART_AdvFeatureConfig+0x150>)
 8005040:	4013      	ands	r3, r2
 8005042:	0019      	movs	r1, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	2210      	movs	r2, #16
 8005056:	4013      	ands	r3, r2
 8005058:	d00b      	beq.n	8005072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a2c      	ldr	r2, [pc, #176]	; (8005114 <UART_AdvFeatureConfig+0x154>)
 8005062:	4013      	ands	r3, r2
 8005064:	0019      	movs	r1, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	2220      	movs	r2, #32
 8005078:	4013      	ands	r3, r2
 800507a:	d00b      	beq.n	8005094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	4a25      	ldr	r2, [pc, #148]	; (8005118 <UART_AdvFeatureConfig+0x158>)
 8005084:	4013      	ands	r3, r2
 8005086:	0019      	movs	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	2240      	movs	r2, #64	; 0x40
 800509a:	4013      	ands	r3, r2
 800509c:	d01d      	beq.n	80050da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4a1d      	ldr	r2, [pc, #116]	; (800511c <UART_AdvFeatureConfig+0x15c>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	0019      	movs	r1, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ba:	2380      	movs	r3, #128	; 0x80
 80050bc:	035b      	lsls	r3, r3, #13
 80050be:	429a      	cmp	r2, r3
 80050c0:	d10b      	bne.n	80050da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4a15      	ldr	r2, [pc, #84]	; (8005120 <UART_AdvFeatureConfig+0x160>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	0019      	movs	r1, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	2280      	movs	r2, #128	; 0x80
 80050e0:	4013      	ands	r3, r2
 80050e2:	d00b      	beq.n	80050fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	4a0e      	ldr	r2, [pc, #56]	; (8005124 <UART_AdvFeatureConfig+0x164>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	0019      	movs	r1, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]
  }
}
 80050fc:	46c0      	nop			; (mov r8, r8)
 80050fe:	46bd      	mov	sp, r7
 8005100:	b002      	add	sp, #8
 8005102:	bd80      	pop	{r7, pc}
 8005104:	fffdffff 	.word	0xfffdffff
 8005108:	fffeffff 	.word	0xfffeffff
 800510c:	fffbffff 	.word	0xfffbffff
 8005110:	ffff7fff 	.word	0xffff7fff
 8005114:	ffffefff 	.word	0xffffefff
 8005118:	ffffdfff 	.word	0xffffdfff
 800511c:	ffefffff 	.word	0xffefffff
 8005120:	ff9fffff 	.word	0xff9fffff
 8005124:	fff7ffff 	.word	0xfff7ffff

08005128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af02      	add	r7, sp, #8
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2280      	movs	r2, #128	; 0x80
 8005134:	2100      	movs	r1, #0
 8005136:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005138:	f7fd fb00 	bl	800273c <HAL_GetTick>
 800513c:	0003      	movs	r3, r0
 800513e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2208      	movs	r2, #8
 8005148:	4013      	ands	r3, r2
 800514a:	2b08      	cmp	r3, #8
 800514c:	d10c      	bne.n	8005168 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2280      	movs	r2, #128	; 0x80
 8005152:	0391      	lsls	r1, r2, #14
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	4a17      	ldr	r2, [pc, #92]	; (80051b4 <UART_CheckIdleState+0x8c>)
 8005158:	9200      	str	r2, [sp, #0]
 800515a:	2200      	movs	r2, #0
 800515c:	f000 f82c 	bl	80051b8 <UART_WaitOnFlagUntilTimeout>
 8005160:	1e03      	subs	r3, r0, #0
 8005162:	d001      	beq.n	8005168 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e021      	b.n	80051ac <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2204      	movs	r2, #4
 8005170:	4013      	ands	r3, r2
 8005172:	2b04      	cmp	r3, #4
 8005174:	d10c      	bne.n	8005190 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2280      	movs	r2, #128	; 0x80
 800517a:	03d1      	lsls	r1, r2, #15
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	4a0d      	ldr	r2, [pc, #52]	; (80051b4 <UART_CheckIdleState+0x8c>)
 8005180:	9200      	str	r2, [sp, #0]
 8005182:	2200      	movs	r2, #0
 8005184:	f000 f818 	bl	80051b8 <UART_WaitOnFlagUntilTimeout>
 8005188:	1e03      	subs	r3, r0, #0
 800518a:	d001      	beq.n	8005190 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e00d      	b.n	80051ac <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2274      	movs	r2, #116	; 0x74
 80051a6:	2100      	movs	r1, #0
 80051a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	0018      	movs	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b004      	add	sp, #16
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	01ffffff 	.word	0x01ffffff

080051b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b094      	sub	sp, #80	; 0x50
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	1dfb      	adds	r3, r7, #7
 80051c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c8:	e0a3      	b.n	8005312 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051cc:	3301      	adds	r3, #1
 80051ce:	d100      	bne.n	80051d2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80051d0:	e09f      	b.n	8005312 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d2:	f7fd fab3 	bl	800273c <HAL_GetTick>
 80051d6:	0002      	movs	r2, r0
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051de:	429a      	cmp	r2, r3
 80051e0:	d302      	bcc.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80051e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d13d      	bne.n	8005264 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e8:	f3ef 8310 	mrs	r3, PRIMASK
 80051ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051f0:	647b      	str	r3, [r7, #68]	; 0x44
 80051f2:	2301      	movs	r3, #1
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	f383 8810 	msr	PRIMASK, r3
}
 80051fc:	46c0      	nop			; (mov r8, r8)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	494c      	ldr	r1, [pc, #304]	; (800533c <UART_WaitOnFlagUntilTimeout+0x184>)
 800520a:	400a      	ands	r2, r1
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005210:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	f383 8810 	msr	PRIMASK, r3
}
 8005218:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800521a:	f3ef 8310 	mrs	r3, PRIMASK
 800521e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005222:	643b      	str	r3, [r7, #64]	; 0x40
 8005224:	2301      	movs	r3, #1
 8005226:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	f383 8810 	msr	PRIMASK, r3
}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2101      	movs	r1, #1
 800523c:	438a      	bics	r2, r1
 800523e:	609a      	str	r2, [r3, #8]
 8005240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005246:	f383 8810 	msr	PRIMASK, r3
}
 800524a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2220      	movs	r2, #32
 8005250:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2274      	movs	r2, #116	; 0x74
 800525c:	2100      	movs	r1, #0
 800525e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e067      	b.n	8005334 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2204      	movs	r2, #4
 800526c:	4013      	ands	r3, r2
 800526e:	d050      	beq.n	8005312 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69da      	ldr	r2, [r3, #28]
 8005276:	2380      	movs	r3, #128	; 0x80
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	401a      	ands	r2, r3
 800527c:	2380      	movs	r3, #128	; 0x80
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	429a      	cmp	r2, r3
 8005282:	d146      	bne.n	8005312 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2280      	movs	r2, #128	; 0x80
 800528a:	0112      	lsls	r2, r2, #4
 800528c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800528e:	f3ef 8310 	mrs	r3, PRIMASK
 8005292:	613b      	str	r3, [r7, #16]
  return(result);
 8005294:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005298:	2301      	movs	r3, #1
 800529a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f383 8810 	msr	PRIMASK, r3
}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4923      	ldr	r1, [pc, #140]	; (800533c <UART_WaitOnFlagUntilTimeout+0x184>)
 80052b0:	400a      	ands	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	f383 8810 	msr	PRIMASK, r3
}
 80052be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c0:	f3ef 8310 	mrs	r3, PRIMASK
 80052c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80052c6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80052ca:	2301      	movs	r3, #1
 80052cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	f383 8810 	msr	PRIMASK, r3
}
 80052d4:	46c0      	nop			; (mov r8, r8)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2101      	movs	r1, #1
 80052e2:	438a      	bics	r2, r1
 80052e4:	609a      	str	r2, [r3, #8]
 80052e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	f383 8810 	msr	PRIMASK, r3
}
 80052f0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2220      	movs	r2, #32
 80052f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2280      	movs	r2, #128	; 0x80
 8005302:	2120      	movs	r1, #32
 8005304:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2274      	movs	r2, #116	; 0x74
 800530a:	2100      	movs	r1, #0
 800530c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e010      	b.n	8005334 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	4013      	ands	r3, r2
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	425a      	negs	r2, r3
 8005322:	4153      	adcs	r3, r2
 8005324:	b2db      	uxtb	r3, r3
 8005326:	001a      	movs	r2, r3
 8005328:	1dfb      	adds	r3, r7, #7
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d100      	bne.n	8005332 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005330:	e74b      	b.n	80051ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	b014      	add	sp, #80	; 0x50
 800533a:	bd80      	pop	{r7, pc}
 800533c:	fffffe5f 	.word	0xfffffe5f

08005340 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e017      	b.n	8005382 <HAL_WWDG_Init+0x42>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	0018      	movs	r0, r3
 8005356:	f000 f818 	bl	800538a <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2180      	movs	r1, #128	; 0x80
 8005364:	430a      	orrs	r2, r1
 8005366:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	431a      	orrs	r2, r3
 8005372:	0011      	movs	r1, r2
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	0018      	movs	r0, r3
 8005384:	46bd      	mov	sp, r7
 8005386:	b002      	add	sp, #8
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_WWDG_MspInit>:
  *         to avoid multiple initialize when HAL_WWDG_Init function is called
  *         again to change parameters.
  * @retval None
  */
__weak void HAL_WWDG_MspInit(WWDG_HandleTypeDef *hwwdg)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b082      	sub	sp, #8
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_MspInit could be implemented in the user file
   */
}
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	46bd      	mov	sp, r7
 8005396:	b002      	add	sp, #8
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <__errno>:
 800539c:	4b01      	ldr	r3, [pc, #4]	; (80053a4 <__errno+0x8>)
 800539e:	6818      	ldr	r0, [r3, #0]
 80053a0:	4770      	bx	lr
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	2000008c 	.word	0x2000008c

080053a8 <__libc_init_array>:
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	2600      	movs	r6, #0
 80053ac:	4d0c      	ldr	r5, [pc, #48]	; (80053e0 <__libc_init_array+0x38>)
 80053ae:	4c0d      	ldr	r4, [pc, #52]	; (80053e4 <__libc_init_array+0x3c>)
 80053b0:	1b64      	subs	r4, r4, r5
 80053b2:	10a4      	asrs	r4, r4, #2
 80053b4:	42a6      	cmp	r6, r4
 80053b6:	d109      	bne.n	80053cc <__libc_init_array+0x24>
 80053b8:	2600      	movs	r6, #0
 80053ba:	f001 f875 	bl	80064a8 <_init>
 80053be:	4d0a      	ldr	r5, [pc, #40]	; (80053e8 <__libc_init_array+0x40>)
 80053c0:	4c0a      	ldr	r4, [pc, #40]	; (80053ec <__libc_init_array+0x44>)
 80053c2:	1b64      	subs	r4, r4, r5
 80053c4:	10a4      	asrs	r4, r4, #2
 80053c6:	42a6      	cmp	r6, r4
 80053c8:	d105      	bne.n	80053d6 <__libc_init_array+0x2e>
 80053ca:	bd70      	pop	{r4, r5, r6, pc}
 80053cc:	00b3      	lsls	r3, r6, #2
 80053ce:	58eb      	ldr	r3, [r5, r3]
 80053d0:	4798      	blx	r3
 80053d2:	3601      	adds	r6, #1
 80053d4:	e7ee      	b.n	80053b4 <__libc_init_array+0xc>
 80053d6:	00b3      	lsls	r3, r6, #2
 80053d8:	58eb      	ldr	r3, [r5, r3]
 80053da:	4798      	blx	r3
 80053dc:	3601      	adds	r6, #1
 80053de:	e7f2      	b.n	80053c6 <__libc_init_array+0x1e>
 80053e0:	08006d24 	.word	0x08006d24
 80053e4:	08006d24 	.word	0x08006d24
 80053e8:	08006d24 	.word	0x08006d24
 80053ec:	08006d28 	.word	0x08006d28

080053f0 <memset>:
 80053f0:	0003      	movs	r3, r0
 80053f2:	1882      	adds	r2, r0, r2
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d100      	bne.n	80053fa <memset+0xa>
 80053f8:	4770      	bx	lr
 80053fa:	7019      	strb	r1, [r3, #0]
 80053fc:	3301      	adds	r3, #1
 80053fe:	e7f9      	b.n	80053f4 <memset+0x4>

08005400 <iprintf>:
 8005400:	b40f      	push	{r0, r1, r2, r3}
 8005402:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <iprintf+0x30>)
 8005404:	b513      	push	{r0, r1, r4, lr}
 8005406:	681c      	ldr	r4, [r3, #0]
 8005408:	2c00      	cmp	r4, #0
 800540a:	d005      	beq.n	8005418 <iprintf+0x18>
 800540c:	69a3      	ldr	r3, [r4, #24]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d102      	bne.n	8005418 <iprintf+0x18>
 8005412:	0020      	movs	r0, r4
 8005414:	f000 fa86 	bl	8005924 <__sinit>
 8005418:	ab05      	add	r3, sp, #20
 800541a:	0020      	movs	r0, r4
 800541c:	9a04      	ldr	r2, [sp, #16]
 800541e:	68a1      	ldr	r1, [r4, #8]
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	f000 fc99 	bl	8005d58 <_vfiprintf_r>
 8005426:	bc16      	pop	{r1, r2, r4}
 8005428:	bc08      	pop	{r3}
 800542a:	b004      	add	sp, #16
 800542c:	4718      	bx	r3
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	2000008c 	.word	0x2000008c

08005434 <_puts_r>:
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	0005      	movs	r5, r0
 8005438:	000e      	movs	r6, r1
 800543a:	2800      	cmp	r0, #0
 800543c:	d004      	beq.n	8005448 <_puts_r+0x14>
 800543e:	6983      	ldr	r3, [r0, #24]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <_puts_r+0x14>
 8005444:	f000 fa6e 	bl	8005924 <__sinit>
 8005448:	69ab      	ldr	r3, [r5, #24]
 800544a:	68ac      	ldr	r4, [r5, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <_puts_r+0x22>
 8005450:	0028      	movs	r0, r5
 8005452:	f000 fa67 	bl	8005924 <__sinit>
 8005456:	4b2d      	ldr	r3, [pc, #180]	; (800550c <_puts_r+0xd8>)
 8005458:	429c      	cmp	r4, r3
 800545a:	d122      	bne.n	80054a2 <_puts_r+0x6e>
 800545c:	686c      	ldr	r4, [r5, #4]
 800545e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005460:	07db      	lsls	r3, r3, #31
 8005462:	d405      	bmi.n	8005470 <_puts_r+0x3c>
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	059b      	lsls	r3, r3, #22
 8005468:	d402      	bmi.n	8005470 <_puts_r+0x3c>
 800546a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800546c:	f000 fafb 	bl	8005a66 <__retarget_lock_acquire_recursive>
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	071b      	lsls	r3, r3, #28
 8005474:	d502      	bpl.n	800547c <_puts_r+0x48>
 8005476:	6923      	ldr	r3, [r4, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d129      	bne.n	80054d0 <_puts_r+0x9c>
 800547c:	0021      	movs	r1, r4
 800547e:	0028      	movs	r0, r5
 8005480:	f000 f8aa 	bl	80055d8 <__swsetup_r>
 8005484:	2800      	cmp	r0, #0
 8005486:	d023      	beq.n	80054d0 <_puts_r+0x9c>
 8005488:	2501      	movs	r5, #1
 800548a:	426d      	negs	r5, r5
 800548c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800548e:	07db      	lsls	r3, r3, #31
 8005490:	d405      	bmi.n	800549e <_puts_r+0x6a>
 8005492:	89a3      	ldrh	r3, [r4, #12]
 8005494:	059b      	lsls	r3, r3, #22
 8005496:	d402      	bmi.n	800549e <_puts_r+0x6a>
 8005498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800549a:	f000 fae5 	bl	8005a68 <__retarget_lock_release_recursive>
 800549e:	0028      	movs	r0, r5
 80054a0:	bd70      	pop	{r4, r5, r6, pc}
 80054a2:	4b1b      	ldr	r3, [pc, #108]	; (8005510 <_puts_r+0xdc>)
 80054a4:	429c      	cmp	r4, r3
 80054a6:	d101      	bne.n	80054ac <_puts_r+0x78>
 80054a8:	68ac      	ldr	r4, [r5, #8]
 80054aa:	e7d8      	b.n	800545e <_puts_r+0x2a>
 80054ac:	4b19      	ldr	r3, [pc, #100]	; (8005514 <_puts_r+0xe0>)
 80054ae:	429c      	cmp	r4, r3
 80054b0:	d1d5      	bne.n	800545e <_puts_r+0x2a>
 80054b2:	68ec      	ldr	r4, [r5, #12]
 80054b4:	e7d3      	b.n	800545e <_puts_r+0x2a>
 80054b6:	3601      	adds	r6, #1
 80054b8:	60a3      	str	r3, [r4, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	da04      	bge.n	80054c8 <_puts_r+0x94>
 80054be:	69a2      	ldr	r2, [r4, #24]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	dc16      	bgt.n	80054f2 <_puts_r+0xbe>
 80054c4:	290a      	cmp	r1, #10
 80054c6:	d014      	beq.n	80054f2 <_puts_r+0xbe>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	6022      	str	r2, [r4, #0]
 80054ce:	7019      	strb	r1, [r3, #0]
 80054d0:	68a3      	ldr	r3, [r4, #8]
 80054d2:	7831      	ldrb	r1, [r6, #0]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	2900      	cmp	r1, #0
 80054d8:	d1ed      	bne.n	80054b6 <_puts_r+0x82>
 80054da:	60a3      	str	r3, [r4, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	da0f      	bge.n	8005500 <_puts_r+0xcc>
 80054e0:	0028      	movs	r0, r5
 80054e2:	0022      	movs	r2, r4
 80054e4:	310a      	adds	r1, #10
 80054e6:	f000 f821 	bl	800552c <__swbuf_r>
 80054ea:	250a      	movs	r5, #10
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d1cd      	bne.n	800548c <_puts_r+0x58>
 80054f0:	e7ca      	b.n	8005488 <_puts_r+0x54>
 80054f2:	0022      	movs	r2, r4
 80054f4:	0028      	movs	r0, r5
 80054f6:	f000 f819 	bl	800552c <__swbuf_r>
 80054fa:	1c43      	adds	r3, r0, #1
 80054fc:	d1e8      	bne.n	80054d0 <_puts_r+0x9c>
 80054fe:	e7c3      	b.n	8005488 <_puts_r+0x54>
 8005500:	250a      	movs	r5, #10
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	6022      	str	r2, [r4, #0]
 8005508:	701d      	strb	r5, [r3, #0]
 800550a:	e7bf      	b.n	800548c <_puts_r+0x58>
 800550c:	08006ca8 	.word	0x08006ca8
 8005510:	08006cc8 	.word	0x08006cc8
 8005514:	08006c88 	.word	0x08006c88

08005518 <puts>:
 8005518:	b510      	push	{r4, lr}
 800551a:	4b03      	ldr	r3, [pc, #12]	; (8005528 <puts+0x10>)
 800551c:	0001      	movs	r1, r0
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	f7ff ff88 	bl	8005434 <_puts_r>
 8005524:	bd10      	pop	{r4, pc}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	2000008c 	.word	0x2000008c

0800552c <__swbuf_r>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	0005      	movs	r5, r0
 8005530:	000e      	movs	r6, r1
 8005532:	0014      	movs	r4, r2
 8005534:	2800      	cmp	r0, #0
 8005536:	d004      	beq.n	8005542 <__swbuf_r+0x16>
 8005538:	6983      	ldr	r3, [r0, #24]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <__swbuf_r+0x16>
 800553e:	f000 f9f1 	bl	8005924 <__sinit>
 8005542:	4b22      	ldr	r3, [pc, #136]	; (80055cc <__swbuf_r+0xa0>)
 8005544:	429c      	cmp	r4, r3
 8005546:	d12e      	bne.n	80055a6 <__swbuf_r+0x7a>
 8005548:	686c      	ldr	r4, [r5, #4]
 800554a:	69a3      	ldr	r3, [r4, #24]
 800554c:	60a3      	str	r3, [r4, #8]
 800554e:	89a3      	ldrh	r3, [r4, #12]
 8005550:	071b      	lsls	r3, r3, #28
 8005552:	d532      	bpl.n	80055ba <__swbuf_r+0x8e>
 8005554:	6923      	ldr	r3, [r4, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d02f      	beq.n	80055ba <__swbuf_r+0x8e>
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	6922      	ldr	r2, [r4, #16]
 800555e:	b2f7      	uxtb	r7, r6
 8005560:	1a98      	subs	r0, r3, r2
 8005562:	6963      	ldr	r3, [r4, #20]
 8005564:	b2f6      	uxtb	r6, r6
 8005566:	4283      	cmp	r3, r0
 8005568:	dc05      	bgt.n	8005576 <__swbuf_r+0x4a>
 800556a:	0021      	movs	r1, r4
 800556c:	0028      	movs	r0, r5
 800556e:	f000 f937 	bl	80057e0 <_fflush_r>
 8005572:	2800      	cmp	r0, #0
 8005574:	d127      	bne.n	80055c6 <__swbuf_r+0x9a>
 8005576:	68a3      	ldr	r3, [r4, #8]
 8005578:	3001      	adds	r0, #1
 800557a:	3b01      	subs	r3, #1
 800557c:	60a3      	str	r3, [r4, #8]
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	6022      	str	r2, [r4, #0]
 8005584:	701f      	strb	r7, [r3, #0]
 8005586:	6963      	ldr	r3, [r4, #20]
 8005588:	4283      	cmp	r3, r0
 800558a:	d004      	beq.n	8005596 <__swbuf_r+0x6a>
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	07db      	lsls	r3, r3, #31
 8005590:	d507      	bpl.n	80055a2 <__swbuf_r+0x76>
 8005592:	2e0a      	cmp	r6, #10
 8005594:	d105      	bne.n	80055a2 <__swbuf_r+0x76>
 8005596:	0021      	movs	r1, r4
 8005598:	0028      	movs	r0, r5
 800559a:	f000 f921 	bl	80057e0 <_fflush_r>
 800559e:	2800      	cmp	r0, #0
 80055a0:	d111      	bne.n	80055c6 <__swbuf_r+0x9a>
 80055a2:	0030      	movs	r0, r6
 80055a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055a6:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <__swbuf_r+0xa4>)
 80055a8:	429c      	cmp	r4, r3
 80055aa:	d101      	bne.n	80055b0 <__swbuf_r+0x84>
 80055ac:	68ac      	ldr	r4, [r5, #8]
 80055ae:	e7cc      	b.n	800554a <__swbuf_r+0x1e>
 80055b0:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <__swbuf_r+0xa8>)
 80055b2:	429c      	cmp	r4, r3
 80055b4:	d1c9      	bne.n	800554a <__swbuf_r+0x1e>
 80055b6:	68ec      	ldr	r4, [r5, #12]
 80055b8:	e7c7      	b.n	800554a <__swbuf_r+0x1e>
 80055ba:	0021      	movs	r1, r4
 80055bc:	0028      	movs	r0, r5
 80055be:	f000 f80b 	bl	80055d8 <__swsetup_r>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d0c9      	beq.n	800555a <__swbuf_r+0x2e>
 80055c6:	2601      	movs	r6, #1
 80055c8:	4276      	negs	r6, r6
 80055ca:	e7ea      	b.n	80055a2 <__swbuf_r+0x76>
 80055cc:	08006ca8 	.word	0x08006ca8
 80055d0:	08006cc8 	.word	0x08006cc8
 80055d4:	08006c88 	.word	0x08006c88

080055d8 <__swsetup_r>:
 80055d8:	4b37      	ldr	r3, [pc, #220]	; (80056b8 <__swsetup_r+0xe0>)
 80055da:	b570      	push	{r4, r5, r6, lr}
 80055dc:	681d      	ldr	r5, [r3, #0]
 80055de:	0006      	movs	r6, r0
 80055e0:	000c      	movs	r4, r1
 80055e2:	2d00      	cmp	r5, #0
 80055e4:	d005      	beq.n	80055f2 <__swsetup_r+0x1a>
 80055e6:	69ab      	ldr	r3, [r5, #24]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d102      	bne.n	80055f2 <__swsetup_r+0x1a>
 80055ec:	0028      	movs	r0, r5
 80055ee:	f000 f999 	bl	8005924 <__sinit>
 80055f2:	4b32      	ldr	r3, [pc, #200]	; (80056bc <__swsetup_r+0xe4>)
 80055f4:	429c      	cmp	r4, r3
 80055f6:	d10f      	bne.n	8005618 <__swsetup_r+0x40>
 80055f8:	686c      	ldr	r4, [r5, #4]
 80055fa:	230c      	movs	r3, #12
 80055fc:	5ee2      	ldrsh	r2, [r4, r3]
 80055fe:	b293      	uxth	r3, r2
 8005600:	0711      	lsls	r1, r2, #28
 8005602:	d42d      	bmi.n	8005660 <__swsetup_r+0x88>
 8005604:	06d9      	lsls	r1, r3, #27
 8005606:	d411      	bmi.n	800562c <__swsetup_r+0x54>
 8005608:	2309      	movs	r3, #9
 800560a:	2001      	movs	r0, #1
 800560c:	6033      	str	r3, [r6, #0]
 800560e:	3337      	adds	r3, #55	; 0x37
 8005610:	4313      	orrs	r3, r2
 8005612:	81a3      	strh	r3, [r4, #12]
 8005614:	4240      	negs	r0, r0
 8005616:	bd70      	pop	{r4, r5, r6, pc}
 8005618:	4b29      	ldr	r3, [pc, #164]	; (80056c0 <__swsetup_r+0xe8>)
 800561a:	429c      	cmp	r4, r3
 800561c:	d101      	bne.n	8005622 <__swsetup_r+0x4a>
 800561e:	68ac      	ldr	r4, [r5, #8]
 8005620:	e7eb      	b.n	80055fa <__swsetup_r+0x22>
 8005622:	4b28      	ldr	r3, [pc, #160]	; (80056c4 <__swsetup_r+0xec>)
 8005624:	429c      	cmp	r4, r3
 8005626:	d1e8      	bne.n	80055fa <__swsetup_r+0x22>
 8005628:	68ec      	ldr	r4, [r5, #12]
 800562a:	e7e6      	b.n	80055fa <__swsetup_r+0x22>
 800562c:	075b      	lsls	r3, r3, #29
 800562e:	d513      	bpl.n	8005658 <__swsetup_r+0x80>
 8005630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005632:	2900      	cmp	r1, #0
 8005634:	d008      	beq.n	8005648 <__swsetup_r+0x70>
 8005636:	0023      	movs	r3, r4
 8005638:	3344      	adds	r3, #68	; 0x44
 800563a:	4299      	cmp	r1, r3
 800563c:	d002      	beq.n	8005644 <__swsetup_r+0x6c>
 800563e:	0030      	movs	r0, r6
 8005640:	f000 fa80 	bl	8005b44 <_free_r>
 8005644:	2300      	movs	r3, #0
 8005646:	6363      	str	r3, [r4, #52]	; 0x34
 8005648:	2224      	movs	r2, #36	; 0x24
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	4393      	bics	r3, r2
 800564e:	81a3      	strh	r3, [r4, #12]
 8005650:	2300      	movs	r3, #0
 8005652:	6063      	str	r3, [r4, #4]
 8005654:	6923      	ldr	r3, [r4, #16]
 8005656:	6023      	str	r3, [r4, #0]
 8005658:	2308      	movs	r3, #8
 800565a:	89a2      	ldrh	r2, [r4, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	81a3      	strh	r3, [r4, #12]
 8005660:	6923      	ldr	r3, [r4, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10b      	bne.n	800567e <__swsetup_r+0xa6>
 8005666:	21a0      	movs	r1, #160	; 0xa0
 8005668:	2280      	movs	r2, #128	; 0x80
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	0089      	lsls	r1, r1, #2
 800566e:	0092      	lsls	r2, r2, #2
 8005670:	400b      	ands	r3, r1
 8005672:	4293      	cmp	r3, r2
 8005674:	d003      	beq.n	800567e <__swsetup_r+0xa6>
 8005676:	0021      	movs	r1, r4
 8005678:	0030      	movs	r0, r6
 800567a:	f000 fa1f 	bl	8005abc <__smakebuf_r>
 800567e:	220c      	movs	r2, #12
 8005680:	5ea3      	ldrsh	r3, [r4, r2]
 8005682:	2001      	movs	r0, #1
 8005684:	001a      	movs	r2, r3
 8005686:	b299      	uxth	r1, r3
 8005688:	4002      	ands	r2, r0
 800568a:	4203      	tst	r3, r0
 800568c:	d00f      	beq.n	80056ae <__swsetup_r+0xd6>
 800568e:	2200      	movs	r2, #0
 8005690:	60a2      	str	r2, [r4, #8]
 8005692:	6962      	ldr	r2, [r4, #20]
 8005694:	4252      	negs	r2, r2
 8005696:	61a2      	str	r2, [r4, #24]
 8005698:	2000      	movs	r0, #0
 800569a:	6922      	ldr	r2, [r4, #16]
 800569c:	4282      	cmp	r2, r0
 800569e:	d1ba      	bne.n	8005616 <__swsetup_r+0x3e>
 80056a0:	060a      	lsls	r2, r1, #24
 80056a2:	d5b8      	bpl.n	8005616 <__swsetup_r+0x3e>
 80056a4:	2240      	movs	r2, #64	; 0x40
 80056a6:	4313      	orrs	r3, r2
 80056a8:	81a3      	strh	r3, [r4, #12]
 80056aa:	3801      	subs	r0, #1
 80056ac:	e7b3      	b.n	8005616 <__swsetup_r+0x3e>
 80056ae:	0788      	lsls	r0, r1, #30
 80056b0:	d400      	bmi.n	80056b4 <__swsetup_r+0xdc>
 80056b2:	6962      	ldr	r2, [r4, #20]
 80056b4:	60a2      	str	r2, [r4, #8]
 80056b6:	e7ef      	b.n	8005698 <__swsetup_r+0xc0>
 80056b8:	2000008c 	.word	0x2000008c
 80056bc:	08006ca8 	.word	0x08006ca8
 80056c0:	08006cc8 	.word	0x08006cc8
 80056c4:	08006c88 	.word	0x08006c88

080056c8 <__sflush_r>:
 80056c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056ca:	898b      	ldrh	r3, [r1, #12]
 80056cc:	0005      	movs	r5, r0
 80056ce:	000c      	movs	r4, r1
 80056d0:	071a      	lsls	r2, r3, #28
 80056d2:	d45f      	bmi.n	8005794 <__sflush_r+0xcc>
 80056d4:	684a      	ldr	r2, [r1, #4]
 80056d6:	2a00      	cmp	r2, #0
 80056d8:	dc04      	bgt.n	80056e4 <__sflush_r+0x1c>
 80056da:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80056dc:	2a00      	cmp	r2, #0
 80056de:	dc01      	bgt.n	80056e4 <__sflush_r+0x1c>
 80056e0:	2000      	movs	r0, #0
 80056e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80056e6:	2f00      	cmp	r7, #0
 80056e8:	d0fa      	beq.n	80056e0 <__sflush_r+0x18>
 80056ea:	2200      	movs	r2, #0
 80056ec:	2180      	movs	r1, #128	; 0x80
 80056ee:	682e      	ldr	r6, [r5, #0]
 80056f0:	602a      	str	r2, [r5, #0]
 80056f2:	001a      	movs	r2, r3
 80056f4:	0149      	lsls	r1, r1, #5
 80056f6:	400a      	ands	r2, r1
 80056f8:	420b      	tst	r3, r1
 80056fa:	d034      	beq.n	8005766 <__sflush_r+0x9e>
 80056fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056fe:	89a3      	ldrh	r3, [r4, #12]
 8005700:	075b      	lsls	r3, r3, #29
 8005702:	d506      	bpl.n	8005712 <__sflush_r+0x4a>
 8005704:	6863      	ldr	r3, [r4, #4]
 8005706:	1ac0      	subs	r0, r0, r3
 8005708:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <__sflush_r+0x4a>
 800570e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005710:	1ac0      	subs	r0, r0, r3
 8005712:	0002      	movs	r2, r0
 8005714:	6a21      	ldr	r1, [r4, #32]
 8005716:	2300      	movs	r3, #0
 8005718:	0028      	movs	r0, r5
 800571a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800571c:	47b8      	blx	r7
 800571e:	89a1      	ldrh	r1, [r4, #12]
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	d106      	bne.n	8005732 <__sflush_r+0x6a>
 8005724:	682b      	ldr	r3, [r5, #0]
 8005726:	2b1d      	cmp	r3, #29
 8005728:	d831      	bhi.n	800578e <__sflush_r+0xc6>
 800572a:	4a2c      	ldr	r2, [pc, #176]	; (80057dc <__sflush_r+0x114>)
 800572c:	40da      	lsrs	r2, r3
 800572e:	07d3      	lsls	r3, r2, #31
 8005730:	d52d      	bpl.n	800578e <__sflush_r+0xc6>
 8005732:	2300      	movs	r3, #0
 8005734:	6063      	str	r3, [r4, #4]
 8005736:	6923      	ldr	r3, [r4, #16]
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	04cb      	lsls	r3, r1, #19
 800573c:	d505      	bpl.n	800574a <__sflush_r+0x82>
 800573e:	1c43      	adds	r3, r0, #1
 8005740:	d102      	bne.n	8005748 <__sflush_r+0x80>
 8005742:	682b      	ldr	r3, [r5, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d100      	bne.n	800574a <__sflush_r+0x82>
 8005748:	6560      	str	r0, [r4, #84]	; 0x54
 800574a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800574c:	602e      	str	r6, [r5, #0]
 800574e:	2900      	cmp	r1, #0
 8005750:	d0c6      	beq.n	80056e0 <__sflush_r+0x18>
 8005752:	0023      	movs	r3, r4
 8005754:	3344      	adds	r3, #68	; 0x44
 8005756:	4299      	cmp	r1, r3
 8005758:	d002      	beq.n	8005760 <__sflush_r+0x98>
 800575a:	0028      	movs	r0, r5
 800575c:	f000 f9f2 	bl	8005b44 <_free_r>
 8005760:	2000      	movs	r0, #0
 8005762:	6360      	str	r0, [r4, #52]	; 0x34
 8005764:	e7bd      	b.n	80056e2 <__sflush_r+0x1a>
 8005766:	2301      	movs	r3, #1
 8005768:	0028      	movs	r0, r5
 800576a:	6a21      	ldr	r1, [r4, #32]
 800576c:	47b8      	blx	r7
 800576e:	1c43      	adds	r3, r0, #1
 8005770:	d1c5      	bne.n	80056fe <__sflush_r+0x36>
 8005772:	682b      	ldr	r3, [r5, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0c2      	beq.n	80056fe <__sflush_r+0x36>
 8005778:	2b1d      	cmp	r3, #29
 800577a:	d001      	beq.n	8005780 <__sflush_r+0xb8>
 800577c:	2b16      	cmp	r3, #22
 800577e:	d101      	bne.n	8005784 <__sflush_r+0xbc>
 8005780:	602e      	str	r6, [r5, #0]
 8005782:	e7ad      	b.n	80056e0 <__sflush_r+0x18>
 8005784:	2340      	movs	r3, #64	; 0x40
 8005786:	89a2      	ldrh	r2, [r4, #12]
 8005788:	4313      	orrs	r3, r2
 800578a:	81a3      	strh	r3, [r4, #12]
 800578c:	e7a9      	b.n	80056e2 <__sflush_r+0x1a>
 800578e:	2340      	movs	r3, #64	; 0x40
 8005790:	430b      	orrs	r3, r1
 8005792:	e7fa      	b.n	800578a <__sflush_r+0xc2>
 8005794:	690f      	ldr	r7, [r1, #16]
 8005796:	2f00      	cmp	r7, #0
 8005798:	d0a2      	beq.n	80056e0 <__sflush_r+0x18>
 800579a:	680a      	ldr	r2, [r1, #0]
 800579c:	600f      	str	r7, [r1, #0]
 800579e:	1bd2      	subs	r2, r2, r7
 80057a0:	9201      	str	r2, [sp, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	079b      	lsls	r3, r3, #30
 80057a6:	d100      	bne.n	80057aa <__sflush_r+0xe2>
 80057a8:	694a      	ldr	r2, [r1, #20]
 80057aa:	60a2      	str	r2, [r4, #8]
 80057ac:	9b01      	ldr	r3, [sp, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	dc00      	bgt.n	80057b4 <__sflush_r+0xec>
 80057b2:	e795      	b.n	80056e0 <__sflush_r+0x18>
 80057b4:	003a      	movs	r2, r7
 80057b6:	0028      	movs	r0, r5
 80057b8:	9b01      	ldr	r3, [sp, #4]
 80057ba:	6a21      	ldr	r1, [r4, #32]
 80057bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057be:	47b0      	blx	r6
 80057c0:	2800      	cmp	r0, #0
 80057c2:	dc06      	bgt.n	80057d2 <__sflush_r+0x10a>
 80057c4:	2340      	movs	r3, #64	; 0x40
 80057c6:	2001      	movs	r0, #1
 80057c8:	89a2      	ldrh	r2, [r4, #12]
 80057ca:	4240      	negs	r0, r0
 80057cc:	4313      	orrs	r3, r2
 80057ce:	81a3      	strh	r3, [r4, #12]
 80057d0:	e787      	b.n	80056e2 <__sflush_r+0x1a>
 80057d2:	9b01      	ldr	r3, [sp, #4]
 80057d4:	183f      	adds	r7, r7, r0
 80057d6:	1a1b      	subs	r3, r3, r0
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	e7e7      	b.n	80057ac <__sflush_r+0xe4>
 80057dc:	20400001 	.word	0x20400001

080057e0 <_fflush_r>:
 80057e0:	690b      	ldr	r3, [r1, #16]
 80057e2:	b570      	push	{r4, r5, r6, lr}
 80057e4:	0005      	movs	r5, r0
 80057e6:	000c      	movs	r4, r1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d102      	bne.n	80057f2 <_fflush_r+0x12>
 80057ec:	2500      	movs	r5, #0
 80057ee:	0028      	movs	r0, r5
 80057f0:	bd70      	pop	{r4, r5, r6, pc}
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d004      	beq.n	8005800 <_fflush_r+0x20>
 80057f6:	6983      	ldr	r3, [r0, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <_fflush_r+0x20>
 80057fc:	f000 f892 	bl	8005924 <__sinit>
 8005800:	4b14      	ldr	r3, [pc, #80]	; (8005854 <_fflush_r+0x74>)
 8005802:	429c      	cmp	r4, r3
 8005804:	d11b      	bne.n	800583e <_fflush_r+0x5e>
 8005806:	686c      	ldr	r4, [r5, #4]
 8005808:	220c      	movs	r2, #12
 800580a:	5ea3      	ldrsh	r3, [r4, r2]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0ed      	beq.n	80057ec <_fflush_r+0xc>
 8005810:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005812:	07d2      	lsls	r2, r2, #31
 8005814:	d404      	bmi.n	8005820 <_fflush_r+0x40>
 8005816:	059b      	lsls	r3, r3, #22
 8005818:	d402      	bmi.n	8005820 <_fflush_r+0x40>
 800581a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800581c:	f000 f923 	bl	8005a66 <__retarget_lock_acquire_recursive>
 8005820:	0028      	movs	r0, r5
 8005822:	0021      	movs	r1, r4
 8005824:	f7ff ff50 	bl	80056c8 <__sflush_r>
 8005828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800582a:	0005      	movs	r5, r0
 800582c:	07db      	lsls	r3, r3, #31
 800582e:	d4de      	bmi.n	80057ee <_fflush_r+0xe>
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	059b      	lsls	r3, r3, #22
 8005834:	d4db      	bmi.n	80057ee <_fflush_r+0xe>
 8005836:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005838:	f000 f916 	bl	8005a68 <__retarget_lock_release_recursive>
 800583c:	e7d7      	b.n	80057ee <_fflush_r+0xe>
 800583e:	4b06      	ldr	r3, [pc, #24]	; (8005858 <_fflush_r+0x78>)
 8005840:	429c      	cmp	r4, r3
 8005842:	d101      	bne.n	8005848 <_fflush_r+0x68>
 8005844:	68ac      	ldr	r4, [r5, #8]
 8005846:	e7df      	b.n	8005808 <_fflush_r+0x28>
 8005848:	4b04      	ldr	r3, [pc, #16]	; (800585c <_fflush_r+0x7c>)
 800584a:	429c      	cmp	r4, r3
 800584c:	d1dc      	bne.n	8005808 <_fflush_r+0x28>
 800584e:	68ec      	ldr	r4, [r5, #12]
 8005850:	e7da      	b.n	8005808 <_fflush_r+0x28>
 8005852:	46c0      	nop			; (mov r8, r8)
 8005854:	08006ca8 	.word	0x08006ca8
 8005858:	08006cc8 	.word	0x08006cc8
 800585c:	08006c88 	.word	0x08006c88

08005860 <std>:
 8005860:	2300      	movs	r3, #0
 8005862:	b510      	push	{r4, lr}
 8005864:	0004      	movs	r4, r0
 8005866:	6003      	str	r3, [r0, #0]
 8005868:	6043      	str	r3, [r0, #4]
 800586a:	6083      	str	r3, [r0, #8]
 800586c:	8181      	strh	r1, [r0, #12]
 800586e:	6643      	str	r3, [r0, #100]	; 0x64
 8005870:	0019      	movs	r1, r3
 8005872:	81c2      	strh	r2, [r0, #14]
 8005874:	6103      	str	r3, [r0, #16]
 8005876:	6143      	str	r3, [r0, #20]
 8005878:	6183      	str	r3, [r0, #24]
 800587a:	2208      	movs	r2, #8
 800587c:	305c      	adds	r0, #92	; 0x5c
 800587e:	f7ff fdb7 	bl	80053f0 <memset>
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <std+0x38>)
 8005884:	6224      	str	r4, [r4, #32]
 8005886:	6263      	str	r3, [r4, #36]	; 0x24
 8005888:	4b04      	ldr	r3, [pc, #16]	; (800589c <std+0x3c>)
 800588a:	62a3      	str	r3, [r4, #40]	; 0x28
 800588c:	4b04      	ldr	r3, [pc, #16]	; (80058a0 <std+0x40>)
 800588e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005890:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <std+0x44>)
 8005892:	6323      	str	r3, [r4, #48]	; 0x30
 8005894:	bd10      	pop	{r4, pc}
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	080062f5 	.word	0x080062f5
 800589c:	0800631d 	.word	0x0800631d
 80058a0:	08006355 	.word	0x08006355
 80058a4:	08006381 	.word	0x08006381

080058a8 <_cleanup_r>:
 80058a8:	b510      	push	{r4, lr}
 80058aa:	4902      	ldr	r1, [pc, #8]	; (80058b4 <_cleanup_r+0xc>)
 80058ac:	f000 f8ba 	bl	8005a24 <_fwalk_reent>
 80058b0:	bd10      	pop	{r4, pc}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	080057e1 	.word	0x080057e1

080058b8 <__sfmoreglue>:
 80058b8:	b570      	push	{r4, r5, r6, lr}
 80058ba:	2568      	movs	r5, #104	; 0x68
 80058bc:	1e4a      	subs	r2, r1, #1
 80058be:	4355      	muls	r5, r2
 80058c0:	000e      	movs	r6, r1
 80058c2:	0029      	movs	r1, r5
 80058c4:	3174      	adds	r1, #116	; 0x74
 80058c6:	f000 f9a9 	bl	8005c1c <_malloc_r>
 80058ca:	1e04      	subs	r4, r0, #0
 80058cc:	d008      	beq.n	80058e0 <__sfmoreglue+0x28>
 80058ce:	2100      	movs	r1, #0
 80058d0:	002a      	movs	r2, r5
 80058d2:	6001      	str	r1, [r0, #0]
 80058d4:	6046      	str	r6, [r0, #4]
 80058d6:	300c      	adds	r0, #12
 80058d8:	60a0      	str	r0, [r4, #8]
 80058da:	3268      	adds	r2, #104	; 0x68
 80058dc:	f7ff fd88 	bl	80053f0 <memset>
 80058e0:	0020      	movs	r0, r4
 80058e2:	bd70      	pop	{r4, r5, r6, pc}

080058e4 <__sfp_lock_acquire>:
 80058e4:	b510      	push	{r4, lr}
 80058e6:	4802      	ldr	r0, [pc, #8]	; (80058f0 <__sfp_lock_acquire+0xc>)
 80058e8:	f000 f8bd 	bl	8005a66 <__retarget_lock_acquire_recursive>
 80058ec:	bd10      	pop	{r4, pc}
 80058ee:	46c0      	nop			; (mov r8, r8)
 80058f0:	20000231 	.word	0x20000231

080058f4 <__sfp_lock_release>:
 80058f4:	b510      	push	{r4, lr}
 80058f6:	4802      	ldr	r0, [pc, #8]	; (8005900 <__sfp_lock_release+0xc>)
 80058f8:	f000 f8b6 	bl	8005a68 <__retarget_lock_release_recursive>
 80058fc:	bd10      	pop	{r4, pc}
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	20000231 	.word	0x20000231

08005904 <__sinit_lock_acquire>:
 8005904:	b510      	push	{r4, lr}
 8005906:	4802      	ldr	r0, [pc, #8]	; (8005910 <__sinit_lock_acquire+0xc>)
 8005908:	f000 f8ad 	bl	8005a66 <__retarget_lock_acquire_recursive>
 800590c:	bd10      	pop	{r4, pc}
 800590e:	46c0      	nop			; (mov r8, r8)
 8005910:	20000232 	.word	0x20000232

08005914 <__sinit_lock_release>:
 8005914:	b510      	push	{r4, lr}
 8005916:	4802      	ldr	r0, [pc, #8]	; (8005920 <__sinit_lock_release+0xc>)
 8005918:	f000 f8a6 	bl	8005a68 <__retarget_lock_release_recursive>
 800591c:	bd10      	pop	{r4, pc}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	20000232 	.word	0x20000232

08005924 <__sinit>:
 8005924:	b513      	push	{r0, r1, r4, lr}
 8005926:	0004      	movs	r4, r0
 8005928:	f7ff ffec 	bl	8005904 <__sinit_lock_acquire>
 800592c:	69a3      	ldr	r3, [r4, #24]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <__sinit+0x14>
 8005932:	f7ff ffef 	bl	8005914 <__sinit_lock_release>
 8005936:	bd13      	pop	{r0, r1, r4, pc}
 8005938:	64a3      	str	r3, [r4, #72]	; 0x48
 800593a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800593c:	6523      	str	r3, [r4, #80]	; 0x50
 800593e:	4b13      	ldr	r3, [pc, #76]	; (800598c <__sinit+0x68>)
 8005940:	4a13      	ldr	r2, [pc, #76]	; (8005990 <__sinit+0x6c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	62a2      	str	r2, [r4, #40]	; 0x28
 8005946:	9301      	str	r3, [sp, #4]
 8005948:	42a3      	cmp	r3, r4
 800594a:	d101      	bne.n	8005950 <__sinit+0x2c>
 800594c:	2301      	movs	r3, #1
 800594e:	61a3      	str	r3, [r4, #24]
 8005950:	0020      	movs	r0, r4
 8005952:	f000 f81f 	bl	8005994 <__sfp>
 8005956:	6060      	str	r0, [r4, #4]
 8005958:	0020      	movs	r0, r4
 800595a:	f000 f81b 	bl	8005994 <__sfp>
 800595e:	60a0      	str	r0, [r4, #8]
 8005960:	0020      	movs	r0, r4
 8005962:	f000 f817 	bl	8005994 <__sfp>
 8005966:	2200      	movs	r2, #0
 8005968:	2104      	movs	r1, #4
 800596a:	60e0      	str	r0, [r4, #12]
 800596c:	6860      	ldr	r0, [r4, #4]
 800596e:	f7ff ff77 	bl	8005860 <std>
 8005972:	2201      	movs	r2, #1
 8005974:	2109      	movs	r1, #9
 8005976:	68a0      	ldr	r0, [r4, #8]
 8005978:	f7ff ff72 	bl	8005860 <std>
 800597c:	2202      	movs	r2, #2
 800597e:	2112      	movs	r1, #18
 8005980:	68e0      	ldr	r0, [r4, #12]
 8005982:	f7ff ff6d 	bl	8005860 <std>
 8005986:	2301      	movs	r3, #1
 8005988:	61a3      	str	r3, [r4, #24]
 800598a:	e7d2      	b.n	8005932 <__sinit+0xe>
 800598c:	08006c84 	.word	0x08006c84
 8005990:	080058a9 	.word	0x080058a9

08005994 <__sfp>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	0007      	movs	r7, r0
 8005998:	f7ff ffa4 	bl	80058e4 <__sfp_lock_acquire>
 800599c:	4b1f      	ldr	r3, [pc, #124]	; (8005a1c <__sfp+0x88>)
 800599e:	681e      	ldr	r6, [r3, #0]
 80059a0:	69b3      	ldr	r3, [r6, #24]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d102      	bne.n	80059ac <__sfp+0x18>
 80059a6:	0030      	movs	r0, r6
 80059a8:	f7ff ffbc 	bl	8005924 <__sinit>
 80059ac:	3648      	adds	r6, #72	; 0x48
 80059ae:	68b4      	ldr	r4, [r6, #8]
 80059b0:	6873      	ldr	r3, [r6, #4]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	d504      	bpl.n	80059c0 <__sfp+0x2c>
 80059b6:	6833      	ldr	r3, [r6, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d022      	beq.n	8005a02 <__sfp+0x6e>
 80059bc:	6836      	ldr	r6, [r6, #0]
 80059be:	e7f6      	b.n	80059ae <__sfp+0x1a>
 80059c0:	220c      	movs	r2, #12
 80059c2:	5ea5      	ldrsh	r5, [r4, r2]
 80059c4:	2d00      	cmp	r5, #0
 80059c6:	d11a      	bne.n	80059fe <__sfp+0x6a>
 80059c8:	0020      	movs	r0, r4
 80059ca:	4b15      	ldr	r3, [pc, #84]	; (8005a20 <__sfp+0x8c>)
 80059cc:	3058      	adds	r0, #88	; 0x58
 80059ce:	60e3      	str	r3, [r4, #12]
 80059d0:	6665      	str	r5, [r4, #100]	; 0x64
 80059d2:	f000 f847 	bl	8005a64 <__retarget_lock_init_recursive>
 80059d6:	f7ff ff8d 	bl	80058f4 <__sfp_lock_release>
 80059da:	0020      	movs	r0, r4
 80059dc:	2208      	movs	r2, #8
 80059de:	0029      	movs	r1, r5
 80059e0:	6025      	str	r5, [r4, #0]
 80059e2:	60a5      	str	r5, [r4, #8]
 80059e4:	6065      	str	r5, [r4, #4]
 80059e6:	6125      	str	r5, [r4, #16]
 80059e8:	6165      	str	r5, [r4, #20]
 80059ea:	61a5      	str	r5, [r4, #24]
 80059ec:	305c      	adds	r0, #92	; 0x5c
 80059ee:	f7ff fcff 	bl	80053f0 <memset>
 80059f2:	6365      	str	r5, [r4, #52]	; 0x34
 80059f4:	63a5      	str	r5, [r4, #56]	; 0x38
 80059f6:	64a5      	str	r5, [r4, #72]	; 0x48
 80059f8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80059fa:	0020      	movs	r0, r4
 80059fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059fe:	3468      	adds	r4, #104	; 0x68
 8005a00:	e7d7      	b.n	80059b2 <__sfp+0x1e>
 8005a02:	2104      	movs	r1, #4
 8005a04:	0038      	movs	r0, r7
 8005a06:	f7ff ff57 	bl	80058b8 <__sfmoreglue>
 8005a0a:	1e04      	subs	r4, r0, #0
 8005a0c:	6030      	str	r0, [r6, #0]
 8005a0e:	d1d5      	bne.n	80059bc <__sfp+0x28>
 8005a10:	f7ff ff70 	bl	80058f4 <__sfp_lock_release>
 8005a14:	230c      	movs	r3, #12
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	e7ef      	b.n	80059fa <__sfp+0x66>
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	08006c84 	.word	0x08006c84
 8005a20:	ffff0001 	.word	0xffff0001

08005a24 <_fwalk_reent>:
 8005a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a26:	0004      	movs	r4, r0
 8005a28:	0006      	movs	r6, r0
 8005a2a:	2700      	movs	r7, #0
 8005a2c:	9101      	str	r1, [sp, #4]
 8005a2e:	3448      	adds	r4, #72	; 0x48
 8005a30:	6863      	ldr	r3, [r4, #4]
 8005a32:	68a5      	ldr	r5, [r4, #8]
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	9b00      	ldr	r3, [sp, #0]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	d504      	bpl.n	8005a48 <_fwalk_reent+0x24>
 8005a3e:	6824      	ldr	r4, [r4, #0]
 8005a40:	2c00      	cmp	r4, #0
 8005a42:	d1f5      	bne.n	8005a30 <_fwalk_reent+0xc>
 8005a44:	0038      	movs	r0, r7
 8005a46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a48:	89ab      	ldrh	r3, [r5, #12]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d908      	bls.n	8005a60 <_fwalk_reent+0x3c>
 8005a4e:	220e      	movs	r2, #14
 8005a50:	5eab      	ldrsh	r3, [r5, r2]
 8005a52:	3301      	adds	r3, #1
 8005a54:	d004      	beq.n	8005a60 <_fwalk_reent+0x3c>
 8005a56:	0029      	movs	r1, r5
 8005a58:	0030      	movs	r0, r6
 8005a5a:	9b01      	ldr	r3, [sp, #4]
 8005a5c:	4798      	blx	r3
 8005a5e:	4307      	orrs	r7, r0
 8005a60:	3568      	adds	r5, #104	; 0x68
 8005a62:	e7e8      	b.n	8005a36 <_fwalk_reent+0x12>

08005a64 <__retarget_lock_init_recursive>:
 8005a64:	4770      	bx	lr

08005a66 <__retarget_lock_acquire_recursive>:
 8005a66:	4770      	bx	lr

08005a68 <__retarget_lock_release_recursive>:
 8005a68:	4770      	bx	lr
	...

08005a6c <__swhatbuf_r>:
 8005a6c:	b570      	push	{r4, r5, r6, lr}
 8005a6e:	000e      	movs	r6, r1
 8005a70:	001d      	movs	r5, r3
 8005a72:	230e      	movs	r3, #14
 8005a74:	5ec9      	ldrsh	r1, [r1, r3]
 8005a76:	0014      	movs	r4, r2
 8005a78:	b096      	sub	sp, #88	; 0x58
 8005a7a:	2900      	cmp	r1, #0
 8005a7c:	da08      	bge.n	8005a90 <__swhatbuf_r+0x24>
 8005a7e:	220c      	movs	r2, #12
 8005a80:	5eb3      	ldrsh	r3, [r6, r2]
 8005a82:	2200      	movs	r2, #0
 8005a84:	602a      	str	r2, [r5, #0]
 8005a86:	061b      	lsls	r3, r3, #24
 8005a88:	d411      	bmi.n	8005aae <__swhatbuf_r+0x42>
 8005a8a:	2380      	movs	r3, #128	; 0x80
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	e00f      	b.n	8005ab0 <__swhatbuf_r+0x44>
 8005a90:	466a      	mov	r2, sp
 8005a92:	f000 fca1 	bl	80063d8 <_fstat_r>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	dbf1      	blt.n	8005a7e <__swhatbuf_r+0x12>
 8005a9a:	23f0      	movs	r3, #240	; 0xf0
 8005a9c:	9901      	ldr	r1, [sp, #4]
 8005a9e:	021b      	lsls	r3, r3, #8
 8005aa0:	4019      	ands	r1, r3
 8005aa2:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <__swhatbuf_r+0x4c>)
 8005aa4:	18c9      	adds	r1, r1, r3
 8005aa6:	424b      	negs	r3, r1
 8005aa8:	4159      	adcs	r1, r3
 8005aaa:	6029      	str	r1, [r5, #0]
 8005aac:	e7ed      	b.n	8005a8a <__swhatbuf_r+0x1e>
 8005aae:	2340      	movs	r3, #64	; 0x40
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	6023      	str	r3, [r4, #0]
 8005ab4:	b016      	add	sp, #88	; 0x58
 8005ab6:	bd70      	pop	{r4, r5, r6, pc}
 8005ab8:	ffffe000 	.word	0xffffe000

08005abc <__smakebuf_r>:
 8005abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005abe:	2602      	movs	r6, #2
 8005ac0:	898b      	ldrh	r3, [r1, #12]
 8005ac2:	0005      	movs	r5, r0
 8005ac4:	000c      	movs	r4, r1
 8005ac6:	4233      	tst	r3, r6
 8005ac8:	d006      	beq.n	8005ad8 <__smakebuf_r+0x1c>
 8005aca:	0023      	movs	r3, r4
 8005acc:	3347      	adds	r3, #71	; 0x47
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	6123      	str	r3, [r4, #16]
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	6163      	str	r3, [r4, #20]
 8005ad6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005ad8:	466a      	mov	r2, sp
 8005ada:	ab01      	add	r3, sp, #4
 8005adc:	f7ff ffc6 	bl	8005a6c <__swhatbuf_r>
 8005ae0:	9900      	ldr	r1, [sp, #0]
 8005ae2:	0007      	movs	r7, r0
 8005ae4:	0028      	movs	r0, r5
 8005ae6:	f000 f899 	bl	8005c1c <_malloc_r>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d108      	bne.n	8005b00 <__smakebuf_r+0x44>
 8005aee:	220c      	movs	r2, #12
 8005af0:	5ea3      	ldrsh	r3, [r4, r2]
 8005af2:	059a      	lsls	r2, r3, #22
 8005af4:	d4ef      	bmi.n	8005ad6 <__smakebuf_r+0x1a>
 8005af6:	2203      	movs	r2, #3
 8005af8:	4393      	bics	r3, r2
 8005afa:	431e      	orrs	r6, r3
 8005afc:	81a6      	strh	r6, [r4, #12]
 8005afe:	e7e4      	b.n	8005aca <__smakebuf_r+0xe>
 8005b00:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <__smakebuf_r+0x84>)
 8005b02:	62ab      	str	r3, [r5, #40]	; 0x28
 8005b04:	2380      	movs	r3, #128	; 0x80
 8005b06:	89a2      	ldrh	r2, [r4, #12]
 8005b08:	6020      	str	r0, [r4, #0]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	81a3      	strh	r3, [r4, #12]
 8005b0e:	9b00      	ldr	r3, [sp, #0]
 8005b10:	6120      	str	r0, [r4, #16]
 8005b12:	6163      	str	r3, [r4, #20]
 8005b14:	9b01      	ldr	r3, [sp, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00d      	beq.n	8005b36 <__smakebuf_r+0x7a>
 8005b1a:	0028      	movs	r0, r5
 8005b1c:	230e      	movs	r3, #14
 8005b1e:	5ee1      	ldrsh	r1, [r4, r3]
 8005b20:	f000 fc6c 	bl	80063fc <_isatty_r>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d006      	beq.n	8005b36 <__smakebuf_r+0x7a>
 8005b28:	2203      	movs	r2, #3
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	4393      	bics	r3, r2
 8005b2e:	001a      	movs	r2, r3
 8005b30:	2301      	movs	r3, #1
 8005b32:	4313      	orrs	r3, r2
 8005b34:	81a3      	strh	r3, [r4, #12]
 8005b36:	89a0      	ldrh	r0, [r4, #12]
 8005b38:	4307      	orrs	r7, r0
 8005b3a:	81a7      	strh	r7, [r4, #12]
 8005b3c:	e7cb      	b.n	8005ad6 <__smakebuf_r+0x1a>
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	080058a9 	.word	0x080058a9

08005b44 <_free_r>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	0005      	movs	r5, r0
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	d010      	beq.n	8005b6e <_free_r+0x2a>
 8005b4c:	1f0c      	subs	r4, r1, #4
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	da00      	bge.n	8005b56 <_free_r+0x12>
 8005b54:	18e4      	adds	r4, r4, r3
 8005b56:	0028      	movs	r0, r5
 8005b58:	f000 fc82 	bl	8006460 <__malloc_lock>
 8005b5c:	4a1d      	ldr	r2, [pc, #116]	; (8005bd4 <_free_r+0x90>)
 8005b5e:	6813      	ldr	r3, [r2, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d105      	bne.n	8005b70 <_free_r+0x2c>
 8005b64:	6063      	str	r3, [r4, #4]
 8005b66:	6014      	str	r4, [r2, #0]
 8005b68:	0028      	movs	r0, r5
 8005b6a:	f000 fc81 	bl	8006470 <__malloc_unlock>
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	d908      	bls.n	8005b86 <_free_r+0x42>
 8005b74:	6821      	ldr	r1, [r4, #0]
 8005b76:	1860      	adds	r0, r4, r1
 8005b78:	4283      	cmp	r3, r0
 8005b7a:	d1f3      	bne.n	8005b64 <_free_r+0x20>
 8005b7c:	6818      	ldr	r0, [r3, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	1841      	adds	r1, r0, r1
 8005b82:	6021      	str	r1, [r4, #0]
 8005b84:	e7ee      	b.n	8005b64 <_free_r+0x20>
 8005b86:	001a      	movs	r2, r3
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <_free_r+0x4e>
 8005b8e:	42a3      	cmp	r3, r4
 8005b90:	d9f9      	bls.n	8005b86 <_free_r+0x42>
 8005b92:	6811      	ldr	r1, [r2, #0]
 8005b94:	1850      	adds	r0, r2, r1
 8005b96:	42a0      	cmp	r0, r4
 8005b98:	d10b      	bne.n	8005bb2 <_free_r+0x6e>
 8005b9a:	6820      	ldr	r0, [r4, #0]
 8005b9c:	1809      	adds	r1, r1, r0
 8005b9e:	1850      	adds	r0, r2, r1
 8005ba0:	6011      	str	r1, [r2, #0]
 8005ba2:	4283      	cmp	r3, r0
 8005ba4:	d1e0      	bne.n	8005b68 <_free_r+0x24>
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	1841      	adds	r1, r0, r1
 8005bac:	6011      	str	r1, [r2, #0]
 8005bae:	6053      	str	r3, [r2, #4]
 8005bb0:	e7da      	b.n	8005b68 <_free_r+0x24>
 8005bb2:	42a0      	cmp	r0, r4
 8005bb4:	d902      	bls.n	8005bbc <_free_r+0x78>
 8005bb6:	230c      	movs	r3, #12
 8005bb8:	602b      	str	r3, [r5, #0]
 8005bba:	e7d5      	b.n	8005b68 <_free_r+0x24>
 8005bbc:	6821      	ldr	r1, [r4, #0]
 8005bbe:	1860      	adds	r0, r4, r1
 8005bc0:	4283      	cmp	r3, r0
 8005bc2:	d103      	bne.n	8005bcc <_free_r+0x88>
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	1841      	adds	r1, r0, r1
 8005bca:	6021      	str	r1, [r4, #0]
 8005bcc:	6063      	str	r3, [r4, #4]
 8005bce:	6054      	str	r4, [r2, #4]
 8005bd0:	e7ca      	b.n	8005b68 <_free_r+0x24>
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	20000234 	.word	0x20000234

08005bd8 <sbrk_aligned>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	4e0f      	ldr	r6, [pc, #60]	; (8005c18 <sbrk_aligned+0x40>)
 8005bdc:	000d      	movs	r5, r1
 8005bde:	6831      	ldr	r1, [r6, #0]
 8005be0:	0004      	movs	r4, r0
 8005be2:	2900      	cmp	r1, #0
 8005be4:	d102      	bne.n	8005bec <sbrk_aligned+0x14>
 8005be6:	f000 fb73 	bl	80062d0 <_sbrk_r>
 8005bea:	6030      	str	r0, [r6, #0]
 8005bec:	0029      	movs	r1, r5
 8005bee:	0020      	movs	r0, r4
 8005bf0:	f000 fb6e 	bl	80062d0 <_sbrk_r>
 8005bf4:	1c43      	adds	r3, r0, #1
 8005bf6:	d00a      	beq.n	8005c0e <sbrk_aligned+0x36>
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	1cc5      	adds	r5, r0, #3
 8005bfc:	439d      	bics	r5, r3
 8005bfe:	42a8      	cmp	r0, r5
 8005c00:	d007      	beq.n	8005c12 <sbrk_aligned+0x3a>
 8005c02:	1a29      	subs	r1, r5, r0
 8005c04:	0020      	movs	r0, r4
 8005c06:	f000 fb63 	bl	80062d0 <_sbrk_r>
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	d101      	bne.n	8005c12 <sbrk_aligned+0x3a>
 8005c0e:	2501      	movs	r5, #1
 8005c10:	426d      	negs	r5, r5
 8005c12:	0028      	movs	r0, r5
 8005c14:	bd70      	pop	{r4, r5, r6, pc}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	20000238 	.word	0x20000238

08005c1c <_malloc_r>:
 8005c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c1e:	2203      	movs	r2, #3
 8005c20:	1ccb      	adds	r3, r1, #3
 8005c22:	4393      	bics	r3, r2
 8005c24:	3308      	adds	r3, #8
 8005c26:	0006      	movs	r6, r0
 8005c28:	001f      	movs	r7, r3
 8005c2a:	2b0c      	cmp	r3, #12
 8005c2c:	d232      	bcs.n	8005c94 <_malloc_r+0x78>
 8005c2e:	270c      	movs	r7, #12
 8005c30:	42b9      	cmp	r1, r7
 8005c32:	d831      	bhi.n	8005c98 <_malloc_r+0x7c>
 8005c34:	0030      	movs	r0, r6
 8005c36:	f000 fc13 	bl	8006460 <__malloc_lock>
 8005c3a:	4d32      	ldr	r5, [pc, #200]	; (8005d04 <_malloc_r+0xe8>)
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	001c      	movs	r4, r3
 8005c40:	2c00      	cmp	r4, #0
 8005c42:	d12e      	bne.n	8005ca2 <_malloc_r+0x86>
 8005c44:	0039      	movs	r1, r7
 8005c46:	0030      	movs	r0, r6
 8005c48:	f7ff ffc6 	bl	8005bd8 <sbrk_aligned>
 8005c4c:	0004      	movs	r4, r0
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	d11e      	bne.n	8005c90 <_malloc_r+0x74>
 8005c52:	682c      	ldr	r4, [r5, #0]
 8005c54:	0025      	movs	r5, r4
 8005c56:	2d00      	cmp	r5, #0
 8005c58:	d14a      	bne.n	8005cf0 <_malloc_r+0xd4>
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	0029      	movs	r1, r5
 8005c5e:	18e3      	adds	r3, r4, r3
 8005c60:	0030      	movs	r0, r6
 8005c62:	9301      	str	r3, [sp, #4]
 8005c64:	f000 fb34 	bl	80062d0 <_sbrk_r>
 8005c68:	9b01      	ldr	r3, [sp, #4]
 8005c6a:	4283      	cmp	r3, r0
 8005c6c:	d143      	bne.n	8005cf6 <_malloc_r+0xda>
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	3703      	adds	r7, #3
 8005c72:	1aff      	subs	r7, r7, r3
 8005c74:	2303      	movs	r3, #3
 8005c76:	439f      	bics	r7, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	2f0c      	cmp	r7, #12
 8005c7c:	d200      	bcs.n	8005c80 <_malloc_r+0x64>
 8005c7e:	270c      	movs	r7, #12
 8005c80:	0039      	movs	r1, r7
 8005c82:	0030      	movs	r0, r6
 8005c84:	f7ff ffa8 	bl	8005bd8 <sbrk_aligned>
 8005c88:	1c43      	adds	r3, r0, #1
 8005c8a:	d034      	beq.n	8005cf6 <_malloc_r+0xda>
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	19df      	adds	r7, r3, r7
 8005c90:	6027      	str	r7, [r4, #0]
 8005c92:	e013      	b.n	8005cbc <_malloc_r+0xa0>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	dacb      	bge.n	8005c30 <_malloc_r+0x14>
 8005c98:	230c      	movs	r3, #12
 8005c9a:	2500      	movs	r5, #0
 8005c9c:	6033      	str	r3, [r6, #0]
 8005c9e:	0028      	movs	r0, r5
 8005ca0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ca2:	6822      	ldr	r2, [r4, #0]
 8005ca4:	1bd1      	subs	r1, r2, r7
 8005ca6:	d420      	bmi.n	8005cea <_malloc_r+0xce>
 8005ca8:	290b      	cmp	r1, #11
 8005caa:	d917      	bls.n	8005cdc <_malloc_r+0xc0>
 8005cac:	19e2      	adds	r2, r4, r7
 8005cae:	6027      	str	r7, [r4, #0]
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	d111      	bne.n	8005cd8 <_malloc_r+0xbc>
 8005cb4:	602a      	str	r2, [r5, #0]
 8005cb6:	6863      	ldr	r3, [r4, #4]
 8005cb8:	6011      	str	r1, [r2, #0]
 8005cba:	6053      	str	r3, [r2, #4]
 8005cbc:	0030      	movs	r0, r6
 8005cbe:	0025      	movs	r5, r4
 8005cc0:	f000 fbd6 	bl	8006470 <__malloc_unlock>
 8005cc4:	2207      	movs	r2, #7
 8005cc6:	350b      	adds	r5, #11
 8005cc8:	1d23      	adds	r3, r4, #4
 8005cca:	4395      	bics	r5, r2
 8005ccc:	1aea      	subs	r2, r5, r3
 8005cce:	429d      	cmp	r5, r3
 8005cd0:	d0e5      	beq.n	8005c9e <_malloc_r+0x82>
 8005cd2:	1b5b      	subs	r3, r3, r5
 8005cd4:	50a3      	str	r3, [r4, r2]
 8005cd6:	e7e2      	b.n	8005c9e <_malloc_r+0x82>
 8005cd8:	605a      	str	r2, [r3, #4]
 8005cda:	e7ec      	b.n	8005cb6 <_malloc_r+0x9a>
 8005cdc:	6862      	ldr	r2, [r4, #4]
 8005cde:	42a3      	cmp	r3, r4
 8005ce0:	d101      	bne.n	8005ce6 <_malloc_r+0xca>
 8005ce2:	602a      	str	r2, [r5, #0]
 8005ce4:	e7ea      	b.n	8005cbc <_malloc_r+0xa0>
 8005ce6:	605a      	str	r2, [r3, #4]
 8005ce8:	e7e8      	b.n	8005cbc <_malloc_r+0xa0>
 8005cea:	0023      	movs	r3, r4
 8005cec:	6864      	ldr	r4, [r4, #4]
 8005cee:	e7a7      	b.n	8005c40 <_malloc_r+0x24>
 8005cf0:	002c      	movs	r4, r5
 8005cf2:	686d      	ldr	r5, [r5, #4]
 8005cf4:	e7af      	b.n	8005c56 <_malloc_r+0x3a>
 8005cf6:	230c      	movs	r3, #12
 8005cf8:	0030      	movs	r0, r6
 8005cfa:	6033      	str	r3, [r6, #0]
 8005cfc:	f000 fbb8 	bl	8006470 <__malloc_unlock>
 8005d00:	e7cd      	b.n	8005c9e <_malloc_r+0x82>
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	20000234 	.word	0x20000234

08005d08 <__sfputc_r>:
 8005d08:	6893      	ldr	r3, [r2, #8]
 8005d0a:	b510      	push	{r4, lr}
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	6093      	str	r3, [r2, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	da04      	bge.n	8005d1e <__sfputc_r+0x16>
 8005d14:	6994      	ldr	r4, [r2, #24]
 8005d16:	42a3      	cmp	r3, r4
 8005d18:	db07      	blt.n	8005d2a <__sfputc_r+0x22>
 8005d1a:	290a      	cmp	r1, #10
 8005d1c:	d005      	beq.n	8005d2a <__sfputc_r+0x22>
 8005d1e:	6813      	ldr	r3, [r2, #0]
 8005d20:	1c58      	adds	r0, r3, #1
 8005d22:	6010      	str	r0, [r2, #0]
 8005d24:	7019      	strb	r1, [r3, #0]
 8005d26:	0008      	movs	r0, r1
 8005d28:	bd10      	pop	{r4, pc}
 8005d2a:	f7ff fbff 	bl	800552c <__swbuf_r>
 8005d2e:	0001      	movs	r1, r0
 8005d30:	e7f9      	b.n	8005d26 <__sfputc_r+0x1e>

08005d32 <__sfputs_r>:
 8005d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d34:	0006      	movs	r6, r0
 8005d36:	000f      	movs	r7, r1
 8005d38:	0014      	movs	r4, r2
 8005d3a:	18d5      	adds	r5, r2, r3
 8005d3c:	42ac      	cmp	r4, r5
 8005d3e:	d101      	bne.n	8005d44 <__sfputs_r+0x12>
 8005d40:	2000      	movs	r0, #0
 8005d42:	e007      	b.n	8005d54 <__sfputs_r+0x22>
 8005d44:	7821      	ldrb	r1, [r4, #0]
 8005d46:	003a      	movs	r2, r7
 8005d48:	0030      	movs	r0, r6
 8005d4a:	f7ff ffdd 	bl	8005d08 <__sfputc_r>
 8005d4e:	3401      	adds	r4, #1
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d1f3      	bne.n	8005d3c <__sfputs_r+0xa>
 8005d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d58 <_vfiprintf_r>:
 8005d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d5a:	b0a1      	sub	sp, #132	; 0x84
 8005d5c:	0006      	movs	r6, r0
 8005d5e:	000c      	movs	r4, r1
 8005d60:	001f      	movs	r7, r3
 8005d62:	9203      	str	r2, [sp, #12]
 8005d64:	2800      	cmp	r0, #0
 8005d66:	d004      	beq.n	8005d72 <_vfiprintf_r+0x1a>
 8005d68:	6983      	ldr	r3, [r0, #24]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <_vfiprintf_r+0x1a>
 8005d6e:	f7ff fdd9 	bl	8005924 <__sinit>
 8005d72:	4b8e      	ldr	r3, [pc, #568]	; (8005fac <_vfiprintf_r+0x254>)
 8005d74:	429c      	cmp	r4, r3
 8005d76:	d11c      	bne.n	8005db2 <_vfiprintf_r+0x5a>
 8005d78:	6874      	ldr	r4, [r6, #4]
 8005d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d7c:	07db      	lsls	r3, r3, #31
 8005d7e:	d405      	bmi.n	8005d8c <_vfiprintf_r+0x34>
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	059b      	lsls	r3, r3, #22
 8005d84:	d402      	bmi.n	8005d8c <_vfiprintf_r+0x34>
 8005d86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d88:	f7ff fe6d 	bl	8005a66 <__retarget_lock_acquire_recursive>
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	071b      	lsls	r3, r3, #28
 8005d90:	d502      	bpl.n	8005d98 <_vfiprintf_r+0x40>
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d11d      	bne.n	8005dd4 <_vfiprintf_r+0x7c>
 8005d98:	0021      	movs	r1, r4
 8005d9a:	0030      	movs	r0, r6
 8005d9c:	f7ff fc1c 	bl	80055d8 <__swsetup_r>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	d017      	beq.n	8005dd4 <_vfiprintf_r+0x7c>
 8005da4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005da6:	07db      	lsls	r3, r3, #31
 8005da8:	d50d      	bpl.n	8005dc6 <_vfiprintf_r+0x6e>
 8005daa:	2001      	movs	r0, #1
 8005dac:	4240      	negs	r0, r0
 8005dae:	b021      	add	sp, #132	; 0x84
 8005db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005db2:	4b7f      	ldr	r3, [pc, #508]	; (8005fb0 <_vfiprintf_r+0x258>)
 8005db4:	429c      	cmp	r4, r3
 8005db6:	d101      	bne.n	8005dbc <_vfiprintf_r+0x64>
 8005db8:	68b4      	ldr	r4, [r6, #8]
 8005dba:	e7de      	b.n	8005d7a <_vfiprintf_r+0x22>
 8005dbc:	4b7d      	ldr	r3, [pc, #500]	; (8005fb4 <_vfiprintf_r+0x25c>)
 8005dbe:	429c      	cmp	r4, r3
 8005dc0:	d1db      	bne.n	8005d7a <_vfiprintf_r+0x22>
 8005dc2:	68f4      	ldr	r4, [r6, #12]
 8005dc4:	e7d9      	b.n	8005d7a <_vfiprintf_r+0x22>
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	059b      	lsls	r3, r3, #22
 8005dca:	d4ee      	bmi.n	8005daa <_vfiprintf_r+0x52>
 8005dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dce:	f7ff fe4b 	bl	8005a68 <__retarget_lock_release_recursive>
 8005dd2:	e7ea      	b.n	8005daa <_vfiprintf_r+0x52>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	ad08      	add	r5, sp, #32
 8005dd8:	616b      	str	r3, [r5, #20]
 8005dda:	3320      	adds	r3, #32
 8005ddc:	766b      	strb	r3, [r5, #25]
 8005dde:	3310      	adds	r3, #16
 8005de0:	76ab      	strb	r3, [r5, #26]
 8005de2:	9707      	str	r7, [sp, #28]
 8005de4:	9f03      	ldr	r7, [sp, #12]
 8005de6:	783b      	ldrb	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <_vfiprintf_r+0x98>
 8005dec:	2b25      	cmp	r3, #37	; 0x25
 8005dee:	d14e      	bne.n	8005e8e <_vfiprintf_r+0x136>
 8005df0:	9b03      	ldr	r3, [sp, #12]
 8005df2:	1afb      	subs	r3, r7, r3
 8005df4:	9305      	str	r3, [sp, #20]
 8005df6:	9b03      	ldr	r3, [sp, #12]
 8005df8:	429f      	cmp	r7, r3
 8005dfa:	d00d      	beq.n	8005e18 <_vfiprintf_r+0xc0>
 8005dfc:	9b05      	ldr	r3, [sp, #20]
 8005dfe:	0021      	movs	r1, r4
 8005e00:	0030      	movs	r0, r6
 8005e02:	9a03      	ldr	r2, [sp, #12]
 8005e04:	f7ff ff95 	bl	8005d32 <__sfputs_r>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d100      	bne.n	8005e0e <_vfiprintf_r+0xb6>
 8005e0c:	e0b5      	b.n	8005f7a <_vfiprintf_r+0x222>
 8005e0e:	696a      	ldr	r2, [r5, #20]
 8005e10:	9b05      	ldr	r3, [sp, #20]
 8005e12:	4694      	mov	ip, r2
 8005e14:	4463      	add	r3, ip
 8005e16:	616b      	str	r3, [r5, #20]
 8005e18:	783b      	ldrb	r3, [r7, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d100      	bne.n	8005e20 <_vfiprintf_r+0xc8>
 8005e1e:	e0ac      	b.n	8005f7a <_vfiprintf_r+0x222>
 8005e20:	2201      	movs	r2, #1
 8005e22:	1c7b      	adds	r3, r7, #1
 8005e24:	9303      	str	r3, [sp, #12]
 8005e26:	2300      	movs	r3, #0
 8005e28:	4252      	negs	r2, r2
 8005e2a:	606a      	str	r2, [r5, #4]
 8005e2c:	a904      	add	r1, sp, #16
 8005e2e:	3254      	adds	r2, #84	; 0x54
 8005e30:	1852      	adds	r2, r2, r1
 8005e32:	602b      	str	r3, [r5, #0]
 8005e34:	60eb      	str	r3, [r5, #12]
 8005e36:	60ab      	str	r3, [r5, #8]
 8005e38:	7013      	strb	r3, [r2, #0]
 8005e3a:	65ab      	str	r3, [r5, #88]	; 0x58
 8005e3c:	9b03      	ldr	r3, [sp, #12]
 8005e3e:	2205      	movs	r2, #5
 8005e40:	7819      	ldrb	r1, [r3, #0]
 8005e42:	485d      	ldr	r0, [pc, #372]	; (8005fb8 <_vfiprintf_r+0x260>)
 8005e44:	f000 fb00 	bl	8006448 <memchr>
 8005e48:	9b03      	ldr	r3, [sp, #12]
 8005e4a:	1c5f      	adds	r7, r3, #1
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d120      	bne.n	8005e92 <_vfiprintf_r+0x13a>
 8005e50:	682a      	ldr	r2, [r5, #0]
 8005e52:	06d3      	lsls	r3, r2, #27
 8005e54:	d504      	bpl.n	8005e60 <_vfiprintf_r+0x108>
 8005e56:	2353      	movs	r3, #83	; 0x53
 8005e58:	a904      	add	r1, sp, #16
 8005e5a:	185b      	adds	r3, r3, r1
 8005e5c:	2120      	movs	r1, #32
 8005e5e:	7019      	strb	r1, [r3, #0]
 8005e60:	0713      	lsls	r3, r2, #28
 8005e62:	d504      	bpl.n	8005e6e <_vfiprintf_r+0x116>
 8005e64:	2353      	movs	r3, #83	; 0x53
 8005e66:	a904      	add	r1, sp, #16
 8005e68:	185b      	adds	r3, r3, r1
 8005e6a:	212b      	movs	r1, #43	; 0x2b
 8005e6c:	7019      	strb	r1, [r3, #0]
 8005e6e:	9b03      	ldr	r3, [sp, #12]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b2a      	cmp	r3, #42	; 0x2a
 8005e74:	d016      	beq.n	8005ea4 <_vfiprintf_r+0x14c>
 8005e76:	2100      	movs	r1, #0
 8005e78:	68eb      	ldr	r3, [r5, #12]
 8005e7a:	9f03      	ldr	r7, [sp, #12]
 8005e7c:	783a      	ldrb	r2, [r7, #0]
 8005e7e:	1c78      	adds	r0, r7, #1
 8005e80:	3a30      	subs	r2, #48	; 0x30
 8005e82:	4684      	mov	ip, r0
 8005e84:	2a09      	cmp	r2, #9
 8005e86:	d94f      	bls.n	8005f28 <_vfiprintf_r+0x1d0>
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	d111      	bne.n	8005eb0 <_vfiprintf_r+0x158>
 8005e8c:	e017      	b.n	8005ebe <_vfiprintf_r+0x166>
 8005e8e:	3701      	adds	r7, #1
 8005e90:	e7a9      	b.n	8005de6 <_vfiprintf_r+0x8e>
 8005e92:	4b49      	ldr	r3, [pc, #292]	; (8005fb8 <_vfiprintf_r+0x260>)
 8005e94:	682a      	ldr	r2, [r5, #0]
 8005e96:	1ac0      	subs	r0, r0, r3
 8005e98:	2301      	movs	r3, #1
 8005e9a:	4083      	lsls	r3, r0
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	602b      	str	r3, [r5, #0]
 8005ea0:	9703      	str	r7, [sp, #12]
 8005ea2:	e7cb      	b.n	8005e3c <_vfiprintf_r+0xe4>
 8005ea4:	9b07      	ldr	r3, [sp, #28]
 8005ea6:	1d19      	adds	r1, r3, #4
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	9107      	str	r1, [sp, #28]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	db01      	blt.n	8005eb4 <_vfiprintf_r+0x15c>
 8005eb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eb2:	e004      	b.n	8005ebe <_vfiprintf_r+0x166>
 8005eb4:	425b      	negs	r3, r3
 8005eb6:	60eb      	str	r3, [r5, #12]
 8005eb8:	2302      	movs	r3, #2
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	602b      	str	r3, [r5, #0]
 8005ebe:	783b      	ldrb	r3, [r7, #0]
 8005ec0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ec2:	d10a      	bne.n	8005eda <_vfiprintf_r+0x182>
 8005ec4:	787b      	ldrb	r3, [r7, #1]
 8005ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ec8:	d137      	bne.n	8005f3a <_vfiprintf_r+0x1e2>
 8005eca:	9b07      	ldr	r3, [sp, #28]
 8005ecc:	3702      	adds	r7, #2
 8005ece:	1d1a      	adds	r2, r3, #4
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	9207      	str	r2, [sp, #28]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	db2d      	blt.n	8005f34 <_vfiprintf_r+0x1dc>
 8005ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8005eda:	2203      	movs	r2, #3
 8005edc:	7839      	ldrb	r1, [r7, #0]
 8005ede:	4837      	ldr	r0, [pc, #220]	; (8005fbc <_vfiprintf_r+0x264>)
 8005ee0:	f000 fab2 	bl	8006448 <memchr>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d007      	beq.n	8005ef8 <_vfiprintf_r+0x1a0>
 8005ee8:	4b34      	ldr	r3, [pc, #208]	; (8005fbc <_vfiprintf_r+0x264>)
 8005eea:	682a      	ldr	r2, [r5, #0]
 8005eec:	1ac0      	subs	r0, r0, r3
 8005eee:	2340      	movs	r3, #64	; 0x40
 8005ef0:	4083      	lsls	r3, r0
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	3701      	adds	r7, #1
 8005ef6:	602b      	str	r3, [r5, #0]
 8005ef8:	7839      	ldrb	r1, [r7, #0]
 8005efa:	1c7b      	adds	r3, r7, #1
 8005efc:	2206      	movs	r2, #6
 8005efe:	4830      	ldr	r0, [pc, #192]	; (8005fc0 <_vfiprintf_r+0x268>)
 8005f00:	9303      	str	r3, [sp, #12]
 8005f02:	7629      	strb	r1, [r5, #24]
 8005f04:	f000 faa0 	bl	8006448 <memchr>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d045      	beq.n	8005f98 <_vfiprintf_r+0x240>
 8005f0c:	4b2d      	ldr	r3, [pc, #180]	; (8005fc4 <_vfiprintf_r+0x26c>)
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d127      	bne.n	8005f62 <_vfiprintf_r+0x20a>
 8005f12:	2207      	movs	r2, #7
 8005f14:	9b07      	ldr	r3, [sp, #28]
 8005f16:	3307      	adds	r3, #7
 8005f18:	4393      	bics	r3, r2
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	9307      	str	r3, [sp, #28]
 8005f1e:	696b      	ldr	r3, [r5, #20]
 8005f20:	9a04      	ldr	r2, [sp, #16]
 8005f22:	189b      	adds	r3, r3, r2
 8005f24:	616b      	str	r3, [r5, #20]
 8005f26:	e75d      	b.n	8005de4 <_vfiprintf_r+0x8c>
 8005f28:	210a      	movs	r1, #10
 8005f2a:	434b      	muls	r3, r1
 8005f2c:	4667      	mov	r7, ip
 8005f2e:	189b      	adds	r3, r3, r2
 8005f30:	3909      	subs	r1, #9
 8005f32:	e7a3      	b.n	8005e7c <_vfiprintf_r+0x124>
 8005f34:	2301      	movs	r3, #1
 8005f36:	425b      	negs	r3, r3
 8005f38:	e7ce      	b.n	8005ed8 <_vfiprintf_r+0x180>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	001a      	movs	r2, r3
 8005f3e:	3701      	adds	r7, #1
 8005f40:	606b      	str	r3, [r5, #4]
 8005f42:	7839      	ldrb	r1, [r7, #0]
 8005f44:	1c78      	adds	r0, r7, #1
 8005f46:	3930      	subs	r1, #48	; 0x30
 8005f48:	4684      	mov	ip, r0
 8005f4a:	2909      	cmp	r1, #9
 8005f4c:	d903      	bls.n	8005f56 <_vfiprintf_r+0x1fe>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0c3      	beq.n	8005eda <_vfiprintf_r+0x182>
 8005f52:	9209      	str	r2, [sp, #36]	; 0x24
 8005f54:	e7c1      	b.n	8005eda <_vfiprintf_r+0x182>
 8005f56:	230a      	movs	r3, #10
 8005f58:	435a      	muls	r2, r3
 8005f5a:	4667      	mov	r7, ip
 8005f5c:	1852      	adds	r2, r2, r1
 8005f5e:	3b09      	subs	r3, #9
 8005f60:	e7ef      	b.n	8005f42 <_vfiprintf_r+0x1ea>
 8005f62:	ab07      	add	r3, sp, #28
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	0022      	movs	r2, r4
 8005f68:	0029      	movs	r1, r5
 8005f6a:	0030      	movs	r0, r6
 8005f6c:	4b16      	ldr	r3, [pc, #88]	; (8005fc8 <_vfiprintf_r+0x270>)
 8005f6e:	e000      	b.n	8005f72 <_vfiprintf_r+0x21a>
 8005f70:	bf00      	nop
 8005f72:	9004      	str	r0, [sp, #16]
 8005f74:	9b04      	ldr	r3, [sp, #16]
 8005f76:	3301      	adds	r3, #1
 8005f78:	d1d1      	bne.n	8005f1e <_vfiprintf_r+0x1c6>
 8005f7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f7c:	07db      	lsls	r3, r3, #31
 8005f7e:	d405      	bmi.n	8005f8c <_vfiprintf_r+0x234>
 8005f80:	89a3      	ldrh	r3, [r4, #12]
 8005f82:	059b      	lsls	r3, r3, #22
 8005f84:	d402      	bmi.n	8005f8c <_vfiprintf_r+0x234>
 8005f86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f88:	f7ff fd6e 	bl	8005a68 <__retarget_lock_release_recursive>
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	065b      	lsls	r3, r3, #25
 8005f90:	d500      	bpl.n	8005f94 <_vfiprintf_r+0x23c>
 8005f92:	e70a      	b.n	8005daa <_vfiprintf_r+0x52>
 8005f94:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005f96:	e70a      	b.n	8005dae <_vfiprintf_r+0x56>
 8005f98:	ab07      	add	r3, sp, #28
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	0022      	movs	r2, r4
 8005f9e:	0029      	movs	r1, r5
 8005fa0:	0030      	movs	r0, r6
 8005fa2:	4b09      	ldr	r3, [pc, #36]	; (8005fc8 <_vfiprintf_r+0x270>)
 8005fa4:	f000 f882 	bl	80060ac <_printf_i>
 8005fa8:	e7e3      	b.n	8005f72 <_vfiprintf_r+0x21a>
 8005faa:	46c0      	nop			; (mov r8, r8)
 8005fac:	08006ca8 	.word	0x08006ca8
 8005fb0:	08006cc8 	.word	0x08006cc8
 8005fb4:	08006c88 	.word	0x08006c88
 8005fb8:	08006ce8 	.word	0x08006ce8
 8005fbc:	08006cee 	.word	0x08006cee
 8005fc0:	08006cf2 	.word	0x08006cf2
 8005fc4:	00000000 	.word	0x00000000
 8005fc8:	08005d33 	.word	0x08005d33

08005fcc <_printf_common>:
 8005fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fce:	0015      	movs	r5, r2
 8005fd0:	9301      	str	r3, [sp, #4]
 8005fd2:	688a      	ldr	r2, [r1, #8]
 8005fd4:	690b      	ldr	r3, [r1, #16]
 8005fd6:	000c      	movs	r4, r1
 8005fd8:	9000      	str	r0, [sp, #0]
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	da00      	bge.n	8005fe0 <_printf_common+0x14>
 8005fde:	0013      	movs	r3, r2
 8005fe0:	0022      	movs	r2, r4
 8005fe2:	602b      	str	r3, [r5, #0]
 8005fe4:	3243      	adds	r2, #67	; 0x43
 8005fe6:	7812      	ldrb	r2, [r2, #0]
 8005fe8:	2a00      	cmp	r2, #0
 8005fea:	d001      	beq.n	8005ff0 <_printf_common+0x24>
 8005fec:	3301      	adds	r3, #1
 8005fee:	602b      	str	r3, [r5, #0]
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	069b      	lsls	r3, r3, #26
 8005ff4:	d502      	bpl.n	8005ffc <_printf_common+0x30>
 8005ff6:	682b      	ldr	r3, [r5, #0]
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	602b      	str	r3, [r5, #0]
 8005ffc:	6822      	ldr	r2, [r4, #0]
 8005ffe:	2306      	movs	r3, #6
 8006000:	0017      	movs	r7, r2
 8006002:	401f      	ands	r7, r3
 8006004:	421a      	tst	r2, r3
 8006006:	d027      	beq.n	8006058 <_printf_common+0x8c>
 8006008:	0023      	movs	r3, r4
 800600a:	3343      	adds	r3, #67	; 0x43
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	1e5a      	subs	r2, r3, #1
 8006010:	4193      	sbcs	r3, r2
 8006012:	6822      	ldr	r2, [r4, #0]
 8006014:	0692      	lsls	r2, r2, #26
 8006016:	d430      	bmi.n	800607a <_printf_common+0xae>
 8006018:	0022      	movs	r2, r4
 800601a:	9901      	ldr	r1, [sp, #4]
 800601c:	9800      	ldr	r0, [sp, #0]
 800601e:	9e08      	ldr	r6, [sp, #32]
 8006020:	3243      	adds	r2, #67	; 0x43
 8006022:	47b0      	blx	r6
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d025      	beq.n	8006074 <_printf_common+0xa8>
 8006028:	2306      	movs	r3, #6
 800602a:	6820      	ldr	r0, [r4, #0]
 800602c:	682a      	ldr	r2, [r5, #0]
 800602e:	68e1      	ldr	r1, [r4, #12]
 8006030:	2500      	movs	r5, #0
 8006032:	4003      	ands	r3, r0
 8006034:	2b04      	cmp	r3, #4
 8006036:	d103      	bne.n	8006040 <_printf_common+0x74>
 8006038:	1a8d      	subs	r5, r1, r2
 800603a:	43eb      	mvns	r3, r5
 800603c:	17db      	asrs	r3, r3, #31
 800603e:	401d      	ands	r5, r3
 8006040:	68a3      	ldr	r3, [r4, #8]
 8006042:	6922      	ldr	r2, [r4, #16]
 8006044:	4293      	cmp	r3, r2
 8006046:	dd01      	ble.n	800604c <_printf_common+0x80>
 8006048:	1a9b      	subs	r3, r3, r2
 800604a:	18ed      	adds	r5, r5, r3
 800604c:	2700      	movs	r7, #0
 800604e:	42bd      	cmp	r5, r7
 8006050:	d120      	bne.n	8006094 <_printf_common+0xc8>
 8006052:	2000      	movs	r0, #0
 8006054:	e010      	b.n	8006078 <_printf_common+0xac>
 8006056:	3701      	adds	r7, #1
 8006058:	68e3      	ldr	r3, [r4, #12]
 800605a:	682a      	ldr	r2, [r5, #0]
 800605c:	1a9b      	subs	r3, r3, r2
 800605e:	42bb      	cmp	r3, r7
 8006060:	ddd2      	ble.n	8006008 <_printf_common+0x3c>
 8006062:	0022      	movs	r2, r4
 8006064:	2301      	movs	r3, #1
 8006066:	9901      	ldr	r1, [sp, #4]
 8006068:	9800      	ldr	r0, [sp, #0]
 800606a:	9e08      	ldr	r6, [sp, #32]
 800606c:	3219      	adds	r2, #25
 800606e:	47b0      	blx	r6
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d1f0      	bne.n	8006056 <_printf_common+0x8a>
 8006074:	2001      	movs	r0, #1
 8006076:	4240      	negs	r0, r0
 8006078:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800607a:	2030      	movs	r0, #48	; 0x30
 800607c:	18e1      	adds	r1, r4, r3
 800607e:	3143      	adds	r1, #67	; 0x43
 8006080:	7008      	strb	r0, [r1, #0]
 8006082:	0021      	movs	r1, r4
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	3145      	adds	r1, #69	; 0x45
 8006088:	7809      	ldrb	r1, [r1, #0]
 800608a:	18a2      	adds	r2, r4, r2
 800608c:	3243      	adds	r2, #67	; 0x43
 800608e:	3302      	adds	r3, #2
 8006090:	7011      	strb	r1, [r2, #0]
 8006092:	e7c1      	b.n	8006018 <_printf_common+0x4c>
 8006094:	0022      	movs	r2, r4
 8006096:	2301      	movs	r3, #1
 8006098:	9901      	ldr	r1, [sp, #4]
 800609a:	9800      	ldr	r0, [sp, #0]
 800609c:	9e08      	ldr	r6, [sp, #32]
 800609e:	321a      	adds	r2, #26
 80060a0:	47b0      	blx	r6
 80060a2:	1c43      	adds	r3, r0, #1
 80060a4:	d0e6      	beq.n	8006074 <_printf_common+0xa8>
 80060a6:	3701      	adds	r7, #1
 80060a8:	e7d1      	b.n	800604e <_printf_common+0x82>
	...

080060ac <_printf_i>:
 80060ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ae:	b08b      	sub	sp, #44	; 0x2c
 80060b0:	9206      	str	r2, [sp, #24]
 80060b2:	000a      	movs	r2, r1
 80060b4:	3243      	adds	r2, #67	; 0x43
 80060b6:	9307      	str	r3, [sp, #28]
 80060b8:	9005      	str	r0, [sp, #20]
 80060ba:	9204      	str	r2, [sp, #16]
 80060bc:	7e0a      	ldrb	r2, [r1, #24]
 80060be:	000c      	movs	r4, r1
 80060c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060c2:	2a78      	cmp	r2, #120	; 0x78
 80060c4:	d807      	bhi.n	80060d6 <_printf_i+0x2a>
 80060c6:	2a62      	cmp	r2, #98	; 0x62
 80060c8:	d809      	bhi.n	80060de <_printf_i+0x32>
 80060ca:	2a00      	cmp	r2, #0
 80060cc:	d100      	bne.n	80060d0 <_printf_i+0x24>
 80060ce:	e0c1      	b.n	8006254 <_printf_i+0x1a8>
 80060d0:	2a58      	cmp	r2, #88	; 0x58
 80060d2:	d100      	bne.n	80060d6 <_printf_i+0x2a>
 80060d4:	e08c      	b.n	80061f0 <_printf_i+0x144>
 80060d6:	0026      	movs	r6, r4
 80060d8:	3642      	adds	r6, #66	; 0x42
 80060da:	7032      	strb	r2, [r6, #0]
 80060dc:	e022      	b.n	8006124 <_printf_i+0x78>
 80060de:	0010      	movs	r0, r2
 80060e0:	3863      	subs	r0, #99	; 0x63
 80060e2:	2815      	cmp	r0, #21
 80060e4:	d8f7      	bhi.n	80060d6 <_printf_i+0x2a>
 80060e6:	f7fa f80f 	bl	8000108 <__gnu_thumb1_case_shi>
 80060ea:	0016      	.short	0x0016
 80060ec:	fff6001f 	.word	0xfff6001f
 80060f0:	fff6fff6 	.word	0xfff6fff6
 80060f4:	001ffff6 	.word	0x001ffff6
 80060f8:	fff6fff6 	.word	0xfff6fff6
 80060fc:	fff6fff6 	.word	0xfff6fff6
 8006100:	003600a8 	.word	0x003600a8
 8006104:	fff6009a 	.word	0xfff6009a
 8006108:	00b9fff6 	.word	0x00b9fff6
 800610c:	0036fff6 	.word	0x0036fff6
 8006110:	fff6fff6 	.word	0xfff6fff6
 8006114:	009e      	.short	0x009e
 8006116:	0026      	movs	r6, r4
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	3642      	adds	r6, #66	; 0x42
 800611c:	1d11      	adds	r1, r2, #4
 800611e:	6019      	str	r1, [r3, #0]
 8006120:	6813      	ldr	r3, [r2, #0]
 8006122:	7033      	strb	r3, [r6, #0]
 8006124:	2301      	movs	r3, #1
 8006126:	e0a7      	b.n	8006278 <_printf_i+0x1cc>
 8006128:	6808      	ldr	r0, [r1, #0]
 800612a:	6819      	ldr	r1, [r3, #0]
 800612c:	1d0a      	adds	r2, r1, #4
 800612e:	0605      	lsls	r5, r0, #24
 8006130:	d50b      	bpl.n	800614a <_printf_i+0x9e>
 8006132:	680d      	ldr	r5, [r1, #0]
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	2d00      	cmp	r5, #0
 8006138:	da03      	bge.n	8006142 <_printf_i+0x96>
 800613a:	232d      	movs	r3, #45	; 0x2d
 800613c:	9a04      	ldr	r2, [sp, #16]
 800613e:	426d      	negs	r5, r5
 8006140:	7013      	strb	r3, [r2, #0]
 8006142:	4b61      	ldr	r3, [pc, #388]	; (80062c8 <_printf_i+0x21c>)
 8006144:	270a      	movs	r7, #10
 8006146:	9303      	str	r3, [sp, #12]
 8006148:	e01b      	b.n	8006182 <_printf_i+0xd6>
 800614a:	680d      	ldr	r5, [r1, #0]
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	0641      	lsls	r1, r0, #25
 8006150:	d5f1      	bpl.n	8006136 <_printf_i+0x8a>
 8006152:	b22d      	sxth	r5, r5
 8006154:	e7ef      	b.n	8006136 <_printf_i+0x8a>
 8006156:	680d      	ldr	r5, [r1, #0]
 8006158:	6819      	ldr	r1, [r3, #0]
 800615a:	1d08      	adds	r0, r1, #4
 800615c:	6018      	str	r0, [r3, #0]
 800615e:	062e      	lsls	r6, r5, #24
 8006160:	d501      	bpl.n	8006166 <_printf_i+0xba>
 8006162:	680d      	ldr	r5, [r1, #0]
 8006164:	e003      	b.n	800616e <_printf_i+0xc2>
 8006166:	066d      	lsls	r5, r5, #25
 8006168:	d5fb      	bpl.n	8006162 <_printf_i+0xb6>
 800616a:	680d      	ldr	r5, [r1, #0]
 800616c:	b2ad      	uxth	r5, r5
 800616e:	4b56      	ldr	r3, [pc, #344]	; (80062c8 <_printf_i+0x21c>)
 8006170:	2708      	movs	r7, #8
 8006172:	9303      	str	r3, [sp, #12]
 8006174:	2a6f      	cmp	r2, #111	; 0x6f
 8006176:	d000      	beq.n	800617a <_printf_i+0xce>
 8006178:	3702      	adds	r7, #2
 800617a:	0023      	movs	r3, r4
 800617c:	2200      	movs	r2, #0
 800617e:	3343      	adds	r3, #67	; 0x43
 8006180:	701a      	strb	r2, [r3, #0]
 8006182:	6863      	ldr	r3, [r4, #4]
 8006184:	60a3      	str	r3, [r4, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	db03      	blt.n	8006192 <_printf_i+0xe6>
 800618a:	2204      	movs	r2, #4
 800618c:	6821      	ldr	r1, [r4, #0]
 800618e:	4391      	bics	r1, r2
 8006190:	6021      	str	r1, [r4, #0]
 8006192:	2d00      	cmp	r5, #0
 8006194:	d102      	bne.n	800619c <_printf_i+0xf0>
 8006196:	9e04      	ldr	r6, [sp, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00c      	beq.n	80061b6 <_printf_i+0x10a>
 800619c:	9e04      	ldr	r6, [sp, #16]
 800619e:	0028      	movs	r0, r5
 80061a0:	0039      	movs	r1, r7
 80061a2:	f7fa f841 	bl	8000228 <__aeabi_uidivmod>
 80061a6:	9b03      	ldr	r3, [sp, #12]
 80061a8:	3e01      	subs	r6, #1
 80061aa:	5c5b      	ldrb	r3, [r3, r1]
 80061ac:	7033      	strb	r3, [r6, #0]
 80061ae:	002b      	movs	r3, r5
 80061b0:	0005      	movs	r5, r0
 80061b2:	429f      	cmp	r7, r3
 80061b4:	d9f3      	bls.n	800619e <_printf_i+0xf2>
 80061b6:	2f08      	cmp	r7, #8
 80061b8:	d109      	bne.n	80061ce <_printf_i+0x122>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	07db      	lsls	r3, r3, #31
 80061be:	d506      	bpl.n	80061ce <_printf_i+0x122>
 80061c0:	6863      	ldr	r3, [r4, #4]
 80061c2:	6922      	ldr	r2, [r4, #16]
 80061c4:	4293      	cmp	r3, r2
 80061c6:	dc02      	bgt.n	80061ce <_printf_i+0x122>
 80061c8:	2330      	movs	r3, #48	; 0x30
 80061ca:	3e01      	subs	r6, #1
 80061cc:	7033      	strb	r3, [r6, #0]
 80061ce:	9b04      	ldr	r3, [sp, #16]
 80061d0:	1b9b      	subs	r3, r3, r6
 80061d2:	6123      	str	r3, [r4, #16]
 80061d4:	9b07      	ldr	r3, [sp, #28]
 80061d6:	0021      	movs	r1, r4
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	9805      	ldr	r0, [sp, #20]
 80061dc:	9b06      	ldr	r3, [sp, #24]
 80061de:	aa09      	add	r2, sp, #36	; 0x24
 80061e0:	f7ff fef4 	bl	8005fcc <_printf_common>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d14c      	bne.n	8006282 <_printf_i+0x1d6>
 80061e8:	2001      	movs	r0, #1
 80061ea:	4240      	negs	r0, r0
 80061ec:	b00b      	add	sp, #44	; 0x2c
 80061ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061f0:	3145      	adds	r1, #69	; 0x45
 80061f2:	700a      	strb	r2, [r1, #0]
 80061f4:	4a34      	ldr	r2, [pc, #208]	; (80062c8 <_printf_i+0x21c>)
 80061f6:	9203      	str	r2, [sp, #12]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	6821      	ldr	r1, [r4, #0]
 80061fc:	ca20      	ldmia	r2!, {r5}
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	0608      	lsls	r0, r1, #24
 8006202:	d516      	bpl.n	8006232 <_printf_i+0x186>
 8006204:	07cb      	lsls	r3, r1, #31
 8006206:	d502      	bpl.n	800620e <_printf_i+0x162>
 8006208:	2320      	movs	r3, #32
 800620a:	4319      	orrs	r1, r3
 800620c:	6021      	str	r1, [r4, #0]
 800620e:	2710      	movs	r7, #16
 8006210:	2d00      	cmp	r5, #0
 8006212:	d1b2      	bne.n	800617a <_printf_i+0xce>
 8006214:	2320      	movs	r3, #32
 8006216:	6822      	ldr	r2, [r4, #0]
 8006218:	439a      	bics	r2, r3
 800621a:	6022      	str	r2, [r4, #0]
 800621c:	e7ad      	b.n	800617a <_printf_i+0xce>
 800621e:	2220      	movs	r2, #32
 8006220:	6809      	ldr	r1, [r1, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	6022      	str	r2, [r4, #0]
 8006226:	0022      	movs	r2, r4
 8006228:	2178      	movs	r1, #120	; 0x78
 800622a:	3245      	adds	r2, #69	; 0x45
 800622c:	7011      	strb	r1, [r2, #0]
 800622e:	4a27      	ldr	r2, [pc, #156]	; (80062cc <_printf_i+0x220>)
 8006230:	e7e1      	b.n	80061f6 <_printf_i+0x14a>
 8006232:	0648      	lsls	r0, r1, #25
 8006234:	d5e6      	bpl.n	8006204 <_printf_i+0x158>
 8006236:	b2ad      	uxth	r5, r5
 8006238:	e7e4      	b.n	8006204 <_printf_i+0x158>
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	680d      	ldr	r5, [r1, #0]
 800623e:	1d10      	adds	r0, r2, #4
 8006240:	6949      	ldr	r1, [r1, #20]
 8006242:	6018      	str	r0, [r3, #0]
 8006244:	6813      	ldr	r3, [r2, #0]
 8006246:	062e      	lsls	r6, r5, #24
 8006248:	d501      	bpl.n	800624e <_printf_i+0x1a2>
 800624a:	6019      	str	r1, [r3, #0]
 800624c:	e002      	b.n	8006254 <_printf_i+0x1a8>
 800624e:	066d      	lsls	r5, r5, #25
 8006250:	d5fb      	bpl.n	800624a <_printf_i+0x19e>
 8006252:	8019      	strh	r1, [r3, #0]
 8006254:	2300      	movs	r3, #0
 8006256:	9e04      	ldr	r6, [sp, #16]
 8006258:	6123      	str	r3, [r4, #16]
 800625a:	e7bb      	b.n	80061d4 <_printf_i+0x128>
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	1d11      	adds	r1, r2, #4
 8006260:	6019      	str	r1, [r3, #0]
 8006262:	6816      	ldr	r6, [r2, #0]
 8006264:	2100      	movs	r1, #0
 8006266:	0030      	movs	r0, r6
 8006268:	6862      	ldr	r2, [r4, #4]
 800626a:	f000 f8ed 	bl	8006448 <memchr>
 800626e:	2800      	cmp	r0, #0
 8006270:	d001      	beq.n	8006276 <_printf_i+0x1ca>
 8006272:	1b80      	subs	r0, r0, r6
 8006274:	6060      	str	r0, [r4, #4]
 8006276:	6863      	ldr	r3, [r4, #4]
 8006278:	6123      	str	r3, [r4, #16]
 800627a:	2300      	movs	r3, #0
 800627c:	9a04      	ldr	r2, [sp, #16]
 800627e:	7013      	strb	r3, [r2, #0]
 8006280:	e7a8      	b.n	80061d4 <_printf_i+0x128>
 8006282:	6923      	ldr	r3, [r4, #16]
 8006284:	0032      	movs	r2, r6
 8006286:	9906      	ldr	r1, [sp, #24]
 8006288:	9805      	ldr	r0, [sp, #20]
 800628a:	9d07      	ldr	r5, [sp, #28]
 800628c:	47a8      	blx	r5
 800628e:	1c43      	adds	r3, r0, #1
 8006290:	d0aa      	beq.n	80061e8 <_printf_i+0x13c>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	079b      	lsls	r3, r3, #30
 8006296:	d415      	bmi.n	80062c4 <_printf_i+0x218>
 8006298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800629a:	68e0      	ldr	r0, [r4, #12]
 800629c:	4298      	cmp	r0, r3
 800629e:	daa5      	bge.n	80061ec <_printf_i+0x140>
 80062a0:	0018      	movs	r0, r3
 80062a2:	e7a3      	b.n	80061ec <_printf_i+0x140>
 80062a4:	0022      	movs	r2, r4
 80062a6:	2301      	movs	r3, #1
 80062a8:	9906      	ldr	r1, [sp, #24]
 80062aa:	9805      	ldr	r0, [sp, #20]
 80062ac:	9e07      	ldr	r6, [sp, #28]
 80062ae:	3219      	adds	r2, #25
 80062b0:	47b0      	blx	r6
 80062b2:	1c43      	adds	r3, r0, #1
 80062b4:	d098      	beq.n	80061e8 <_printf_i+0x13c>
 80062b6:	3501      	adds	r5, #1
 80062b8:	68e3      	ldr	r3, [r4, #12]
 80062ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	42ab      	cmp	r3, r5
 80062c0:	dcf0      	bgt.n	80062a4 <_printf_i+0x1f8>
 80062c2:	e7e9      	b.n	8006298 <_printf_i+0x1ec>
 80062c4:	2500      	movs	r5, #0
 80062c6:	e7f7      	b.n	80062b8 <_printf_i+0x20c>
 80062c8:	08006cf9 	.word	0x08006cf9
 80062cc:	08006d0a 	.word	0x08006d0a

080062d0 <_sbrk_r>:
 80062d0:	2300      	movs	r3, #0
 80062d2:	b570      	push	{r4, r5, r6, lr}
 80062d4:	4d06      	ldr	r5, [pc, #24]	; (80062f0 <_sbrk_r+0x20>)
 80062d6:	0004      	movs	r4, r0
 80062d8:	0008      	movs	r0, r1
 80062da:	602b      	str	r3, [r5, #0]
 80062dc:	f7fb fdce 	bl	8001e7c <_sbrk>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d103      	bne.n	80062ec <_sbrk_r+0x1c>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d000      	beq.n	80062ec <_sbrk_r+0x1c>
 80062ea:	6023      	str	r3, [r4, #0]
 80062ec:	bd70      	pop	{r4, r5, r6, pc}
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	2000023c 	.word	0x2000023c

080062f4 <__sread>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	000c      	movs	r4, r1
 80062f8:	250e      	movs	r5, #14
 80062fa:	5f49      	ldrsh	r1, [r1, r5]
 80062fc:	f000 f8c0 	bl	8006480 <_read_r>
 8006300:	2800      	cmp	r0, #0
 8006302:	db03      	blt.n	800630c <__sread+0x18>
 8006304:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006306:	181b      	adds	r3, r3, r0
 8006308:	6563      	str	r3, [r4, #84]	; 0x54
 800630a:	bd70      	pop	{r4, r5, r6, pc}
 800630c:	89a3      	ldrh	r3, [r4, #12]
 800630e:	4a02      	ldr	r2, [pc, #8]	; (8006318 <__sread+0x24>)
 8006310:	4013      	ands	r3, r2
 8006312:	81a3      	strh	r3, [r4, #12]
 8006314:	e7f9      	b.n	800630a <__sread+0x16>
 8006316:	46c0      	nop			; (mov r8, r8)
 8006318:	ffffefff 	.word	0xffffefff

0800631c <__swrite>:
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	001f      	movs	r7, r3
 8006320:	898b      	ldrh	r3, [r1, #12]
 8006322:	0005      	movs	r5, r0
 8006324:	000c      	movs	r4, r1
 8006326:	0016      	movs	r6, r2
 8006328:	05db      	lsls	r3, r3, #23
 800632a:	d505      	bpl.n	8006338 <__swrite+0x1c>
 800632c:	230e      	movs	r3, #14
 800632e:	5ec9      	ldrsh	r1, [r1, r3]
 8006330:	2200      	movs	r2, #0
 8006332:	2302      	movs	r3, #2
 8006334:	f000 f874 	bl	8006420 <_lseek_r>
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	4a05      	ldr	r2, [pc, #20]	; (8006350 <__swrite+0x34>)
 800633c:	0028      	movs	r0, r5
 800633e:	4013      	ands	r3, r2
 8006340:	81a3      	strh	r3, [r4, #12]
 8006342:	0032      	movs	r2, r6
 8006344:	230e      	movs	r3, #14
 8006346:	5ee1      	ldrsh	r1, [r4, r3]
 8006348:	003b      	movs	r3, r7
 800634a:	f000 f81f 	bl	800638c <_write_r>
 800634e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006350:	ffffefff 	.word	0xffffefff

08006354 <__sseek>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	000c      	movs	r4, r1
 8006358:	250e      	movs	r5, #14
 800635a:	5f49      	ldrsh	r1, [r1, r5]
 800635c:	f000 f860 	bl	8006420 <_lseek_r>
 8006360:	89a3      	ldrh	r3, [r4, #12]
 8006362:	1c42      	adds	r2, r0, #1
 8006364:	d103      	bne.n	800636e <__sseek+0x1a>
 8006366:	4a05      	ldr	r2, [pc, #20]	; (800637c <__sseek+0x28>)
 8006368:	4013      	ands	r3, r2
 800636a:	81a3      	strh	r3, [r4, #12]
 800636c:	bd70      	pop	{r4, r5, r6, pc}
 800636e:	2280      	movs	r2, #128	; 0x80
 8006370:	0152      	lsls	r2, r2, #5
 8006372:	4313      	orrs	r3, r2
 8006374:	81a3      	strh	r3, [r4, #12]
 8006376:	6560      	str	r0, [r4, #84]	; 0x54
 8006378:	e7f8      	b.n	800636c <__sseek+0x18>
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	ffffefff 	.word	0xffffefff

08006380 <__sclose>:
 8006380:	b510      	push	{r4, lr}
 8006382:	230e      	movs	r3, #14
 8006384:	5ec9      	ldrsh	r1, [r1, r3]
 8006386:	f000 f815 	bl	80063b4 <_close_r>
 800638a:	bd10      	pop	{r4, pc}

0800638c <_write_r>:
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	0004      	movs	r4, r0
 8006390:	0008      	movs	r0, r1
 8006392:	0011      	movs	r1, r2
 8006394:	001a      	movs	r2, r3
 8006396:	2300      	movs	r3, #0
 8006398:	4d05      	ldr	r5, [pc, #20]	; (80063b0 <_write_r+0x24>)
 800639a:	602b      	str	r3, [r5, #0]
 800639c:	f7fa fa7a 	bl	8000894 <_write>
 80063a0:	1c43      	adds	r3, r0, #1
 80063a2:	d103      	bne.n	80063ac <_write_r+0x20>
 80063a4:	682b      	ldr	r3, [r5, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d000      	beq.n	80063ac <_write_r+0x20>
 80063aa:	6023      	str	r3, [r4, #0]
 80063ac:	bd70      	pop	{r4, r5, r6, pc}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	2000023c 	.word	0x2000023c

080063b4 <_close_r>:
 80063b4:	2300      	movs	r3, #0
 80063b6:	b570      	push	{r4, r5, r6, lr}
 80063b8:	4d06      	ldr	r5, [pc, #24]	; (80063d4 <_close_r+0x20>)
 80063ba:	0004      	movs	r4, r0
 80063bc:	0008      	movs	r0, r1
 80063be:	602b      	str	r3, [r5, #0]
 80063c0:	f7fb fd2f 	bl	8001e22 <_close>
 80063c4:	1c43      	adds	r3, r0, #1
 80063c6:	d103      	bne.n	80063d0 <_close_r+0x1c>
 80063c8:	682b      	ldr	r3, [r5, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d000      	beq.n	80063d0 <_close_r+0x1c>
 80063ce:	6023      	str	r3, [r4, #0]
 80063d0:	bd70      	pop	{r4, r5, r6, pc}
 80063d2:	46c0      	nop			; (mov r8, r8)
 80063d4:	2000023c 	.word	0x2000023c

080063d8 <_fstat_r>:
 80063d8:	2300      	movs	r3, #0
 80063da:	b570      	push	{r4, r5, r6, lr}
 80063dc:	4d06      	ldr	r5, [pc, #24]	; (80063f8 <_fstat_r+0x20>)
 80063de:	0004      	movs	r4, r0
 80063e0:	0008      	movs	r0, r1
 80063e2:	0011      	movs	r1, r2
 80063e4:	602b      	str	r3, [r5, #0]
 80063e6:	f7fb fd26 	bl	8001e36 <_fstat>
 80063ea:	1c43      	adds	r3, r0, #1
 80063ec:	d103      	bne.n	80063f6 <_fstat_r+0x1e>
 80063ee:	682b      	ldr	r3, [r5, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d000      	beq.n	80063f6 <_fstat_r+0x1e>
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
 80063f8:	2000023c 	.word	0x2000023c

080063fc <_isatty_r>:
 80063fc:	2300      	movs	r3, #0
 80063fe:	b570      	push	{r4, r5, r6, lr}
 8006400:	4d06      	ldr	r5, [pc, #24]	; (800641c <_isatty_r+0x20>)
 8006402:	0004      	movs	r4, r0
 8006404:	0008      	movs	r0, r1
 8006406:	602b      	str	r3, [r5, #0]
 8006408:	f7fb fd23 	bl	8001e52 <_isatty>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d103      	bne.n	8006418 <_isatty_r+0x1c>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d000      	beq.n	8006418 <_isatty_r+0x1c>
 8006416:	6023      	str	r3, [r4, #0]
 8006418:	bd70      	pop	{r4, r5, r6, pc}
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	2000023c 	.word	0x2000023c

08006420 <_lseek_r>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	0004      	movs	r4, r0
 8006424:	0008      	movs	r0, r1
 8006426:	0011      	movs	r1, r2
 8006428:	001a      	movs	r2, r3
 800642a:	2300      	movs	r3, #0
 800642c:	4d05      	ldr	r5, [pc, #20]	; (8006444 <_lseek_r+0x24>)
 800642e:	602b      	str	r3, [r5, #0]
 8006430:	f7fb fd18 	bl	8001e64 <_lseek>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d103      	bne.n	8006440 <_lseek_r+0x20>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d000      	beq.n	8006440 <_lseek_r+0x20>
 800643e:	6023      	str	r3, [r4, #0]
 8006440:	bd70      	pop	{r4, r5, r6, pc}
 8006442:	46c0      	nop			; (mov r8, r8)
 8006444:	2000023c 	.word	0x2000023c

08006448 <memchr>:
 8006448:	b2c9      	uxtb	r1, r1
 800644a:	1882      	adds	r2, r0, r2
 800644c:	4290      	cmp	r0, r2
 800644e:	d101      	bne.n	8006454 <memchr+0xc>
 8006450:	2000      	movs	r0, #0
 8006452:	4770      	bx	lr
 8006454:	7803      	ldrb	r3, [r0, #0]
 8006456:	428b      	cmp	r3, r1
 8006458:	d0fb      	beq.n	8006452 <memchr+0xa>
 800645a:	3001      	adds	r0, #1
 800645c:	e7f6      	b.n	800644c <memchr+0x4>
	...

08006460 <__malloc_lock>:
 8006460:	b510      	push	{r4, lr}
 8006462:	4802      	ldr	r0, [pc, #8]	; (800646c <__malloc_lock+0xc>)
 8006464:	f7ff faff 	bl	8005a66 <__retarget_lock_acquire_recursive>
 8006468:	bd10      	pop	{r4, pc}
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	20000230 	.word	0x20000230

08006470 <__malloc_unlock>:
 8006470:	b510      	push	{r4, lr}
 8006472:	4802      	ldr	r0, [pc, #8]	; (800647c <__malloc_unlock+0xc>)
 8006474:	f7ff faf8 	bl	8005a68 <__retarget_lock_release_recursive>
 8006478:	bd10      	pop	{r4, pc}
 800647a:	46c0      	nop			; (mov r8, r8)
 800647c:	20000230 	.word	0x20000230

08006480 <_read_r>:
 8006480:	b570      	push	{r4, r5, r6, lr}
 8006482:	0004      	movs	r4, r0
 8006484:	0008      	movs	r0, r1
 8006486:	0011      	movs	r1, r2
 8006488:	001a      	movs	r2, r3
 800648a:	2300      	movs	r3, #0
 800648c:	4d05      	ldr	r5, [pc, #20]	; (80064a4 <_read_r+0x24>)
 800648e:	602b      	str	r3, [r5, #0]
 8006490:	f7fb fcaa 	bl	8001de8 <_read>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d103      	bne.n	80064a0 <_read_r+0x20>
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d000      	beq.n	80064a0 <_read_r+0x20>
 800649e:	6023      	str	r3, [r4, #0]
 80064a0:	bd70      	pop	{r4, r5, r6, pc}
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	2000023c 	.word	0x2000023c

080064a8 <_init>:
 80064a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ae:	bc08      	pop	{r3}
 80064b0:	469e      	mov	lr, r3
 80064b2:	4770      	bx	lr

080064b4 <_fini>:
 80064b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ba:	bc08      	pop	{r3}
 80064bc:	469e      	mov	lr, r3
 80064be:	4770      	bx	lr
