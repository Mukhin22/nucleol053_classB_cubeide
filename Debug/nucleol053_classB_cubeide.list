
nucleol053_classB_cubeide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e50  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c64  08009f10  08009f10  00019f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ab74  0800ab74  0001ab74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ab7c  0800ab7c  0001ab7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ab80  0800ab80  0001ab80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000080  0800ab84  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .check_sum    00000024  0800ad60  0800ad60  0002ad60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000158  2000025c  2000025c  0003025c  2**2
                  ALLOC
  9 ._user_heap_stack 00000c14  200003b4  200003b4  0003025c  2**2
                  ALLOC
 10 ._user_classb 00000078  20000000  20000000  00030000  2**2
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002ad84  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001937b  00000000  00000000  0002adac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000319f  00000000  00000000  00044127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  000472c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  000480b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a223  00000000  00000000  00048d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d19  00000000  00000000  00062f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000983c9  00000000  00000000  00078c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011100d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec0  00000000  00000000  00111060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000025c 	.word	0x2000025c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009ef8 	.word	0x08009ef8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000260 	.word	0x20000260
 8000104:	08009ef8 	.word	0x08009ef8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f847 	bl	80014d0 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff91 	bl	8001374 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f839 	bl	80014d0 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f82f 	bl	80014d0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ffb3 	bl	80013ec <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ffa9 	bl	80013ec <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	1c08      	adds	r0, r1, #0
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f82e 	bl	8000538 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	0415      	lsls	r5, r2, #16
 80004ec:	0c2d      	lsrs	r5, r5, #16
 80004ee:	000f      	movs	r7, r1
 80004f0:	0001      	movs	r1, r0
 80004f2:	002e      	movs	r6, r5
 80004f4:	46c6      	mov	lr, r8
 80004f6:	4684      	mov	ip, r0
 80004f8:	0400      	lsls	r0, r0, #16
 80004fa:	0c14      	lsrs	r4, r2, #16
 80004fc:	0c00      	lsrs	r0, r0, #16
 80004fe:	0c09      	lsrs	r1, r1, #16
 8000500:	4346      	muls	r6, r0
 8000502:	434d      	muls	r5, r1
 8000504:	4360      	muls	r0, r4
 8000506:	4361      	muls	r1, r4
 8000508:	1940      	adds	r0, r0, r5
 800050a:	0c34      	lsrs	r4, r6, #16
 800050c:	1824      	adds	r4, r4, r0
 800050e:	b500      	push	{lr}
 8000510:	42a5      	cmp	r5, r4
 8000512:	d903      	bls.n	800051c <__aeabi_lmul+0x34>
 8000514:	2080      	movs	r0, #128	; 0x80
 8000516:	0240      	lsls	r0, r0, #9
 8000518:	4680      	mov	r8, r0
 800051a:	4441      	add	r1, r8
 800051c:	0c25      	lsrs	r5, r4, #16
 800051e:	186d      	adds	r5, r5, r1
 8000520:	4661      	mov	r1, ip
 8000522:	4359      	muls	r1, r3
 8000524:	437a      	muls	r2, r7
 8000526:	0430      	lsls	r0, r6, #16
 8000528:	1949      	adds	r1, r1, r5
 800052a:	0424      	lsls	r4, r4, #16
 800052c:	0c00      	lsrs	r0, r0, #16
 800052e:	1820      	adds	r0, r4, r0
 8000530:	1889      	adds	r1, r1, r2
 8000532:	bc80      	pop	{r7}
 8000534:	46b8      	mov	r8, r7
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000538 <__udivmoddi4>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	4657      	mov	r7, sl
 800053c:	464e      	mov	r6, r9
 800053e:	4645      	mov	r5, r8
 8000540:	46de      	mov	lr, fp
 8000542:	b5e0      	push	{r5, r6, r7, lr}
 8000544:	0004      	movs	r4, r0
 8000546:	000d      	movs	r5, r1
 8000548:	4692      	mov	sl, r2
 800054a:	4699      	mov	r9, r3
 800054c:	b083      	sub	sp, #12
 800054e:	428b      	cmp	r3, r1
 8000550:	d830      	bhi.n	80005b4 <__udivmoddi4+0x7c>
 8000552:	d02d      	beq.n	80005b0 <__udivmoddi4+0x78>
 8000554:	4649      	mov	r1, r9
 8000556:	4650      	mov	r0, sl
 8000558:	f001 fef0 	bl	800233c <__clzdi2>
 800055c:	0029      	movs	r1, r5
 800055e:	0006      	movs	r6, r0
 8000560:	0020      	movs	r0, r4
 8000562:	f001 feeb 	bl	800233c <__clzdi2>
 8000566:	1a33      	subs	r3, r6, r0
 8000568:	4698      	mov	r8, r3
 800056a:	3b20      	subs	r3, #32
 800056c:	469b      	mov	fp, r3
 800056e:	d433      	bmi.n	80005d8 <__udivmoddi4+0xa0>
 8000570:	465a      	mov	r2, fp
 8000572:	4653      	mov	r3, sl
 8000574:	4093      	lsls	r3, r2
 8000576:	4642      	mov	r2, r8
 8000578:	001f      	movs	r7, r3
 800057a:	4653      	mov	r3, sl
 800057c:	4093      	lsls	r3, r2
 800057e:	001e      	movs	r6, r3
 8000580:	42af      	cmp	r7, r5
 8000582:	d83a      	bhi.n	80005fa <__udivmoddi4+0xc2>
 8000584:	42af      	cmp	r7, r5
 8000586:	d100      	bne.n	800058a <__udivmoddi4+0x52>
 8000588:	e078      	b.n	800067c <__udivmoddi4+0x144>
 800058a:	465b      	mov	r3, fp
 800058c:	1ba4      	subs	r4, r4, r6
 800058e:	41bd      	sbcs	r5, r7
 8000590:	2b00      	cmp	r3, #0
 8000592:	da00      	bge.n	8000596 <__udivmoddi4+0x5e>
 8000594:	e075      	b.n	8000682 <__udivmoddi4+0x14a>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	465a      	mov	r2, fp
 80005a2:	4093      	lsls	r3, r2
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	4642      	mov	r2, r8
 80005aa:	4093      	lsls	r3, r2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	e028      	b.n	8000602 <__udivmoddi4+0xca>
 80005b0:	4282      	cmp	r2, r0
 80005b2:	d9cf      	bls.n	8000554 <__udivmoddi4+0x1c>
 80005b4:	2200      	movs	r2, #0
 80005b6:	2300      	movs	r3, #0
 80005b8:	9200      	str	r2, [sp, #0]
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <__udivmoddi4+0x8e>
 80005c2:	601c      	str	r4, [r3, #0]
 80005c4:	605d      	str	r5, [r3, #4]
 80005c6:	9800      	ldr	r0, [sp, #0]
 80005c8:	9901      	ldr	r1, [sp, #4]
 80005ca:	b003      	add	sp, #12
 80005cc:	bcf0      	pop	{r4, r5, r6, r7}
 80005ce:	46bb      	mov	fp, r7
 80005d0:	46b2      	mov	sl, r6
 80005d2:	46a9      	mov	r9, r5
 80005d4:	46a0      	mov	r8, r4
 80005d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d8:	4642      	mov	r2, r8
 80005da:	2320      	movs	r3, #32
 80005dc:	1a9b      	subs	r3, r3, r2
 80005de:	4652      	mov	r2, sl
 80005e0:	40da      	lsrs	r2, r3
 80005e2:	4641      	mov	r1, r8
 80005e4:	0013      	movs	r3, r2
 80005e6:	464a      	mov	r2, r9
 80005e8:	408a      	lsls	r2, r1
 80005ea:	0017      	movs	r7, r2
 80005ec:	4642      	mov	r2, r8
 80005ee:	431f      	orrs	r7, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	4093      	lsls	r3, r2
 80005f4:	001e      	movs	r6, r3
 80005f6:	42af      	cmp	r7, r5
 80005f8:	d9c4      	bls.n	8000584 <__udivmoddi4+0x4c>
 80005fa:	2200      	movs	r2, #0
 80005fc:	2300      	movs	r3, #0
 80005fe:	9200      	str	r2, [sp, #0]
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	4643      	mov	r3, r8
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0d9      	beq.n	80005bc <__udivmoddi4+0x84>
 8000608:	07fb      	lsls	r3, r7, #31
 800060a:	0872      	lsrs	r2, r6, #1
 800060c:	431a      	orrs	r2, r3
 800060e:	4646      	mov	r6, r8
 8000610:	087b      	lsrs	r3, r7, #1
 8000612:	e00e      	b.n	8000632 <__udivmoddi4+0xfa>
 8000614:	42ab      	cmp	r3, r5
 8000616:	d101      	bne.n	800061c <__udivmoddi4+0xe4>
 8000618:	42a2      	cmp	r2, r4
 800061a:	d80c      	bhi.n	8000636 <__udivmoddi4+0xfe>
 800061c:	1aa4      	subs	r4, r4, r2
 800061e:	419d      	sbcs	r5, r3
 8000620:	2001      	movs	r0, #1
 8000622:	1924      	adds	r4, r4, r4
 8000624:	416d      	adcs	r5, r5
 8000626:	2100      	movs	r1, #0
 8000628:	3e01      	subs	r6, #1
 800062a:	1824      	adds	r4, r4, r0
 800062c:	414d      	adcs	r5, r1
 800062e:	2e00      	cmp	r6, #0
 8000630:	d006      	beq.n	8000640 <__udivmoddi4+0x108>
 8000632:	42ab      	cmp	r3, r5
 8000634:	d9ee      	bls.n	8000614 <__udivmoddi4+0xdc>
 8000636:	3e01      	subs	r6, #1
 8000638:	1924      	adds	r4, r4, r4
 800063a:	416d      	adcs	r5, r5
 800063c:	2e00      	cmp	r6, #0
 800063e:	d1f8      	bne.n	8000632 <__udivmoddi4+0xfa>
 8000640:	9800      	ldr	r0, [sp, #0]
 8000642:	9901      	ldr	r1, [sp, #4]
 8000644:	465b      	mov	r3, fp
 8000646:	1900      	adds	r0, r0, r4
 8000648:	4169      	adcs	r1, r5
 800064a:	2b00      	cmp	r3, #0
 800064c:	db24      	blt.n	8000698 <__udivmoddi4+0x160>
 800064e:	002b      	movs	r3, r5
 8000650:	465a      	mov	r2, fp
 8000652:	4644      	mov	r4, r8
 8000654:	40d3      	lsrs	r3, r2
 8000656:	002a      	movs	r2, r5
 8000658:	40e2      	lsrs	r2, r4
 800065a:	001c      	movs	r4, r3
 800065c:	465b      	mov	r3, fp
 800065e:	0015      	movs	r5, r2
 8000660:	2b00      	cmp	r3, #0
 8000662:	db2a      	blt.n	80006ba <__udivmoddi4+0x182>
 8000664:	0026      	movs	r6, r4
 8000666:	409e      	lsls	r6, r3
 8000668:	0033      	movs	r3, r6
 800066a:	0026      	movs	r6, r4
 800066c:	4647      	mov	r7, r8
 800066e:	40be      	lsls	r6, r7
 8000670:	0032      	movs	r2, r6
 8000672:	1a80      	subs	r0, r0, r2
 8000674:	4199      	sbcs	r1, r3
 8000676:	9000      	str	r0, [sp, #0]
 8000678:	9101      	str	r1, [sp, #4]
 800067a:	e79f      	b.n	80005bc <__udivmoddi4+0x84>
 800067c:	42a3      	cmp	r3, r4
 800067e:	d8bc      	bhi.n	80005fa <__udivmoddi4+0xc2>
 8000680:	e783      	b.n	800058a <__udivmoddi4+0x52>
 8000682:	4642      	mov	r2, r8
 8000684:	2320      	movs	r3, #32
 8000686:	2100      	movs	r1, #0
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	2200      	movs	r2, #0
 800068c:	9100      	str	r1, [sp, #0]
 800068e:	9201      	str	r2, [sp, #4]
 8000690:	2201      	movs	r2, #1
 8000692:	40da      	lsrs	r2, r3
 8000694:	9201      	str	r2, [sp, #4]
 8000696:	e786      	b.n	80005a6 <__udivmoddi4+0x6e>
 8000698:	4642      	mov	r2, r8
 800069a:	2320      	movs	r3, #32
 800069c:	1a9b      	subs	r3, r3, r2
 800069e:	002a      	movs	r2, r5
 80006a0:	4646      	mov	r6, r8
 80006a2:	409a      	lsls	r2, r3
 80006a4:	0023      	movs	r3, r4
 80006a6:	40f3      	lsrs	r3, r6
 80006a8:	4644      	mov	r4, r8
 80006aa:	4313      	orrs	r3, r2
 80006ac:	002a      	movs	r2, r5
 80006ae:	40e2      	lsrs	r2, r4
 80006b0:	001c      	movs	r4, r3
 80006b2:	465b      	mov	r3, fp
 80006b4:	0015      	movs	r5, r2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	dad4      	bge.n	8000664 <__udivmoddi4+0x12c>
 80006ba:	4642      	mov	r2, r8
 80006bc:	002f      	movs	r7, r5
 80006be:	2320      	movs	r3, #32
 80006c0:	0026      	movs	r6, r4
 80006c2:	4097      	lsls	r7, r2
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	40de      	lsrs	r6, r3
 80006c8:	003b      	movs	r3, r7
 80006ca:	4333      	orrs	r3, r6
 80006cc:	e7cd      	b.n	800066a <__udivmoddi4+0x132>
 80006ce:	46c0      	nop			; (mov r8, r8)

080006d0 <__aeabi_dadd>:
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	464f      	mov	r7, r9
 80006d4:	46d6      	mov	lr, sl
 80006d6:	4646      	mov	r6, r8
 80006d8:	000d      	movs	r5, r1
 80006da:	0001      	movs	r1, r0
 80006dc:	0018      	movs	r0, r3
 80006de:	b5c0      	push	{r6, r7, lr}
 80006e0:	0017      	movs	r7, r2
 80006e2:	032b      	lsls	r3, r5, #12
 80006e4:	0a5a      	lsrs	r2, r3, #9
 80006e6:	0f4b      	lsrs	r3, r1, #29
 80006e8:	4313      	orrs	r3, r2
 80006ea:	00ca      	lsls	r2, r1, #3
 80006ec:	4691      	mov	r9, r2
 80006ee:	0302      	lsls	r2, r0, #12
 80006f0:	006e      	lsls	r6, r5, #1
 80006f2:	0041      	lsls	r1, r0, #1
 80006f4:	0a52      	lsrs	r2, r2, #9
 80006f6:	0fec      	lsrs	r4, r5, #31
 80006f8:	0f7d      	lsrs	r5, r7, #29
 80006fa:	4315      	orrs	r5, r2
 80006fc:	0d76      	lsrs	r6, r6, #21
 80006fe:	0d49      	lsrs	r1, r1, #21
 8000700:	0fc0      	lsrs	r0, r0, #31
 8000702:	4682      	mov	sl, r0
 8000704:	46ac      	mov	ip, r5
 8000706:	00ff      	lsls	r7, r7, #3
 8000708:	1a72      	subs	r2, r6, r1
 800070a:	4284      	cmp	r4, r0
 800070c:	d100      	bne.n	8000710 <__aeabi_dadd+0x40>
 800070e:	e098      	b.n	8000842 <__aeabi_dadd+0x172>
 8000710:	2a00      	cmp	r2, #0
 8000712:	dc00      	bgt.n	8000716 <__aeabi_dadd+0x46>
 8000714:	e081      	b.n	800081a <__aeabi_dadd+0x14a>
 8000716:	2900      	cmp	r1, #0
 8000718:	d100      	bne.n	800071c <__aeabi_dadd+0x4c>
 800071a:	e0b6      	b.n	800088a <__aeabi_dadd+0x1ba>
 800071c:	49c9      	ldr	r1, [pc, #804]	; (8000a44 <__aeabi_dadd+0x374>)
 800071e:	428e      	cmp	r6, r1
 8000720:	d100      	bne.n	8000724 <__aeabi_dadd+0x54>
 8000722:	e172      	b.n	8000a0a <__aeabi_dadd+0x33a>
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	0028      	movs	r0, r5
 8000728:	0409      	lsls	r1, r1, #16
 800072a:	4308      	orrs	r0, r1
 800072c:	4684      	mov	ip, r0
 800072e:	2a38      	cmp	r2, #56	; 0x38
 8000730:	dd00      	ble.n	8000734 <__aeabi_dadd+0x64>
 8000732:	e15e      	b.n	80009f2 <__aeabi_dadd+0x322>
 8000734:	2a1f      	cmp	r2, #31
 8000736:	dd00      	ble.n	800073a <__aeabi_dadd+0x6a>
 8000738:	e1ee      	b.n	8000b18 <__aeabi_dadd+0x448>
 800073a:	2020      	movs	r0, #32
 800073c:	0039      	movs	r1, r7
 800073e:	4665      	mov	r5, ip
 8000740:	1a80      	subs	r0, r0, r2
 8000742:	4087      	lsls	r7, r0
 8000744:	40d1      	lsrs	r1, r2
 8000746:	4085      	lsls	r5, r0
 8000748:	430d      	orrs	r5, r1
 800074a:	0039      	movs	r1, r7
 800074c:	1e4f      	subs	r7, r1, #1
 800074e:	41b9      	sbcs	r1, r7
 8000750:	4667      	mov	r7, ip
 8000752:	40d7      	lsrs	r7, r2
 8000754:	4329      	orrs	r1, r5
 8000756:	1bdb      	subs	r3, r3, r7
 8000758:	464a      	mov	r2, r9
 800075a:	1a55      	subs	r5, r2, r1
 800075c:	45a9      	cmp	r9, r5
 800075e:	4189      	sbcs	r1, r1
 8000760:	4249      	negs	r1, r1
 8000762:	1a5b      	subs	r3, r3, r1
 8000764:	4698      	mov	r8, r3
 8000766:	4643      	mov	r3, r8
 8000768:	021b      	lsls	r3, r3, #8
 800076a:	d400      	bmi.n	800076e <__aeabi_dadd+0x9e>
 800076c:	e0cc      	b.n	8000908 <__aeabi_dadd+0x238>
 800076e:	4643      	mov	r3, r8
 8000770:	025b      	lsls	r3, r3, #9
 8000772:	0a5b      	lsrs	r3, r3, #9
 8000774:	4698      	mov	r8, r3
 8000776:	4643      	mov	r3, r8
 8000778:	2b00      	cmp	r3, #0
 800077a:	d100      	bne.n	800077e <__aeabi_dadd+0xae>
 800077c:	e12c      	b.n	80009d8 <__aeabi_dadd+0x308>
 800077e:	4640      	mov	r0, r8
 8000780:	f001 fdbe 	bl	8002300 <__clzsi2>
 8000784:	0001      	movs	r1, r0
 8000786:	3908      	subs	r1, #8
 8000788:	2220      	movs	r2, #32
 800078a:	0028      	movs	r0, r5
 800078c:	4643      	mov	r3, r8
 800078e:	1a52      	subs	r2, r2, r1
 8000790:	408b      	lsls	r3, r1
 8000792:	40d0      	lsrs	r0, r2
 8000794:	408d      	lsls	r5, r1
 8000796:	4303      	orrs	r3, r0
 8000798:	428e      	cmp	r6, r1
 800079a:	dd00      	ble.n	800079e <__aeabi_dadd+0xce>
 800079c:	e117      	b.n	80009ce <__aeabi_dadd+0x2fe>
 800079e:	1b8e      	subs	r6, r1, r6
 80007a0:	1c72      	adds	r2, r6, #1
 80007a2:	2a1f      	cmp	r2, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0xd8>
 80007a6:	e1a7      	b.n	8000af8 <__aeabi_dadd+0x428>
 80007a8:	2120      	movs	r1, #32
 80007aa:	0018      	movs	r0, r3
 80007ac:	002e      	movs	r6, r5
 80007ae:	1a89      	subs	r1, r1, r2
 80007b0:	408d      	lsls	r5, r1
 80007b2:	4088      	lsls	r0, r1
 80007b4:	40d6      	lsrs	r6, r2
 80007b6:	40d3      	lsrs	r3, r2
 80007b8:	1e69      	subs	r1, r5, #1
 80007ba:	418d      	sbcs	r5, r1
 80007bc:	4330      	orrs	r0, r6
 80007be:	4698      	mov	r8, r3
 80007c0:	2600      	movs	r6, #0
 80007c2:	4305      	orrs	r5, r0
 80007c4:	076b      	lsls	r3, r5, #29
 80007c6:	d009      	beq.n	80007dc <__aeabi_dadd+0x10c>
 80007c8:	230f      	movs	r3, #15
 80007ca:	402b      	ands	r3, r5
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	d005      	beq.n	80007dc <__aeabi_dadd+0x10c>
 80007d0:	1d2b      	adds	r3, r5, #4
 80007d2:	42ab      	cmp	r3, r5
 80007d4:	41ad      	sbcs	r5, r5
 80007d6:	426d      	negs	r5, r5
 80007d8:	44a8      	add	r8, r5
 80007da:	001d      	movs	r5, r3
 80007dc:	4643      	mov	r3, r8
 80007de:	021b      	lsls	r3, r3, #8
 80007e0:	d400      	bmi.n	80007e4 <__aeabi_dadd+0x114>
 80007e2:	e094      	b.n	800090e <__aeabi_dadd+0x23e>
 80007e4:	4b97      	ldr	r3, [pc, #604]	; (8000a44 <__aeabi_dadd+0x374>)
 80007e6:	1c72      	adds	r2, r6, #1
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x11e>
 80007ec:	e09d      	b.n	800092a <__aeabi_dadd+0x25a>
 80007ee:	4641      	mov	r1, r8
 80007f0:	4b95      	ldr	r3, [pc, #596]	; (8000a48 <__aeabi_dadd+0x378>)
 80007f2:	08ed      	lsrs	r5, r5, #3
 80007f4:	4019      	ands	r1, r3
 80007f6:	000b      	movs	r3, r1
 80007f8:	0552      	lsls	r2, r2, #21
 80007fa:	0749      	lsls	r1, r1, #29
 80007fc:	025b      	lsls	r3, r3, #9
 80007fe:	4329      	orrs	r1, r5
 8000800:	0b1b      	lsrs	r3, r3, #12
 8000802:	0d52      	lsrs	r2, r2, #21
 8000804:	0512      	lsls	r2, r2, #20
 8000806:	4313      	orrs	r3, r2
 8000808:	07e4      	lsls	r4, r4, #31
 800080a:	4323      	orrs	r3, r4
 800080c:	0008      	movs	r0, r1
 800080e:	0019      	movs	r1, r3
 8000810:	bce0      	pop	{r5, r6, r7}
 8000812:	46ba      	mov	sl, r7
 8000814:	46b1      	mov	r9, r6
 8000816:	46a8      	mov	r8, r5
 8000818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081a:	2a00      	cmp	r2, #0
 800081c:	d043      	beq.n	80008a6 <__aeabi_dadd+0x1d6>
 800081e:	1b8a      	subs	r2, r1, r6
 8000820:	2e00      	cmp	r6, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_dadd+0x156>
 8000824:	e12a      	b.n	8000a7c <__aeabi_dadd+0x3ac>
 8000826:	464c      	mov	r4, r9
 8000828:	431c      	orrs	r4, r3
 800082a:	d100      	bne.n	800082e <__aeabi_dadd+0x15e>
 800082c:	e1d1      	b.n	8000bd2 <__aeabi_dadd+0x502>
 800082e:	1e54      	subs	r4, r2, #1
 8000830:	2a01      	cmp	r2, #1
 8000832:	d100      	bne.n	8000836 <__aeabi_dadd+0x166>
 8000834:	e21f      	b.n	8000c76 <__aeabi_dadd+0x5a6>
 8000836:	4d83      	ldr	r5, [pc, #524]	; (8000a44 <__aeabi_dadd+0x374>)
 8000838:	42aa      	cmp	r2, r5
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x16e>
 800083c:	e272      	b.n	8000d24 <__aeabi_dadd+0x654>
 800083e:	0022      	movs	r2, r4
 8000840:	e123      	b.n	8000a8a <__aeabi_dadd+0x3ba>
 8000842:	2a00      	cmp	r2, #0
 8000844:	dc00      	bgt.n	8000848 <__aeabi_dadd+0x178>
 8000846:	e098      	b.n	800097a <__aeabi_dadd+0x2aa>
 8000848:	2900      	cmp	r1, #0
 800084a:	d042      	beq.n	80008d2 <__aeabi_dadd+0x202>
 800084c:	497d      	ldr	r1, [pc, #500]	; (8000a44 <__aeabi_dadd+0x374>)
 800084e:	428e      	cmp	r6, r1
 8000850:	d100      	bne.n	8000854 <__aeabi_dadd+0x184>
 8000852:	e0da      	b.n	8000a0a <__aeabi_dadd+0x33a>
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	0028      	movs	r0, r5
 8000858:	0409      	lsls	r1, r1, #16
 800085a:	4308      	orrs	r0, r1
 800085c:	4684      	mov	ip, r0
 800085e:	2a38      	cmp	r2, #56	; 0x38
 8000860:	dd00      	ble.n	8000864 <__aeabi_dadd+0x194>
 8000862:	e129      	b.n	8000ab8 <__aeabi_dadd+0x3e8>
 8000864:	2a1f      	cmp	r2, #31
 8000866:	dc00      	bgt.n	800086a <__aeabi_dadd+0x19a>
 8000868:	e187      	b.n	8000b7a <__aeabi_dadd+0x4aa>
 800086a:	0011      	movs	r1, r2
 800086c:	4665      	mov	r5, ip
 800086e:	3920      	subs	r1, #32
 8000870:	40cd      	lsrs	r5, r1
 8000872:	2a20      	cmp	r2, #32
 8000874:	d004      	beq.n	8000880 <__aeabi_dadd+0x1b0>
 8000876:	2040      	movs	r0, #64	; 0x40
 8000878:	4661      	mov	r1, ip
 800087a:	1a82      	subs	r2, r0, r2
 800087c:	4091      	lsls	r1, r2
 800087e:	430f      	orrs	r7, r1
 8000880:	0039      	movs	r1, r7
 8000882:	1e4f      	subs	r7, r1, #1
 8000884:	41b9      	sbcs	r1, r7
 8000886:	430d      	orrs	r5, r1
 8000888:	e11b      	b.n	8000ac2 <__aeabi_dadd+0x3f2>
 800088a:	0029      	movs	r1, r5
 800088c:	4339      	orrs	r1, r7
 800088e:	d100      	bne.n	8000892 <__aeabi_dadd+0x1c2>
 8000890:	e0b5      	b.n	80009fe <__aeabi_dadd+0x32e>
 8000892:	1e51      	subs	r1, r2, #1
 8000894:	2a01      	cmp	r2, #1
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x1ca>
 8000898:	e1ab      	b.n	8000bf2 <__aeabi_dadd+0x522>
 800089a:	486a      	ldr	r0, [pc, #424]	; (8000a44 <__aeabi_dadd+0x374>)
 800089c:	4282      	cmp	r2, r0
 800089e:	d100      	bne.n	80008a2 <__aeabi_dadd+0x1d2>
 80008a0:	e1b2      	b.n	8000c08 <__aeabi_dadd+0x538>
 80008a2:	000a      	movs	r2, r1
 80008a4:	e743      	b.n	800072e <__aeabi_dadd+0x5e>
 80008a6:	4969      	ldr	r1, [pc, #420]	; (8000a4c <__aeabi_dadd+0x37c>)
 80008a8:	1c75      	adds	r5, r6, #1
 80008aa:	420d      	tst	r5, r1
 80008ac:	d000      	beq.n	80008b0 <__aeabi_dadd+0x1e0>
 80008ae:	e0cf      	b.n	8000a50 <__aeabi_dadd+0x380>
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_dadd+0x1e6>
 80008b4:	e193      	b.n	8000bde <__aeabi_dadd+0x50e>
 80008b6:	4649      	mov	r1, r9
 80008b8:	4319      	orrs	r1, r3
 80008ba:	d100      	bne.n	80008be <__aeabi_dadd+0x1ee>
 80008bc:	e1d1      	b.n	8000c62 <__aeabi_dadd+0x592>
 80008be:	4661      	mov	r1, ip
 80008c0:	4339      	orrs	r1, r7
 80008c2:	d000      	beq.n	80008c6 <__aeabi_dadd+0x1f6>
 80008c4:	e1e3      	b.n	8000c8e <__aeabi_dadd+0x5be>
 80008c6:	4649      	mov	r1, r9
 80008c8:	0758      	lsls	r0, r3, #29
 80008ca:	08c9      	lsrs	r1, r1, #3
 80008cc:	4301      	orrs	r1, r0
 80008ce:	08db      	lsrs	r3, r3, #3
 80008d0:	e026      	b.n	8000920 <__aeabi_dadd+0x250>
 80008d2:	0029      	movs	r1, r5
 80008d4:	4339      	orrs	r1, r7
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x20a>
 80008d8:	e091      	b.n	80009fe <__aeabi_dadd+0x32e>
 80008da:	1e51      	subs	r1, r2, #1
 80008dc:	2a01      	cmp	r2, #1
 80008de:	d005      	beq.n	80008ec <__aeabi_dadd+0x21c>
 80008e0:	4858      	ldr	r0, [pc, #352]	; (8000a44 <__aeabi_dadd+0x374>)
 80008e2:	4282      	cmp	r2, r0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x218>
 80008e6:	e18f      	b.n	8000c08 <__aeabi_dadd+0x538>
 80008e8:	000a      	movs	r2, r1
 80008ea:	e7b8      	b.n	800085e <__aeabi_dadd+0x18e>
 80008ec:	003d      	movs	r5, r7
 80008ee:	444d      	add	r5, r9
 80008f0:	454d      	cmp	r5, r9
 80008f2:	4189      	sbcs	r1, r1
 80008f4:	4463      	add	r3, ip
 80008f6:	4698      	mov	r8, r3
 80008f8:	4249      	negs	r1, r1
 80008fa:	4488      	add	r8, r1
 80008fc:	4643      	mov	r3, r8
 80008fe:	2602      	movs	r6, #2
 8000900:	021b      	lsls	r3, r3, #8
 8000902:	d500      	bpl.n	8000906 <__aeabi_dadd+0x236>
 8000904:	e0eb      	b.n	8000ade <__aeabi_dadd+0x40e>
 8000906:	3e01      	subs	r6, #1
 8000908:	076b      	lsls	r3, r5, #29
 800090a:	d000      	beq.n	800090e <__aeabi_dadd+0x23e>
 800090c:	e75c      	b.n	80007c8 <__aeabi_dadd+0xf8>
 800090e:	4643      	mov	r3, r8
 8000910:	08e9      	lsrs	r1, r5, #3
 8000912:	075a      	lsls	r2, r3, #29
 8000914:	4311      	orrs	r1, r2
 8000916:	0032      	movs	r2, r6
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	484a      	ldr	r0, [pc, #296]	; (8000a44 <__aeabi_dadd+0x374>)
 800091c:	4282      	cmp	r2, r0
 800091e:	d021      	beq.n	8000964 <__aeabi_dadd+0x294>
 8000920:	031b      	lsls	r3, r3, #12
 8000922:	0552      	lsls	r2, r2, #21
 8000924:	0b1b      	lsrs	r3, r3, #12
 8000926:	0d52      	lsrs	r2, r2, #21
 8000928:	e76c      	b.n	8000804 <__aeabi_dadd+0x134>
 800092a:	2300      	movs	r3, #0
 800092c:	2100      	movs	r1, #0
 800092e:	e769      	b.n	8000804 <__aeabi_dadd+0x134>
 8000930:	002a      	movs	r2, r5
 8000932:	433a      	orrs	r2, r7
 8000934:	d069      	beq.n	8000a0a <__aeabi_dadd+0x33a>
 8000936:	464a      	mov	r2, r9
 8000938:	0758      	lsls	r0, r3, #29
 800093a:	08d1      	lsrs	r1, r2, #3
 800093c:	08da      	lsrs	r2, r3, #3
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	031b      	lsls	r3, r3, #12
 8000942:	4308      	orrs	r0, r1
 8000944:	421a      	tst	r2, r3
 8000946:	d007      	beq.n	8000958 <__aeabi_dadd+0x288>
 8000948:	0029      	movs	r1, r5
 800094a:	08ed      	lsrs	r5, r5, #3
 800094c:	421d      	tst	r5, r3
 800094e:	d103      	bne.n	8000958 <__aeabi_dadd+0x288>
 8000950:	002a      	movs	r2, r5
 8000952:	08ff      	lsrs	r7, r7, #3
 8000954:	0748      	lsls	r0, r1, #29
 8000956:	4338      	orrs	r0, r7
 8000958:	0f43      	lsrs	r3, r0, #29
 800095a:	00c1      	lsls	r1, r0, #3
 800095c:	075b      	lsls	r3, r3, #29
 800095e:	08c9      	lsrs	r1, r1, #3
 8000960:	4319      	orrs	r1, r3
 8000962:	0013      	movs	r3, r2
 8000964:	000a      	movs	r2, r1
 8000966:	431a      	orrs	r2, r3
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x29c>
 800096a:	e213      	b.n	8000d94 <__aeabi_dadd+0x6c4>
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	0312      	lsls	r2, r2, #12
 8000970:	4313      	orrs	r3, r2
 8000972:	031b      	lsls	r3, r3, #12
 8000974:	4a33      	ldr	r2, [pc, #204]	; (8000a44 <__aeabi_dadd+0x374>)
 8000976:	0b1b      	lsrs	r3, r3, #12
 8000978:	e744      	b.n	8000804 <__aeabi_dadd+0x134>
 800097a:	2a00      	cmp	r2, #0
 800097c:	d04b      	beq.n	8000a16 <__aeabi_dadd+0x346>
 800097e:	1b8a      	subs	r2, r1, r6
 8000980:	2e00      	cmp	r6, #0
 8000982:	d100      	bne.n	8000986 <__aeabi_dadd+0x2b6>
 8000984:	e0e7      	b.n	8000b56 <__aeabi_dadd+0x486>
 8000986:	482f      	ldr	r0, [pc, #188]	; (8000a44 <__aeabi_dadd+0x374>)
 8000988:	4281      	cmp	r1, r0
 800098a:	d100      	bne.n	800098e <__aeabi_dadd+0x2be>
 800098c:	e195      	b.n	8000cba <__aeabi_dadd+0x5ea>
 800098e:	2080      	movs	r0, #128	; 0x80
 8000990:	0400      	lsls	r0, r0, #16
 8000992:	4303      	orrs	r3, r0
 8000994:	2a38      	cmp	r2, #56	; 0x38
 8000996:	dd00      	ble.n	800099a <__aeabi_dadd+0x2ca>
 8000998:	e143      	b.n	8000c22 <__aeabi_dadd+0x552>
 800099a:	2a1f      	cmp	r2, #31
 800099c:	dd00      	ble.n	80009a0 <__aeabi_dadd+0x2d0>
 800099e:	e1db      	b.n	8000d58 <__aeabi_dadd+0x688>
 80009a0:	2020      	movs	r0, #32
 80009a2:	001d      	movs	r5, r3
 80009a4:	464e      	mov	r6, r9
 80009a6:	1a80      	subs	r0, r0, r2
 80009a8:	4085      	lsls	r5, r0
 80009aa:	40d6      	lsrs	r6, r2
 80009ac:	4335      	orrs	r5, r6
 80009ae:	464e      	mov	r6, r9
 80009b0:	4086      	lsls	r6, r0
 80009b2:	0030      	movs	r0, r6
 80009b4:	40d3      	lsrs	r3, r2
 80009b6:	1e46      	subs	r6, r0, #1
 80009b8:	41b0      	sbcs	r0, r6
 80009ba:	449c      	add	ip, r3
 80009bc:	4305      	orrs	r5, r0
 80009be:	19ed      	adds	r5, r5, r7
 80009c0:	42bd      	cmp	r5, r7
 80009c2:	419b      	sbcs	r3, r3
 80009c4:	425b      	negs	r3, r3
 80009c6:	4463      	add	r3, ip
 80009c8:	4698      	mov	r8, r3
 80009ca:	000e      	movs	r6, r1
 80009cc:	e07f      	b.n	8000ace <__aeabi_dadd+0x3fe>
 80009ce:	4a1e      	ldr	r2, [pc, #120]	; (8000a48 <__aeabi_dadd+0x378>)
 80009d0:	1a76      	subs	r6, r6, r1
 80009d2:	4013      	ands	r3, r2
 80009d4:	4698      	mov	r8, r3
 80009d6:	e6f5      	b.n	80007c4 <__aeabi_dadd+0xf4>
 80009d8:	0028      	movs	r0, r5
 80009da:	f001 fc91 	bl	8002300 <__clzsi2>
 80009de:	0001      	movs	r1, r0
 80009e0:	3118      	adds	r1, #24
 80009e2:	291f      	cmp	r1, #31
 80009e4:	dc00      	bgt.n	80009e8 <__aeabi_dadd+0x318>
 80009e6:	e6cf      	b.n	8000788 <__aeabi_dadd+0xb8>
 80009e8:	002b      	movs	r3, r5
 80009ea:	3808      	subs	r0, #8
 80009ec:	4083      	lsls	r3, r0
 80009ee:	2500      	movs	r5, #0
 80009f0:	e6d2      	b.n	8000798 <__aeabi_dadd+0xc8>
 80009f2:	4662      	mov	r2, ip
 80009f4:	433a      	orrs	r2, r7
 80009f6:	0011      	movs	r1, r2
 80009f8:	1e4f      	subs	r7, r1, #1
 80009fa:	41b9      	sbcs	r1, r7
 80009fc:	e6ac      	b.n	8000758 <__aeabi_dadd+0x88>
 80009fe:	4649      	mov	r1, r9
 8000a00:	0758      	lsls	r0, r3, #29
 8000a02:	08c9      	lsrs	r1, r1, #3
 8000a04:	4301      	orrs	r1, r0
 8000a06:	08db      	lsrs	r3, r3, #3
 8000a08:	e787      	b.n	800091a <__aeabi_dadd+0x24a>
 8000a0a:	4649      	mov	r1, r9
 8000a0c:	075a      	lsls	r2, r3, #29
 8000a0e:	08c9      	lsrs	r1, r1, #3
 8000a10:	4311      	orrs	r1, r2
 8000a12:	08db      	lsrs	r3, r3, #3
 8000a14:	e7a6      	b.n	8000964 <__aeabi_dadd+0x294>
 8000a16:	490d      	ldr	r1, [pc, #52]	; (8000a4c <__aeabi_dadd+0x37c>)
 8000a18:	1c70      	adds	r0, r6, #1
 8000a1a:	4208      	tst	r0, r1
 8000a1c:	d000      	beq.n	8000a20 <__aeabi_dadd+0x350>
 8000a1e:	e0bb      	b.n	8000b98 <__aeabi_dadd+0x4c8>
 8000a20:	2e00      	cmp	r6, #0
 8000a22:	d000      	beq.n	8000a26 <__aeabi_dadd+0x356>
 8000a24:	e114      	b.n	8000c50 <__aeabi_dadd+0x580>
 8000a26:	4649      	mov	r1, r9
 8000a28:	4319      	orrs	r1, r3
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dadd+0x35e>
 8000a2c:	e175      	b.n	8000d1a <__aeabi_dadd+0x64a>
 8000a2e:	0029      	movs	r1, r5
 8000a30:	4339      	orrs	r1, r7
 8000a32:	d000      	beq.n	8000a36 <__aeabi_dadd+0x366>
 8000a34:	e17e      	b.n	8000d34 <__aeabi_dadd+0x664>
 8000a36:	4649      	mov	r1, r9
 8000a38:	0758      	lsls	r0, r3, #29
 8000a3a:	08c9      	lsrs	r1, r1, #3
 8000a3c:	4301      	orrs	r1, r0
 8000a3e:	08db      	lsrs	r3, r3, #3
 8000a40:	e76e      	b.n	8000920 <__aeabi_dadd+0x250>
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	000007ff 	.word	0x000007ff
 8000a48:	ff7fffff 	.word	0xff7fffff
 8000a4c:	000007fe 	.word	0x000007fe
 8000a50:	4649      	mov	r1, r9
 8000a52:	1bcd      	subs	r5, r1, r7
 8000a54:	4661      	mov	r1, ip
 8000a56:	1a58      	subs	r0, r3, r1
 8000a58:	45a9      	cmp	r9, r5
 8000a5a:	4189      	sbcs	r1, r1
 8000a5c:	4249      	negs	r1, r1
 8000a5e:	4688      	mov	r8, r1
 8000a60:	0001      	movs	r1, r0
 8000a62:	4640      	mov	r0, r8
 8000a64:	1a09      	subs	r1, r1, r0
 8000a66:	4688      	mov	r8, r1
 8000a68:	0209      	lsls	r1, r1, #8
 8000a6a:	d500      	bpl.n	8000a6e <__aeabi_dadd+0x39e>
 8000a6c:	e0a6      	b.n	8000bbc <__aeabi_dadd+0x4ec>
 8000a6e:	4641      	mov	r1, r8
 8000a70:	4329      	orrs	r1, r5
 8000a72:	d000      	beq.n	8000a76 <__aeabi_dadd+0x3a6>
 8000a74:	e67f      	b.n	8000776 <__aeabi_dadd+0xa6>
 8000a76:	2300      	movs	r3, #0
 8000a78:	2400      	movs	r4, #0
 8000a7a:	e751      	b.n	8000920 <__aeabi_dadd+0x250>
 8000a7c:	4cc7      	ldr	r4, [pc, #796]	; (8000d9c <__aeabi_dadd+0x6cc>)
 8000a7e:	42a1      	cmp	r1, r4
 8000a80:	d100      	bne.n	8000a84 <__aeabi_dadd+0x3b4>
 8000a82:	e0c7      	b.n	8000c14 <__aeabi_dadd+0x544>
 8000a84:	2480      	movs	r4, #128	; 0x80
 8000a86:	0424      	lsls	r4, r4, #16
 8000a88:	4323      	orrs	r3, r4
 8000a8a:	2a38      	cmp	r2, #56	; 0x38
 8000a8c:	dc54      	bgt.n	8000b38 <__aeabi_dadd+0x468>
 8000a8e:	2a1f      	cmp	r2, #31
 8000a90:	dd00      	ble.n	8000a94 <__aeabi_dadd+0x3c4>
 8000a92:	e0cc      	b.n	8000c2e <__aeabi_dadd+0x55e>
 8000a94:	2420      	movs	r4, #32
 8000a96:	4648      	mov	r0, r9
 8000a98:	1aa4      	subs	r4, r4, r2
 8000a9a:	001d      	movs	r5, r3
 8000a9c:	464e      	mov	r6, r9
 8000a9e:	40a0      	lsls	r0, r4
 8000aa0:	40d6      	lsrs	r6, r2
 8000aa2:	40a5      	lsls	r5, r4
 8000aa4:	0004      	movs	r4, r0
 8000aa6:	40d3      	lsrs	r3, r2
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	4335      	orrs	r5, r6
 8000aac:	1e66      	subs	r6, r4, #1
 8000aae:	41b4      	sbcs	r4, r6
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	469c      	mov	ip, r3
 8000ab4:	4325      	orrs	r5, r4
 8000ab6:	e044      	b.n	8000b42 <__aeabi_dadd+0x472>
 8000ab8:	4662      	mov	r2, ip
 8000aba:	433a      	orrs	r2, r7
 8000abc:	0015      	movs	r5, r2
 8000abe:	1e6f      	subs	r7, r5, #1
 8000ac0:	41bd      	sbcs	r5, r7
 8000ac2:	444d      	add	r5, r9
 8000ac4:	454d      	cmp	r5, r9
 8000ac6:	4189      	sbcs	r1, r1
 8000ac8:	4249      	negs	r1, r1
 8000aca:	4688      	mov	r8, r1
 8000acc:	4498      	add	r8, r3
 8000ace:	4643      	mov	r3, r8
 8000ad0:	021b      	lsls	r3, r3, #8
 8000ad2:	d400      	bmi.n	8000ad6 <__aeabi_dadd+0x406>
 8000ad4:	e718      	b.n	8000908 <__aeabi_dadd+0x238>
 8000ad6:	4bb1      	ldr	r3, [pc, #708]	; (8000d9c <__aeabi_dadd+0x6cc>)
 8000ad8:	3601      	adds	r6, #1
 8000ada:	429e      	cmp	r6, r3
 8000adc:	d049      	beq.n	8000b72 <__aeabi_dadd+0x4a2>
 8000ade:	4642      	mov	r2, r8
 8000ae0:	4baf      	ldr	r3, [pc, #700]	; (8000da0 <__aeabi_dadd+0x6d0>)
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	0013      	movs	r3, r2
 8000ae8:	086a      	lsrs	r2, r5, #1
 8000aea:	400d      	ands	r5, r1
 8000aec:	4315      	orrs	r5, r2
 8000aee:	07d9      	lsls	r1, r3, #31
 8000af0:	085b      	lsrs	r3, r3, #1
 8000af2:	4698      	mov	r8, r3
 8000af4:	430d      	orrs	r5, r1
 8000af6:	e665      	b.n	80007c4 <__aeabi_dadd+0xf4>
 8000af8:	0018      	movs	r0, r3
 8000afa:	3e1f      	subs	r6, #31
 8000afc:	40f0      	lsrs	r0, r6
 8000afe:	2a20      	cmp	r2, #32
 8000b00:	d003      	beq.n	8000b0a <__aeabi_dadd+0x43a>
 8000b02:	2140      	movs	r1, #64	; 0x40
 8000b04:	1a8a      	subs	r2, r1, r2
 8000b06:	4093      	lsls	r3, r2
 8000b08:	431d      	orrs	r5, r3
 8000b0a:	1e69      	subs	r1, r5, #1
 8000b0c:	418d      	sbcs	r5, r1
 8000b0e:	2300      	movs	r3, #0
 8000b10:	2600      	movs	r6, #0
 8000b12:	4698      	mov	r8, r3
 8000b14:	4305      	orrs	r5, r0
 8000b16:	e6f7      	b.n	8000908 <__aeabi_dadd+0x238>
 8000b18:	0011      	movs	r1, r2
 8000b1a:	4665      	mov	r5, ip
 8000b1c:	3920      	subs	r1, #32
 8000b1e:	40cd      	lsrs	r5, r1
 8000b20:	2a20      	cmp	r2, #32
 8000b22:	d004      	beq.n	8000b2e <__aeabi_dadd+0x45e>
 8000b24:	2040      	movs	r0, #64	; 0x40
 8000b26:	4661      	mov	r1, ip
 8000b28:	1a82      	subs	r2, r0, r2
 8000b2a:	4091      	lsls	r1, r2
 8000b2c:	430f      	orrs	r7, r1
 8000b2e:	0039      	movs	r1, r7
 8000b30:	1e4f      	subs	r7, r1, #1
 8000b32:	41b9      	sbcs	r1, r7
 8000b34:	4329      	orrs	r1, r5
 8000b36:	e60f      	b.n	8000758 <__aeabi_dadd+0x88>
 8000b38:	464a      	mov	r2, r9
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	001d      	movs	r5, r3
 8000b3e:	1e6b      	subs	r3, r5, #1
 8000b40:	419d      	sbcs	r5, r3
 8000b42:	1b7d      	subs	r5, r7, r5
 8000b44:	42af      	cmp	r7, r5
 8000b46:	419b      	sbcs	r3, r3
 8000b48:	4662      	mov	r2, ip
 8000b4a:	425b      	negs	r3, r3
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	4698      	mov	r8, r3
 8000b50:	4654      	mov	r4, sl
 8000b52:	000e      	movs	r6, r1
 8000b54:	e607      	b.n	8000766 <__aeabi_dadd+0x96>
 8000b56:	4648      	mov	r0, r9
 8000b58:	4318      	orrs	r0, r3
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_dadd+0x48e>
 8000b5c:	e0b3      	b.n	8000cc6 <__aeabi_dadd+0x5f6>
 8000b5e:	1e50      	subs	r0, r2, #1
 8000b60:	2a01      	cmp	r2, #1
 8000b62:	d100      	bne.n	8000b66 <__aeabi_dadd+0x496>
 8000b64:	e10d      	b.n	8000d82 <__aeabi_dadd+0x6b2>
 8000b66:	4d8d      	ldr	r5, [pc, #564]	; (8000d9c <__aeabi_dadd+0x6cc>)
 8000b68:	42aa      	cmp	r2, r5
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dadd+0x49e>
 8000b6c:	e0a5      	b.n	8000cba <__aeabi_dadd+0x5ea>
 8000b6e:	0002      	movs	r2, r0
 8000b70:	e710      	b.n	8000994 <__aeabi_dadd+0x2c4>
 8000b72:	0032      	movs	r2, r6
 8000b74:	2300      	movs	r3, #0
 8000b76:	2100      	movs	r1, #0
 8000b78:	e644      	b.n	8000804 <__aeabi_dadd+0x134>
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	0038      	movs	r0, r7
 8000b7e:	1a89      	subs	r1, r1, r2
 8000b80:	4665      	mov	r5, ip
 8000b82:	408f      	lsls	r7, r1
 8000b84:	408d      	lsls	r5, r1
 8000b86:	40d0      	lsrs	r0, r2
 8000b88:	1e79      	subs	r1, r7, #1
 8000b8a:	418f      	sbcs	r7, r1
 8000b8c:	4305      	orrs	r5, r0
 8000b8e:	433d      	orrs	r5, r7
 8000b90:	4667      	mov	r7, ip
 8000b92:	40d7      	lsrs	r7, r2
 8000b94:	19db      	adds	r3, r3, r7
 8000b96:	e794      	b.n	8000ac2 <__aeabi_dadd+0x3f2>
 8000b98:	4a80      	ldr	r2, [pc, #512]	; (8000d9c <__aeabi_dadd+0x6cc>)
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_dadd+0x4d0>
 8000b9e:	e0ec      	b.n	8000d7a <__aeabi_dadd+0x6aa>
 8000ba0:	0039      	movs	r1, r7
 8000ba2:	4449      	add	r1, r9
 8000ba4:	4549      	cmp	r1, r9
 8000ba6:	4192      	sbcs	r2, r2
 8000ba8:	4463      	add	r3, ip
 8000baa:	4252      	negs	r2, r2
 8000bac:	189b      	adds	r3, r3, r2
 8000bae:	07dd      	lsls	r5, r3, #31
 8000bb0:	0849      	lsrs	r1, r1, #1
 8000bb2:	085b      	lsrs	r3, r3, #1
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	0006      	movs	r6, r0
 8000bb8:	430d      	orrs	r5, r1
 8000bba:	e6a5      	b.n	8000908 <__aeabi_dadd+0x238>
 8000bbc:	464a      	mov	r2, r9
 8000bbe:	1abd      	subs	r5, r7, r2
 8000bc0:	42af      	cmp	r7, r5
 8000bc2:	4189      	sbcs	r1, r1
 8000bc4:	4662      	mov	r2, ip
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	1a5b      	subs	r3, r3, r1
 8000bcc:	4698      	mov	r8, r3
 8000bce:	4654      	mov	r4, sl
 8000bd0:	e5d1      	b.n	8000776 <__aeabi_dadd+0xa6>
 8000bd2:	076c      	lsls	r4, r5, #29
 8000bd4:	08f9      	lsrs	r1, r7, #3
 8000bd6:	4321      	orrs	r1, r4
 8000bd8:	08eb      	lsrs	r3, r5, #3
 8000bda:	0004      	movs	r4, r0
 8000bdc:	e69d      	b.n	800091a <__aeabi_dadd+0x24a>
 8000bde:	464a      	mov	r2, r9
 8000be0:	431a      	orrs	r2, r3
 8000be2:	d175      	bne.n	8000cd0 <__aeabi_dadd+0x600>
 8000be4:	4661      	mov	r1, ip
 8000be6:	4339      	orrs	r1, r7
 8000be8:	d114      	bne.n	8000c14 <__aeabi_dadd+0x544>
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	2400      	movs	r4, #0
 8000bee:	031b      	lsls	r3, r3, #12
 8000bf0:	e6bc      	b.n	800096c <__aeabi_dadd+0x29c>
 8000bf2:	464a      	mov	r2, r9
 8000bf4:	1bd5      	subs	r5, r2, r7
 8000bf6:	45a9      	cmp	r9, r5
 8000bf8:	4189      	sbcs	r1, r1
 8000bfa:	4662      	mov	r2, ip
 8000bfc:	4249      	negs	r1, r1
 8000bfe:	1a9b      	subs	r3, r3, r2
 8000c00:	1a5b      	subs	r3, r3, r1
 8000c02:	4698      	mov	r8, r3
 8000c04:	2601      	movs	r6, #1
 8000c06:	e5ae      	b.n	8000766 <__aeabi_dadd+0x96>
 8000c08:	464a      	mov	r2, r9
 8000c0a:	08d1      	lsrs	r1, r2, #3
 8000c0c:	075a      	lsls	r2, r3, #29
 8000c0e:	4311      	orrs	r1, r2
 8000c10:	08db      	lsrs	r3, r3, #3
 8000c12:	e6a7      	b.n	8000964 <__aeabi_dadd+0x294>
 8000c14:	4663      	mov	r3, ip
 8000c16:	08f9      	lsrs	r1, r7, #3
 8000c18:	075a      	lsls	r2, r3, #29
 8000c1a:	4654      	mov	r4, sl
 8000c1c:	4311      	orrs	r1, r2
 8000c1e:	08db      	lsrs	r3, r3, #3
 8000c20:	e6a0      	b.n	8000964 <__aeabi_dadd+0x294>
 8000c22:	464a      	mov	r2, r9
 8000c24:	4313      	orrs	r3, r2
 8000c26:	001d      	movs	r5, r3
 8000c28:	1e6b      	subs	r3, r5, #1
 8000c2a:	419d      	sbcs	r5, r3
 8000c2c:	e6c7      	b.n	80009be <__aeabi_dadd+0x2ee>
 8000c2e:	0014      	movs	r4, r2
 8000c30:	001e      	movs	r6, r3
 8000c32:	3c20      	subs	r4, #32
 8000c34:	40e6      	lsrs	r6, r4
 8000c36:	2a20      	cmp	r2, #32
 8000c38:	d005      	beq.n	8000c46 <__aeabi_dadd+0x576>
 8000c3a:	2440      	movs	r4, #64	; 0x40
 8000c3c:	1aa2      	subs	r2, r4, r2
 8000c3e:	4093      	lsls	r3, r2
 8000c40:	464a      	mov	r2, r9
 8000c42:	431a      	orrs	r2, r3
 8000c44:	4691      	mov	r9, r2
 8000c46:	464d      	mov	r5, r9
 8000c48:	1e6b      	subs	r3, r5, #1
 8000c4a:	419d      	sbcs	r5, r3
 8000c4c:	4335      	orrs	r5, r6
 8000c4e:	e778      	b.n	8000b42 <__aeabi_dadd+0x472>
 8000c50:	464a      	mov	r2, r9
 8000c52:	431a      	orrs	r2, r3
 8000c54:	d000      	beq.n	8000c58 <__aeabi_dadd+0x588>
 8000c56:	e66b      	b.n	8000930 <__aeabi_dadd+0x260>
 8000c58:	076b      	lsls	r3, r5, #29
 8000c5a:	08f9      	lsrs	r1, r7, #3
 8000c5c:	4319      	orrs	r1, r3
 8000c5e:	08eb      	lsrs	r3, r5, #3
 8000c60:	e680      	b.n	8000964 <__aeabi_dadd+0x294>
 8000c62:	4661      	mov	r1, ip
 8000c64:	4339      	orrs	r1, r7
 8000c66:	d054      	beq.n	8000d12 <__aeabi_dadd+0x642>
 8000c68:	4663      	mov	r3, ip
 8000c6a:	08f9      	lsrs	r1, r7, #3
 8000c6c:	075c      	lsls	r4, r3, #29
 8000c6e:	4321      	orrs	r1, r4
 8000c70:	08db      	lsrs	r3, r3, #3
 8000c72:	0004      	movs	r4, r0
 8000c74:	e654      	b.n	8000920 <__aeabi_dadd+0x250>
 8000c76:	464a      	mov	r2, r9
 8000c78:	1abd      	subs	r5, r7, r2
 8000c7a:	42af      	cmp	r7, r5
 8000c7c:	4189      	sbcs	r1, r1
 8000c7e:	4662      	mov	r2, ip
 8000c80:	4249      	negs	r1, r1
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	1a5b      	subs	r3, r3, r1
 8000c86:	4698      	mov	r8, r3
 8000c88:	0004      	movs	r4, r0
 8000c8a:	2601      	movs	r6, #1
 8000c8c:	e56b      	b.n	8000766 <__aeabi_dadd+0x96>
 8000c8e:	464a      	mov	r2, r9
 8000c90:	1bd5      	subs	r5, r2, r7
 8000c92:	45a9      	cmp	r9, r5
 8000c94:	4189      	sbcs	r1, r1
 8000c96:	4662      	mov	r2, ip
 8000c98:	4249      	negs	r1, r1
 8000c9a:	1a9a      	subs	r2, r3, r2
 8000c9c:	1a52      	subs	r2, r2, r1
 8000c9e:	4690      	mov	r8, r2
 8000ca0:	0212      	lsls	r2, r2, #8
 8000ca2:	d532      	bpl.n	8000d0a <__aeabi_dadd+0x63a>
 8000ca4:	464a      	mov	r2, r9
 8000ca6:	1abd      	subs	r5, r7, r2
 8000ca8:	42af      	cmp	r7, r5
 8000caa:	4189      	sbcs	r1, r1
 8000cac:	4662      	mov	r2, ip
 8000cae:	4249      	negs	r1, r1
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	1a5b      	subs	r3, r3, r1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	0004      	movs	r4, r0
 8000cb8:	e584      	b.n	80007c4 <__aeabi_dadd+0xf4>
 8000cba:	4663      	mov	r3, ip
 8000cbc:	08f9      	lsrs	r1, r7, #3
 8000cbe:	075a      	lsls	r2, r3, #29
 8000cc0:	4311      	orrs	r1, r2
 8000cc2:	08db      	lsrs	r3, r3, #3
 8000cc4:	e64e      	b.n	8000964 <__aeabi_dadd+0x294>
 8000cc6:	08f9      	lsrs	r1, r7, #3
 8000cc8:	0768      	lsls	r0, r5, #29
 8000cca:	4301      	orrs	r1, r0
 8000ccc:	08eb      	lsrs	r3, r5, #3
 8000cce:	e624      	b.n	800091a <__aeabi_dadd+0x24a>
 8000cd0:	4662      	mov	r2, ip
 8000cd2:	433a      	orrs	r2, r7
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_dadd+0x608>
 8000cd6:	e698      	b.n	8000a0a <__aeabi_dadd+0x33a>
 8000cd8:	464a      	mov	r2, r9
 8000cda:	08d1      	lsrs	r1, r2, #3
 8000cdc:	075a      	lsls	r2, r3, #29
 8000cde:	4311      	orrs	r1, r2
 8000ce0:	08da      	lsrs	r2, r3, #3
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	031b      	lsls	r3, r3, #12
 8000ce6:	421a      	tst	r2, r3
 8000ce8:	d008      	beq.n	8000cfc <__aeabi_dadd+0x62c>
 8000cea:	4660      	mov	r0, ip
 8000cec:	08c5      	lsrs	r5, r0, #3
 8000cee:	421d      	tst	r5, r3
 8000cf0:	d104      	bne.n	8000cfc <__aeabi_dadd+0x62c>
 8000cf2:	4654      	mov	r4, sl
 8000cf4:	002a      	movs	r2, r5
 8000cf6:	08f9      	lsrs	r1, r7, #3
 8000cf8:	0743      	lsls	r3, r0, #29
 8000cfa:	4319      	orrs	r1, r3
 8000cfc:	0f4b      	lsrs	r3, r1, #29
 8000cfe:	00c9      	lsls	r1, r1, #3
 8000d00:	075b      	lsls	r3, r3, #29
 8000d02:	08c9      	lsrs	r1, r1, #3
 8000d04:	4319      	orrs	r1, r3
 8000d06:	0013      	movs	r3, r2
 8000d08:	e62c      	b.n	8000964 <__aeabi_dadd+0x294>
 8000d0a:	4641      	mov	r1, r8
 8000d0c:	4329      	orrs	r1, r5
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_dadd+0x642>
 8000d10:	e5fa      	b.n	8000908 <__aeabi_dadd+0x238>
 8000d12:	2300      	movs	r3, #0
 8000d14:	000a      	movs	r2, r1
 8000d16:	2400      	movs	r4, #0
 8000d18:	e602      	b.n	8000920 <__aeabi_dadd+0x250>
 8000d1a:	076b      	lsls	r3, r5, #29
 8000d1c:	08f9      	lsrs	r1, r7, #3
 8000d1e:	4319      	orrs	r1, r3
 8000d20:	08eb      	lsrs	r3, r5, #3
 8000d22:	e5fd      	b.n	8000920 <__aeabi_dadd+0x250>
 8000d24:	4663      	mov	r3, ip
 8000d26:	08f9      	lsrs	r1, r7, #3
 8000d28:	075b      	lsls	r3, r3, #29
 8000d2a:	4319      	orrs	r1, r3
 8000d2c:	4663      	mov	r3, ip
 8000d2e:	0004      	movs	r4, r0
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	e617      	b.n	8000964 <__aeabi_dadd+0x294>
 8000d34:	003d      	movs	r5, r7
 8000d36:	444d      	add	r5, r9
 8000d38:	4463      	add	r3, ip
 8000d3a:	454d      	cmp	r5, r9
 8000d3c:	4189      	sbcs	r1, r1
 8000d3e:	4698      	mov	r8, r3
 8000d40:	4249      	negs	r1, r1
 8000d42:	4488      	add	r8, r1
 8000d44:	4643      	mov	r3, r8
 8000d46:	021b      	lsls	r3, r3, #8
 8000d48:	d400      	bmi.n	8000d4c <__aeabi_dadd+0x67c>
 8000d4a:	e5dd      	b.n	8000908 <__aeabi_dadd+0x238>
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <__aeabi_dadd+0x6d0>)
 8000d50:	2601      	movs	r6, #1
 8000d52:	401a      	ands	r2, r3
 8000d54:	4690      	mov	r8, r2
 8000d56:	e5d7      	b.n	8000908 <__aeabi_dadd+0x238>
 8000d58:	0010      	movs	r0, r2
 8000d5a:	001e      	movs	r6, r3
 8000d5c:	3820      	subs	r0, #32
 8000d5e:	40c6      	lsrs	r6, r0
 8000d60:	2a20      	cmp	r2, #32
 8000d62:	d005      	beq.n	8000d70 <__aeabi_dadd+0x6a0>
 8000d64:	2040      	movs	r0, #64	; 0x40
 8000d66:	1a82      	subs	r2, r0, r2
 8000d68:	4093      	lsls	r3, r2
 8000d6a:	464a      	mov	r2, r9
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	4691      	mov	r9, r2
 8000d70:	464d      	mov	r5, r9
 8000d72:	1e6b      	subs	r3, r5, #1
 8000d74:	419d      	sbcs	r5, r3
 8000d76:	4335      	orrs	r5, r6
 8000d78:	e621      	b.n	80009be <__aeabi_dadd+0x2ee>
 8000d7a:	0002      	movs	r2, r0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	e540      	b.n	8000804 <__aeabi_dadd+0x134>
 8000d82:	464a      	mov	r2, r9
 8000d84:	19d5      	adds	r5, r2, r7
 8000d86:	42bd      	cmp	r5, r7
 8000d88:	4189      	sbcs	r1, r1
 8000d8a:	4463      	add	r3, ip
 8000d8c:	4698      	mov	r8, r3
 8000d8e:	4249      	negs	r1, r1
 8000d90:	4488      	add	r8, r1
 8000d92:	e5b3      	b.n	80008fc <__aeabi_dadd+0x22c>
 8000d94:	2100      	movs	r1, #0
 8000d96:	4a01      	ldr	r2, [pc, #4]	; (8000d9c <__aeabi_dadd+0x6cc>)
 8000d98:	000b      	movs	r3, r1
 8000d9a:	e533      	b.n	8000804 <__aeabi_dadd+0x134>
 8000d9c:	000007ff 	.word	0x000007ff
 8000da0:	ff7fffff 	.word	0xff7fffff

08000da4 <__aeabi_ddiv>:
 8000da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da6:	4657      	mov	r7, sl
 8000da8:	464e      	mov	r6, r9
 8000daa:	4645      	mov	r5, r8
 8000dac:	46de      	mov	lr, fp
 8000dae:	b5e0      	push	{r5, r6, r7, lr}
 8000db0:	4681      	mov	r9, r0
 8000db2:	0005      	movs	r5, r0
 8000db4:	030c      	lsls	r4, r1, #12
 8000db6:	0048      	lsls	r0, r1, #1
 8000db8:	4692      	mov	sl, r2
 8000dba:	001f      	movs	r7, r3
 8000dbc:	b085      	sub	sp, #20
 8000dbe:	0b24      	lsrs	r4, r4, #12
 8000dc0:	0d40      	lsrs	r0, r0, #21
 8000dc2:	0fce      	lsrs	r6, r1, #31
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	d059      	beq.n	8000e7c <__aeabi_ddiv+0xd8>
 8000dc8:	4b87      	ldr	r3, [pc, #540]	; (8000fe8 <__aeabi_ddiv+0x244>)
 8000dca:	4298      	cmp	r0, r3
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_ddiv+0x2c>
 8000dce:	e098      	b.n	8000f02 <__aeabi_ddiv+0x15e>
 8000dd0:	0f6b      	lsrs	r3, r5, #29
 8000dd2:	00e4      	lsls	r4, r4, #3
 8000dd4:	431c      	orrs	r4, r3
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	041b      	lsls	r3, r3, #16
 8000dda:	4323      	orrs	r3, r4
 8000ddc:	4698      	mov	r8, r3
 8000dde:	4b83      	ldr	r3, [pc, #524]	; (8000fec <__aeabi_ddiv+0x248>)
 8000de0:	00ed      	lsls	r5, r5, #3
 8000de2:	469b      	mov	fp, r3
 8000de4:	2300      	movs	r3, #0
 8000de6:	4699      	mov	r9, r3
 8000de8:	4483      	add	fp, r0
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	033c      	lsls	r4, r7, #12
 8000dee:	007b      	lsls	r3, r7, #1
 8000df0:	4650      	mov	r0, sl
 8000df2:	0b24      	lsrs	r4, r4, #12
 8000df4:	0d5b      	lsrs	r3, r3, #21
 8000df6:	0fff      	lsrs	r7, r7, #31
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d067      	beq.n	8000ecc <__aeabi_ddiv+0x128>
 8000dfc:	4a7a      	ldr	r2, [pc, #488]	; (8000fe8 <__aeabi_ddiv+0x244>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d018      	beq.n	8000e34 <__aeabi_ddiv+0x90>
 8000e02:	497a      	ldr	r1, [pc, #488]	; (8000fec <__aeabi_ddiv+0x248>)
 8000e04:	0f42      	lsrs	r2, r0, #29
 8000e06:	468c      	mov	ip, r1
 8000e08:	00e4      	lsls	r4, r4, #3
 8000e0a:	4659      	mov	r1, fp
 8000e0c:	4314      	orrs	r4, r2
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	4463      	add	r3, ip
 8000e12:	0412      	lsls	r2, r2, #16
 8000e14:	1acb      	subs	r3, r1, r3
 8000e16:	4314      	orrs	r4, r2
 8000e18:	469b      	mov	fp, r3
 8000e1a:	00c2      	lsls	r2, r0, #3
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	0033      	movs	r3, r6
 8000e20:	407b      	eors	r3, r7
 8000e22:	469a      	mov	sl, r3
 8000e24:	464b      	mov	r3, r9
 8000e26:	2b0f      	cmp	r3, #15
 8000e28:	d900      	bls.n	8000e2c <__aeabi_ddiv+0x88>
 8000e2a:	e0ef      	b.n	800100c <__aeabi_ddiv+0x268>
 8000e2c:	4970      	ldr	r1, [pc, #448]	; (8000ff0 <__aeabi_ddiv+0x24c>)
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	58cb      	ldr	r3, [r1, r3]
 8000e32:	469f      	mov	pc, r3
 8000e34:	4b6f      	ldr	r3, [pc, #444]	; (8000ff4 <__aeabi_ddiv+0x250>)
 8000e36:	4652      	mov	r2, sl
 8000e38:	469c      	mov	ip, r3
 8000e3a:	4322      	orrs	r2, r4
 8000e3c:	44e3      	add	fp, ip
 8000e3e:	2a00      	cmp	r2, #0
 8000e40:	d000      	beq.n	8000e44 <__aeabi_ddiv+0xa0>
 8000e42:	e095      	b.n	8000f70 <__aeabi_ddiv+0x1cc>
 8000e44:	4649      	mov	r1, r9
 8000e46:	2302      	movs	r3, #2
 8000e48:	4319      	orrs	r1, r3
 8000e4a:	4689      	mov	r9, r1
 8000e4c:	2400      	movs	r4, #0
 8000e4e:	2002      	movs	r0, #2
 8000e50:	e7e5      	b.n	8000e1e <__aeabi_ddiv+0x7a>
 8000e52:	2300      	movs	r3, #0
 8000e54:	2400      	movs	r4, #0
 8000e56:	2500      	movs	r5, #0
 8000e58:	4652      	mov	r2, sl
 8000e5a:	051b      	lsls	r3, r3, #20
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	07d2      	lsls	r2, r2, #31
 8000e60:	4313      	orrs	r3, r2
 8000e62:	0028      	movs	r0, r5
 8000e64:	0019      	movs	r1, r3
 8000e66:	b005      	add	sp, #20
 8000e68:	bcf0      	pop	{r4, r5, r6, r7}
 8000e6a:	46bb      	mov	fp, r7
 8000e6c:	46b2      	mov	sl, r6
 8000e6e:	46a9      	mov	r9, r5
 8000e70:	46a0      	mov	r8, r4
 8000e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e74:	2400      	movs	r4, #0
 8000e76:	2500      	movs	r5, #0
 8000e78:	4b5b      	ldr	r3, [pc, #364]	; (8000fe8 <__aeabi_ddiv+0x244>)
 8000e7a:	e7ed      	b.n	8000e58 <__aeabi_ddiv+0xb4>
 8000e7c:	464b      	mov	r3, r9
 8000e7e:	4323      	orrs	r3, r4
 8000e80:	4698      	mov	r8, r3
 8000e82:	d100      	bne.n	8000e86 <__aeabi_ddiv+0xe2>
 8000e84:	e089      	b.n	8000f9a <__aeabi_ddiv+0x1f6>
 8000e86:	2c00      	cmp	r4, #0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_ddiv+0xe8>
 8000e8a:	e1e0      	b.n	800124e <__aeabi_ddiv+0x4aa>
 8000e8c:	0020      	movs	r0, r4
 8000e8e:	f001 fa37 	bl	8002300 <__clzsi2>
 8000e92:	0001      	movs	r1, r0
 8000e94:	0002      	movs	r2, r0
 8000e96:	390b      	subs	r1, #11
 8000e98:	231d      	movs	r3, #29
 8000e9a:	1a5b      	subs	r3, r3, r1
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	0010      	movs	r0, r2
 8000ea0:	40d9      	lsrs	r1, r3
 8000ea2:	3808      	subs	r0, #8
 8000ea4:	4084      	lsls	r4, r0
 8000ea6:	000b      	movs	r3, r1
 8000ea8:	464d      	mov	r5, r9
 8000eaa:	4323      	orrs	r3, r4
 8000eac:	4698      	mov	r8, r3
 8000eae:	4085      	lsls	r5, r0
 8000eb0:	4851      	ldr	r0, [pc, #324]	; (8000ff8 <__aeabi_ddiv+0x254>)
 8000eb2:	033c      	lsls	r4, r7, #12
 8000eb4:	1a83      	subs	r3, r0, r2
 8000eb6:	469b      	mov	fp, r3
 8000eb8:	2300      	movs	r3, #0
 8000eba:	4699      	mov	r9, r3
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	007b      	lsls	r3, r7, #1
 8000ec0:	4650      	mov	r0, sl
 8000ec2:	0b24      	lsrs	r4, r4, #12
 8000ec4:	0d5b      	lsrs	r3, r3, #21
 8000ec6:	0fff      	lsrs	r7, r7, #31
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d197      	bne.n	8000dfc <__aeabi_ddiv+0x58>
 8000ecc:	4652      	mov	r2, sl
 8000ece:	4322      	orrs	r2, r4
 8000ed0:	d055      	beq.n	8000f7e <__aeabi_ddiv+0x1da>
 8000ed2:	2c00      	cmp	r4, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_ddiv+0x134>
 8000ed6:	e1ca      	b.n	800126e <__aeabi_ddiv+0x4ca>
 8000ed8:	0020      	movs	r0, r4
 8000eda:	f001 fa11 	bl	8002300 <__clzsi2>
 8000ede:	0002      	movs	r2, r0
 8000ee0:	3a0b      	subs	r2, #11
 8000ee2:	231d      	movs	r3, #29
 8000ee4:	0001      	movs	r1, r0
 8000ee6:	1a9b      	subs	r3, r3, r2
 8000ee8:	4652      	mov	r2, sl
 8000eea:	3908      	subs	r1, #8
 8000eec:	40da      	lsrs	r2, r3
 8000eee:	408c      	lsls	r4, r1
 8000ef0:	4314      	orrs	r4, r2
 8000ef2:	4652      	mov	r2, sl
 8000ef4:	408a      	lsls	r2, r1
 8000ef6:	4b41      	ldr	r3, [pc, #260]	; (8000ffc <__aeabi_ddiv+0x258>)
 8000ef8:	4458      	add	r0, fp
 8000efa:	469b      	mov	fp, r3
 8000efc:	4483      	add	fp, r0
 8000efe:	2000      	movs	r0, #0
 8000f00:	e78d      	b.n	8000e1e <__aeabi_ddiv+0x7a>
 8000f02:	464b      	mov	r3, r9
 8000f04:	4323      	orrs	r3, r4
 8000f06:	4698      	mov	r8, r3
 8000f08:	d140      	bne.n	8000f8c <__aeabi_ddiv+0x1e8>
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	4699      	mov	r9, r3
 8000f0e:	3b06      	subs	r3, #6
 8000f10:	2500      	movs	r5, #0
 8000f12:	4683      	mov	fp, r0
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	e769      	b.n	8000dec <__aeabi_ddiv+0x48>
 8000f18:	46b2      	mov	sl, r6
 8000f1a:	9b00      	ldr	r3, [sp, #0]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d0a9      	beq.n	8000e74 <__aeabi_ddiv+0xd0>
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d100      	bne.n	8000f26 <__aeabi_ddiv+0x182>
 8000f24:	e211      	b.n	800134a <__aeabi_ddiv+0x5a6>
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d093      	beq.n	8000e52 <__aeabi_ddiv+0xae>
 8000f2a:	4a35      	ldr	r2, [pc, #212]	; (8001000 <__aeabi_ddiv+0x25c>)
 8000f2c:	445a      	add	r2, fp
 8000f2e:	2a00      	cmp	r2, #0
 8000f30:	dc00      	bgt.n	8000f34 <__aeabi_ddiv+0x190>
 8000f32:	e13c      	b.n	80011ae <__aeabi_ddiv+0x40a>
 8000f34:	076b      	lsls	r3, r5, #29
 8000f36:	d000      	beq.n	8000f3a <__aeabi_ddiv+0x196>
 8000f38:	e1a7      	b.n	800128a <__aeabi_ddiv+0x4e6>
 8000f3a:	08ed      	lsrs	r5, r5, #3
 8000f3c:	4643      	mov	r3, r8
 8000f3e:	01db      	lsls	r3, r3, #7
 8000f40:	d506      	bpl.n	8000f50 <__aeabi_ddiv+0x1ac>
 8000f42:	4642      	mov	r2, r8
 8000f44:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <__aeabi_ddiv+0x260>)
 8000f46:	401a      	ands	r2, r3
 8000f48:	4690      	mov	r8, r2
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	00d2      	lsls	r2, r2, #3
 8000f4e:	445a      	add	r2, fp
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <__aeabi_ddiv+0x264>)
 8000f52:	429a      	cmp	r2, r3
 8000f54:	dc8e      	bgt.n	8000e74 <__aeabi_ddiv+0xd0>
 8000f56:	4643      	mov	r3, r8
 8000f58:	0552      	lsls	r2, r2, #21
 8000f5a:	0758      	lsls	r0, r3, #29
 8000f5c:	025c      	lsls	r4, r3, #9
 8000f5e:	4305      	orrs	r5, r0
 8000f60:	0b24      	lsrs	r4, r4, #12
 8000f62:	0d53      	lsrs	r3, r2, #21
 8000f64:	e778      	b.n	8000e58 <__aeabi_ddiv+0xb4>
 8000f66:	46ba      	mov	sl, r7
 8000f68:	46a0      	mov	r8, r4
 8000f6a:	0015      	movs	r5, r2
 8000f6c:	9000      	str	r0, [sp, #0]
 8000f6e:	e7d4      	b.n	8000f1a <__aeabi_ddiv+0x176>
 8000f70:	464a      	mov	r2, r9
 8000f72:	2303      	movs	r3, #3
 8000f74:	431a      	orrs	r2, r3
 8000f76:	4691      	mov	r9, r2
 8000f78:	2003      	movs	r0, #3
 8000f7a:	4652      	mov	r2, sl
 8000f7c:	e74f      	b.n	8000e1e <__aeabi_ddiv+0x7a>
 8000f7e:	4649      	mov	r1, r9
 8000f80:	2301      	movs	r3, #1
 8000f82:	4319      	orrs	r1, r3
 8000f84:	4689      	mov	r9, r1
 8000f86:	2400      	movs	r4, #0
 8000f88:	2001      	movs	r0, #1
 8000f8a:	e748      	b.n	8000e1e <__aeabi_ddiv+0x7a>
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	4699      	mov	r9, r3
 8000f90:	3b09      	subs	r3, #9
 8000f92:	46a0      	mov	r8, r4
 8000f94:	4683      	mov	fp, r0
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	e728      	b.n	8000dec <__aeabi_ddiv+0x48>
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	4699      	mov	r9, r3
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	469b      	mov	fp, r3
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	2500      	movs	r5, #0
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	e720      	b.n	8000dec <__aeabi_ddiv+0x48>
 8000faa:	2300      	movs	r3, #0
 8000fac:	2480      	movs	r4, #128	; 0x80
 8000fae:	469a      	mov	sl, r3
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <__aeabi_ddiv+0x244>)
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	e74f      	b.n	8000e58 <__aeabi_ddiv+0xb4>
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	4641      	mov	r1, r8
 8000fbc:	031b      	lsls	r3, r3, #12
 8000fbe:	4219      	tst	r1, r3
 8000fc0:	d008      	beq.n	8000fd4 <__aeabi_ddiv+0x230>
 8000fc2:	421c      	tst	r4, r3
 8000fc4:	d106      	bne.n	8000fd4 <__aeabi_ddiv+0x230>
 8000fc6:	431c      	orrs	r4, r3
 8000fc8:	0324      	lsls	r4, r4, #12
 8000fca:	46ba      	mov	sl, r7
 8000fcc:	0015      	movs	r5, r2
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <__aeabi_ddiv+0x244>)
 8000fd0:	0b24      	lsrs	r4, r4, #12
 8000fd2:	e741      	b.n	8000e58 <__aeabi_ddiv+0xb4>
 8000fd4:	2480      	movs	r4, #128	; 0x80
 8000fd6:	4643      	mov	r3, r8
 8000fd8:	0324      	lsls	r4, r4, #12
 8000fda:	431c      	orrs	r4, r3
 8000fdc:	0324      	lsls	r4, r4, #12
 8000fde:	46b2      	mov	sl, r6
 8000fe0:	4b01      	ldr	r3, [pc, #4]	; (8000fe8 <__aeabi_ddiv+0x244>)
 8000fe2:	0b24      	lsrs	r4, r4, #12
 8000fe4:	e738      	b.n	8000e58 <__aeabi_ddiv+0xb4>
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	000007ff 	.word	0x000007ff
 8000fec:	fffffc01 	.word	0xfffffc01
 8000ff0:	0800a67c 	.word	0x0800a67c
 8000ff4:	fffff801 	.word	0xfffff801
 8000ff8:	fffffc0d 	.word	0xfffffc0d
 8000ffc:	000003f3 	.word	0x000003f3
 8001000:	000003ff 	.word	0x000003ff
 8001004:	feffffff 	.word	0xfeffffff
 8001008:	000007fe 	.word	0x000007fe
 800100c:	4544      	cmp	r4, r8
 800100e:	d200      	bcs.n	8001012 <__aeabi_ddiv+0x26e>
 8001010:	e116      	b.n	8001240 <__aeabi_ddiv+0x49c>
 8001012:	d100      	bne.n	8001016 <__aeabi_ddiv+0x272>
 8001014:	e111      	b.n	800123a <__aeabi_ddiv+0x496>
 8001016:	2301      	movs	r3, #1
 8001018:	425b      	negs	r3, r3
 800101a:	469c      	mov	ip, r3
 800101c:	002e      	movs	r6, r5
 800101e:	4640      	mov	r0, r8
 8001020:	2500      	movs	r5, #0
 8001022:	44e3      	add	fp, ip
 8001024:	0223      	lsls	r3, r4, #8
 8001026:	0e14      	lsrs	r4, r2, #24
 8001028:	431c      	orrs	r4, r3
 800102a:	0c1b      	lsrs	r3, r3, #16
 800102c:	4699      	mov	r9, r3
 800102e:	0423      	lsls	r3, r4, #16
 8001030:	0c1f      	lsrs	r7, r3, #16
 8001032:	0212      	lsls	r2, r2, #8
 8001034:	4649      	mov	r1, r9
 8001036:	9200      	str	r2, [sp, #0]
 8001038:	9701      	str	r7, [sp, #4]
 800103a:	f7ff f907 	bl	800024c <__aeabi_uidivmod>
 800103e:	0002      	movs	r2, r0
 8001040:	437a      	muls	r2, r7
 8001042:	040b      	lsls	r3, r1, #16
 8001044:	0c31      	lsrs	r1, r6, #16
 8001046:	4680      	mov	r8, r0
 8001048:	4319      	orrs	r1, r3
 800104a:	428a      	cmp	r2, r1
 800104c:	d90b      	bls.n	8001066 <__aeabi_ddiv+0x2c2>
 800104e:	2301      	movs	r3, #1
 8001050:	425b      	negs	r3, r3
 8001052:	469c      	mov	ip, r3
 8001054:	1909      	adds	r1, r1, r4
 8001056:	44e0      	add	r8, ip
 8001058:	428c      	cmp	r4, r1
 800105a:	d804      	bhi.n	8001066 <__aeabi_ddiv+0x2c2>
 800105c:	428a      	cmp	r2, r1
 800105e:	d902      	bls.n	8001066 <__aeabi_ddiv+0x2c2>
 8001060:	1e83      	subs	r3, r0, #2
 8001062:	4698      	mov	r8, r3
 8001064:	1909      	adds	r1, r1, r4
 8001066:	1a88      	subs	r0, r1, r2
 8001068:	4649      	mov	r1, r9
 800106a:	f7ff f8ef 	bl	800024c <__aeabi_uidivmod>
 800106e:	0409      	lsls	r1, r1, #16
 8001070:	468c      	mov	ip, r1
 8001072:	0431      	lsls	r1, r6, #16
 8001074:	4666      	mov	r6, ip
 8001076:	9a01      	ldr	r2, [sp, #4]
 8001078:	0c09      	lsrs	r1, r1, #16
 800107a:	4342      	muls	r2, r0
 800107c:	0003      	movs	r3, r0
 800107e:	4331      	orrs	r1, r6
 8001080:	428a      	cmp	r2, r1
 8001082:	d904      	bls.n	800108e <__aeabi_ddiv+0x2ea>
 8001084:	1909      	adds	r1, r1, r4
 8001086:	3b01      	subs	r3, #1
 8001088:	428c      	cmp	r4, r1
 800108a:	d800      	bhi.n	800108e <__aeabi_ddiv+0x2ea>
 800108c:	e111      	b.n	80012b2 <__aeabi_ddiv+0x50e>
 800108e:	1a89      	subs	r1, r1, r2
 8001090:	4642      	mov	r2, r8
 8001092:	9e00      	ldr	r6, [sp, #0]
 8001094:	0412      	lsls	r2, r2, #16
 8001096:	431a      	orrs	r2, r3
 8001098:	0c33      	lsrs	r3, r6, #16
 800109a:	001f      	movs	r7, r3
 800109c:	0c10      	lsrs	r0, r2, #16
 800109e:	4690      	mov	r8, r2
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	0413      	lsls	r3, r2, #16
 80010a4:	0432      	lsls	r2, r6, #16
 80010a6:	0c16      	lsrs	r6, r2, #16
 80010a8:	0032      	movs	r2, r6
 80010aa:	0c1b      	lsrs	r3, r3, #16
 80010ac:	435a      	muls	r2, r3
 80010ae:	9603      	str	r6, [sp, #12]
 80010b0:	437b      	muls	r3, r7
 80010b2:	4346      	muls	r6, r0
 80010b4:	4378      	muls	r0, r7
 80010b6:	0c17      	lsrs	r7, r2, #16
 80010b8:	46bc      	mov	ip, r7
 80010ba:	199b      	adds	r3, r3, r6
 80010bc:	4463      	add	r3, ip
 80010be:	429e      	cmp	r6, r3
 80010c0:	d903      	bls.n	80010ca <__aeabi_ddiv+0x326>
 80010c2:	2680      	movs	r6, #128	; 0x80
 80010c4:	0276      	lsls	r6, r6, #9
 80010c6:	46b4      	mov	ip, r6
 80010c8:	4460      	add	r0, ip
 80010ca:	0c1e      	lsrs	r6, r3, #16
 80010cc:	1830      	adds	r0, r6, r0
 80010ce:	0416      	lsls	r6, r2, #16
 80010d0:	041b      	lsls	r3, r3, #16
 80010d2:	0c36      	lsrs	r6, r6, #16
 80010d4:	199e      	adds	r6, r3, r6
 80010d6:	4281      	cmp	r1, r0
 80010d8:	d200      	bcs.n	80010dc <__aeabi_ddiv+0x338>
 80010da:	e09c      	b.n	8001216 <__aeabi_ddiv+0x472>
 80010dc:	d100      	bne.n	80010e0 <__aeabi_ddiv+0x33c>
 80010de:	e097      	b.n	8001210 <__aeabi_ddiv+0x46c>
 80010e0:	1bae      	subs	r6, r5, r6
 80010e2:	1a09      	subs	r1, r1, r0
 80010e4:	42b5      	cmp	r5, r6
 80010e6:	4180      	sbcs	r0, r0
 80010e8:	4240      	negs	r0, r0
 80010ea:	1a08      	subs	r0, r1, r0
 80010ec:	4284      	cmp	r4, r0
 80010ee:	d100      	bne.n	80010f2 <__aeabi_ddiv+0x34e>
 80010f0:	e111      	b.n	8001316 <__aeabi_ddiv+0x572>
 80010f2:	4649      	mov	r1, r9
 80010f4:	f7ff f8aa 	bl	800024c <__aeabi_uidivmod>
 80010f8:	9a01      	ldr	r2, [sp, #4]
 80010fa:	040b      	lsls	r3, r1, #16
 80010fc:	4342      	muls	r2, r0
 80010fe:	0c31      	lsrs	r1, r6, #16
 8001100:	0005      	movs	r5, r0
 8001102:	4319      	orrs	r1, r3
 8001104:	428a      	cmp	r2, r1
 8001106:	d907      	bls.n	8001118 <__aeabi_ddiv+0x374>
 8001108:	1909      	adds	r1, r1, r4
 800110a:	3d01      	subs	r5, #1
 800110c:	428c      	cmp	r4, r1
 800110e:	d803      	bhi.n	8001118 <__aeabi_ddiv+0x374>
 8001110:	428a      	cmp	r2, r1
 8001112:	d901      	bls.n	8001118 <__aeabi_ddiv+0x374>
 8001114:	1e85      	subs	r5, r0, #2
 8001116:	1909      	adds	r1, r1, r4
 8001118:	1a88      	subs	r0, r1, r2
 800111a:	4649      	mov	r1, r9
 800111c:	f7ff f896 	bl	800024c <__aeabi_uidivmod>
 8001120:	0409      	lsls	r1, r1, #16
 8001122:	468c      	mov	ip, r1
 8001124:	0431      	lsls	r1, r6, #16
 8001126:	4666      	mov	r6, ip
 8001128:	9a01      	ldr	r2, [sp, #4]
 800112a:	0c09      	lsrs	r1, r1, #16
 800112c:	4342      	muls	r2, r0
 800112e:	0003      	movs	r3, r0
 8001130:	4331      	orrs	r1, r6
 8001132:	428a      	cmp	r2, r1
 8001134:	d907      	bls.n	8001146 <__aeabi_ddiv+0x3a2>
 8001136:	1909      	adds	r1, r1, r4
 8001138:	3b01      	subs	r3, #1
 800113a:	428c      	cmp	r4, r1
 800113c:	d803      	bhi.n	8001146 <__aeabi_ddiv+0x3a2>
 800113e:	428a      	cmp	r2, r1
 8001140:	d901      	bls.n	8001146 <__aeabi_ddiv+0x3a2>
 8001142:	1e83      	subs	r3, r0, #2
 8001144:	1909      	adds	r1, r1, r4
 8001146:	9e03      	ldr	r6, [sp, #12]
 8001148:	1a89      	subs	r1, r1, r2
 800114a:	0032      	movs	r2, r6
 800114c:	042d      	lsls	r5, r5, #16
 800114e:	431d      	orrs	r5, r3
 8001150:	9f02      	ldr	r7, [sp, #8]
 8001152:	042b      	lsls	r3, r5, #16
 8001154:	0c1b      	lsrs	r3, r3, #16
 8001156:	435a      	muls	r2, r3
 8001158:	437b      	muls	r3, r7
 800115a:	469c      	mov	ip, r3
 800115c:	0c28      	lsrs	r0, r5, #16
 800115e:	4346      	muls	r6, r0
 8001160:	0c13      	lsrs	r3, r2, #16
 8001162:	44b4      	add	ip, r6
 8001164:	4463      	add	r3, ip
 8001166:	4378      	muls	r0, r7
 8001168:	429e      	cmp	r6, r3
 800116a:	d903      	bls.n	8001174 <__aeabi_ddiv+0x3d0>
 800116c:	2680      	movs	r6, #128	; 0x80
 800116e:	0276      	lsls	r6, r6, #9
 8001170:	46b4      	mov	ip, r6
 8001172:	4460      	add	r0, ip
 8001174:	0c1e      	lsrs	r6, r3, #16
 8001176:	0412      	lsls	r2, r2, #16
 8001178:	041b      	lsls	r3, r3, #16
 800117a:	0c12      	lsrs	r2, r2, #16
 800117c:	1830      	adds	r0, r6, r0
 800117e:	189b      	adds	r3, r3, r2
 8001180:	4281      	cmp	r1, r0
 8001182:	d306      	bcc.n	8001192 <__aeabi_ddiv+0x3ee>
 8001184:	d002      	beq.n	800118c <__aeabi_ddiv+0x3e8>
 8001186:	2301      	movs	r3, #1
 8001188:	431d      	orrs	r5, r3
 800118a:	e6ce      	b.n	8000f2a <__aeabi_ddiv+0x186>
 800118c:	2b00      	cmp	r3, #0
 800118e:	d100      	bne.n	8001192 <__aeabi_ddiv+0x3ee>
 8001190:	e6cb      	b.n	8000f2a <__aeabi_ddiv+0x186>
 8001192:	1861      	adds	r1, r4, r1
 8001194:	1e6e      	subs	r6, r5, #1
 8001196:	42a1      	cmp	r1, r4
 8001198:	d200      	bcs.n	800119c <__aeabi_ddiv+0x3f8>
 800119a:	e0a4      	b.n	80012e6 <__aeabi_ddiv+0x542>
 800119c:	4281      	cmp	r1, r0
 800119e:	d200      	bcs.n	80011a2 <__aeabi_ddiv+0x3fe>
 80011a0:	e0c9      	b.n	8001336 <__aeabi_ddiv+0x592>
 80011a2:	d100      	bne.n	80011a6 <__aeabi_ddiv+0x402>
 80011a4:	e0d9      	b.n	800135a <__aeabi_ddiv+0x5b6>
 80011a6:	0035      	movs	r5, r6
 80011a8:	e7ed      	b.n	8001186 <__aeabi_ddiv+0x3e2>
 80011aa:	2501      	movs	r5, #1
 80011ac:	426d      	negs	r5, r5
 80011ae:	2101      	movs	r1, #1
 80011b0:	1a89      	subs	r1, r1, r2
 80011b2:	2938      	cmp	r1, #56	; 0x38
 80011b4:	dd00      	ble.n	80011b8 <__aeabi_ddiv+0x414>
 80011b6:	e64c      	b.n	8000e52 <__aeabi_ddiv+0xae>
 80011b8:	291f      	cmp	r1, #31
 80011ba:	dc00      	bgt.n	80011be <__aeabi_ddiv+0x41a>
 80011bc:	e07f      	b.n	80012be <__aeabi_ddiv+0x51a>
 80011be:	231f      	movs	r3, #31
 80011c0:	425b      	negs	r3, r3
 80011c2:	1a9a      	subs	r2, r3, r2
 80011c4:	4643      	mov	r3, r8
 80011c6:	40d3      	lsrs	r3, r2
 80011c8:	2920      	cmp	r1, #32
 80011ca:	d004      	beq.n	80011d6 <__aeabi_ddiv+0x432>
 80011cc:	4644      	mov	r4, r8
 80011ce:	4a65      	ldr	r2, [pc, #404]	; (8001364 <__aeabi_ddiv+0x5c0>)
 80011d0:	445a      	add	r2, fp
 80011d2:	4094      	lsls	r4, r2
 80011d4:	4325      	orrs	r5, r4
 80011d6:	1e6a      	subs	r2, r5, #1
 80011d8:	4195      	sbcs	r5, r2
 80011da:	2207      	movs	r2, #7
 80011dc:	432b      	orrs	r3, r5
 80011de:	0015      	movs	r5, r2
 80011e0:	2400      	movs	r4, #0
 80011e2:	401d      	ands	r5, r3
 80011e4:	421a      	tst	r2, r3
 80011e6:	d100      	bne.n	80011ea <__aeabi_ddiv+0x446>
 80011e8:	e0a1      	b.n	800132e <__aeabi_ddiv+0x58a>
 80011ea:	220f      	movs	r2, #15
 80011ec:	2400      	movs	r4, #0
 80011ee:	401a      	ands	r2, r3
 80011f0:	2a04      	cmp	r2, #4
 80011f2:	d100      	bne.n	80011f6 <__aeabi_ddiv+0x452>
 80011f4:	e098      	b.n	8001328 <__aeabi_ddiv+0x584>
 80011f6:	1d1a      	adds	r2, r3, #4
 80011f8:	429a      	cmp	r2, r3
 80011fa:	419b      	sbcs	r3, r3
 80011fc:	425b      	negs	r3, r3
 80011fe:	18e4      	adds	r4, r4, r3
 8001200:	0013      	movs	r3, r2
 8001202:	0222      	lsls	r2, r4, #8
 8001204:	d400      	bmi.n	8001208 <__aeabi_ddiv+0x464>
 8001206:	e08f      	b.n	8001328 <__aeabi_ddiv+0x584>
 8001208:	2301      	movs	r3, #1
 800120a:	2400      	movs	r4, #0
 800120c:	2500      	movs	r5, #0
 800120e:	e623      	b.n	8000e58 <__aeabi_ddiv+0xb4>
 8001210:	42b5      	cmp	r5, r6
 8001212:	d300      	bcc.n	8001216 <__aeabi_ddiv+0x472>
 8001214:	e764      	b.n	80010e0 <__aeabi_ddiv+0x33c>
 8001216:	4643      	mov	r3, r8
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	9b00      	ldr	r3, [sp, #0]
 800121c:	469c      	mov	ip, r3
 800121e:	4465      	add	r5, ip
 8001220:	001f      	movs	r7, r3
 8001222:	429d      	cmp	r5, r3
 8001224:	419b      	sbcs	r3, r3
 8001226:	425b      	negs	r3, r3
 8001228:	191b      	adds	r3, r3, r4
 800122a:	18c9      	adds	r1, r1, r3
 800122c:	428c      	cmp	r4, r1
 800122e:	d23a      	bcs.n	80012a6 <__aeabi_ddiv+0x502>
 8001230:	4288      	cmp	r0, r1
 8001232:	d863      	bhi.n	80012fc <__aeabi_ddiv+0x558>
 8001234:	d060      	beq.n	80012f8 <__aeabi_ddiv+0x554>
 8001236:	4690      	mov	r8, r2
 8001238:	e752      	b.n	80010e0 <__aeabi_ddiv+0x33c>
 800123a:	42aa      	cmp	r2, r5
 800123c:	d900      	bls.n	8001240 <__aeabi_ddiv+0x49c>
 800123e:	e6ea      	b.n	8001016 <__aeabi_ddiv+0x272>
 8001240:	4643      	mov	r3, r8
 8001242:	07de      	lsls	r6, r3, #31
 8001244:	0858      	lsrs	r0, r3, #1
 8001246:	086b      	lsrs	r3, r5, #1
 8001248:	431e      	orrs	r6, r3
 800124a:	07ed      	lsls	r5, r5, #31
 800124c:	e6ea      	b.n	8001024 <__aeabi_ddiv+0x280>
 800124e:	4648      	mov	r0, r9
 8001250:	f001 f856 	bl	8002300 <__clzsi2>
 8001254:	0001      	movs	r1, r0
 8001256:	0002      	movs	r2, r0
 8001258:	3115      	adds	r1, #21
 800125a:	3220      	adds	r2, #32
 800125c:	291c      	cmp	r1, #28
 800125e:	dc00      	bgt.n	8001262 <__aeabi_ddiv+0x4be>
 8001260:	e61a      	b.n	8000e98 <__aeabi_ddiv+0xf4>
 8001262:	464b      	mov	r3, r9
 8001264:	3808      	subs	r0, #8
 8001266:	4083      	lsls	r3, r0
 8001268:	2500      	movs	r5, #0
 800126a:	4698      	mov	r8, r3
 800126c:	e620      	b.n	8000eb0 <__aeabi_ddiv+0x10c>
 800126e:	f001 f847 	bl	8002300 <__clzsi2>
 8001272:	0003      	movs	r3, r0
 8001274:	001a      	movs	r2, r3
 8001276:	3215      	adds	r2, #21
 8001278:	3020      	adds	r0, #32
 800127a:	2a1c      	cmp	r2, #28
 800127c:	dc00      	bgt.n	8001280 <__aeabi_ddiv+0x4dc>
 800127e:	e630      	b.n	8000ee2 <__aeabi_ddiv+0x13e>
 8001280:	4654      	mov	r4, sl
 8001282:	3b08      	subs	r3, #8
 8001284:	2200      	movs	r2, #0
 8001286:	409c      	lsls	r4, r3
 8001288:	e635      	b.n	8000ef6 <__aeabi_ddiv+0x152>
 800128a:	230f      	movs	r3, #15
 800128c:	402b      	ands	r3, r5
 800128e:	2b04      	cmp	r3, #4
 8001290:	d100      	bne.n	8001294 <__aeabi_ddiv+0x4f0>
 8001292:	e652      	b.n	8000f3a <__aeabi_ddiv+0x196>
 8001294:	2305      	movs	r3, #5
 8001296:	425b      	negs	r3, r3
 8001298:	42ab      	cmp	r3, r5
 800129a:	419b      	sbcs	r3, r3
 800129c:	3504      	adds	r5, #4
 800129e:	425b      	negs	r3, r3
 80012a0:	08ed      	lsrs	r5, r5, #3
 80012a2:	4498      	add	r8, r3
 80012a4:	e64a      	b.n	8000f3c <__aeabi_ddiv+0x198>
 80012a6:	428c      	cmp	r4, r1
 80012a8:	d1c5      	bne.n	8001236 <__aeabi_ddiv+0x492>
 80012aa:	42af      	cmp	r7, r5
 80012ac:	d9c0      	bls.n	8001230 <__aeabi_ddiv+0x48c>
 80012ae:	4690      	mov	r8, r2
 80012b0:	e716      	b.n	80010e0 <__aeabi_ddiv+0x33c>
 80012b2:	428a      	cmp	r2, r1
 80012b4:	d800      	bhi.n	80012b8 <__aeabi_ddiv+0x514>
 80012b6:	e6ea      	b.n	800108e <__aeabi_ddiv+0x2ea>
 80012b8:	1e83      	subs	r3, r0, #2
 80012ba:	1909      	adds	r1, r1, r4
 80012bc:	e6e7      	b.n	800108e <__aeabi_ddiv+0x2ea>
 80012be:	4a2a      	ldr	r2, [pc, #168]	; (8001368 <__aeabi_ddiv+0x5c4>)
 80012c0:	0028      	movs	r0, r5
 80012c2:	445a      	add	r2, fp
 80012c4:	4643      	mov	r3, r8
 80012c6:	4095      	lsls	r5, r2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	40c8      	lsrs	r0, r1
 80012cc:	1e6a      	subs	r2, r5, #1
 80012ce:	4195      	sbcs	r5, r2
 80012d0:	4644      	mov	r4, r8
 80012d2:	4303      	orrs	r3, r0
 80012d4:	432b      	orrs	r3, r5
 80012d6:	40cc      	lsrs	r4, r1
 80012d8:	075a      	lsls	r2, r3, #29
 80012da:	d092      	beq.n	8001202 <__aeabi_ddiv+0x45e>
 80012dc:	220f      	movs	r2, #15
 80012de:	401a      	ands	r2, r3
 80012e0:	2a04      	cmp	r2, #4
 80012e2:	d188      	bne.n	80011f6 <__aeabi_ddiv+0x452>
 80012e4:	e78d      	b.n	8001202 <__aeabi_ddiv+0x45e>
 80012e6:	0035      	movs	r5, r6
 80012e8:	4281      	cmp	r1, r0
 80012ea:	d000      	beq.n	80012ee <__aeabi_ddiv+0x54a>
 80012ec:	e74b      	b.n	8001186 <__aeabi_ddiv+0x3e2>
 80012ee:	9a00      	ldr	r2, [sp, #0]
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d000      	beq.n	80012f6 <__aeabi_ddiv+0x552>
 80012f4:	e747      	b.n	8001186 <__aeabi_ddiv+0x3e2>
 80012f6:	e618      	b.n	8000f2a <__aeabi_ddiv+0x186>
 80012f8:	42ae      	cmp	r6, r5
 80012fa:	d99c      	bls.n	8001236 <__aeabi_ddiv+0x492>
 80012fc:	2302      	movs	r3, #2
 80012fe:	425b      	negs	r3, r3
 8001300:	469c      	mov	ip, r3
 8001302:	9b00      	ldr	r3, [sp, #0]
 8001304:	44e0      	add	r8, ip
 8001306:	469c      	mov	ip, r3
 8001308:	4465      	add	r5, ip
 800130a:	429d      	cmp	r5, r3
 800130c:	419b      	sbcs	r3, r3
 800130e:	425b      	negs	r3, r3
 8001310:	191b      	adds	r3, r3, r4
 8001312:	18c9      	adds	r1, r1, r3
 8001314:	e6e4      	b.n	80010e0 <__aeabi_ddiv+0x33c>
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <__aeabi_ddiv+0x5c8>)
 8001318:	445a      	add	r2, fp
 800131a:	2a00      	cmp	r2, #0
 800131c:	dc00      	bgt.n	8001320 <__aeabi_ddiv+0x57c>
 800131e:	e744      	b.n	80011aa <__aeabi_ddiv+0x406>
 8001320:	2301      	movs	r3, #1
 8001322:	2500      	movs	r5, #0
 8001324:	4498      	add	r8, r3
 8001326:	e609      	b.n	8000f3c <__aeabi_ddiv+0x198>
 8001328:	0765      	lsls	r5, r4, #29
 800132a:	0264      	lsls	r4, r4, #9
 800132c:	0b24      	lsrs	r4, r4, #12
 800132e:	08db      	lsrs	r3, r3, #3
 8001330:	431d      	orrs	r5, r3
 8001332:	2300      	movs	r3, #0
 8001334:	e590      	b.n	8000e58 <__aeabi_ddiv+0xb4>
 8001336:	9e00      	ldr	r6, [sp, #0]
 8001338:	3d02      	subs	r5, #2
 800133a:	0072      	lsls	r2, r6, #1
 800133c:	42b2      	cmp	r2, r6
 800133e:	41bf      	sbcs	r7, r7
 8001340:	427f      	negs	r7, r7
 8001342:	193c      	adds	r4, r7, r4
 8001344:	1909      	adds	r1, r1, r4
 8001346:	9200      	str	r2, [sp, #0]
 8001348:	e7ce      	b.n	80012e8 <__aeabi_ddiv+0x544>
 800134a:	2480      	movs	r4, #128	; 0x80
 800134c:	4643      	mov	r3, r8
 800134e:	0324      	lsls	r4, r4, #12
 8001350:	431c      	orrs	r4, r3
 8001352:	0324      	lsls	r4, r4, #12
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <__aeabi_ddiv+0x5cc>)
 8001356:	0b24      	lsrs	r4, r4, #12
 8001358:	e57e      	b.n	8000e58 <__aeabi_ddiv+0xb4>
 800135a:	9a00      	ldr	r2, [sp, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d3ea      	bcc.n	8001336 <__aeabi_ddiv+0x592>
 8001360:	0035      	movs	r5, r6
 8001362:	e7c4      	b.n	80012ee <__aeabi_ddiv+0x54a>
 8001364:	0000043e 	.word	0x0000043e
 8001368:	0000041e 	.word	0x0000041e
 800136c:	000003ff 	.word	0x000003ff
 8001370:	000007ff 	.word	0x000007ff

08001374 <__eqdf2>:
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	464f      	mov	r7, r9
 8001378:	4646      	mov	r6, r8
 800137a:	46d6      	mov	lr, sl
 800137c:	4694      	mov	ip, r2
 800137e:	4691      	mov	r9, r2
 8001380:	031a      	lsls	r2, r3, #12
 8001382:	0b12      	lsrs	r2, r2, #12
 8001384:	4d18      	ldr	r5, [pc, #96]	; (80013e8 <__eqdf2+0x74>)
 8001386:	b5c0      	push	{r6, r7, lr}
 8001388:	004c      	lsls	r4, r1, #1
 800138a:	030f      	lsls	r7, r1, #12
 800138c:	4692      	mov	sl, r2
 800138e:	005a      	lsls	r2, r3, #1
 8001390:	0006      	movs	r6, r0
 8001392:	4680      	mov	r8, r0
 8001394:	0b3f      	lsrs	r7, r7, #12
 8001396:	2001      	movs	r0, #1
 8001398:	0d64      	lsrs	r4, r4, #21
 800139a:	0fc9      	lsrs	r1, r1, #31
 800139c:	0d52      	lsrs	r2, r2, #21
 800139e:	0fdb      	lsrs	r3, r3, #31
 80013a0:	42ac      	cmp	r4, r5
 80013a2:	d00a      	beq.n	80013ba <__eqdf2+0x46>
 80013a4:	42aa      	cmp	r2, r5
 80013a6:	d003      	beq.n	80013b0 <__eqdf2+0x3c>
 80013a8:	4294      	cmp	r4, r2
 80013aa:	d101      	bne.n	80013b0 <__eqdf2+0x3c>
 80013ac:	4557      	cmp	r7, sl
 80013ae:	d00d      	beq.n	80013cc <__eqdf2+0x58>
 80013b0:	bce0      	pop	{r5, r6, r7}
 80013b2:	46ba      	mov	sl, r7
 80013b4:	46b1      	mov	r9, r6
 80013b6:	46a8      	mov	r8, r5
 80013b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ba:	003d      	movs	r5, r7
 80013bc:	4335      	orrs	r5, r6
 80013be:	d1f7      	bne.n	80013b0 <__eqdf2+0x3c>
 80013c0:	42a2      	cmp	r2, r4
 80013c2:	d1f5      	bne.n	80013b0 <__eqdf2+0x3c>
 80013c4:	4652      	mov	r2, sl
 80013c6:	4665      	mov	r5, ip
 80013c8:	432a      	orrs	r2, r5
 80013ca:	d1f1      	bne.n	80013b0 <__eqdf2+0x3c>
 80013cc:	2001      	movs	r0, #1
 80013ce:	45c8      	cmp	r8, r9
 80013d0:	d1ee      	bne.n	80013b0 <__eqdf2+0x3c>
 80013d2:	4299      	cmp	r1, r3
 80013d4:	d006      	beq.n	80013e4 <__eqdf2+0x70>
 80013d6:	2c00      	cmp	r4, #0
 80013d8:	d1ea      	bne.n	80013b0 <__eqdf2+0x3c>
 80013da:	433e      	orrs	r6, r7
 80013dc:	0030      	movs	r0, r6
 80013de:	1e46      	subs	r6, r0, #1
 80013e0:	41b0      	sbcs	r0, r6
 80013e2:	e7e5      	b.n	80013b0 <__eqdf2+0x3c>
 80013e4:	2000      	movs	r0, #0
 80013e6:	e7e3      	b.n	80013b0 <__eqdf2+0x3c>
 80013e8:	000007ff 	.word	0x000007ff

080013ec <__gedf2>:
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ee:	464e      	mov	r6, r9
 80013f0:	4645      	mov	r5, r8
 80013f2:	4657      	mov	r7, sl
 80013f4:	46de      	mov	lr, fp
 80013f6:	0004      	movs	r4, r0
 80013f8:	0018      	movs	r0, r3
 80013fa:	b5e0      	push	{r5, r6, r7, lr}
 80013fc:	0016      	movs	r6, r2
 80013fe:	031b      	lsls	r3, r3, #12
 8001400:	0b1b      	lsrs	r3, r3, #12
 8001402:	4d32      	ldr	r5, [pc, #200]	; (80014cc <__gedf2+0xe0>)
 8001404:	030f      	lsls	r7, r1, #12
 8001406:	004a      	lsls	r2, r1, #1
 8001408:	4699      	mov	r9, r3
 800140a:	0043      	lsls	r3, r0, #1
 800140c:	46a4      	mov	ip, r4
 800140e:	46b0      	mov	r8, r6
 8001410:	0b3f      	lsrs	r7, r7, #12
 8001412:	0d52      	lsrs	r2, r2, #21
 8001414:	0fc9      	lsrs	r1, r1, #31
 8001416:	0d5b      	lsrs	r3, r3, #21
 8001418:	0fc0      	lsrs	r0, r0, #31
 800141a:	42aa      	cmp	r2, r5
 800141c:	d029      	beq.n	8001472 <__gedf2+0x86>
 800141e:	42ab      	cmp	r3, r5
 8001420:	d018      	beq.n	8001454 <__gedf2+0x68>
 8001422:	2a00      	cmp	r2, #0
 8001424:	d12a      	bne.n	800147c <__gedf2+0x90>
 8001426:	433c      	orrs	r4, r7
 8001428:	46a3      	mov	fp, r4
 800142a:	4265      	negs	r5, r4
 800142c:	4165      	adcs	r5, r4
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <__gedf2+0x4c>
 8001432:	464c      	mov	r4, r9
 8001434:	4326      	orrs	r6, r4
 8001436:	d027      	beq.n	8001488 <__gedf2+0x9c>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d115      	bne.n	8001468 <__gedf2+0x7c>
 800143c:	4281      	cmp	r1, r0
 800143e:	d028      	beq.n	8001492 <__gedf2+0xa6>
 8001440:	2002      	movs	r0, #2
 8001442:	3901      	subs	r1, #1
 8001444:	4008      	ands	r0, r1
 8001446:	3801      	subs	r0, #1
 8001448:	bcf0      	pop	{r4, r5, r6, r7}
 800144a:	46bb      	mov	fp, r7
 800144c:	46b2      	mov	sl, r6
 800144e:	46a9      	mov	r9, r5
 8001450:	46a0      	mov	r8, r4
 8001452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001454:	464d      	mov	r5, r9
 8001456:	432e      	orrs	r6, r5
 8001458:	d12f      	bne.n	80014ba <__gedf2+0xce>
 800145a:	2a00      	cmp	r2, #0
 800145c:	d1ee      	bne.n	800143c <__gedf2+0x50>
 800145e:	433c      	orrs	r4, r7
 8001460:	4265      	negs	r5, r4
 8001462:	4165      	adcs	r5, r4
 8001464:	2d00      	cmp	r5, #0
 8001466:	d0e9      	beq.n	800143c <__gedf2+0x50>
 8001468:	2800      	cmp	r0, #0
 800146a:	d1ed      	bne.n	8001448 <__gedf2+0x5c>
 800146c:	2001      	movs	r0, #1
 800146e:	4240      	negs	r0, r0
 8001470:	e7ea      	b.n	8001448 <__gedf2+0x5c>
 8001472:	003d      	movs	r5, r7
 8001474:	4325      	orrs	r5, r4
 8001476:	d120      	bne.n	80014ba <__gedf2+0xce>
 8001478:	4293      	cmp	r3, r2
 800147a:	d0eb      	beq.n	8001454 <__gedf2+0x68>
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1dd      	bne.n	800143c <__gedf2+0x50>
 8001480:	464c      	mov	r4, r9
 8001482:	4326      	orrs	r6, r4
 8001484:	d1da      	bne.n	800143c <__gedf2+0x50>
 8001486:	e7db      	b.n	8001440 <__gedf2+0x54>
 8001488:	465b      	mov	r3, fp
 800148a:	2000      	movs	r0, #0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0db      	beq.n	8001448 <__gedf2+0x5c>
 8001490:	e7d6      	b.n	8001440 <__gedf2+0x54>
 8001492:	429a      	cmp	r2, r3
 8001494:	dc0a      	bgt.n	80014ac <__gedf2+0xc0>
 8001496:	dbe7      	blt.n	8001468 <__gedf2+0x7c>
 8001498:	454f      	cmp	r7, r9
 800149a:	d8d1      	bhi.n	8001440 <__gedf2+0x54>
 800149c:	d010      	beq.n	80014c0 <__gedf2+0xd4>
 800149e:	2000      	movs	r0, #0
 80014a0:	454f      	cmp	r7, r9
 80014a2:	d2d1      	bcs.n	8001448 <__gedf2+0x5c>
 80014a4:	2900      	cmp	r1, #0
 80014a6:	d0e1      	beq.n	800146c <__gedf2+0x80>
 80014a8:	0008      	movs	r0, r1
 80014aa:	e7cd      	b.n	8001448 <__gedf2+0x5c>
 80014ac:	4243      	negs	r3, r0
 80014ae:	4158      	adcs	r0, r3
 80014b0:	2302      	movs	r3, #2
 80014b2:	4240      	negs	r0, r0
 80014b4:	4018      	ands	r0, r3
 80014b6:	3801      	subs	r0, #1
 80014b8:	e7c6      	b.n	8001448 <__gedf2+0x5c>
 80014ba:	2002      	movs	r0, #2
 80014bc:	4240      	negs	r0, r0
 80014be:	e7c3      	b.n	8001448 <__gedf2+0x5c>
 80014c0:	45c4      	cmp	ip, r8
 80014c2:	d8bd      	bhi.n	8001440 <__gedf2+0x54>
 80014c4:	2000      	movs	r0, #0
 80014c6:	45c4      	cmp	ip, r8
 80014c8:	d2be      	bcs.n	8001448 <__gedf2+0x5c>
 80014ca:	e7eb      	b.n	80014a4 <__gedf2+0xb8>
 80014cc:	000007ff 	.word	0x000007ff

080014d0 <__ledf2>:
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d2:	464e      	mov	r6, r9
 80014d4:	4645      	mov	r5, r8
 80014d6:	4657      	mov	r7, sl
 80014d8:	46de      	mov	lr, fp
 80014da:	0004      	movs	r4, r0
 80014dc:	0018      	movs	r0, r3
 80014de:	b5e0      	push	{r5, r6, r7, lr}
 80014e0:	0016      	movs	r6, r2
 80014e2:	031b      	lsls	r3, r3, #12
 80014e4:	0b1b      	lsrs	r3, r3, #12
 80014e6:	4d31      	ldr	r5, [pc, #196]	; (80015ac <__ledf2+0xdc>)
 80014e8:	030f      	lsls	r7, r1, #12
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	0043      	lsls	r3, r0, #1
 80014f0:	46a4      	mov	ip, r4
 80014f2:	46b0      	mov	r8, r6
 80014f4:	0b3f      	lsrs	r7, r7, #12
 80014f6:	0d52      	lsrs	r2, r2, #21
 80014f8:	0fc9      	lsrs	r1, r1, #31
 80014fa:	0d5b      	lsrs	r3, r3, #21
 80014fc:	0fc0      	lsrs	r0, r0, #31
 80014fe:	42aa      	cmp	r2, r5
 8001500:	d011      	beq.n	8001526 <__ledf2+0x56>
 8001502:	42ab      	cmp	r3, r5
 8001504:	d014      	beq.n	8001530 <__ledf2+0x60>
 8001506:	2a00      	cmp	r2, #0
 8001508:	d12f      	bne.n	800156a <__ledf2+0x9a>
 800150a:	433c      	orrs	r4, r7
 800150c:	46a3      	mov	fp, r4
 800150e:	4265      	negs	r5, r4
 8001510:	4165      	adcs	r5, r4
 8001512:	2b00      	cmp	r3, #0
 8001514:	d114      	bne.n	8001540 <__ledf2+0x70>
 8001516:	464c      	mov	r4, r9
 8001518:	4326      	orrs	r6, r4
 800151a:	d111      	bne.n	8001540 <__ledf2+0x70>
 800151c:	465b      	mov	r3, fp
 800151e:	2000      	movs	r0, #0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d017      	beq.n	8001554 <__ledf2+0x84>
 8001524:	e010      	b.n	8001548 <__ledf2+0x78>
 8001526:	003d      	movs	r5, r7
 8001528:	4325      	orrs	r5, r4
 800152a:	d112      	bne.n	8001552 <__ledf2+0x82>
 800152c:	4293      	cmp	r3, r2
 800152e:	d11c      	bne.n	800156a <__ledf2+0x9a>
 8001530:	464d      	mov	r5, r9
 8001532:	432e      	orrs	r6, r5
 8001534:	d10d      	bne.n	8001552 <__ledf2+0x82>
 8001536:	2a00      	cmp	r2, #0
 8001538:	d104      	bne.n	8001544 <__ledf2+0x74>
 800153a:	433c      	orrs	r4, r7
 800153c:	4265      	negs	r5, r4
 800153e:	4165      	adcs	r5, r4
 8001540:	2d00      	cmp	r5, #0
 8001542:	d10d      	bne.n	8001560 <__ledf2+0x90>
 8001544:	4281      	cmp	r1, r0
 8001546:	d016      	beq.n	8001576 <__ledf2+0xa6>
 8001548:	2002      	movs	r0, #2
 800154a:	3901      	subs	r1, #1
 800154c:	4008      	ands	r0, r1
 800154e:	3801      	subs	r0, #1
 8001550:	e000      	b.n	8001554 <__ledf2+0x84>
 8001552:	2002      	movs	r0, #2
 8001554:	bcf0      	pop	{r4, r5, r6, r7}
 8001556:	46bb      	mov	fp, r7
 8001558:	46b2      	mov	sl, r6
 800155a:	46a9      	mov	r9, r5
 800155c:	46a0      	mov	r8, r4
 800155e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001560:	2800      	cmp	r0, #0
 8001562:	d1f7      	bne.n	8001554 <__ledf2+0x84>
 8001564:	2001      	movs	r0, #1
 8001566:	4240      	negs	r0, r0
 8001568:	e7f4      	b.n	8001554 <__ledf2+0x84>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1ea      	bne.n	8001544 <__ledf2+0x74>
 800156e:	464c      	mov	r4, r9
 8001570:	4326      	orrs	r6, r4
 8001572:	d1e7      	bne.n	8001544 <__ledf2+0x74>
 8001574:	e7e8      	b.n	8001548 <__ledf2+0x78>
 8001576:	429a      	cmp	r2, r3
 8001578:	dd06      	ble.n	8001588 <__ledf2+0xb8>
 800157a:	4243      	negs	r3, r0
 800157c:	4158      	adcs	r0, r3
 800157e:	2302      	movs	r3, #2
 8001580:	4240      	negs	r0, r0
 8001582:	4018      	ands	r0, r3
 8001584:	3801      	subs	r0, #1
 8001586:	e7e5      	b.n	8001554 <__ledf2+0x84>
 8001588:	429a      	cmp	r2, r3
 800158a:	dbe9      	blt.n	8001560 <__ledf2+0x90>
 800158c:	454f      	cmp	r7, r9
 800158e:	d8db      	bhi.n	8001548 <__ledf2+0x78>
 8001590:	d006      	beq.n	80015a0 <__ledf2+0xd0>
 8001592:	2000      	movs	r0, #0
 8001594:	454f      	cmp	r7, r9
 8001596:	d2dd      	bcs.n	8001554 <__ledf2+0x84>
 8001598:	2900      	cmp	r1, #0
 800159a:	d0e3      	beq.n	8001564 <__ledf2+0x94>
 800159c:	0008      	movs	r0, r1
 800159e:	e7d9      	b.n	8001554 <__ledf2+0x84>
 80015a0:	45c4      	cmp	ip, r8
 80015a2:	d8d1      	bhi.n	8001548 <__ledf2+0x78>
 80015a4:	2000      	movs	r0, #0
 80015a6:	45c4      	cmp	ip, r8
 80015a8:	d2d4      	bcs.n	8001554 <__ledf2+0x84>
 80015aa:	e7f5      	b.n	8001598 <__ledf2+0xc8>
 80015ac:	000007ff 	.word	0x000007ff

080015b0 <__aeabi_dmul>:
 80015b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b2:	4657      	mov	r7, sl
 80015b4:	464e      	mov	r6, r9
 80015b6:	4645      	mov	r5, r8
 80015b8:	46de      	mov	lr, fp
 80015ba:	b5e0      	push	{r5, r6, r7, lr}
 80015bc:	4698      	mov	r8, r3
 80015be:	030c      	lsls	r4, r1, #12
 80015c0:	004b      	lsls	r3, r1, #1
 80015c2:	0006      	movs	r6, r0
 80015c4:	4692      	mov	sl, r2
 80015c6:	b087      	sub	sp, #28
 80015c8:	0b24      	lsrs	r4, r4, #12
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fcf      	lsrs	r7, r1, #31
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d06c      	beq.n	80016ac <__aeabi_dmul+0xfc>
 80015d2:	4add      	ldr	r2, [pc, #884]	; (8001948 <__aeabi_dmul+0x398>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x2a>
 80015d8:	e086      	b.n	80016e8 <__aeabi_dmul+0x138>
 80015da:	0f42      	lsrs	r2, r0, #29
 80015dc:	00e4      	lsls	r4, r4, #3
 80015de:	4314      	orrs	r4, r2
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	0412      	lsls	r2, r2, #16
 80015e4:	4314      	orrs	r4, r2
 80015e6:	4ad9      	ldr	r2, [pc, #868]	; (800194c <__aeabi_dmul+0x39c>)
 80015e8:	00c5      	lsls	r5, r0, #3
 80015ea:	4694      	mov	ip, r2
 80015ec:	4463      	add	r3, ip
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2300      	movs	r3, #0
 80015f2:	4699      	mov	r9, r3
 80015f4:	469b      	mov	fp, r3
 80015f6:	4643      	mov	r3, r8
 80015f8:	4642      	mov	r2, r8
 80015fa:	031e      	lsls	r6, r3, #12
 80015fc:	0fd2      	lsrs	r2, r2, #31
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4650      	mov	r0, sl
 8001602:	4690      	mov	r8, r2
 8001604:	0b36      	lsrs	r6, r6, #12
 8001606:	0d5b      	lsrs	r3, r3, #21
 8001608:	d100      	bne.n	800160c <__aeabi_dmul+0x5c>
 800160a:	e078      	b.n	80016fe <__aeabi_dmul+0x14e>
 800160c:	4ace      	ldr	r2, [pc, #824]	; (8001948 <__aeabi_dmul+0x398>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d01d      	beq.n	800164e <__aeabi_dmul+0x9e>
 8001612:	49ce      	ldr	r1, [pc, #824]	; (800194c <__aeabi_dmul+0x39c>)
 8001614:	0f42      	lsrs	r2, r0, #29
 8001616:	468c      	mov	ip, r1
 8001618:	9900      	ldr	r1, [sp, #0]
 800161a:	4463      	add	r3, ip
 800161c:	00f6      	lsls	r6, r6, #3
 800161e:	468c      	mov	ip, r1
 8001620:	4316      	orrs	r6, r2
 8001622:	2280      	movs	r2, #128	; 0x80
 8001624:	449c      	add	ip, r3
 8001626:	0412      	lsls	r2, r2, #16
 8001628:	4663      	mov	r3, ip
 800162a:	4316      	orrs	r6, r2
 800162c:	00c2      	lsls	r2, r0, #3
 800162e:	2000      	movs	r0, #0
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	9900      	ldr	r1, [sp, #0]
 8001634:	4643      	mov	r3, r8
 8001636:	3101      	adds	r1, #1
 8001638:	468c      	mov	ip, r1
 800163a:	4649      	mov	r1, r9
 800163c:	407b      	eors	r3, r7
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	290f      	cmp	r1, #15
 8001642:	d900      	bls.n	8001646 <__aeabi_dmul+0x96>
 8001644:	e07e      	b.n	8001744 <__aeabi_dmul+0x194>
 8001646:	4bc2      	ldr	r3, [pc, #776]	; (8001950 <__aeabi_dmul+0x3a0>)
 8001648:	0089      	lsls	r1, r1, #2
 800164a:	5859      	ldr	r1, [r3, r1]
 800164c:	468f      	mov	pc, r1
 800164e:	4652      	mov	r2, sl
 8001650:	9b00      	ldr	r3, [sp, #0]
 8001652:	4332      	orrs	r2, r6
 8001654:	d000      	beq.n	8001658 <__aeabi_dmul+0xa8>
 8001656:	e156      	b.n	8001906 <__aeabi_dmul+0x356>
 8001658:	49bb      	ldr	r1, [pc, #748]	; (8001948 <__aeabi_dmul+0x398>)
 800165a:	2600      	movs	r6, #0
 800165c:	468c      	mov	ip, r1
 800165e:	4463      	add	r3, ip
 8001660:	4649      	mov	r1, r9
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2302      	movs	r3, #2
 8001666:	4319      	orrs	r1, r3
 8001668:	4689      	mov	r9, r1
 800166a:	2002      	movs	r0, #2
 800166c:	e7e1      	b.n	8001632 <__aeabi_dmul+0x82>
 800166e:	4643      	mov	r3, r8
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	0034      	movs	r4, r6
 8001674:	0015      	movs	r5, r2
 8001676:	4683      	mov	fp, r0
 8001678:	465b      	mov	r3, fp
 800167a:	2b02      	cmp	r3, #2
 800167c:	d05e      	beq.n	800173c <__aeabi_dmul+0x18c>
 800167e:	2b03      	cmp	r3, #3
 8001680:	d100      	bne.n	8001684 <__aeabi_dmul+0xd4>
 8001682:	e1f3      	b.n	8001a6c <__aeabi_dmul+0x4bc>
 8001684:	2b01      	cmp	r3, #1
 8001686:	d000      	beq.n	800168a <__aeabi_dmul+0xda>
 8001688:	e118      	b.n	80018bc <__aeabi_dmul+0x30c>
 800168a:	2200      	movs	r2, #0
 800168c:	2400      	movs	r4, #0
 800168e:	2500      	movs	r5, #0
 8001690:	9b01      	ldr	r3, [sp, #4]
 8001692:	0512      	lsls	r2, r2, #20
 8001694:	4322      	orrs	r2, r4
 8001696:	07db      	lsls	r3, r3, #31
 8001698:	431a      	orrs	r2, r3
 800169a:	0028      	movs	r0, r5
 800169c:	0011      	movs	r1, r2
 800169e:	b007      	add	sp, #28
 80016a0:	bcf0      	pop	{r4, r5, r6, r7}
 80016a2:	46bb      	mov	fp, r7
 80016a4:	46b2      	mov	sl, r6
 80016a6:	46a9      	mov	r9, r5
 80016a8:	46a0      	mov	r8, r4
 80016aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ac:	0025      	movs	r5, r4
 80016ae:	4305      	orrs	r5, r0
 80016b0:	d100      	bne.n	80016b4 <__aeabi_dmul+0x104>
 80016b2:	e141      	b.n	8001938 <__aeabi_dmul+0x388>
 80016b4:	2c00      	cmp	r4, #0
 80016b6:	d100      	bne.n	80016ba <__aeabi_dmul+0x10a>
 80016b8:	e1ad      	b.n	8001a16 <__aeabi_dmul+0x466>
 80016ba:	0020      	movs	r0, r4
 80016bc:	f000 fe20 	bl	8002300 <__clzsi2>
 80016c0:	0001      	movs	r1, r0
 80016c2:	0002      	movs	r2, r0
 80016c4:	390b      	subs	r1, #11
 80016c6:	231d      	movs	r3, #29
 80016c8:	0010      	movs	r0, r2
 80016ca:	1a5b      	subs	r3, r3, r1
 80016cc:	0031      	movs	r1, r6
 80016ce:	0035      	movs	r5, r6
 80016d0:	3808      	subs	r0, #8
 80016d2:	4084      	lsls	r4, r0
 80016d4:	40d9      	lsrs	r1, r3
 80016d6:	4085      	lsls	r5, r0
 80016d8:	430c      	orrs	r4, r1
 80016da:	489e      	ldr	r0, [pc, #632]	; (8001954 <__aeabi_dmul+0x3a4>)
 80016dc:	1a83      	subs	r3, r0, r2
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2300      	movs	r3, #0
 80016e2:	4699      	mov	r9, r3
 80016e4:	469b      	mov	fp, r3
 80016e6:	e786      	b.n	80015f6 <__aeabi_dmul+0x46>
 80016e8:	0005      	movs	r5, r0
 80016ea:	4325      	orrs	r5, r4
 80016ec:	d000      	beq.n	80016f0 <__aeabi_dmul+0x140>
 80016ee:	e11c      	b.n	800192a <__aeabi_dmul+0x37a>
 80016f0:	2208      	movs	r2, #8
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2302      	movs	r3, #2
 80016f6:	2400      	movs	r4, #0
 80016f8:	4691      	mov	r9, r2
 80016fa:	469b      	mov	fp, r3
 80016fc:	e77b      	b.n	80015f6 <__aeabi_dmul+0x46>
 80016fe:	4652      	mov	r2, sl
 8001700:	4332      	orrs	r2, r6
 8001702:	d100      	bne.n	8001706 <__aeabi_dmul+0x156>
 8001704:	e10a      	b.n	800191c <__aeabi_dmul+0x36c>
 8001706:	2e00      	cmp	r6, #0
 8001708:	d100      	bne.n	800170c <__aeabi_dmul+0x15c>
 800170a:	e176      	b.n	80019fa <__aeabi_dmul+0x44a>
 800170c:	0030      	movs	r0, r6
 800170e:	f000 fdf7 	bl	8002300 <__clzsi2>
 8001712:	0002      	movs	r2, r0
 8001714:	3a0b      	subs	r2, #11
 8001716:	231d      	movs	r3, #29
 8001718:	0001      	movs	r1, r0
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	4652      	mov	r2, sl
 800171e:	3908      	subs	r1, #8
 8001720:	40da      	lsrs	r2, r3
 8001722:	408e      	lsls	r6, r1
 8001724:	4316      	orrs	r6, r2
 8001726:	4652      	mov	r2, sl
 8001728:	408a      	lsls	r2, r1
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	4989      	ldr	r1, [pc, #548]	; (8001954 <__aeabi_dmul+0x3a4>)
 800172e:	1a18      	subs	r0, r3, r0
 8001730:	0003      	movs	r3, r0
 8001732:	468c      	mov	ip, r1
 8001734:	4463      	add	r3, ip
 8001736:	2000      	movs	r0, #0
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	e77a      	b.n	8001632 <__aeabi_dmul+0x82>
 800173c:	2400      	movs	r4, #0
 800173e:	2500      	movs	r5, #0
 8001740:	4a81      	ldr	r2, [pc, #516]	; (8001948 <__aeabi_dmul+0x398>)
 8001742:	e7a5      	b.n	8001690 <__aeabi_dmul+0xe0>
 8001744:	0c2f      	lsrs	r7, r5, #16
 8001746:	042d      	lsls	r5, r5, #16
 8001748:	0c2d      	lsrs	r5, r5, #16
 800174a:	002b      	movs	r3, r5
 800174c:	0c11      	lsrs	r1, r2, #16
 800174e:	0412      	lsls	r2, r2, #16
 8001750:	0c12      	lsrs	r2, r2, #16
 8001752:	4353      	muls	r3, r2
 8001754:	4698      	mov	r8, r3
 8001756:	0013      	movs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	437b      	muls	r3, r7
 800175c:	4699      	mov	r9, r3
 800175e:	4348      	muls	r0, r1
 8001760:	4448      	add	r0, r9
 8001762:	4683      	mov	fp, r0
 8001764:	4640      	mov	r0, r8
 8001766:	000b      	movs	r3, r1
 8001768:	0c00      	lsrs	r0, r0, #16
 800176a:	4682      	mov	sl, r0
 800176c:	4658      	mov	r0, fp
 800176e:	437b      	muls	r3, r7
 8001770:	4450      	add	r0, sl
 8001772:	9302      	str	r3, [sp, #8]
 8001774:	4581      	cmp	r9, r0
 8001776:	d906      	bls.n	8001786 <__aeabi_dmul+0x1d6>
 8001778:	469a      	mov	sl, r3
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	025b      	lsls	r3, r3, #9
 800177e:	4699      	mov	r9, r3
 8001780:	44ca      	add	sl, r9
 8001782:	4653      	mov	r3, sl
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	0c03      	lsrs	r3, r0, #16
 8001788:	469b      	mov	fp, r3
 800178a:	4643      	mov	r3, r8
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	0400      	lsls	r0, r0, #16
 8001790:	0c1b      	lsrs	r3, r3, #16
 8001792:	4698      	mov	r8, r3
 8001794:	0003      	movs	r3, r0
 8001796:	4443      	add	r3, r8
 8001798:	9304      	str	r3, [sp, #16]
 800179a:	0c33      	lsrs	r3, r6, #16
 800179c:	4699      	mov	r9, r3
 800179e:	002b      	movs	r3, r5
 80017a0:	0436      	lsls	r6, r6, #16
 80017a2:	0c36      	lsrs	r6, r6, #16
 80017a4:	4373      	muls	r3, r6
 80017a6:	4698      	mov	r8, r3
 80017a8:	0033      	movs	r3, r6
 80017aa:	437b      	muls	r3, r7
 80017ac:	469a      	mov	sl, r3
 80017ae:	464b      	mov	r3, r9
 80017b0:	435d      	muls	r5, r3
 80017b2:	435f      	muls	r7, r3
 80017b4:	4643      	mov	r3, r8
 80017b6:	4455      	add	r5, sl
 80017b8:	0c18      	lsrs	r0, r3, #16
 80017ba:	1940      	adds	r0, r0, r5
 80017bc:	4582      	cmp	sl, r0
 80017be:	d903      	bls.n	80017c8 <__aeabi_dmul+0x218>
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	025b      	lsls	r3, r3, #9
 80017c4:	469a      	mov	sl, r3
 80017c6:	4457      	add	r7, sl
 80017c8:	0c05      	lsrs	r5, r0, #16
 80017ca:	19eb      	adds	r3, r5, r7
 80017cc:	9305      	str	r3, [sp, #20]
 80017ce:	4643      	mov	r3, r8
 80017d0:	041d      	lsls	r5, r3, #16
 80017d2:	0c2d      	lsrs	r5, r5, #16
 80017d4:	0400      	lsls	r0, r0, #16
 80017d6:	1940      	adds	r0, r0, r5
 80017d8:	0c25      	lsrs	r5, r4, #16
 80017da:	0424      	lsls	r4, r4, #16
 80017dc:	0c24      	lsrs	r4, r4, #16
 80017de:	0027      	movs	r7, r4
 80017e0:	4357      	muls	r7, r2
 80017e2:	436a      	muls	r2, r5
 80017e4:	4690      	mov	r8, r2
 80017e6:	002a      	movs	r2, r5
 80017e8:	0c3b      	lsrs	r3, r7, #16
 80017ea:	469a      	mov	sl, r3
 80017ec:	434a      	muls	r2, r1
 80017ee:	4361      	muls	r1, r4
 80017f0:	4441      	add	r1, r8
 80017f2:	4451      	add	r1, sl
 80017f4:	4483      	add	fp, r0
 80017f6:	4588      	cmp	r8, r1
 80017f8:	d903      	bls.n	8001802 <__aeabi_dmul+0x252>
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	025b      	lsls	r3, r3, #9
 80017fe:	4698      	mov	r8, r3
 8001800:	4442      	add	r2, r8
 8001802:	043f      	lsls	r7, r7, #16
 8001804:	0c0b      	lsrs	r3, r1, #16
 8001806:	0c3f      	lsrs	r7, r7, #16
 8001808:	0409      	lsls	r1, r1, #16
 800180a:	19c9      	adds	r1, r1, r7
 800180c:	0027      	movs	r7, r4
 800180e:	4698      	mov	r8, r3
 8001810:	464b      	mov	r3, r9
 8001812:	4377      	muls	r7, r6
 8001814:	435c      	muls	r4, r3
 8001816:	436e      	muls	r6, r5
 8001818:	435d      	muls	r5, r3
 800181a:	0c3b      	lsrs	r3, r7, #16
 800181c:	4699      	mov	r9, r3
 800181e:	19a4      	adds	r4, r4, r6
 8001820:	444c      	add	r4, r9
 8001822:	4442      	add	r2, r8
 8001824:	9503      	str	r5, [sp, #12]
 8001826:	42a6      	cmp	r6, r4
 8001828:	d904      	bls.n	8001834 <__aeabi_dmul+0x284>
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	025b      	lsls	r3, r3, #9
 800182e:	4698      	mov	r8, r3
 8001830:	4445      	add	r5, r8
 8001832:	9503      	str	r5, [sp, #12]
 8001834:	9b02      	ldr	r3, [sp, #8]
 8001836:	043f      	lsls	r7, r7, #16
 8001838:	445b      	add	r3, fp
 800183a:	001e      	movs	r6, r3
 800183c:	4283      	cmp	r3, r0
 800183e:	4180      	sbcs	r0, r0
 8001840:	0423      	lsls	r3, r4, #16
 8001842:	4698      	mov	r8, r3
 8001844:	9b05      	ldr	r3, [sp, #20]
 8001846:	0c3f      	lsrs	r7, r7, #16
 8001848:	4447      	add	r7, r8
 800184a:	4698      	mov	r8, r3
 800184c:	1876      	adds	r6, r6, r1
 800184e:	428e      	cmp	r6, r1
 8001850:	4189      	sbcs	r1, r1
 8001852:	4447      	add	r7, r8
 8001854:	4240      	negs	r0, r0
 8001856:	183d      	adds	r5, r7, r0
 8001858:	46a8      	mov	r8, r5
 800185a:	4693      	mov	fp, r2
 800185c:	4249      	negs	r1, r1
 800185e:	468a      	mov	sl, r1
 8001860:	44c3      	add	fp, r8
 8001862:	429f      	cmp	r7, r3
 8001864:	41bf      	sbcs	r7, r7
 8001866:	4580      	cmp	r8, r0
 8001868:	4180      	sbcs	r0, r0
 800186a:	9b03      	ldr	r3, [sp, #12]
 800186c:	44da      	add	sl, fp
 800186e:	4698      	mov	r8, r3
 8001870:	4653      	mov	r3, sl
 8001872:	4240      	negs	r0, r0
 8001874:	427f      	negs	r7, r7
 8001876:	4307      	orrs	r7, r0
 8001878:	0c24      	lsrs	r4, r4, #16
 800187a:	4593      	cmp	fp, r2
 800187c:	4192      	sbcs	r2, r2
 800187e:	458a      	cmp	sl, r1
 8001880:	4189      	sbcs	r1, r1
 8001882:	193f      	adds	r7, r7, r4
 8001884:	0ddc      	lsrs	r4, r3, #23
 8001886:	9b04      	ldr	r3, [sp, #16]
 8001888:	0275      	lsls	r5, r6, #9
 800188a:	431d      	orrs	r5, r3
 800188c:	1e68      	subs	r0, r5, #1
 800188e:	4185      	sbcs	r5, r0
 8001890:	4653      	mov	r3, sl
 8001892:	4252      	negs	r2, r2
 8001894:	4249      	negs	r1, r1
 8001896:	430a      	orrs	r2, r1
 8001898:	18bf      	adds	r7, r7, r2
 800189a:	4447      	add	r7, r8
 800189c:	0df6      	lsrs	r6, r6, #23
 800189e:	027f      	lsls	r7, r7, #9
 80018a0:	4335      	orrs	r5, r6
 80018a2:	025a      	lsls	r2, r3, #9
 80018a4:	433c      	orrs	r4, r7
 80018a6:	4315      	orrs	r5, r2
 80018a8:	01fb      	lsls	r3, r7, #7
 80018aa:	d400      	bmi.n	80018ae <__aeabi_dmul+0x2fe>
 80018ac:	e0c1      	b.n	8001a32 <__aeabi_dmul+0x482>
 80018ae:	2101      	movs	r1, #1
 80018b0:	086a      	lsrs	r2, r5, #1
 80018b2:	400d      	ands	r5, r1
 80018b4:	4315      	orrs	r5, r2
 80018b6:	07e2      	lsls	r2, r4, #31
 80018b8:	4315      	orrs	r5, r2
 80018ba:	0864      	lsrs	r4, r4, #1
 80018bc:	4926      	ldr	r1, [pc, #152]	; (8001958 <__aeabi_dmul+0x3a8>)
 80018be:	4461      	add	r1, ip
 80018c0:	2900      	cmp	r1, #0
 80018c2:	dd56      	ble.n	8001972 <__aeabi_dmul+0x3c2>
 80018c4:	076b      	lsls	r3, r5, #29
 80018c6:	d009      	beq.n	80018dc <__aeabi_dmul+0x32c>
 80018c8:	220f      	movs	r2, #15
 80018ca:	402a      	ands	r2, r5
 80018cc:	2a04      	cmp	r2, #4
 80018ce:	d005      	beq.n	80018dc <__aeabi_dmul+0x32c>
 80018d0:	1d2a      	adds	r2, r5, #4
 80018d2:	42aa      	cmp	r2, r5
 80018d4:	41ad      	sbcs	r5, r5
 80018d6:	426d      	negs	r5, r5
 80018d8:	1964      	adds	r4, r4, r5
 80018da:	0015      	movs	r5, r2
 80018dc:	01e3      	lsls	r3, r4, #7
 80018de:	d504      	bpl.n	80018ea <__aeabi_dmul+0x33a>
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	4a1e      	ldr	r2, [pc, #120]	; (800195c <__aeabi_dmul+0x3ac>)
 80018e4:	00c9      	lsls	r1, r1, #3
 80018e6:	4014      	ands	r4, r2
 80018e8:	4461      	add	r1, ip
 80018ea:	4a1d      	ldr	r2, [pc, #116]	; (8001960 <__aeabi_dmul+0x3b0>)
 80018ec:	4291      	cmp	r1, r2
 80018ee:	dd00      	ble.n	80018f2 <__aeabi_dmul+0x342>
 80018f0:	e724      	b.n	800173c <__aeabi_dmul+0x18c>
 80018f2:	0762      	lsls	r2, r4, #29
 80018f4:	08ed      	lsrs	r5, r5, #3
 80018f6:	0264      	lsls	r4, r4, #9
 80018f8:	0549      	lsls	r1, r1, #21
 80018fa:	4315      	orrs	r5, r2
 80018fc:	0b24      	lsrs	r4, r4, #12
 80018fe:	0d4a      	lsrs	r2, r1, #21
 8001900:	e6c6      	b.n	8001690 <__aeabi_dmul+0xe0>
 8001902:	9701      	str	r7, [sp, #4]
 8001904:	e6b8      	b.n	8001678 <__aeabi_dmul+0xc8>
 8001906:	4a10      	ldr	r2, [pc, #64]	; (8001948 <__aeabi_dmul+0x398>)
 8001908:	2003      	movs	r0, #3
 800190a:	4694      	mov	ip, r2
 800190c:	4463      	add	r3, ip
 800190e:	464a      	mov	r2, r9
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2303      	movs	r3, #3
 8001914:	431a      	orrs	r2, r3
 8001916:	4691      	mov	r9, r2
 8001918:	4652      	mov	r2, sl
 800191a:	e68a      	b.n	8001632 <__aeabi_dmul+0x82>
 800191c:	4649      	mov	r1, r9
 800191e:	2301      	movs	r3, #1
 8001920:	4319      	orrs	r1, r3
 8001922:	4689      	mov	r9, r1
 8001924:	2600      	movs	r6, #0
 8001926:	2001      	movs	r0, #1
 8001928:	e683      	b.n	8001632 <__aeabi_dmul+0x82>
 800192a:	220c      	movs	r2, #12
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2303      	movs	r3, #3
 8001930:	0005      	movs	r5, r0
 8001932:	4691      	mov	r9, r2
 8001934:	469b      	mov	fp, r3
 8001936:	e65e      	b.n	80015f6 <__aeabi_dmul+0x46>
 8001938:	2304      	movs	r3, #4
 800193a:	4699      	mov	r9, r3
 800193c:	2300      	movs	r3, #0
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	2400      	movs	r4, #0
 8001944:	469b      	mov	fp, r3
 8001946:	e656      	b.n	80015f6 <__aeabi_dmul+0x46>
 8001948:	000007ff 	.word	0x000007ff
 800194c:	fffffc01 	.word	0xfffffc01
 8001950:	0800a6bc 	.word	0x0800a6bc
 8001954:	fffffc0d 	.word	0xfffffc0d
 8001958:	000003ff 	.word	0x000003ff
 800195c:	feffffff 	.word	0xfeffffff
 8001960:	000007fe 	.word	0x000007fe
 8001964:	2300      	movs	r3, #0
 8001966:	2480      	movs	r4, #128	; 0x80
 8001968:	2500      	movs	r5, #0
 800196a:	4a44      	ldr	r2, [pc, #272]	; (8001a7c <__aeabi_dmul+0x4cc>)
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	0324      	lsls	r4, r4, #12
 8001970:	e68e      	b.n	8001690 <__aeabi_dmul+0xe0>
 8001972:	2001      	movs	r0, #1
 8001974:	1a40      	subs	r0, r0, r1
 8001976:	2838      	cmp	r0, #56	; 0x38
 8001978:	dd00      	ble.n	800197c <__aeabi_dmul+0x3cc>
 800197a:	e686      	b.n	800168a <__aeabi_dmul+0xda>
 800197c:	281f      	cmp	r0, #31
 800197e:	dd5b      	ble.n	8001a38 <__aeabi_dmul+0x488>
 8001980:	221f      	movs	r2, #31
 8001982:	0023      	movs	r3, r4
 8001984:	4252      	negs	r2, r2
 8001986:	1a51      	subs	r1, r2, r1
 8001988:	40cb      	lsrs	r3, r1
 800198a:	0019      	movs	r1, r3
 800198c:	2820      	cmp	r0, #32
 800198e:	d003      	beq.n	8001998 <__aeabi_dmul+0x3e8>
 8001990:	4a3b      	ldr	r2, [pc, #236]	; (8001a80 <__aeabi_dmul+0x4d0>)
 8001992:	4462      	add	r2, ip
 8001994:	4094      	lsls	r4, r2
 8001996:	4325      	orrs	r5, r4
 8001998:	1e6a      	subs	r2, r5, #1
 800199a:	4195      	sbcs	r5, r2
 800199c:	002a      	movs	r2, r5
 800199e:	430a      	orrs	r2, r1
 80019a0:	2107      	movs	r1, #7
 80019a2:	000d      	movs	r5, r1
 80019a4:	2400      	movs	r4, #0
 80019a6:	4015      	ands	r5, r2
 80019a8:	4211      	tst	r1, r2
 80019aa:	d05b      	beq.n	8001a64 <__aeabi_dmul+0x4b4>
 80019ac:	210f      	movs	r1, #15
 80019ae:	2400      	movs	r4, #0
 80019b0:	4011      	ands	r1, r2
 80019b2:	2904      	cmp	r1, #4
 80019b4:	d053      	beq.n	8001a5e <__aeabi_dmul+0x4ae>
 80019b6:	1d11      	adds	r1, r2, #4
 80019b8:	4291      	cmp	r1, r2
 80019ba:	4192      	sbcs	r2, r2
 80019bc:	4252      	negs	r2, r2
 80019be:	18a4      	adds	r4, r4, r2
 80019c0:	000a      	movs	r2, r1
 80019c2:	0223      	lsls	r3, r4, #8
 80019c4:	d54b      	bpl.n	8001a5e <__aeabi_dmul+0x4ae>
 80019c6:	2201      	movs	r2, #1
 80019c8:	2400      	movs	r4, #0
 80019ca:	2500      	movs	r5, #0
 80019cc:	e660      	b.n	8001690 <__aeabi_dmul+0xe0>
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	031b      	lsls	r3, r3, #12
 80019d2:	421c      	tst	r4, r3
 80019d4:	d009      	beq.n	80019ea <__aeabi_dmul+0x43a>
 80019d6:	421e      	tst	r6, r3
 80019d8:	d107      	bne.n	80019ea <__aeabi_dmul+0x43a>
 80019da:	4333      	orrs	r3, r6
 80019dc:	031c      	lsls	r4, r3, #12
 80019de:	4643      	mov	r3, r8
 80019e0:	0015      	movs	r5, r2
 80019e2:	0b24      	lsrs	r4, r4, #12
 80019e4:	4a25      	ldr	r2, [pc, #148]	; (8001a7c <__aeabi_dmul+0x4cc>)
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	e652      	b.n	8001690 <__aeabi_dmul+0xe0>
 80019ea:	2280      	movs	r2, #128	; 0x80
 80019ec:	0312      	lsls	r2, r2, #12
 80019ee:	4314      	orrs	r4, r2
 80019f0:	0324      	lsls	r4, r4, #12
 80019f2:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <__aeabi_dmul+0x4cc>)
 80019f4:	0b24      	lsrs	r4, r4, #12
 80019f6:	9701      	str	r7, [sp, #4]
 80019f8:	e64a      	b.n	8001690 <__aeabi_dmul+0xe0>
 80019fa:	f000 fc81 	bl	8002300 <__clzsi2>
 80019fe:	0003      	movs	r3, r0
 8001a00:	001a      	movs	r2, r3
 8001a02:	3215      	adds	r2, #21
 8001a04:	3020      	adds	r0, #32
 8001a06:	2a1c      	cmp	r2, #28
 8001a08:	dc00      	bgt.n	8001a0c <__aeabi_dmul+0x45c>
 8001a0a:	e684      	b.n	8001716 <__aeabi_dmul+0x166>
 8001a0c:	4656      	mov	r6, sl
 8001a0e:	3b08      	subs	r3, #8
 8001a10:	2200      	movs	r2, #0
 8001a12:	409e      	lsls	r6, r3
 8001a14:	e689      	b.n	800172a <__aeabi_dmul+0x17a>
 8001a16:	f000 fc73 	bl	8002300 <__clzsi2>
 8001a1a:	0001      	movs	r1, r0
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	3115      	adds	r1, #21
 8001a20:	3220      	adds	r2, #32
 8001a22:	291c      	cmp	r1, #28
 8001a24:	dc00      	bgt.n	8001a28 <__aeabi_dmul+0x478>
 8001a26:	e64e      	b.n	80016c6 <__aeabi_dmul+0x116>
 8001a28:	0034      	movs	r4, r6
 8001a2a:	3808      	subs	r0, #8
 8001a2c:	2500      	movs	r5, #0
 8001a2e:	4084      	lsls	r4, r0
 8001a30:	e653      	b.n	80016da <__aeabi_dmul+0x12a>
 8001a32:	9b00      	ldr	r3, [sp, #0]
 8001a34:	469c      	mov	ip, r3
 8001a36:	e741      	b.n	80018bc <__aeabi_dmul+0x30c>
 8001a38:	4912      	ldr	r1, [pc, #72]	; (8001a84 <__aeabi_dmul+0x4d4>)
 8001a3a:	0022      	movs	r2, r4
 8001a3c:	4461      	add	r1, ip
 8001a3e:	002e      	movs	r6, r5
 8001a40:	408d      	lsls	r5, r1
 8001a42:	408a      	lsls	r2, r1
 8001a44:	40c6      	lsrs	r6, r0
 8001a46:	1e69      	subs	r1, r5, #1
 8001a48:	418d      	sbcs	r5, r1
 8001a4a:	4332      	orrs	r2, r6
 8001a4c:	432a      	orrs	r2, r5
 8001a4e:	40c4      	lsrs	r4, r0
 8001a50:	0753      	lsls	r3, r2, #29
 8001a52:	d0b6      	beq.n	80019c2 <__aeabi_dmul+0x412>
 8001a54:	210f      	movs	r1, #15
 8001a56:	4011      	ands	r1, r2
 8001a58:	2904      	cmp	r1, #4
 8001a5a:	d1ac      	bne.n	80019b6 <__aeabi_dmul+0x406>
 8001a5c:	e7b1      	b.n	80019c2 <__aeabi_dmul+0x412>
 8001a5e:	0765      	lsls	r5, r4, #29
 8001a60:	0264      	lsls	r4, r4, #9
 8001a62:	0b24      	lsrs	r4, r4, #12
 8001a64:	08d2      	lsrs	r2, r2, #3
 8001a66:	4315      	orrs	r5, r2
 8001a68:	2200      	movs	r2, #0
 8001a6a:	e611      	b.n	8001690 <__aeabi_dmul+0xe0>
 8001a6c:	2280      	movs	r2, #128	; 0x80
 8001a6e:	0312      	lsls	r2, r2, #12
 8001a70:	4314      	orrs	r4, r2
 8001a72:	0324      	lsls	r4, r4, #12
 8001a74:	4a01      	ldr	r2, [pc, #4]	; (8001a7c <__aeabi_dmul+0x4cc>)
 8001a76:	0b24      	lsrs	r4, r4, #12
 8001a78:	e60a      	b.n	8001690 <__aeabi_dmul+0xe0>
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	000007ff 	.word	0x000007ff
 8001a80:	0000043e 	.word	0x0000043e
 8001a84:	0000041e 	.word	0x0000041e

08001a88 <__aeabi_dsub>:
 8001a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8a:	4657      	mov	r7, sl
 8001a8c:	464e      	mov	r6, r9
 8001a8e:	4645      	mov	r5, r8
 8001a90:	46de      	mov	lr, fp
 8001a92:	0004      	movs	r4, r0
 8001a94:	b5e0      	push	{r5, r6, r7, lr}
 8001a96:	001f      	movs	r7, r3
 8001a98:	0010      	movs	r0, r2
 8001a9a:	030b      	lsls	r3, r1, #12
 8001a9c:	0f62      	lsrs	r2, r4, #29
 8001a9e:	004e      	lsls	r6, r1, #1
 8001aa0:	0fcd      	lsrs	r5, r1, #31
 8001aa2:	0a5b      	lsrs	r3, r3, #9
 8001aa4:	0339      	lsls	r1, r7, #12
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	0a49      	lsrs	r1, r1, #9
 8001aaa:	00e2      	lsls	r2, r4, #3
 8001aac:	0f44      	lsrs	r4, r0, #29
 8001aae:	4321      	orrs	r1, r4
 8001ab0:	4cc2      	ldr	r4, [pc, #776]	; (8001dbc <__aeabi_dsub+0x334>)
 8001ab2:	4691      	mov	r9, r2
 8001ab4:	4692      	mov	sl, r2
 8001ab6:	00c0      	lsls	r0, r0, #3
 8001ab8:	007a      	lsls	r2, r7, #1
 8001aba:	4680      	mov	r8, r0
 8001abc:	0d76      	lsrs	r6, r6, #21
 8001abe:	0d52      	lsrs	r2, r2, #21
 8001ac0:	0fff      	lsrs	r7, r7, #31
 8001ac2:	42a2      	cmp	r2, r4
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x40>
 8001ac6:	e0b4      	b.n	8001c32 <__aeabi_dsub+0x1aa>
 8001ac8:	2401      	movs	r4, #1
 8001aca:	4067      	eors	r7, r4
 8001acc:	46bb      	mov	fp, r7
 8001ace:	42bd      	cmp	r5, r7
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x4c>
 8001ad2:	e088      	b.n	8001be6 <__aeabi_dsub+0x15e>
 8001ad4:	1ab4      	subs	r4, r6, r2
 8001ad6:	46a4      	mov	ip, r4
 8001ad8:	2c00      	cmp	r4, #0
 8001ada:	dc00      	bgt.n	8001ade <__aeabi_dsub+0x56>
 8001adc:	e0b2      	b.n	8001c44 <__aeabi_dsub+0x1bc>
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	d100      	bne.n	8001ae4 <__aeabi_dsub+0x5c>
 8001ae2:	e0c5      	b.n	8001c70 <__aeabi_dsub+0x1e8>
 8001ae4:	4ab5      	ldr	r2, [pc, #724]	; (8001dbc <__aeabi_dsub+0x334>)
 8001ae6:	4296      	cmp	r6, r2
 8001ae8:	d100      	bne.n	8001aec <__aeabi_dsub+0x64>
 8001aea:	e28b      	b.n	8002004 <__aeabi_dsub+0x57c>
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	0412      	lsls	r2, r2, #16
 8001af0:	4311      	orrs	r1, r2
 8001af2:	4662      	mov	r2, ip
 8001af4:	2a38      	cmp	r2, #56	; 0x38
 8001af6:	dd00      	ble.n	8001afa <__aeabi_dsub+0x72>
 8001af8:	e1a1      	b.n	8001e3e <__aeabi_dsub+0x3b6>
 8001afa:	2a1f      	cmp	r2, #31
 8001afc:	dd00      	ble.n	8001b00 <__aeabi_dsub+0x78>
 8001afe:	e216      	b.n	8001f2e <__aeabi_dsub+0x4a6>
 8001b00:	2720      	movs	r7, #32
 8001b02:	000c      	movs	r4, r1
 8001b04:	1abf      	subs	r7, r7, r2
 8001b06:	40bc      	lsls	r4, r7
 8001b08:	0002      	movs	r2, r0
 8001b0a:	46a0      	mov	r8, r4
 8001b0c:	4664      	mov	r4, ip
 8001b0e:	40b8      	lsls	r0, r7
 8001b10:	40e2      	lsrs	r2, r4
 8001b12:	4644      	mov	r4, r8
 8001b14:	4314      	orrs	r4, r2
 8001b16:	0002      	movs	r2, r0
 8001b18:	1e50      	subs	r0, r2, #1
 8001b1a:	4182      	sbcs	r2, r0
 8001b1c:	4660      	mov	r0, ip
 8001b1e:	40c1      	lsrs	r1, r0
 8001b20:	4322      	orrs	r2, r4
 8001b22:	1a5b      	subs	r3, r3, r1
 8001b24:	4649      	mov	r1, r9
 8001b26:	1a8c      	subs	r4, r1, r2
 8001b28:	45a1      	cmp	r9, r4
 8001b2a:	4192      	sbcs	r2, r2
 8001b2c:	4252      	negs	r2, r2
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	4698      	mov	r8, r3
 8001b32:	4643      	mov	r3, r8
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	d400      	bmi.n	8001b3a <__aeabi_dsub+0xb2>
 8001b38:	e117      	b.n	8001d6a <__aeabi_dsub+0x2e2>
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	025b      	lsls	r3, r3, #9
 8001b3e:	0a5b      	lsrs	r3, r3, #9
 8001b40:	4698      	mov	r8, r3
 8001b42:	4643      	mov	r3, r8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_dsub+0xc2>
 8001b48:	e16c      	b.n	8001e24 <__aeabi_dsub+0x39c>
 8001b4a:	4640      	mov	r0, r8
 8001b4c:	f000 fbd8 	bl	8002300 <__clzsi2>
 8001b50:	0002      	movs	r2, r0
 8001b52:	3a08      	subs	r2, #8
 8001b54:	2120      	movs	r1, #32
 8001b56:	0020      	movs	r0, r4
 8001b58:	4643      	mov	r3, r8
 8001b5a:	1a89      	subs	r1, r1, r2
 8001b5c:	4093      	lsls	r3, r2
 8001b5e:	40c8      	lsrs	r0, r1
 8001b60:	4094      	lsls	r4, r2
 8001b62:	4303      	orrs	r3, r0
 8001b64:	4296      	cmp	r6, r2
 8001b66:	dd00      	ble.n	8001b6a <__aeabi_dsub+0xe2>
 8001b68:	e157      	b.n	8001e1a <__aeabi_dsub+0x392>
 8001b6a:	1b96      	subs	r6, r2, r6
 8001b6c:	1c71      	adds	r1, r6, #1
 8001b6e:	291f      	cmp	r1, #31
 8001b70:	dd00      	ble.n	8001b74 <__aeabi_dsub+0xec>
 8001b72:	e1cb      	b.n	8001f0c <__aeabi_dsub+0x484>
 8001b74:	2220      	movs	r2, #32
 8001b76:	0018      	movs	r0, r3
 8001b78:	0026      	movs	r6, r4
 8001b7a:	1a52      	subs	r2, r2, r1
 8001b7c:	4094      	lsls	r4, r2
 8001b7e:	4090      	lsls	r0, r2
 8001b80:	40ce      	lsrs	r6, r1
 8001b82:	40cb      	lsrs	r3, r1
 8001b84:	1e62      	subs	r2, r4, #1
 8001b86:	4194      	sbcs	r4, r2
 8001b88:	4330      	orrs	r0, r6
 8001b8a:	4698      	mov	r8, r3
 8001b8c:	2600      	movs	r6, #0
 8001b8e:	4304      	orrs	r4, r0
 8001b90:	0763      	lsls	r3, r4, #29
 8001b92:	d009      	beq.n	8001ba8 <__aeabi_dsub+0x120>
 8001b94:	230f      	movs	r3, #15
 8001b96:	4023      	ands	r3, r4
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d005      	beq.n	8001ba8 <__aeabi_dsub+0x120>
 8001b9c:	1d23      	adds	r3, r4, #4
 8001b9e:	42a3      	cmp	r3, r4
 8001ba0:	41a4      	sbcs	r4, r4
 8001ba2:	4264      	negs	r4, r4
 8001ba4:	44a0      	add	r8, r4
 8001ba6:	001c      	movs	r4, r3
 8001ba8:	4643      	mov	r3, r8
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	d400      	bmi.n	8001bb0 <__aeabi_dsub+0x128>
 8001bae:	e0df      	b.n	8001d70 <__aeabi_dsub+0x2e8>
 8001bb0:	4b82      	ldr	r3, [pc, #520]	; (8001dbc <__aeabi_dsub+0x334>)
 8001bb2:	3601      	adds	r6, #1
 8001bb4:	429e      	cmp	r6, r3
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dsub+0x132>
 8001bb8:	e0fb      	b.n	8001db2 <__aeabi_dsub+0x32a>
 8001bba:	4642      	mov	r2, r8
 8001bbc:	4b80      	ldr	r3, [pc, #512]	; (8001dc0 <__aeabi_dsub+0x338>)
 8001bbe:	08e4      	lsrs	r4, r4, #3
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	0013      	movs	r3, r2
 8001bc4:	0571      	lsls	r1, r6, #21
 8001bc6:	0752      	lsls	r2, r2, #29
 8001bc8:	025b      	lsls	r3, r3, #9
 8001bca:	4322      	orrs	r2, r4
 8001bcc:	0b1b      	lsrs	r3, r3, #12
 8001bce:	0d49      	lsrs	r1, r1, #21
 8001bd0:	0509      	lsls	r1, r1, #20
 8001bd2:	07ed      	lsls	r5, r5, #31
 8001bd4:	4319      	orrs	r1, r3
 8001bd6:	4329      	orrs	r1, r5
 8001bd8:	0010      	movs	r0, r2
 8001bda:	bcf0      	pop	{r4, r5, r6, r7}
 8001bdc:	46bb      	mov	fp, r7
 8001bde:	46b2      	mov	sl, r6
 8001be0:	46a9      	mov	r9, r5
 8001be2:	46a0      	mov	r8, r4
 8001be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001be6:	1ab4      	subs	r4, r6, r2
 8001be8:	46a4      	mov	ip, r4
 8001bea:	2c00      	cmp	r4, #0
 8001bec:	dd58      	ble.n	8001ca0 <__aeabi_dsub+0x218>
 8001bee:	2a00      	cmp	r2, #0
 8001bf0:	d100      	bne.n	8001bf4 <__aeabi_dsub+0x16c>
 8001bf2:	e09e      	b.n	8001d32 <__aeabi_dsub+0x2aa>
 8001bf4:	4a71      	ldr	r2, [pc, #452]	; (8001dbc <__aeabi_dsub+0x334>)
 8001bf6:	4296      	cmp	r6, r2
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x174>
 8001bfa:	e13b      	b.n	8001e74 <__aeabi_dsub+0x3ec>
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	0412      	lsls	r2, r2, #16
 8001c00:	4311      	orrs	r1, r2
 8001c02:	4662      	mov	r2, ip
 8001c04:	2a38      	cmp	r2, #56	; 0x38
 8001c06:	dd00      	ble.n	8001c0a <__aeabi_dsub+0x182>
 8001c08:	e0c1      	b.n	8001d8e <__aeabi_dsub+0x306>
 8001c0a:	2a1f      	cmp	r2, #31
 8001c0c:	dc00      	bgt.n	8001c10 <__aeabi_dsub+0x188>
 8001c0e:	e1bb      	b.n	8001f88 <__aeabi_dsub+0x500>
 8001c10:	000c      	movs	r4, r1
 8001c12:	3a20      	subs	r2, #32
 8001c14:	40d4      	lsrs	r4, r2
 8001c16:	0022      	movs	r2, r4
 8001c18:	4664      	mov	r4, ip
 8001c1a:	2c20      	cmp	r4, #32
 8001c1c:	d004      	beq.n	8001c28 <__aeabi_dsub+0x1a0>
 8001c1e:	2740      	movs	r7, #64	; 0x40
 8001c20:	1b3f      	subs	r7, r7, r4
 8001c22:	40b9      	lsls	r1, r7
 8001c24:	4308      	orrs	r0, r1
 8001c26:	4680      	mov	r8, r0
 8001c28:	4644      	mov	r4, r8
 8001c2a:	1e61      	subs	r1, r4, #1
 8001c2c:	418c      	sbcs	r4, r1
 8001c2e:	4314      	orrs	r4, r2
 8001c30:	e0b1      	b.n	8001d96 <__aeabi_dsub+0x30e>
 8001c32:	000c      	movs	r4, r1
 8001c34:	4304      	orrs	r4, r0
 8001c36:	d02a      	beq.n	8001c8e <__aeabi_dsub+0x206>
 8001c38:	46bb      	mov	fp, r7
 8001c3a:	42bd      	cmp	r5, r7
 8001c3c:	d02d      	beq.n	8001c9a <__aeabi_dsub+0x212>
 8001c3e:	4c61      	ldr	r4, [pc, #388]	; (8001dc4 <__aeabi_dsub+0x33c>)
 8001c40:	46a4      	mov	ip, r4
 8001c42:	44b4      	add	ip, r6
 8001c44:	4664      	mov	r4, ip
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	d05c      	beq.n	8001d04 <__aeabi_dsub+0x27c>
 8001c4a:	1b94      	subs	r4, r2, r6
 8001c4c:	46a4      	mov	ip, r4
 8001c4e:	2e00      	cmp	r6, #0
 8001c50:	d000      	beq.n	8001c54 <__aeabi_dsub+0x1cc>
 8001c52:	e115      	b.n	8001e80 <__aeabi_dsub+0x3f8>
 8001c54:	464d      	mov	r5, r9
 8001c56:	431d      	orrs	r5, r3
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dsub+0x1d4>
 8001c5a:	e1c3      	b.n	8001fe4 <__aeabi_dsub+0x55c>
 8001c5c:	1e65      	subs	r5, r4, #1
 8001c5e:	2c01      	cmp	r4, #1
 8001c60:	d100      	bne.n	8001c64 <__aeabi_dsub+0x1dc>
 8001c62:	e20c      	b.n	800207e <__aeabi_dsub+0x5f6>
 8001c64:	4e55      	ldr	r6, [pc, #340]	; (8001dbc <__aeabi_dsub+0x334>)
 8001c66:	42b4      	cmp	r4, r6
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x1e4>
 8001c6a:	e1f8      	b.n	800205e <__aeabi_dsub+0x5d6>
 8001c6c:	46ac      	mov	ip, r5
 8001c6e:	e10e      	b.n	8001e8e <__aeabi_dsub+0x406>
 8001c70:	000a      	movs	r2, r1
 8001c72:	4302      	orrs	r2, r0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x1f0>
 8001c76:	e136      	b.n	8001ee6 <__aeabi_dsub+0x45e>
 8001c78:	0022      	movs	r2, r4
 8001c7a:	3a01      	subs	r2, #1
 8001c7c:	2c01      	cmp	r4, #1
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dsub+0x1fa>
 8001c80:	e1c6      	b.n	8002010 <__aeabi_dsub+0x588>
 8001c82:	4c4e      	ldr	r4, [pc, #312]	; (8001dbc <__aeabi_dsub+0x334>)
 8001c84:	45a4      	cmp	ip, r4
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x202>
 8001c88:	e0f4      	b.n	8001e74 <__aeabi_dsub+0x3ec>
 8001c8a:	4694      	mov	ip, r2
 8001c8c:	e731      	b.n	8001af2 <__aeabi_dsub+0x6a>
 8001c8e:	2401      	movs	r4, #1
 8001c90:	4067      	eors	r7, r4
 8001c92:	46bb      	mov	fp, r7
 8001c94:	42bd      	cmp	r5, r7
 8001c96:	d000      	beq.n	8001c9a <__aeabi_dsub+0x212>
 8001c98:	e71c      	b.n	8001ad4 <__aeabi_dsub+0x4c>
 8001c9a:	4c4a      	ldr	r4, [pc, #296]	; (8001dc4 <__aeabi_dsub+0x33c>)
 8001c9c:	46a4      	mov	ip, r4
 8001c9e:	44b4      	add	ip, r6
 8001ca0:	4664      	mov	r4, ip
 8001ca2:	2c00      	cmp	r4, #0
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x220>
 8001ca6:	e0cf      	b.n	8001e48 <__aeabi_dsub+0x3c0>
 8001ca8:	1b94      	subs	r4, r2, r6
 8001caa:	46a4      	mov	ip, r4
 8001cac:	2e00      	cmp	r6, #0
 8001cae:	d100      	bne.n	8001cb2 <__aeabi_dsub+0x22a>
 8001cb0:	e15c      	b.n	8001f6c <__aeabi_dsub+0x4e4>
 8001cb2:	4e42      	ldr	r6, [pc, #264]	; (8001dbc <__aeabi_dsub+0x334>)
 8001cb4:	42b2      	cmp	r2, r6
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x232>
 8001cb8:	e1ec      	b.n	8002094 <__aeabi_dsub+0x60c>
 8001cba:	2680      	movs	r6, #128	; 0x80
 8001cbc:	0436      	lsls	r6, r6, #16
 8001cbe:	4333      	orrs	r3, r6
 8001cc0:	4664      	mov	r4, ip
 8001cc2:	2c38      	cmp	r4, #56	; 0x38
 8001cc4:	dd00      	ble.n	8001cc8 <__aeabi_dsub+0x240>
 8001cc6:	e1b3      	b.n	8002030 <__aeabi_dsub+0x5a8>
 8001cc8:	2c1f      	cmp	r4, #31
 8001cca:	dd00      	ble.n	8001cce <__aeabi_dsub+0x246>
 8001ccc:	e238      	b.n	8002140 <__aeabi_dsub+0x6b8>
 8001cce:	2620      	movs	r6, #32
 8001cd0:	1b36      	subs	r6, r6, r4
 8001cd2:	001c      	movs	r4, r3
 8001cd4:	40b4      	lsls	r4, r6
 8001cd6:	464f      	mov	r7, r9
 8001cd8:	46a0      	mov	r8, r4
 8001cda:	4664      	mov	r4, ip
 8001cdc:	40e7      	lsrs	r7, r4
 8001cde:	4644      	mov	r4, r8
 8001ce0:	433c      	orrs	r4, r7
 8001ce2:	464f      	mov	r7, r9
 8001ce4:	40b7      	lsls	r7, r6
 8001ce6:	003e      	movs	r6, r7
 8001ce8:	1e77      	subs	r7, r6, #1
 8001cea:	41be      	sbcs	r6, r7
 8001cec:	4334      	orrs	r4, r6
 8001cee:	4666      	mov	r6, ip
 8001cf0:	40f3      	lsrs	r3, r6
 8001cf2:	18c9      	adds	r1, r1, r3
 8001cf4:	1824      	adds	r4, r4, r0
 8001cf6:	4284      	cmp	r4, r0
 8001cf8:	419b      	sbcs	r3, r3
 8001cfa:	425b      	negs	r3, r3
 8001cfc:	4698      	mov	r8, r3
 8001cfe:	0016      	movs	r6, r2
 8001d00:	4488      	add	r8, r1
 8001d02:	e04e      	b.n	8001da2 <__aeabi_dsub+0x31a>
 8001d04:	4a30      	ldr	r2, [pc, #192]	; (8001dc8 <__aeabi_dsub+0x340>)
 8001d06:	1c74      	adds	r4, r6, #1
 8001d08:	4214      	tst	r4, r2
 8001d0a:	d000      	beq.n	8001d0e <__aeabi_dsub+0x286>
 8001d0c:	e0d6      	b.n	8001ebc <__aeabi_dsub+0x434>
 8001d0e:	464a      	mov	r2, r9
 8001d10:	431a      	orrs	r2, r3
 8001d12:	2e00      	cmp	r6, #0
 8001d14:	d000      	beq.n	8001d18 <__aeabi_dsub+0x290>
 8001d16:	e15b      	b.n	8001fd0 <__aeabi_dsub+0x548>
 8001d18:	2a00      	cmp	r2, #0
 8001d1a:	d100      	bne.n	8001d1e <__aeabi_dsub+0x296>
 8001d1c:	e1a5      	b.n	800206a <__aeabi_dsub+0x5e2>
 8001d1e:	000a      	movs	r2, r1
 8001d20:	4302      	orrs	r2, r0
 8001d22:	d000      	beq.n	8001d26 <__aeabi_dsub+0x29e>
 8001d24:	e1bb      	b.n	800209e <__aeabi_dsub+0x616>
 8001d26:	464a      	mov	r2, r9
 8001d28:	0759      	lsls	r1, r3, #29
 8001d2a:	08d2      	lsrs	r2, r2, #3
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	08db      	lsrs	r3, r3, #3
 8001d30:	e027      	b.n	8001d82 <__aeabi_dsub+0x2fa>
 8001d32:	000a      	movs	r2, r1
 8001d34:	4302      	orrs	r2, r0
 8001d36:	d100      	bne.n	8001d3a <__aeabi_dsub+0x2b2>
 8001d38:	e174      	b.n	8002024 <__aeabi_dsub+0x59c>
 8001d3a:	0022      	movs	r2, r4
 8001d3c:	3a01      	subs	r2, #1
 8001d3e:	2c01      	cmp	r4, #1
 8001d40:	d005      	beq.n	8001d4e <__aeabi_dsub+0x2c6>
 8001d42:	4c1e      	ldr	r4, [pc, #120]	; (8001dbc <__aeabi_dsub+0x334>)
 8001d44:	45a4      	cmp	ip, r4
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x2c2>
 8001d48:	e094      	b.n	8001e74 <__aeabi_dsub+0x3ec>
 8001d4a:	4694      	mov	ip, r2
 8001d4c:	e759      	b.n	8001c02 <__aeabi_dsub+0x17a>
 8001d4e:	4448      	add	r0, r9
 8001d50:	4548      	cmp	r0, r9
 8001d52:	4192      	sbcs	r2, r2
 8001d54:	185b      	adds	r3, r3, r1
 8001d56:	4698      	mov	r8, r3
 8001d58:	0004      	movs	r4, r0
 8001d5a:	4252      	negs	r2, r2
 8001d5c:	4490      	add	r8, r2
 8001d5e:	4643      	mov	r3, r8
 8001d60:	2602      	movs	r6, #2
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	d500      	bpl.n	8001d68 <__aeabi_dsub+0x2e0>
 8001d66:	e0c4      	b.n	8001ef2 <__aeabi_dsub+0x46a>
 8001d68:	3e01      	subs	r6, #1
 8001d6a:	0763      	lsls	r3, r4, #29
 8001d6c:	d000      	beq.n	8001d70 <__aeabi_dsub+0x2e8>
 8001d6e:	e711      	b.n	8001b94 <__aeabi_dsub+0x10c>
 8001d70:	4643      	mov	r3, r8
 8001d72:	46b4      	mov	ip, r6
 8001d74:	0759      	lsls	r1, r3, #29
 8001d76:	08e2      	lsrs	r2, r4, #3
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	08db      	lsrs	r3, r3, #3
 8001d7c:	490f      	ldr	r1, [pc, #60]	; (8001dbc <__aeabi_dsub+0x334>)
 8001d7e:	458c      	cmp	ip, r1
 8001d80:	d040      	beq.n	8001e04 <__aeabi_dsub+0x37c>
 8001d82:	4661      	mov	r1, ip
 8001d84:	031b      	lsls	r3, r3, #12
 8001d86:	0549      	lsls	r1, r1, #21
 8001d88:	0b1b      	lsrs	r3, r3, #12
 8001d8a:	0d49      	lsrs	r1, r1, #21
 8001d8c:	e720      	b.n	8001bd0 <__aeabi_dsub+0x148>
 8001d8e:	4301      	orrs	r1, r0
 8001d90:	000c      	movs	r4, r1
 8001d92:	1e61      	subs	r1, r4, #1
 8001d94:	418c      	sbcs	r4, r1
 8001d96:	444c      	add	r4, r9
 8001d98:	454c      	cmp	r4, r9
 8001d9a:	4192      	sbcs	r2, r2
 8001d9c:	4252      	negs	r2, r2
 8001d9e:	4690      	mov	r8, r2
 8001da0:	4498      	add	r8, r3
 8001da2:	4643      	mov	r3, r8
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	d5e0      	bpl.n	8001d6a <__aeabi_dsub+0x2e2>
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <__aeabi_dsub+0x334>)
 8001daa:	3601      	adds	r6, #1
 8001dac:	429e      	cmp	r6, r3
 8001dae:	d000      	beq.n	8001db2 <__aeabi_dsub+0x32a>
 8001db0:	e09f      	b.n	8001ef2 <__aeabi_dsub+0x46a>
 8001db2:	0031      	movs	r1, r6
 8001db4:	2300      	movs	r3, #0
 8001db6:	2200      	movs	r2, #0
 8001db8:	e70a      	b.n	8001bd0 <__aeabi_dsub+0x148>
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	000007ff 	.word	0x000007ff
 8001dc0:	ff7fffff 	.word	0xff7fffff
 8001dc4:	fffff801 	.word	0xfffff801
 8001dc8:	000007fe 	.word	0x000007fe
 8001dcc:	2a00      	cmp	r2, #0
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_dsub+0x34a>
 8001dd0:	e160      	b.n	8002094 <__aeabi_dsub+0x60c>
 8001dd2:	000a      	movs	r2, r1
 8001dd4:	4302      	orrs	r2, r0
 8001dd6:	d04d      	beq.n	8001e74 <__aeabi_dsub+0x3ec>
 8001dd8:	464a      	mov	r2, r9
 8001dda:	075c      	lsls	r4, r3, #29
 8001ddc:	08d2      	lsrs	r2, r2, #3
 8001dde:	4322      	orrs	r2, r4
 8001de0:	2480      	movs	r4, #128	; 0x80
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	0324      	lsls	r4, r4, #12
 8001de6:	4223      	tst	r3, r4
 8001de8:	d007      	beq.n	8001dfa <__aeabi_dsub+0x372>
 8001dea:	08ce      	lsrs	r6, r1, #3
 8001dec:	4226      	tst	r6, r4
 8001dee:	d104      	bne.n	8001dfa <__aeabi_dsub+0x372>
 8001df0:	465d      	mov	r5, fp
 8001df2:	0033      	movs	r3, r6
 8001df4:	08c2      	lsrs	r2, r0, #3
 8001df6:	0749      	lsls	r1, r1, #29
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	0f51      	lsrs	r1, r2, #29
 8001dfc:	00d2      	lsls	r2, r2, #3
 8001dfe:	08d2      	lsrs	r2, r2, #3
 8001e00:	0749      	lsls	r1, r1, #29
 8001e02:	430a      	orrs	r2, r1
 8001e04:	0011      	movs	r1, r2
 8001e06:	4319      	orrs	r1, r3
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x384>
 8001e0a:	e1c8      	b.n	800219e <__aeabi_dsub+0x716>
 8001e0c:	2180      	movs	r1, #128	; 0x80
 8001e0e:	0309      	lsls	r1, r1, #12
 8001e10:	430b      	orrs	r3, r1
 8001e12:	031b      	lsls	r3, r3, #12
 8001e14:	49d5      	ldr	r1, [pc, #852]	; (800216c <__aeabi_dsub+0x6e4>)
 8001e16:	0b1b      	lsrs	r3, r3, #12
 8001e18:	e6da      	b.n	8001bd0 <__aeabi_dsub+0x148>
 8001e1a:	49d5      	ldr	r1, [pc, #852]	; (8002170 <__aeabi_dsub+0x6e8>)
 8001e1c:	1ab6      	subs	r6, r6, r2
 8001e1e:	400b      	ands	r3, r1
 8001e20:	4698      	mov	r8, r3
 8001e22:	e6b5      	b.n	8001b90 <__aeabi_dsub+0x108>
 8001e24:	0020      	movs	r0, r4
 8001e26:	f000 fa6b 	bl	8002300 <__clzsi2>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	3218      	adds	r2, #24
 8001e2e:	2a1f      	cmp	r2, #31
 8001e30:	dc00      	bgt.n	8001e34 <__aeabi_dsub+0x3ac>
 8001e32:	e68f      	b.n	8001b54 <__aeabi_dsub+0xcc>
 8001e34:	0023      	movs	r3, r4
 8001e36:	3808      	subs	r0, #8
 8001e38:	4083      	lsls	r3, r0
 8001e3a:	2400      	movs	r4, #0
 8001e3c:	e692      	b.n	8001b64 <__aeabi_dsub+0xdc>
 8001e3e:	4308      	orrs	r0, r1
 8001e40:	0002      	movs	r2, r0
 8001e42:	1e50      	subs	r0, r2, #1
 8001e44:	4182      	sbcs	r2, r0
 8001e46:	e66d      	b.n	8001b24 <__aeabi_dsub+0x9c>
 8001e48:	4cca      	ldr	r4, [pc, #808]	; (8002174 <__aeabi_dsub+0x6ec>)
 8001e4a:	1c72      	adds	r2, r6, #1
 8001e4c:	4222      	tst	r2, r4
 8001e4e:	d000      	beq.n	8001e52 <__aeabi_dsub+0x3ca>
 8001e50:	e0ad      	b.n	8001fae <__aeabi_dsub+0x526>
 8001e52:	464a      	mov	r2, r9
 8001e54:	431a      	orrs	r2, r3
 8001e56:	2e00      	cmp	r6, #0
 8001e58:	d1b8      	bne.n	8001dcc <__aeabi_dsub+0x344>
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x3d8>
 8001e5e:	e158      	b.n	8002112 <__aeabi_dsub+0x68a>
 8001e60:	000a      	movs	r2, r1
 8001e62:	4302      	orrs	r2, r0
 8001e64:	d000      	beq.n	8001e68 <__aeabi_dsub+0x3e0>
 8001e66:	e159      	b.n	800211c <__aeabi_dsub+0x694>
 8001e68:	464a      	mov	r2, r9
 8001e6a:	0759      	lsls	r1, r3, #29
 8001e6c:	08d2      	lsrs	r2, r2, #3
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	08db      	lsrs	r3, r3, #3
 8001e72:	e786      	b.n	8001d82 <__aeabi_dsub+0x2fa>
 8001e74:	464a      	mov	r2, r9
 8001e76:	0759      	lsls	r1, r3, #29
 8001e78:	08d2      	lsrs	r2, r2, #3
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	08db      	lsrs	r3, r3, #3
 8001e7e:	e7c1      	b.n	8001e04 <__aeabi_dsub+0x37c>
 8001e80:	4dba      	ldr	r5, [pc, #744]	; (800216c <__aeabi_dsub+0x6e4>)
 8001e82:	42aa      	cmp	r2, r5
 8001e84:	d100      	bne.n	8001e88 <__aeabi_dsub+0x400>
 8001e86:	e11e      	b.n	80020c6 <__aeabi_dsub+0x63e>
 8001e88:	2580      	movs	r5, #128	; 0x80
 8001e8a:	042d      	lsls	r5, r5, #16
 8001e8c:	432b      	orrs	r3, r5
 8001e8e:	4664      	mov	r4, ip
 8001e90:	2c38      	cmp	r4, #56	; 0x38
 8001e92:	dc5d      	bgt.n	8001f50 <__aeabi_dsub+0x4c8>
 8001e94:	2c1f      	cmp	r4, #31
 8001e96:	dd00      	ble.n	8001e9a <__aeabi_dsub+0x412>
 8001e98:	e0d0      	b.n	800203c <__aeabi_dsub+0x5b4>
 8001e9a:	2520      	movs	r5, #32
 8001e9c:	4667      	mov	r7, ip
 8001e9e:	1b2d      	subs	r5, r5, r4
 8001ea0:	464e      	mov	r6, r9
 8001ea2:	001c      	movs	r4, r3
 8001ea4:	40fe      	lsrs	r6, r7
 8001ea6:	40ac      	lsls	r4, r5
 8001ea8:	4334      	orrs	r4, r6
 8001eaa:	464e      	mov	r6, r9
 8001eac:	40ae      	lsls	r6, r5
 8001eae:	0035      	movs	r5, r6
 8001eb0:	40fb      	lsrs	r3, r7
 8001eb2:	1e6e      	subs	r6, r5, #1
 8001eb4:	41b5      	sbcs	r5, r6
 8001eb6:	1ac9      	subs	r1, r1, r3
 8001eb8:	432c      	orrs	r4, r5
 8001eba:	e04e      	b.n	8001f5a <__aeabi_dsub+0x4d2>
 8001ebc:	464a      	mov	r2, r9
 8001ebe:	1a14      	subs	r4, r2, r0
 8001ec0:	45a1      	cmp	r9, r4
 8001ec2:	4192      	sbcs	r2, r2
 8001ec4:	4252      	negs	r2, r2
 8001ec6:	4690      	mov	r8, r2
 8001ec8:	1a5f      	subs	r7, r3, r1
 8001eca:	003a      	movs	r2, r7
 8001ecc:	4647      	mov	r7, r8
 8001ece:	1bd2      	subs	r2, r2, r7
 8001ed0:	4690      	mov	r8, r2
 8001ed2:	0212      	lsls	r2, r2, #8
 8001ed4:	d500      	bpl.n	8001ed8 <__aeabi_dsub+0x450>
 8001ed6:	e08b      	b.n	8001ff0 <__aeabi_dsub+0x568>
 8001ed8:	4642      	mov	r2, r8
 8001eda:	4322      	orrs	r2, r4
 8001edc:	d000      	beq.n	8001ee0 <__aeabi_dsub+0x458>
 8001ede:	e630      	b.n	8001b42 <__aeabi_dsub+0xba>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	2500      	movs	r5, #0
 8001ee4:	e74d      	b.n	8001d82 <__aeabi_dsub+0x2fa>
 8001ee6:	464a      	mov	r2, r9
 8001ee8:	0759      	lsls	r1, r3, #29
 8001eea:	08d2      	lsrs	r2, r2, #3
 8001eec:	430a      	orrs	r2, r1
 8001eee:	08db      	lsrs	r3, r3, #3
 8001ef0:	e744      	b.n	8001d7c <__aeabi_dsub+0x2f4>
 8001ef2:	4642      	mov	r2, r8
 8001ef4:	4b9e      	ldr	r3, [pc, #632]	; (8002170 <__aeabi_dsub+0x6e8>)
 8001ef6:	0861      	lsrs	r1, r4, #1
 8001ef8:	401a      	ands	r2, r3
 8001efa:	0013      	movs	r3, r2
 8001efc:	2201      	movs	r2, #1
 8001efe:	4014      	ands	r4, r2
 8001f00:	430c      	orrs	r4, r1
 8001f02:	07da      	lsls	r2, r3, #31
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	4698      	mov	r8, r3
 8001f08:	4314      	orrs	r4, r2
 8001f0a:	e641      	b.n	8001b90 <__aeabi_dsub+0x108>
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	3e1f      	subs	r6, #31
 8001f10:	40f2      	lsrs	r2, r6
 8001f12:	0016      	movs	r6, r2
 8001f14:	2920      	cmp	r1, #32
 8001f16:	d003      	beq.n	8001f20 <__aeabi_dsub+0x498>
 8001f18:	2240      	movs	r2, #64	; 0x40
 8001f1a:	1a51      	subs	r1, r2, r1
 8001f1c:	408b      	lsls	r3, r1
 8001f1e:	431c      	orrs	r4, r3
 8001f20:	1e62      	subs	r2, r4, #1
 8001f22:	4194      	sbcs	r4, r2
 8001f24:	2300      	movs	r3, #0
 8001f26:	4334      	orrs	r4, r6
 8001f28:	4698      	mov	r8, r3
 8001f2a:	2600      	movs	r6, #0
 8001f2c:	e71d      	b.n	8001d6a <__aeabi_dsub+0x2e2>
 8001f2e:	000c      	movs	r4, r1
 8001f30:	3a20      	subs	r2, #32
 8001f32:	40d4      	lsrs	r4, r2
 8001f34:	0022      	movs	r2, r4
 8001f36:	4664      	mov	r4, ip
 8001f38:	2c20      	cmp	r4, #32
 8001f3a:	d004      	beq.n	8001f46 <__aeabi_dsub+0x4be>
 8001f3c:	2740      	movs	r7, #64	; 0x40
 8001f3e:	1b3f      	subs	r7, r7, r4
 8001f40:	40b9      	lsls	r1, r7
 8001f42:	4308      	orrs	r0, r1
 8001f44:	4680      	mov	r8, r0
 8001f46:	4644      	mov	r4, r8
 8001f48:	1e61      	subs	r1, r4, #1
 8001f4a:	418c      	sbcs	r4, r1
 8001f4c:	4322      	orrs	r2, r4
 8001f4e:	e5e9      	b.n	8001b24 <__aeabi_dsub+0x9c>
 8001f50:	464c      	mov	r4, r9
 8001f52:	4323      	orrs	r3, r4
 8001f54:	001c      	movs	r4, r3
 8001f56:	1e63      	subs	r3, r4, #1
 8001f58:	419c      	sbcs	r4, r3
 8001f5a:	1b04      	subs	r4, r0, r4
 8001f5c:	42a0      	cmp	r0, r4
 8001f5e:	419b      	sbcs	r3, r3
 8001f60:	425b      	negs	r3, r3
 8001f62:	1acb      	subs	r3, r1, r3
 8001f64:	4698      	mov	r8, r3
 8001f66:	465d      	mov	r5, fp
 8001f68:	0016      	movs	r6, r2
 8001f6a:	e5e2      	b.n	8001b32 <__aeabi_dsub+0xaa>
 8001f6c:	464e      	mov	r6, r9
 8001f6e:	431e      	orrs	r6, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_dsub+0x4ec>
 8001f72:	e0ae      	b.n	80020d2 <__aeabi_dsub+0x64a>
 8001f74:	1e66      	subs	r6, r4, #1
 8001f76:	2c01      	cmp	r4, #1
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x4f4>
 8001f7a:	e0fd      	b.n	8002178 <__aeabi_dsub+0x6f0>
 8001f7c:	4f7b      	ldr	r7, [pc, #492]	; (800216c <__aeabi_dsub+0x6e4>)
 8001f7e:	42bc      	cmp	r4, r7
 8001f80:	d100      	bne.n	8001f84 <__aeabi_dsub+0x4fc>
 8001f82:	e107      	b.n	8002194 <__aeabi_dsub+0x70c>
 8001f84:	46b4      	mov	ip, r6
 8001f86:	e69b      	b.n	8001cc0 <__aeabi_dsub+0x238>
 8001f88:	4664      	mov	r4, ip
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	1b12      	subs	r2, r2, r4
 8001f8e:	000c      	movs	r4, r1
 8001f90:	4094      	lsls	r4, r2
 8001f92:	0007      	movs	r7, r0
 8001f94:	4090      	lsls	r0, r2
 8001f96:	46a0      	mov	r8, r4
 8001f98:	4664      	mov	r4, ip
 8001f9a:	1e42      	subs	r2, r0, #1
 8001f9c:	4190      	sbcs	r0, r2
 8001f9e:	4662      	mov	r2, ip
 8001fa0:	40e7      	lsrs	r7, r4
 8001fa2:	4644      	mov	r4, r8
 8001fa4:	40d1      	lsrs	r1, r2
 8001fa6:	433c      	orrs	r4, r7
 8001fa8:	4304      	orrs	r4, r0
 8001faa:	185b      	adds	r3, r3, r1
 8001fac:	e6f3      	b.n	8001d96 <__aeabi_dsub+0x30e>
 8001fae:	4c6f      	ldr	r4, [pc, #444]	; (800216c <__aeabi_dsub+0x6e4>)
 8001fb0:	42a2      	cmp	r2, r4
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x52e>
 8001fb4:	e0d5      	b.n	8002162 <__aeabi_dsub+0x6da>
 8001fb6:	4448      	add	r0, r9
 8001fb8:	185b      	adds	r3, r3, r1
 8001fba:	4548      	cmp	r0, r9
 8001fbc:	4189      	sbcs	r1, r1
 8001fbe:	4249      	negs	r1, r1
 8001fc0:	185b      	adds	r3, r3, r1
 8001fc2:	07dc      	lsls	r4, r3, #31
 8001fc4:	0840      	lsrs	r0, r0, #1
 8001fc6:	085b      	lsrs	r3, r3, #1
 8001fc8:	4698      	mov	r8, r3
 8001fca:	0016      	movs	r6, r2
 8001fcc:	4304      	orrs	r4, r0
 8001fce:	e6cc      	b.n	8001d6a <__aeabi_dsub+0x2e2>
 8001fd0:	2a00      	cmp	r2, #0
 8001fd2:	d000      	beq.n	8001fd6 <__aeabi_dsub+0x54e>
 8001fd4:	e082      	b.n	80020dc <__aeabi_dsub+0x654>
 8001fd6:	000a      	movs	r2, r1
 8001fd8:	4302      	orrs	r2, r0
 8001fda:	d140      	bne.n	800205e <__aeabi_dsub+0x5d6>
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	2500      	movs	r5, #0
 8001fe0:	031b      	lsls	r3, r3, #12
 8001fe2:	e713      	b.n	8001e0c <__aeabi_dsub+0x384>
 8001fe4:	074b      	lsls	r3, r1, #29
 8001fe6:	08c2      	lsrs	r2, r0, #3
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	465d      	mov	r5, fp
 8001fec:	08cb      	lsrs	r3, r1, #3
 8001fee:	e6c5      	b.n	8001d7c <__aeabi_dsub+0x2f4>
 8001ff0:	464a      	mov	r2, r9
 8001ff2:	1a84      	subs	r4, r0, r2
 8001ff4:	42a0      	cmp	r0, r4
 8001ff6:	4192      	sbcs	r2, r2
 8001ff8:	1acb      	subs	r3, r1, r3
 8001ffa:	4252      	negs	r2, r2
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	4698      	mov	r8, r3
 8002000:	465d      	mov	r5, fp
 8002002:	e59e      	b.n	8001b42 <__aeabi_dsub+0xba>
 8002004:	464a      	mov	r2, r9
 8002006:	0759      	lsls	r1, r3, #29
 8002008:	08d2      	lsrs	r2, r2, #3
 800200a:	430a      	orrs	r2, r1
 800200c:	08db      	lsrs	r3, r3, #3
 800200e:	e6f9      	b.n	8001e04 <__aeabi_dsub+0x37c>
 8002010:	464a      	mov	r2, r9
 8002012:	1a14      	subs	r4, r2, r0
 8002014:	45a1      	cmp	r9, r4
 8002016:	4192      	sbcs	r2, r2
 8002018:	1a5b      	subs	r3, r3, r1
 800201a:	4252      	negs	r2, r2
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	4698      	mov	r8, r3
 8002020:	2601      	movs	r6, #1
 8002022:	e586      	b.n	8001b32 <__aeabi_dsub+0xaa>
 8002024:	464a      	mov	r2, r9
 8002026:	0759      	lsls	r1, r3, #29
 8002028:	08d2      	lsrs	r2, r2, #3
 800202a:	430a      	orrs	r2, r1
 800202c:	08db      	lsrs	r3, r3, #3
 800202e:	e6a5      	b.n	8001d7c <__aeabi_dsub+0x2f4>
 8002030:	464c      	mov	r4, r9
 8002032:	4323      	orrs	r3, r4
 8002034:	001c      	movs	r4, r3
 8002036:	1e63      	subs	r3, r4, #1
 8002038:	419c      	sbcs	r4, r3
 800203a:	e65b      	b.n	8001cf4 <__aeabi_dsub+0x26c>
 800203c:	4665      	mov	r5, ip
 800203e:	001e      	movs	r6, r3
 8002040:	3d20      	subs	r5, #32
 8002042:	40ee      	lsrs	r6, r5
 8002044:	2c20      	cmp	r4, #32
 8002046:	d005      	beq.n	8002054 <__aeabi_dsub+0x5cc>
 8002048:	2540      	movs	r5, #64	; 0x40
 800204a:	1b2d      	subs	r5, r5, r4
 800204c:	40ab      	lsls	r3, r5
 800204e:	464c      	mov	r4, r9
 8002050:	431c      	orrs	r4, r3
 8002052:	46a2      	mov	sl, r4
 8002054:	4654      	mov	r4, sl
 8002056:	1e63      	subs	r3, r4, #1
 8002058:	419c      	sbcs	r4, r3
 800205a:	4334      	orrs	r4, r6
 800205c:	e77d      	b.n	8001f5a <__aeabi_dsub+0x4d2>
 800205e:	074b      	lsls	r3, r1, #29
 8002060:	08c2      	lsrs	r2, r0, #3
 8002062:	431a      	orrs	r2, r3
 8002064:	465d      	mov	r5, fp
 8002066:	08cb      	lsrs	r3, r1, #3
 8002068:	e6cc      	b.n	8001e04 <__aeabi_dsub+0x37c>
 800206a:	000a      	movs	r2, r1
 800206c:	4302      	orrs	r2, r0
 800206e:	d100      	bne.n	8002072 <__aeabi_dsub+0x5ea>
 8002070:	e736      	b.n	8001ee0 <__aeabi_dsub+0x458>
 8002072:	074b      	lsls	r3, r1, #29
 8002074:	08c2      	lsrs	r2, r0, #3
 8002076:	431a      	orrs	r2, r3
 8002078:	465d      	mov	r5, fp
 800207a:	08cb      	lsrs	r3, r1, #3
 800207c:	e681      	b.n	8001d82 <__aeabi_dsub+0x2fa>
 800207e:	464a      	mov	r2, r9
 8002080:	1a84      	subs	r4, r0, r2
 8002082:	42a0      	cmp	r0, r4
 8002084:	4192      	sbcs	r2, r2
 8002086:	1acb      	subs	r3, r1, r3
 8002088:	4252      	negs	r2, r2
 800208a:	1a9b      	subs	r3, r3, r2
 800208c:	4698      	mov	r8, r3
 800208e:	465d      	mov	r5, fp
 8002090:	2601      	movs	r6, #1
 8002092:	e54e      	b.n	8001b32 <__aeabi_dsub+0xaa>
 8002094:	074b      	lsls	r3, r1, #29
 8002096:	08c2      	lsrs	r2, r0, #3
 8002098:	431a      	orrs	r2, r3
 800209a:	08cb      	lsrs	r3, r1, #3
 800209c:	e6b2      	b.n	8001e04 <__aeabi_dsub+0x37c>
 800209e:	464a      	mov	r2, r9
 80020a0:	1a14      	subs	r4, r2, r0
 80020a2:	45a1      	cmp	r9, r4
 80020a4:	4192      	sbcs	r2, r2
 80020a6:	1a5f      	subs	r7, r3, r1
 80020a8:	4252      	negs	r2, r2
 80020aa:	1aba      	subs	r2, r7, r2
 80020ac:	4690      	mov	r8, r2
 80020ae:	0212      	lsls	r2, r2, #8
 80020b0:	d56b      	bpl.n	800218a <__aeabi_dsub+0x702>
 80020b2:	464a      	mov	r2, r9
 80020b4:	1a84      	subs	r4, r0, r2
 80020b6:	42a0      	cmp	r0, r4
 80020b8:	4192      	sbcs	r2, r2
 80020ba:	1acb      	subs	r3, r1, r3
 80020bc:	4252      	negs	r2, r2
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	4698      	mov	r8, r3
 80020c2:	465d      	mov	r5, fp
 80020c4:	e564      	b.n	8001b90 <__aeabi_dsub+0x108>
 80020c6:	074b      	lsls	r3, r1, #29
 80020c8:	08c2      	lsrs	r2, r0, #3
 80020ca:	431a      	orrs	r2, r3
 80020cc:	465d      	mov	r5, fp
 80020ce:	08cb      	lsrs	r3, r1, #3
 80020d0:	e698      	b.n	8001e04 <__aeabi_dsub+0x37c>
 80020d2:	074b      	lsls	r3, r1, #29
 80020d4:	08c2      	lsrs	r2, r0, #3
 80020d6:	431a      	orrs	r2, r3
 80020d8:	08cb      	lsrs	r3, r1, #3
 80020da:	e64f      	b.n	8001d7c <__aeabi_dsub+0x2f4>
 80020dc:	000a      	movs	r2, r1
 80020de:	4302      	orrs	r2, r0
 80020e0:	d090      	beq.n	8002004 <__aeabi_dsub+0x57c>
 80020e2:	464a      	mov	r2, r9
 80020e4:	075c      	lsls	r4, r3, #29
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	4314      	orrs	r4, r2
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	08db      	lsrs	r3, r3, #3
 80020ee:	0312      	lsls	r2, r2, #12
 80020f0:	4213      	tst	r3, r2
 80020f2:	d008      	beq.n	8002106 <__aeabi_dsub+0x67e>
 80020f4:	08ce      	lsrs	r6, r1, #3
 80020f6:	4216      	tst	r6, r2
 80020f8:	d105      	bne.n	8002106 <__aeabi_dsub+0x67e>
 80020fa:	08c0      	lsrs	r0, r0, #3
 80020fc:	0749      	lsls	r1, r1, #29
 80020fe:	4308      	orrs	r0, r1
 8002100:	0004      	movs	r4, r0
 8002102:	465d      	mov	r5, fp
 8002104:	0033      	movs	r3, r6
 8002106:	0f61      	lsrs	r1, r4, #29
 8002108:	00e2      	lsls	r2, r4, #3
 800210a:	0749      	lsls	r1, r1, #29
 800210c:	08d2      	lsrs	r2, r2, #3
 800210e:	430a      	orrs	r2, r1
 8002110:	e678      	b.n	8001e04 <__aeabi_dsub+0x37c>
 8002112:	074b      	lsls	r3, r1, #29
 8002114:	08c2      	lsrs	r2, r0, #3
 8002116:	431a      	orrs	r2, r3
 8002118:	08cb      	lsrs	r3, r1, #3
 800211a:	e632      	b.n	8001d82 <__aeabi_dsub+0x2fa>
 800211c:	4448      	add	r0, r9
 800211e:	185b      	adds	r3, r3, r1
 8002120:	4548      	cmp	r0, r9
 8002122:	4192      	sbcs	r2, r2
 8002124:	4698      	mov	r8, r3
 8002126:	4252      	negs	r2, r2
 8002128:	4490      	add	r8, r2
 800212a:	4643      	mov	r3, r8
 800212c:	0004      	movs	r4, r0
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	d400      	bmi.n	8002134 <__aeabi_dsub+0x6ac>
 8002132:	e61a      	b.n	8001d6a <__aeabi_dsub+0x2e2>
 8002134:	4642      	mov	r2, r8
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <__aeabi_dsub+0x6e8>)
 8002138:	2601      	movs	r6, #1
 800213a:	401a      	ands	r2, r3
 800213c:	4690      	mov	r8, r2
 800213e:	e614      	b.n	8001d6a <__aeabi_dsub+0x2e2>
 8002140:	4666      	mov	r6, ip
 8002142:	001f      	movs	r7, r3
 8002144:	3e20      	subs	r6, #32
 8002146:	40f7      	lsrs	r7, r6
 8002148:	2c20      	cmp	r4, #32
 800214a:	d005      	beq.n	8002158 <__aeabi_dsub+0x6d0>
 800214c:	2640      	movs	r6, #64	; 0x40
 800214e:	1b36      	subs	r6, r6, r4
 8002150:	40b3      	lsls	r3, r6
 8002152:	464c      	mov	r4, r9
 8002154:	431c      	orrs	r4, r3
 8002156:	46a2      	mov	sl, r4
 8002158:	4654      	mov	r4, sl
 800215a:	1e63      	subs	r3, r4, #1
 800215c:	419c      	sbcs	r4, r3
 800215e:	433c      	orrs	r4, r7
 8002160:	e5c8      	b.n	8001cf4 <__aeabi_dsub+0x26c>
 8002162:	0011      	movs	r1, r2
 8002164:	2300      	movs	r3, #0
 8002166:	2200      	movs	r2, #0
 8002168:	e532      	b.n	8001bd0 <__aeabi_dsub+0x148>
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	000007ff 	.word	0x000007ff
 8002170:	ff7fffff 	.word	0xff7fffff
 8002174:	000007fe 	.word	0x000007fe
 8002178:	464a      	mov	r2, r9
 800217a:	1814      	adds	r4, r2, r0
 800217c:	4284      	cmp	r4, r0
 800217e:	4192      	sbcs	r2, r2
 8002180:	185b      	adds	r3, r3, r1
 8002182:	4698      	mov	r8, r3
 8002184:	4252      	negs	r2, r2
 8002186:	4490      	add	r8, r2
 8002188:	e5e9      	b.n	8001d5e <__aeabi_dsub+0x2d6>
 800218a:	4642      	mov	r2, r8
 800218c:	4322      	orrs	r2, r4
 800218e:	d100      	bne.n	8002192 <__aeabi_dsub+0x70a>
 8002190:	e6a6      	b.n	8001ee0 <__aeabi_dsub+0x458>
 8002192:	e5ea      	b.n	8001d6a <__aeabi_dsub+0x2e2>
 8002194:	074b      	lsls	r3, r1, #29
 8002196:	08c2      	lsrs	r2, r0, #3
 8002198:	431a      	orrs	r2, r3
 800219a:	08cb      	lsrs	r3, r1, #3
 800219c:	e632      	b.n	8001e04 <__aeabi_dsub+0x37c>
 800219e:	2200      	movs	r2, #0
 80021a0:	4901      	ldr	r1, [pc, #4]	; (80021a8 <__aeabi_dsub+0x720>)
 80021a2:	0013      	movs	r3, r2
 80021a4:	e514      	b.n	8001bd0 <__aeabi_dsub+0x148>
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	000007ff 	.word	0x000007ff

080021ac <__aeabi_dcmpun>:
 80021ac:	b570      	push	{r4, r5, r6, lr}
 80021ae:	0005      	movs	r5, r0
 80021b0:	480c      	ldr	r0, [pc, #48]	; (80021e4 <__aeabi_dcmpun+0x38>)
 80021b2:	030c      	lsls	r4, r1, #12
 80021b4:	0016      	movs	r6, r2
 80021b6:	0049      	lsls	r1, r1, #1
 80021b8:	031a      	lsls	r2, r3, #12
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	0b24      	lsrs	r4, r4, #12
 80021be:	0d49      	lsrs	r1, r1, #21
 80021c0:	0b12      	lsrs	r2, r2, #12
 80021c2:	0d5b      	lsrs	r3, r3, #21
 80021c4:	4281      	cmp	r1, r0
 80021c6:	d008      	beq.n	80021da <__aeabi_dcmpun+0x2e>
 80021c8:	4906      	ldr	r1, [pc, #24]	; (80021e4 <__aeabi_dcmpun+0x38>)
 80021ca:	2000      	movs	r0, #0
 80021cc:	428b      	cmp	r3, r1
 80021ce:	d103      	bne.n	80021d8 <__aeabi_dcmpun+0x2c>
 80021d0:	4332      	orrs	r2, r6
 80021d2:	0010      	movs	r0, r2
 80021d4:	1e42      	subs	r2, r0, #1
 80021d6:	4190      	sbcs	r0, r2
 80021d8:	bd70      	pop	{r4, r5, r6, pc}
 80021da:	2001      	movs	r0, #1
 80021dc:	432c      	orrs	r4, r5
 80021de:	d1fb      	bne.n	80021d8 <__aeabi_dcmpun+0x2c>
 80021e0:	e7f2      	b.n	80021c8 <__aeabi_dcmpun+0x1c>
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	000007ff 	.word	0x000007ff

080021e8 <__aeabi_d2iz>:
 80021e8:	000a      	movs	r2, r1
 80021ea:	b530      	push	{r4, r5, lr}
 80021ec:	4c13      	ldr	r4, [pc, #76]	; (800223c <__aeabi_d2iz+0x54>)
 80021ee:	0053      	lsls	r3, r2, #1
 80021f0:	0309      	lsls	r1, r1, #12
 80021f2:	0005      	movs	r5, r0
 80021f4:	0b09      	lsrs	r1, r1, #12
 80021f6:	2000      	movs	r0, #0
 80021f8:	0d5b      	lsrs	r3, r3, #21
 80021fa:	0fd2      	lsrs	r2, r2, #31
 80021fc:	42a3      	cmp	r3, r4
 80021fe:	dd04      	ble.n	800220a <__aeabi_d2iz+0x22>
 8002200:	480f      	ldr	r0, [pc, #60]	; (8002240 <__aeabi_d2iz+0x58>)
 8002202:	4283      	cmp	r3, r0
 8002204:	dd02      	ble.n	800220c <__aeabi_d2iz+0x24>
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <__aeabi_d2iz+0x5c>)
 8002208:	18d0      	adds	r0, r2, r3
 800220a:	bd30      	pop	{r4, r5, pc}
 800220c:	2080      	movs	r0, #128	; 0x80
 800220e:	0340      	lsls	r0, r0, #13
 8002210:	4301      	orrs	r1, r0
 8002212:	480d      	ldr	r0, [pc, #52]	; (8002248 <__aeabi_d2iz+0x60>)
 8002214:	1ac0      	subs	r0, r0, r3
 8002216:	281f      	cmp	r0, #31
 8002218:	dd08      	ble.n	800222c <__aeabi_d2iz+0x44>
 800221a:	480c      	ldr	r0, [pc, #48]	; (800224c <__aeabi_d2iz+0x64>)
 800221c:	1ac3      	subs	r3, r0, r3
 800221e:	40d9      	lsrs	r1, r3
 8002220:	000b      	movs	r3, r1
 8002222:	4258      	negs	r0, r3
 8002224:	2a00      	cmp	r2, #0
 8002226:	d1f0      	bne.n	800220a <__aeabi_d2iz+0x22>
 8002228:	0018      	movs	r0, r3
 800222a:	e7ee      	b.n	800220a <__aeabi_d2iz+0x22>
 800222c:	4c08      	ldr	r4, [pc, #32]	; (8002250 <__aeabi_d2iz+0x68>)
 800222e:	40c5      	lsrs	r5, r0
 8002230:	46a4      	mov	ip, r4
 8002232:	4463      	add	r3, ip
 8002234:	4099      	lsls	r1, r3
 8002236:	000b      	movs	r3, r1
 8002238:	432b      	orrs	r3, r5
 800223a:	e7f2      	b.n	8002222 <__aeabi_d2iz+0x3a>
 800223c:	000003fe 	.word	0x000003fe
 8002240:	0000041d 	.word	0x0000041d
 8002244:	7fffffff 	.word	0x7fffffff
 8002248:	00000433 	.word	0x00000433
 800224c:	00000413 	.word	0x00000413
 8002250:	fffffbed 	.word	0xfffffbed

08002254 <__aeabi_i2d>:
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	2800      	cmp	r0, #0
 8002258:	d016      	beq.n	8002288 <__aeabi_i2d+0x34>
 800225a:	17c3      	asrs	r3, r0, #31
 800225c:	18c5      	adds	r5, r0, r3
 800225e:	405d      	eors	r5, r3
 8002260:	0fc4      	lsrs	r4, r0, #31
 8002262:	0028      	movs	r0, r5
 8002264:	f000 f84c 	bl	8002300 <__clzsi2>
 8002268:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <__aeabi_i2d+0x5c>)
 800226a:	1a12      	subs	r2, r2, r0
 800226c:	280a      	cmp	r0, #10
 800226e:	dc16      	bgt.n	800229e <__aeabi_i2d+0x4a>
 8002270:	0003      	movs	r3, r0
 8002272:	002e      	movs	r6, r5
 8002274:	3315      	adds	r3, #21
 8002276:	409e      	lsls	r6, r3
 8002278:	230b      	movs	r3, #11
 800227a:	1a18      	subs	r0, r3, r0
 800227c:	40c5      	lsrs	r5, r0
 800227e:	0553      	lsls	r3, r2, #21
 8002280:	032d      	lsls	r5, r5, #12
 8002282:	0b2d      	lsrs	r5, r5, #12
 8002284:	0d5b      	lsrs	r3, r3, #21
 8002286:	e003      	b.n	8002290 <__aeabi_i2d+0x3c>
 8002288:	2400      	movs	r4, #0
 800228a:	2300      	movs	r3, #0
 800228c:	2500      	movs	r5, #0
 800228e:	2600      	movs	r6, #0
 8002290:	051b      	lsls	r3, r3, #20
 8002292:	432b      	orrs	r3, r5
 8002294:	07e4      	lsls	r4, r4, #31
 8002296:	4323      	orrs	r3, r4
 8002298:	0030      	movs	r0, r6
 800229a:	0019      	movs	r1, r3
 800229c:	bd70      	pop	{r4, r5, r6, pc}
 800229e:	380b      	subs	r0, #11
 80022a0:	4085      	lsls	r5, r0
 80022a2:	0553      	lsls	r3, r2, #21
 80022a4:	032d      	lsls	r5, r5, #12
 80022a6:	2600      	movs	r6, #0
 80022a8:	0b2d      	lsrs	r5, r5, #12
 80022aa:	0d5b      	lsrs	r3, r3, #21
 80022ac:	e7f0      	b.n	8002290 <__aeabi_i2d+0x3c>
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	0000041e 	.word	0x0000041e

080022b4 <__aeabi_ui2d>:
 80022b4:	b510      	push	{r4, lr}
 80022b6:	1e04      	subs	r4, r0, #0
 80022b8:	d010      	beq.n	80022dc <__aeabi_ui2d+0x28>
 80022ba:	f000 f821 	bl	8002300 <__clzsi2>
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <__aeabi_ui2d+0x48>)
 80022c0:	1a1b      	subs	r3, r3, r0
 80022c2:	280a      	cmp	r0, #10
 80022c4:	dc11      	bgt.n	80022ea <__aeabi_ui2d+0x36>
 80022c6:	220b      	movs	r2, #11
 80022c8:	0021      	movs	r1, r4
 80022ca:	1a12      	subs	r2, r2, r0
 80022cc:	40d1      	lsrs	r1, r2
 80022ce:	3015      	adds	r0, #21
 80022d0:	030a      	lsls	r2, r1, #12
 80022d2:	055b      	lsls	r3, r3, #21
 80022d4:	4084      	lsls	r4, r0
 80022d6:	0b12      	lsrs	r2, r2, #12
 80022d8:	0d5b      	lsrs	r3, r3, #21
 80022da:	e001      	b.n	80022e0 <__aeabi_ui2d+0x2c>
 80022dc:	2300      	movs	r3, #0
 80022de:	2200      	movs	r2, #0
 80022e0:	051b      	lsls	r3, r3, #20
 80022e2:	4313      	orrs	r3, r2
 80022e4:	0020      	movs	r0, r4
 80022e6:	0019      	movs	r1, r3
 80022e8:	bd10      	pop	{r4, pc}
 80022ea:	0022      	movs	r2, r4
 80022ec:	380b      	subs	r0, #11
 80022ee:	4082      	lsls	r2, r0
 80022f0:	055b      	lsls	r3, r3, #21
 80022f2:	0312      	lsls	r2, r2, #12
 80022f4:	2400      	movs	r4, #0
 80022f6:	0b12      	lsrs	r2, r2, #12
 80022f8:	0d5b      	lsrs	r3, r3, #21
 80022fa:	e7f1      	b.n	80022e0 <__aeabi_ui2d+0x2c>
 80022fc:	0000041e 	.word	0x0000041e

08002300 <__clzsi2>:
 8002300:	211c      	movs	r1, #28
 8002302:	2301      	movs	r3, #1
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	4298      	cmp	r0, r3
 8002308:	d301      	bcc.n	800230e <__clzsi2+0xe>
 800230a:	0c00      	lsrs	r0, r0, #16
 800230c:	3910      	subs	r1, #16
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	4298      	cmp	r0, r3
 8002312:	d301      	bcc.n	8002318 <__clzsi2+0x18>
 8002314:	0a00      	lsrs	r0, r0, #8
 8002316:	3908      	subs	r1, #8
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	4298      	cmp	r0, r3
 800231c:	d301      	bcc.n	8002322 <__clzsi2+0x22>
 800231e:	0900      	lsrs	r0, r0, #4
 8002320:	3904      	subs	r1, #4
 8002322:	a202      	add	r2, pc, #8	; (adr r2, 800232c <__clzsi2+0x2c>)
 8002324:	5c10      	ldrb	r0, [r2, r0]
 8002326:	1840      	adds	r0, r0, r1
 8002328:	4770      	bx	lr
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	02020304 	.word	0x02020304
 8002330:	01010101 	.word	0x01010101
	...

0800233c <__clzdi2>:
 800233c:	b510      	push	{r4, lr}
 800233e:	2900      	cmp	r1, #0
 8002340:	d103      	bne.n	800234a <__clzdi2+0xe>
 8002342:	f7ff ffdd 	bl	8002300 <__clzsi2>
 8002346:	3020      	adds	r0, #32
 8002348:	e002      	b.n	8002350 <__clzdi2+0x14>
 800234a:	1c08      	adds	r0, r1, #0
 800234c:	f7ff ffd8 	bl	8002300 <__clzsi2>
 8002350:	bd10      	pop	{r4, pc}
 8002352:	46c0      	nop			; (mov r8, r8)

08002354 <main>:
  * @brief  Main program.
  * @param  : None
  * @retval : None
  */
int32_t main(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Configure the System clock to have a system clock = 32 MHz */
  SystemClock_Config();
 8002358:	f000 f850 	bl	80023fc <SystemClock_Config>
  /* STM32L0xx HAL library initialization:
       - Configure the Flash prefetch, Flash preread and Buffer caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Low Level Initialization
     */
  HAL_Init();
 800235c:	f002 f8e2 	bl	8004524 <HAL_Init>
  
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	05da      	lsls	r2, r3, #23
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	045b      	lsls	r3, r3, #17
 8002368:	0019      	movs	r1, r3
 800236a:	2000      	movs	r0, #0
 800236c:	f003 fb58 	bl	8005a20 <HAL_RCC_MCOConfig>
    
  #if defined (STL_VERBOSE)
    /* Verbose messages ------------------------------------------------------*/
    USART_Configuration();
 8002370:	f000 f942 	bl	80025f8 <USART_Configuration>
    printf("\n\r %s\n\r", MESSAGE1);
 8002374:	4a13      	ldr	r2, [pc, #76]	; (80023c4 <main+0x70>)
 8002376:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <main+0x74>)
 8002378:	0011      	movs	r1, r2
 800237a:	0018      	movs	r0, r3
 800237c:	f005 fc1a 	bl	8007bb4 <iprintf>
    printf(" %s\n\r", MESSAGE2);
 8002380:	4a12      	ldr	r2, [pc, #72]	; (80023cc <main+0x78>)
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <main+0x7c>)
 8002384:	0011      	movs	r1, r2
 8002386:	0018      	movs	r0, r3
 8002388:	f005 fc14 	bl	8007bb4 <iprintf>
    printf(" ... main routine starts ...\r\n");
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <main+0x80>)
 800238e:	0018      	movs	r0, r3
 8002390:	f005 fc9c 	bl	8007ccc <puts>
  #endif /* STL_VERBOSE */

  #if defined (STL_EVAL_MODE)
    /* Evaluation board control ----------------------------------------------*/
    Eval_Board_HW_Init();
 8002394:	f000 f8f4 	bl	8002580 <Eval_Board_HW_Init>
  #endif /* STL_EVAL_MODE */
  /* NVIC configuration ------------------------------------------------------*/
  NVIC_Configuration();
 8002398:	f000 f81e 	bl	80023d8 <NVIC_Configuration>
    /* if you debug TIM21 it is helpful to uncomment next lines */
    /*
    __DBGMCU_CLK_ENABLE();
    __HAL_FREEZE_TIM21_DBGMCU();
    */  
    BSP_LED_On(LED_ERR);
 800239c:	23a0      	movs	r3, #160	; 0xa0
 800239e:	05db      	lsls	r3, r3, #23
 80023a0:	2201      	movs	r2, #1
 80023a2:	2180      	movs	r1, #128	; 0x80
 80023a4:	0018      	movs	r0, r3
 80023a6:	f002 fda5 	bl	8004ef4 <HAL_GPIO_WritePin>
  #endif  /* STL_EVAL_MODE */
  /* -------------------------------------------------------------------------*/
  /* This is where the main self-test routines are initialized */        
  STL_InitRunTimeChecks();
 80023aa:	f000 fbfb 	bl	8002ba4 <STL_InitRunTimeChecks>
  /* -------------------------------------------------------------------------*/
  #if defined STL_EVAL_MODE
    BSP_LED_Off(LED_ERR);
 80023ae:	23a0      	movs	r3, #160	; 0xa0
 80023b0:	05db      	lsls	r3, r3, #23
 80023b2:	2200      	movs	r2, #0
 80023b4:	2180      	movs	r1, #128	; 0x80
 80023b6:	0018      	movs	r0, r3
 80023b8:	f002 fd9c 	bl	8004ef4 <HAL_GPIO_WritePin>
  /* Infinite loop */
  while (1)
  {
    /* -----------------------------------------------------------------------*/
    /* This is where the main self-test routines are executed */
    STL_DoRunTimeChecks();
 80023bc:	f000 fc7c 	bl	8002cb8 <STL_DoRunTimeChecks>
 80023c0:	e7fc      	b.n	80023bc <main+0x68>
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	08009f10 	.word	0x08009f10
 80023c8:	08009f28 	.word	0x08009f28
 80023cc:	08009f30 	.word	0x08009f30
 80023d0:	08009f48 	.word	0x08009f48
 80023d4:	08009f50 	.word	0x08009f50

080023d8 <NVIC_Configuration>:
  * @brief  NVIC configuration
  * @param :  None
  * @retval : None
  */
static void NVIC_Configuration(void)
{  
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <NVIC_Configuration+0x20>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	22fa      	movs	r2, #250	; 0xfa
 80023e2:	0091      	lsls	r1, r2, #2
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7fd feab 	bl	8000140 <__udivsi3>
 80023ea:	0003      	movs	r3, r0
 80023ec:	0018      	movs	r0, r3
 80023ee:	f002 f9da 	bl	80047a6 <HAL_SYSTICK_Config>
}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000080 	.word	0x20000080

080023fc <SystemClock_Config>:
  *            Main regulator output voltage  = Scale 1 mode
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b094      	sub	sp, #80	; 0x50
 8002400:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 8002402:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <SystemClock_Config+0xac>)
 8002404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002406:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <SystemClock_Config+0xac>)
 8002408:	2180      	movs	r1, #128	; 0x80
 800240a:	0549      	lsls	r1, r1, #21
 800240c:	430a      	orrs	r2, r1
 800240e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* The voltage scaling  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002410:	4b26      	ldr	r3, [pc, #152]	; (80024ac <SystemClock_Config+0xb0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a26      	ldr	r2, [pc, #152]	; (80024b0 <SystemClock_Config+0xb4>)
 8002416:	401a      	ands	r2, r3
 8002418:	4b24      	ldr	r3, [pc, #144]	; (80024ac <SystemClock_Config+0xb0>)
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	0109      	lsls	r1, r1, #4
 800241e:	430a      	orrs	r2, r1
 8002420:	601a      	str	r2, [r3, #0]

#ifdef HSE_CLOCK_APPLIED    
  /* Enable HSE Oscillator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	2201      	movs	r2, #1
 8002426:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	2202      	movs	r2, #2
 8002434:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	2280      	movs	r2, #128	; 0x80
 800243a:	0252      	lsls	r2, r2, #9
 800243c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	22c0      	movs	r2, #192	; 0xc0
 8002442:	0312      	lsls	r2, r2, #12
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	2280      	movs	r2, #128	; 0x80
 800244a:	03d2      	lsls	r2, r2, #15
 800244c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
#endif
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	0018      	movs	r0, r3
 8002452:	f002 fdd9 	bl	8005008 <HAL_RCC_OscConfig>
 8002456:	1e03      	subs	r3, r0, #0
 8002458:	d005      	beq.n	8002466 <SystemClock_Config+0x6a>
  {
    #ifdef STL_VERBOSE_POR
      printf("PLL Osc config failure\n\r");
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <SystemClock_Config+0xb8>)
 800245c:	0018      	movs	r0, r3
 800245e:	f005 fba9 	bl	8007bb4 <iprintf>
    #endif  /* STL_VERBOSE_POR */
    FailSafePOR();
 8002462:	f000 fddb 	bl	800301c <FailSafePOR>
  }
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002466:	213c      	movs	r1, #60	; 0x3c
 8002468:	187b      	adds	r3, r7, r1
 800246a:	220f      	movs	r2, #15
 800246c:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800246e:	187b      	adds	r3, r7, r1
 8002470:	2203      	movs	r2, #3
 8002472:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002474:	187b      	adds	r3, r7, r1
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 800247a:	187b      	adds	r3, r7, r1
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8002480:	187b      	adds	r3, r7, r1
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, MAX_FLASH_LATENCY) != HAL_OK)
 8002486:	187b      	adds	r3, r7, r1
 8002488:	2101      	movs	r1, #1
 800248a:	0018      	movs	r0, r3
 800248c:	f003 f980 	bl	8005790 <HAL_RCC_ClockConfig>
 8002490:	1e03      	subs	r3, r0, #0
 8002492:	d005      	beq.n	80024a0 <SystemClock_Config+0xa4>
  {
    #ifdef STL_VERBOSE_POR
      printf("PLL clock config failure\n\r");
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <SystemClock_Config+0xbc>)
 8002496:	0018      	movs	r0, r3
 8002498:	f005 fb8c 	bl	8007bb4 <iprintf>
    #endif  /* STL_VERBOSE_POR */
    FailSafePOR();
 800249c:	f000 fdbe 	bl	800301c <FailSafePOR>
  }
}
 80024a0:	46c0      	nop			; (mov r8, r8)
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b014      	add	sp, #80	; 0x50
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40007000 	.word	0x40007000
 80024b0:	ffffe7ff 	.word	0xffffe7ff
 80024b4:	08009f70 	.word	0x08009f70
 80024b8:	08009f8c 	.word	0x08009f8c

080024bc <StartUpClock_Config>:
  * @param  None
  * @retval None
  */

void StartUpClock_Config(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b094      	sub	sp, #80	; 0x50
 80024c0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 80024c2:	4b2a      	ldr	r3, [pc, #168]	; (800256c <StartUpClock_Config+0xb0>)
 80024c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024c6:	4b29      	ldr	r3, [pc, #164]	; (800256c <StartUpClock_Config+0xb0>)
 80024c8:	2180      	movs	r1, #128	; 0x80
 80024ca:	0549      	lsls	r1, r1, #21
 80024cc:	430a      	orrs	r2, r1
 80024ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* The voltage scaling  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024d0:	4b27      	ldr	r3, [pc, #156]	; (8002570 <StartUpClock_Config+0xb4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a27      	ldr	r2, [pc, #156]	; (8002574 <StartUpClock_Config+0xb8>)
 80024d6:	401a      	ands	r2, r3
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <StartUpClock_Config+0xb4>)
 80024da:	2180      	movs	r1, #128	; 0x80
 80024dc:	0109      	lsls	r1, r1, #4
 80024de:	430a      	orrs	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]
  
  /* Enable HSI Oscillator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	2202      	movs	r2, #2
 80024e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	2201      	movs	r2, #1
 80024ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	2202      	movs	r2, #2
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	2200      	movs	r2, #0
 80024f8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 0x10; /* !!! default HSI trimming value !!! */
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	2210      	movs	r2, #16
 80024fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	2280      	movs	r2, #128	; 0x80
 8002504:	02d2      	lsls	r2, r2, #11
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	03d2      	lsls	r2, r2, #15
 800250e:	635a      	str	r2, [r3, #52]	; 0x34
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	0018      	movs	r0, r3
 8002514:	f002 fd78 	bl	8005008 <HAL_RCC_OscConfig>
 8002518:	1e03      	subs	r3, r0, #0
 800251a:	d005      	beq.n	8002528 <StartUpClock_Config+0x6c>
  {
    #ifdef STL_VERBOSE_POR
      printf("PLL clock config failure\n\r");
 800251c:	4b16      	ldr	r3, [pc, #88]	; (8002578 <StartUpClock_Config+0xbc>)
 800251e:	0018      	movs	r0, r3
 8002520:	f005 fb48 	bl	8007bb4 <iprintf>
    #endif  /* STL_VERBOSE_POR */
    FailSafePOR();
 8002524:	f000 fd7a 	bl	800301c <FailSafePOR>
  }
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002528:	213c      	movs	r1, #60	; 0x3c
 800252a:	187b      	adds	r3, r7, r1
 800252c:	220f      	movs	r2, #15
 800252e:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002530:	187b      	adds	r3, r7, r1
 8002532:	2203      	movs	r2, #3
 8002534:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002536:	187b      	adds	r3, r7, r1
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 800253c:	187b      	adds	r3, r7, r1
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8002542:	187b      	adds	r3, r7, r1
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002548:	187b      	adds	r3, r7, r1
 800254a:	2101      	movs	r1, #1
 800254c:	0018      	movs	r0, r3
 800254e:	f003 f91f 	bl	8005790 <HAL_RCC_ClockConfig>
 8002552:	1e03      	subs	r3, r0, #0
 8002554:	d005      	beq.n	8002562 <StartUpClock_Config+0xa6>
  {
    #ifdef STL_VERBOSE_POR
      printf("PLL clock switch failure\n\r");
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <StartUpClock_Config+0xc0>)
 8002558:	0018      	movs	r0, r3
 800255a:	f005 fb2b 	bl	8007bb4 <iprintf>
    #endif  /* STL_VERBOSE_POR */
    FailSafePOR();
 800255e:	f000 fd5d 	bl	800301c <FailSafePOR>
  }
}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	46bd      	mov	sp, r7
 8002566:	b014      	add	sp, #80	; 0x50
 8002568:	bd80      	pop	{r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	40021000 	.word	0x40021000
 8002570:	40007000 	.word	0x40007000
 8002574:	ffffe7ff 	.word	0xffffe7ff
 8002578:	08009f8c 	.word	0x08009f8c
 800257c:	08009fa8 	.word	0x08009fa8

08002580 <Eval_Board_HW_Init>:
  * @brief  Initialization of evaluation board HW
  * @param :  None
  * @retval : None
  */
void Eval_Board_HW_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* init LED and monitoring signals on evaluation board -------------------*/
    BSP_LED_Init(LED_VLM);
 8002584:	2020      	movs	r0, #32
 8002586:	f000 f809 	bl	800259c <User_signal_Init>
    BSP_LED_Init(LED_NVM);
 800258a:	2040      	movs	r0, #64	; 0x40
 800258c:	f000 f806 	bl	800259c <User_signal_Init>
    BSP_LED_Init(LED_ERR);
 8002590:	2080      	movs	r0, #128	; 0x80
 8002592:	f000 f803 	bl	800259c <User_signal_Init>
}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <User_signal_Init>:
  * @brief  Initialization of evaluation board HW
  * @param :  None
  * @retval : None
  */
void User_signal_Init(uint16_t gpio_pin)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	0002      	movs	r2, r0
 80025a4:	1dbb      	adds	r3, r7, #6
 80025a6:	801a      	strh	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  __GPIOA_CLK_ENABLE();
 80025a8:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <User_signal_Init+0x58>)
 80025aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <User_signal_Init+0x58>)
 80025ae:	2101      	movs	r1, #1
 80025b0:	430a      	orrs	r2, r1
 80025b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <User_signal_Init+0x58>)
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	2201      	movs	r2, #1
 80025ba:	4013      	ands	r3, r2
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = gpio_pin;
 80025c0:	1dbb      	adds	r3, r7, #6
 80025c2:	881a      	ldrh	r2, [r3, #0]
 80025c4:	210c      	movs	r1, #12
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ca:	187b      	adds	r3, r7, r1
 80025cc:	2201      	movs	r2, #1
 80025ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d0:	187b      	adds	r3, r7, r1
 80025d2:	2201      	movs	r2, #1
 80025d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80025d6:	187b      	adds	r3, r7, r1
 80025d8:	2202      	movs	r2, #2
 80025da:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025dc:	187a      	adds	r2, r7, r1
 80025de:	23a0      	movs	r3, #160	; 0xa0
 80025e0:	05db      	lsls	r3, r3, #23
 80025e2:	0011      	movs	r1, r2
 80025e4:	0018      	movs	r0, r3
 80025e6:	f002 fb0f 	bl	8004c08 <HAL_GPIO_Init>
}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b008      	add	sp, #32
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	40021000 	.word	0x40021000

080025f8 <USART_Configuration>:
  * @brief  Configure the UART peripheral 
  * @param  None
  * @retval None
  */
void USART_Configuration(void)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b09f      	sub	sp, #124	; 0x7c
 80025fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable GPIO clock */
  __GPIOA_CLK_ENABLE();
 80025fe:	4b3d      	ldr	r3, [pc, #244]	; (80026f4 <USART_Configuration+0xfc>)
 8002600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002602:	4b3c      	ldr	r3, [pc, #240]	; (80026f4 <USART_Configuration+0xfc>)
 8002604:	2101      	movs	r1, #1
 8002606:	430a      	orrs	r2, r1
 8002608:	62da      	str	r2, [r3, #44]	; 0x2c
 800260a:	4b3a      	ldr	r3, [pc, #232]	; (80026f4 <USART_Configuration+0xfc>)
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	2201      	movs	r2, #1
 8002610:	4013      	ands	r3, r2
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
    
  /* Configure USART Tx as alternate function */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002616:	2464      	movs	r4, #100	; 0x64
 8002618:	193b      	adds	r3, r7, r4
 800261a:	2204      	movs	r2, #4
 800261c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	193b      	adds	r3, r7, r4
 8002620:	2202      	movs	r2, #2
 8002622:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002624:	193b      	adds	r3, r7, r4
 8002626:	2202      	movs	r2, #2
 8002628:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800262a:	193b      	adds	r3, r7, r4
 800262c:	2201      	movs	r2, #1
 800262e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002630:	193b      	adds	r3, r7, r4
 8002632:	2204      	movs	r2, #4
 8002634:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	193a      	adds	r2, r7, r4
 8002638:	23a0      	movs	r3, #160	; 0xa0
 800263a:	05db      	lsls	r3, r3, #23
 800263c:	0011      	movs	r1, r2
 800263e:	0018      	movs	r0, r3
 8002640:	f002 fae2 	bl	8004c08 <HAL_GPIO_Init>
  
  /* Configure USART Rx as alternate function */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002644:	193b      	adds	r3, r7, r4
 8002646:	2208      	movs	r2, #8
 8002648:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	193b      	adds	r3, r7, r4
 800264c:	2202      	movs	r2, #2
 800264e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002650:	193b      	adds	r3, r7, r4
 8002652:	2204      	movs	r2, #4
 8002654:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002656:	193a      	adds	r2, r7, r4
 8002658:	23a0      	movs	r3, #160	; 0xa0
 800265a:	05db      	lsls	r3, r3, #23
 800265c:	0011      	movs	r1, r2
 800265e:	0018      	movs	r0, r3
 8002660:	f002 fad2 	bl	8004c08 <HAL_GPIO_Init>
  
   /* Start high speed internal (HSI) oscillator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002664:	2108      	movs	r1, #8
 8002666:	187b      	adds	r3, r7, r1
 8002668:	2202      	movs	r2, #2
 800266a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800266c:	187b      	adds	r3, r7, r1
 800266e:	2201      	movs	r2, #1
 8002670:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002672:	187b      	adds	r3, r7, r1
 8002674:	2200      	movs	r2, #0
 8002676:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT; /* !!! 0x10 - default HSI trimming value !!! */
 8002678:	187b      	adds	r3, r7, r1
 800267a:	2210      	movs	r2, #16
 800267c:	611a      	str	r2, [r3, #16]
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800267e:	187b      	adds	r3, r7, r1
 8002680:	0018      	movs	r0, r3
 8002682:	f002 fcc1 	bl	8005008 <HAL_RCC_OscConfig>

   /* HSI feeds USART2 */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2; 
 8002686:	2140      	movs	r1, #64	; 0x40
 8002688:	187b      	adds	r3, r7, r1
 800268a:	2202      	movs	r2, #2
 800268c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 800268e:	187b      	adds	r3, r7, r1
 8002690:	2208      	movs	r2, #8
 8002692:	611a      	str	r2, [r3, #16]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002694:	187b      	adds	r3, r7, r1
 8002696:	0018      	movs	r0, r3
 8002698:	f003 fb30 	bl	8005cfc <HAL_RCCEx_PeriphCLKConfig>
  
  /* Enable USART clock */
  __USART2_CLK_ENABLE();
 800269c:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <USART_Configuration+0xfc>)
 800269e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <USART_Configuration+0xfc>)
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	0289      	lsls	r1, r1, #10
 80026a6:	430a      	orrs	r2, r1
 80026a8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* UART configuration */
  UartHandle.Instance = USART2;
 80026aa:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <USART_Configuration+0x100>)
 80026ac:	4a13      	ldr	r2, [pc, #76]	; (80026fc <USART_Configuration+0x104>)
 80026ae:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate   = 115200;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <USART_Configuration+0x100>)
 80026b2:	22e1      	movs	r2, #225	; 0xe1
 80026b4:	0252      	lsls	r2, r2, #9
 80026b6:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <USART_Configuration+0x100>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <USART_Configuration+0x100>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <USART_Configuration+0x100>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <USART_Configuration+0x100>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX;
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <USART_Configuration+0x100>)
 80026d2:	2208      	movs	r2, #8
 80026d4:	615a      	str	r2, [r3, #20]
  __HAL_UART_RESET_HANDLE_STATE(&UartHandle);
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <USART_Configuration+0x100>)
 80026d8:	2200      	movs	r2, #0
 80026da:	679a      	str	r2, [r3, #120]	; 0x78
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <USART_Configuration+0x100>)
 80026de:	2200      	movs	r2, #0
 80026e0:	67da      	str	r2, [r3, #124]	; 0x7c
  HAL_UART_Init(&UartHandle); 
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <USART_Configuration+0x100>)
 80026e4:	0018      	movs	r0, r3
 80026e6:	f003 ffd3 	bl	8006690 <HAL_UART_Init>
}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b01f      	add	sp, #124	; 0x7c
 80026f0:	bd90      	pop	{r4, r7, pc}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	40021000 	.word	0x40021000
 80026f8:	200002d0 	.word	0x200002d0
 80026fc:	40004400 	.word	0x40004400

08002700 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	0002      	movs	r2, r0
 8002708:	1dbb      	adds	r3, r7, #6
 800270a:	801a      	strh	r2, [r3, #0]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 10); /* 0xFFFF */
 800270c:	1db9      	adds	r1, r7, #6
 800270e:	4806      	ldr	r0, [pc, #24]	; (8002728 <__io_putchar+0x28>)
 8002710:	230a      	movs	r3, #10
 8002712:	2201      	movs	r2, #1
 8002714:	f004 f85a 	bl	80067cc <HAL_UART_Transmit>

  return ch;
 8002718:	1dbb      	adds	r3, r7, #6
 800271a:	2200      	movs	r2, #0
 800271c:	5e9b      	ldrsh	r3, [r3, r2]
}
 800271e:	0018      	movs	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	b002      	add	sp, #8
 8002724:	bd80      	pop	{r7, pc}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	200002d0 	.word	0x200002d0

0800272c <_write>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
int16_t _write(int16_t file, int8_t *ptr, int16_t len) {
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6039      	str	r1, [r7, #0]
 8002734:	0011      	movs	r1, r2
 8002736:	1dbb      	adds	r3, r7, #6
 8002738:	1c02      	adds	r2, r0, #0
 800273a:	801a      	strh	r2, [r3, #0]
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	1c0a      	adds	r2, r1, #0
 8002740:	801a      	strh	r2, [r3, #0]
	int16_t DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002742:	230e      	movs	r3, #14
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	2200      	movs	r2, #0
 8002748:	801a      	strh	r2, [r3, #0]
 800274a:	e011      	b.n	8002770 <_write+0x44>
		__io_putchar(*ptr++);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	603a      	str	r2, [r7, #0]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	b25b      	sxtb	r3, r3
 8002756:	b21b      	sxth	r3, r3
 8002758:	0018      	movs	r0, r3
 800275a:	f7ff ffd1 	bl	8002700 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800275e:	210e      	movs	r1, #14
 8002760:	187b      	adds	r3, r7, r1
 8002762:	2200      	movs	r2, #0
 8002764:	5e9b      	ldrsh	r3, [r3, r2]
 8002766:	b29b      	uxth	r3, r3
 8002768:	3301      	adds	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	187b      	adds	r3, r7, r1
 800276e:	801a      	strh	r2, [r3, #0]
 8002770:	230e      	movs	r3, #14
 8002772:	18fa      	adds	r2, r7, r3
 8002774:	1d3b      	adds	r3, r7, #4
 8002776:	2100      	movs	r1, #0
 8002778:	5e52      	ldrsh	r2, [r2, r1]
 800277a:	2100      	movs	r1, #0
 800277c:	5e5b      	ldrsh	r3, [r3, r1]
 800277e:	429a      	cmp	r2, r3
 8002780:	dbe4      	blt.n	800274c <_write+0x20>
	}
	return len;
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2200      	movs	r2, #0
 8002786:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b004      	add	sp, #16
 800278e:	bd80      	pop	{r7, pc}

08002790 <STL_MainClockTest>:
  * @retval : ClockStatus = (LSI_START_FAIL, HSE_START_FAIL,
  *   HSI_HSE_SWITCH_FAIL, TEST_ONGOING, EXT_SOURCE_FAIL,
  *   CLASS_B_VAR_FAIL, CTRL_FLOW_ERROR, FREQ_OK)
  */
ClockStatus STL_MainClockTest(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
  ClockStatus result = TEST_ONGOING; /* In case of unexpected exit */
 8002796:	1dfb      	adds	r3, r7, #7
 8002798:	2203      	movs	r2, #3
 800279a:	701a      	strb	r2, [r3, #0]

  CtrlFlowCnt += CLOCKPERIOD_TEST_CALLEE;
 800279c:	4b2a      	ldr	r3, [pc, #168]	; (8002848 <STL_MainClockTest+0xb8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	333d      	adds	r3, #61	; 0x3d
 80027a2:	001a      	movs	r2, r3
 80027a4:	4b28      	ldr	r3, [pc, #160]	; (8002848 <STL_MainClockTest+0xb8>)
 80027a6:	601a      	str	r2, [r3, #0]
   - all the following pairs of volatile variables are changed consistently at timer ISR only */
  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_suppress=Pm026              
  #endif /* __IAR_SYSTEMS_ICC__ */
  /* checking result of HSE measurement done at TIM5 interrupt */
  if (((PeriodValue ^ PeriodValueInv) == 0xFFFFFFFFuL)\
 80027a8:	4b28      	ldr	r3, [pc, #160]	; (800284c <STL_MainClockTest+0xbc>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b28      	ldr	r3, [pc, #160]	; (8002850 <STL_MainClockTest+0xc0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4053      	eors	r3, r2
 80027b2:	3301      	adds	r3, #1
 80027b4:	d139      	bne.n	800282a <STL_MainClockTest+0x9a>
  &&  ((LSIPeriodFlag ^ LSIPeriodFlagInv) == 0xFFFFFFFFuL)\
 80027b6:	4b27      	ldr	r3, [pc, #156]	; (8002854 <STL_MainClockTest+0xc4>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4b27      	ldr	r3, [pc, #156]	; (8002858 <STL_MainClockTest+0xc8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4053      	eors	r3, r2
 80027c0:	3301      	adds	r3, #1
 80027c2:	d132      	bne.n	800282a <STL_MainClockTest+0x9a>
  &&   (LSIPeriodFlag != 0u) )
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <STL_MainClockTest+0xc4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d02e      	beq.n	800282a <STL_MainClockTest+0x9a>
  #endif /* __IAR_SYSTEMS_ICC__ */
  /* ==============================================================================*/
   
  {
#ifdef HSE_CLOCK_APPLIED    
    if (PeriodValue < HSE_LimitLow(SYSTCLK_AT_RUN_HSE))
 80027cc:	4b1f      	ldr	r3, [pc, #124]	; (800284c <STL_MainClockTest+0xbc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a22      	ldr	r2, [pc, #136]	; (800285c <STL_MainClockTest+0xcc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d80e      	bhi.n	80027f4 <STL_MainClockTest+0x64>
#else
    if (PeriodValue < HSI_LimitLow(SYSTCLK_AT_RUN_HSI))
#endif
    {
      /* Switch back to internal clock */
      RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 80027d6:	4b22      	ldr	r3, [pc, #136]	; (8002860 <STL_MainClockTest+0xd0>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]
      RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <STL_MainClockTest+0xd0>)
 80027de:	2201      	movs	r2, #1
 80027e0:	605a      	str	r2, [r3, #4]
      HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <STL_MainClockTest+0xd0>)
 80027e4:	2100      	movs	r1, #0
 80027e6:	0018      	movs	r0, r3
 80027e8:	f002 ffd2 	bl	8005790 <HAL_RCC_ClockConfig>
      result = EXT_SOURCE_FAIL;	/* Sub-harmonics: HSE -25% below expected */
 80027ec:	1dfb      	adds	r3, r7, #7
 80027ee:	2204      	movs	r2, #4
 80027f0:	701a      	strb	r2, [r3, #0]
    if (PeriodValue < HSE_LimitLow(SYSTCLK_AT_RUN_HSE))
 80027f2:	e01d      	b.n	8002830 <STL_MainClockTest+0xa0>
    }
    else
    {
#ifdef HSE_CLOCK_APPLIED    
      if (PeriodValue > HSE_LimitHigh(SYSTCLK_AT_RUN_HSE))
 80027f4:	4b15      	ldr	r3, [pc, #84]	; (800284c <STL_MainClockTest+0xbc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1a      	ldr	r2, [pc, #104]	; (8002864 <STL_MainClockTest+0xd4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d90e      	bls.n	800281c <STL_MainClockTest+0x8c>
#else
      if (PeriodValue > HSI_LimitHigh(SYSTCLK_AT_RUN_HSI))
#endif
      {
        /* Switch back to internal clock */
        RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <STL_MainClockTest+0xd0>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]
        RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002804:	4b16      	ldr	r3, [pc, #88]	; (8002860 <STL_MainClockTest+0xd0>)
 8002806:	2201      	movs	r2, #1
 8002808:	605a      	str	r2, [r3, #4]
        HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <STL_MainClockTest+0xd0>)
 800280c:	2100      	movs	r1, #0
 800280e:	0018      	movs	r0, r3
 8002810:	f002 ffbe 	bl	8005790 <HAL_RCC_ClockConfig>
        result = EXT_SOURCE_FAIL;	/* Harmonics: HSE +25% above expected */
 8002814:	1dfb      	adds	r3, r7, #7
 8002816:	2204      	movs	r2, #4
 8002818:	701a      	strb	r2, [r3, #0]
    if (PeriodValue < HSE_LimitLow(SYSTCLK_AT_RUN_HSE))
 800281a:	e009      	b.n	8002830 <STL_MainClockTest+0xa0>
      }
      else
      {
        result = FREQ_OK;         /* Crystal or Resonator started correctly */        
 800281c:	1dfb      	adds	r3, r7, #7
 800281e:	220a      	movs	r2, #10
 8002820:	701a      	strb	r2, [r3, #0]
        /* clear flag here to ensure refresh LSI measurement result will be taken at next check */
        LSIPeriodFlag = 0u;
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <STL_MainClockTest+0xc4>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
    if (PeriodValue < HSE_LimitLow(SYSTCLK_AT_RUN_HSE))
 8002828:	e002      	b.n	8002830 <STL_MainClockTest+0xa0>
      } /* No harmonics */
    } /* No sub-harmonics */
  } /* Control Flow error */
  else
  {
    result = CLASS_B_VAR_FAIL;
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	2208      	movs	r2, #8
 800282e:	701a      	strb	r2, [r3, #0]
  }

  CtrlFlowCntInv -= CLOCKPERIOD_TEST_CALLEE;
 8002830:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <STL_MainClockTest+0xd8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3b3d      	subs	r3, #61	; 0x3d
 8002836:	001a      	movs	r2, r3
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <STL_MainClockTest+0xd8>)
 800283a:	601a      	str	r2, [r3, #0]

  return (result);
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	781b      	ldrb	r3, [r3, #0]
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000030 	.word	0x20000030
 800284c:	20000038 	.word	0x20000038
 8002850:	2000005c 	.word	0x2000005c
 8002854:	20000044 	.word	0x20000044
 8002858:	20000068 	.word	0x20000068
 800285c:	000013bb 	.word	0x000013bb
 8002860:	2000038c 	.word	0x2000038c
 8002864:	000020e4 	.word	0x000020e4
 8002868:	20000054 	.word	0x20000054

0800286c <STL_ClockStartUpTest>:
  * @param  : None
  * @retval : ClockStatus = (LSI_START_FAIL, HSE_START_FAIL,
  *   HSI_HSE_SWITCH_FAIL, XCROSS_CONFIG_FAIL, EXT_SOURCE_FAIL, FREQ_OK)
  */
ClockStatus STL_ClockStartUpTest(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
  ClockStatus clck_sts = TEST_ONGOING;
 8002872:	1dfb      	adds	r3, r7, #7
 8002874:	2203      	movs	r2, #3
 8002876:	701a      	strb	r2, [r3, #0]
  CtrlFlowCnt += CLOCK_TEST_CALLEE;
 8002878:	4b54      	ldr	r3, [pc, #336]	; (80029cc <STL_ClockStartUpTest+0x160>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	331d      	adds	r3, #29
 800287e:	001a      	movs	r2, r3
 8002880:	4b52      	ldr	r3, [pc, #328]	; (80029cc <STL_ClockStartUpTest+0x160>)
 8002882:	601a      	str	r2, [r3, #0]

  /* Start low speed internal (LSI) oscillator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI;
 8002884:	4b52      	ldr	r3, [pc, #328]	; (80029d0 <STL_ClockStartUpTest+0x164>)
 8002886:	2208      	movs	r2, #8
 8002888:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800288a:	4b51      	ldr	r3, [pc, #324]	; (80029d0 <STL_ClockStartUpTest+0x164>)
 800288c:	2201      	movs	r2, #1
 800288e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002890:	4b4f      	ldr	r3, [pc, #316]	; (80029d0 <STL_ClockStartUpTest+0x164>)
 8002892:	2200      	movs	r2, #0
 8002894:	629a      	str	r2, [r3, #40]	; 0x28
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002896:	4b4e      	ldr	r3, [pc, #312]	; (80029d0 <STL_ClockStartUpTest+0x164>)
 8002898:	0018      	movs	r0, r3
 800289a:	f002 fbb5 	bl	8005008 <HAL_RCC_OscConfig>
 800289e:	1e03      	subs	r3, r0, #0
 80028a0:	d002      	beq.n	80028a8 <STL_ClockStartUpTest+0x3c>
  {
    /* LSI clock fails */
    clck_sts = LSI_START_FAIL;
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
  }
  
#ifdef HSE_CLOCK_APPLIED  
  /* if LSI started OK - Start High-speed external oscillator (HSE) */
  if(clck_sts == TEST_ONGOING)
 80028a8:	1dfb      	adds	r3, r7, #7
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d112      	bne.n	80028d6 <STL_ClockStartUpTest+0x6a>
  {
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028b0:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <STL_ClockStartUpTest+0x164>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
    /* Use HSEState parameter RCC_HSE_BYPASS when external generator is applied */
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028b6:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <STL_ClockStartUpTest+0x164>)
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	0252      	lsls	r2, r2, #9
 80028bc:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80028be:	4b44      	ldr	r3, [pc, #272]	; (80029d0 <STL_ClockStartUpTest+0x164>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28
    if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028c4:	4b42      	ldr	r3, [pc, #264]	; (80029d0 <STL_ClockStartUpTest+0x164>)
 80028c6:	0018      	movs	r0, r3
 80028c8:	f002 fb9e 	bl	8005008 <HAL_RCC_OscConfig>
 80028cc:	1e03      	subs	r3, r0, #0
 80028ce:	d002      	beq.n	80028d6 <STL_ClockStartUpTest+0x6a>
    {
      /* HSE clock fails */
      clck_sts = HSE_START_FAIL;
 80028d0:	1dfb      	adds	r3, r7, #7
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
    }
  }
  
  /* if HSE started OK - enable CSS */
  if(clck_sts == TEST_ONGOING)
 80028d6:	1dfb      	adds	r3, r7, #7
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d111      	bne.n	8002902 <STL_ClockStartUpTest+0x96>
  {
    HAL_RCC_EnableCSS();
 80028de:	f003 f923 	bl	8005b28 <HAL_RCC_EnableCSS>
    /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
       clocks dividers */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 80028e2:	4b3c      	ldr	r3, [pc, #240]	; (80029d4 <STL_ClockStartUpTest+0x168>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80028e8:	4b3a      	ldr	r3, [pc, #232]	; (80029d4 <STL_ClockStartUpTest+0x168>)
 80028ea:	2202      	movs	r2, #2
 80028ec:	605a      	str	r2, [r3, #4]
    if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028ee:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <STL_ClockStartUpTest+0x168>)
 80028f0:	2100      	movs	r1, #0
 80028f2:	0018      	movs	r0, r3
 80028f4:	f002 ff4c 	bl	8005790 <HAL_RCC_ClockConfig>
 80028f8:	1e03      	subs	r3, r0, #0
 80028fa:	d002      	beq.n	8002902 <STL_ClockStartUpTest+0x96>
    {
      /* switch to HSE clock fails */
      clck_sts = HSI_HSE_SWITCH_FAIL;
 80028fc:	1dfb      	adds	r3, r7, #7
 80028fe:	2202      	movs	r2, #2
 8002900:	701a      	strb	r2, [r3, #0]
    }
  }
  
  /*-------------- Start Reference Measurement -------------------------------*/
  if(clck_sts == TEST_ONGOING)
 8002902:	1dfb      	adds	r3, r7, #7
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d12b      	bne.n	8002962 <STL_ClockStartUpTest+0xf6>
  {  
    /* Configure dedicated timer to measure LSI period */
    if(STL_InitClock_Xcross_Measurement() == ERROR)
 800290a:	f001 fbe3 	bl	80040d4 <STL_InitClock_Xcross_Measurement>
 800290e:	0003      	movs	r3, r0
 8002910:	2b01      	cmp	r3, #1
 8002912:	d103      	bne.n	800291c <STL_ClockStartUpTest+0xb0>
    {
      clck_sts = XCROSS_CONFIG_FAIL;
 8002914:	1dfb      	adds	r3, r7, #7
 8002916:	2205      	movs	r2, #5
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	e022      	b.n	8002962 <STL_ClockStartUpTest+0xf6>
    }
    else
    {   
      /* Wait for two subsequent LSI periods measurements */
      LSIPeriodFlag = 0u;
 800291c:	4b2e      	ldr	r3, [pc, #184]	; (80029d8 <STL_ClockStartUpTest+0x16c>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
      while (LSIPeriodFlag == 0u)
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	4b2c      	ldr	r3, [pc, #176]	; (80029d8 <STL_ClockStartUpTest+0x16c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0fb      	beq.n	8002924 <STL_ClockStartUpTest+0xb8>
      { }
      LSIPeriodFlag = 0u;
 800292c:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <STL_ClockStartUpTest+0x16c>)
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
      while (LSIPeriodFlag == 0u)
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <STL_ClockStartUpTest+0x16c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0fb      	beq.n	8002934 <STL_ClockStartUpTest+0xc8>
      { }

      /*-------------------- HSE measurement check -------------------------*/
      if (PeriodValue < HSE_LimitLow(HSE_VALUE))
 800293c:	4b27      	ldr	r3, [pc, #156]	; (80029dc <STL_ClockStartUpTest+0x170>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	23fc      	movs	r3, #252	; 0xfc
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	429a      	cmp	r2, r3
 8002946:	d203      	bcs.n	8002950 <STL_ClockStartUpTest+0xe4>
      {
        /* Sub-harmonics: HSE -25% below expected */
        clck_sts = EXT_SOURCE_FAIL;
 8002948:	1dfb      	adds	r3, r7, #7
 800294a:	2204      	movs	r2, #4
 800294c:	701a      	strb	r2, [r3, #0]
 800294e:	e008      	b.n	8002962 <STL_ClockStartUpTest+0xf6>
      }
      else if (PeriodValue > HSE_LimitHigh(HSE_VALUE))
 8002950:	4b22      	ldr	r3, [pc, #136]	; (80029dc <STL_ClockStartUpTest+0x170>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	23d2      	movs	r3, #210	; 0xd2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	429a      	cmp	r2, r3
 800295a:	d902      	bls.n	8002962 <STL_ClockStartUpTest+0xf6>
      {
        /* Harmonics: HSE +25% above expected */
        clck_sts = EXT_SOURCE_FAIL;
 800295c:	1dfb      	adds	r3, r7, #7
 800295e:	2204      	movs	r2, #4
 8002960:	701a      	strb	r2, [r3, #0]
    }
  }
#endif
  
  /* Switch back HSI internal clock at any case */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8002962:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <STL_ClockStartUpTest+0x168>)
 8002964:	2201      	movs	r2, #1
 8002966:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002968:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <STL_ClockStartUpTest+0x168>)
 800296a:	2201      	movs	r2, #1
 800296c:	605a      	str	r2, [r3, #4]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, MAX_FLASH_LATENCY) != HAL_OK)
 800296e:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <STL_ClockStartUpTest+0x168>)
 8002970:	2101      	movs	r1, #1
 8002972:	0018      	movs	r0, r3
 8002974:	f002 ff0c 	bl	8005790 <HAL_RCC_ClockConfig>
 8002978:	1e03      	subs	r3, r0, #0
 800297a:	d003      	beq.n	8002984 <STL_ClockStartUpTest+0x118>
  {
    /* switch to HSE clock fails */
    clck_sts = HSE_HSI_SWITCH_FAIL;
 800297c:	1dfb      	adds	r3, r7, #7
 800297e:	2206      	movs	r2, #6
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	e016      	b.n	80029b2 <STL_ClockStartUpTest+0x146>
  }
  else
  {
    /* Switch off PLL */
    RCC_OscInitStruct.OscillatorType = 0u;
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <STL_ClockStartUpTest+0x164>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_OFF;
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <STL_ClockStartUpTest+0x164>)
 800298c:	2201      	movs	r2, #1
 800298e:	629a      	str	r2, [r3, #40]	; 0x28
    if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <STL_ClockStartUpTest+0x164>)
 8002992:	0018      	movs	r0, r3
 8002994:	f002 fb38 	bl	8005008 <HAL_RCC_OscConfig>
 8002998:	1e03      	subs	r3, r0, #0
 800299a:	d003      	beq.n	80029a4 <STL_ClockStartUpTest+0x138>
    {
      /* PLL off fails */
      clck_sts = PLL_OFF_FAIL;
 800299c:	1dfb      	adds	r3, r7, #7
 800299e:	2207      	movs	r2, #7
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e006      	b.n	80029b2 <STL_ClockStartUpTest+0x146>
    }
    else
    {
      if(clck_sts == TEST_ONGOING)
 80029a4:	1dfb      	adds	r3, r7, #7
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d102      	bne.n	80029b2 <STL_ClockStartUpTest+0x146>
      {
        /* the test was finished correctly */
        clck_sts = FREQ_OK;
 80029ac:	1dfb      	adds	r3, r7, #7
 80029ae:	220a      	movs	r2, #10
 80029b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  
  CtrlFlowCntInv -= CLOCK_TEST_CALLEE;
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <STL_ClockStartUpTest+0x174>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3b1d      	subs	r3, #29
 80029b8:	001a      	movs	r2, r3
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <STL_ClockStartUpTest+0x174>)
 80029bc:	601a      	str	r2, [r3, #0]
  
  return(clck_sts);
 80029be:	1dfb      	adds	r3, r7, #7
 80029c0:	781b      	ldrb	r3, [r3, #0]
}
 80029c2:	0018      	movs	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b002      	add	sp, #8
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	20000030 	.word	0x20000030
 80029d0:	20000354 	.word	0x20000354
 80029d4:	2000038c 	.word	0x2000038c
 80029d8:	20000044 	.word	0x20000044
 80029dc:	20000038 	.word	0x20000038
 80029e0:	20000054 	.word	0x20000054

080029e4 <STL_FlashCrc32Init>:
  *   run-time
  * @param  : None
  * @retval : None
  */
void STL_FlashCrc32Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  pRunCrc32Chk = (uint32_t*)ROM_START;
 80029e8:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <STL_FlashCrc32Init+0x54>)
 80029ea:	2280      	movs	r2, #128	; 0x80
 80029ec:	0512      	lsls	r2, r2, #20
 80029ee:	601a      	str	r2, [r3, #0]
  pRunCrc32ChkInv = ((uint32_t *)(uint32_t)(~(uint32_t)(ROM_START)));
 80029f0:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <STL_FlashCrc32Init+0x58>)
 80029f2:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <STL_FlashCrc32Init+0x5c>)
 80029f4:	601a      	str	r2, [r3, #0]
  
  CrcHandle.Instance = CRC;
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <STL_FlashCrc32Init+0x60>)
 80029f8:	4a13      	ldr	r2, [pc, #76]	; (8002a48 <STL_FlashCrc32Init+0x64>)
 80029fa:	601a      	str	r2, [r3, #0]

  /* Reset CRC Calculation Unit */
  __HAL_CRC_DR_RESET(&CrcHandle);
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <STL_FlashCrc32Init+0x60>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <STL_FlashCrc32Init+0x60>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2101      	movs	r1, #1
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	609a      	str	r2, [r3, #8]

  #ifdef  CRC_UNIT_CONFIGURABLE
    CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_ENABLE;
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <STL_FlashCrc32Init+0x60>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	711a      	strb	r2, [r3, #4]
    CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_ENABLE;
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <STL_FlashCrc32Init+0x60>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	715a      	strb	r2, [r3, #5]
    CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 8002a18:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <STL_FlashCrc32Init+0x60>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	615a      	str	r2, [r3, #20]
    CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLED;
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <STL_FlashCrc32Init+0x60>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	619a      	str	r2, [r3, #24]
    CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_WORDS;
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <STL_FlashCrc32Init+0x60>)
 8002a26:	2203      	movs	r2, #3
 8002a28:	621a      	str	r2, [r3, #32]
  #endif
  HAL_CRC_Init(&CrcHandle);
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <STL_FlashCrc32Init+0x60>)
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f001 fec7 	bl	80047c0 <HAL_CRC_Init>
}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	2000004c 	.word	0x2000004c
 8002a3c:	20000070 	.word	0x20000070
 8002a40:	f7ffffff 	.word	0xf7ffffff
 8002a44:	2000029c 	.word	0x2000029c
 8002a48:	40023000 	.word	0x40023000

08002a4c <STL_crc32Run>:
  * @param  : None
  * @retval : ClassBTestStatus (TEST_RUNNING, CLASS_B_DATA_FAIL,
  *   TEST_FAILURE, TEST_OK)
  */
ClassBTestStatus STL_crc32Run(void)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
  ClassBTestStatus result = CTRL_FLW_ERROR; /* In case of abnormal func exit*/
 8002a52:	230f      	movs	r3, #15
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	2202      	movs	r2, #2
 8002a58:	701a      	strb	r2, [r3, #0]

  CtrlFlowCnt += CRC32_RUN_TEST_CALLEE;
 8002a5a:	4b4a      	ldr	r3, [pc, #296]	; (8002b84 <STL_crc32Run+0x138>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	333f      	adds	r3, #63	; 0x3f
 8002a60:	001a      	movs	r2, r3
 8002a62:	4b48      	ldr	r3, [pc, #288]	; (8002b84 <STL_crc32Run+0x138>)
 8002a64:	601a      	str	r2, [r3, #0]

  /* Check Class B var integrity */
  if ((((uint32_t)pRunCrc32Chk) ^ ((uint32_t)pRunCrc32ChkInv)) == 0xFFFFFFFFuL)
 8002a66:	4b48      	ldr	r3, [pc, #288]	; (8002b88 <STL_crc32Run+0x13c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	001a      	movs	r2, r3
 8002a6c:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <STL_crc32Run+0x140>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4053      	eors	r3, r2
 8002a72:	3301      	adds	r3, #1
 8002a74:	d000      	beq.n	8002a78 <STL_crc32Run+0x2c>
 8002a76:	e074      	b.n	8002b62 <STL_crc32Run+0x116>
  {
    if (pRunCrc32Chk < (uint32_t *)ROM_END)
 8002a78:	4b43      	ldr	r3, [pc, #268]	; (8002b88 <STL_crc32Run+0x13c>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b44      	ldr	r3, [pc, #272]	; (8002b90 <STL_crc32Run+0x144>)
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d247      	bcs.n	8002b12 <STL_crc32Run+0xc6>
   /* the next lines replaces the HAL function call
      HAL_CRC_Accumulate(&CrcHandle, (uint32_t *)pRunCrc32Chk, (uint32_t)FLASH_BLOCK_WORDS);
      due to bug at IAR linker - check sum computation can't support both big & little endian  */
  
      uint32_t index;
      for(index = 0; index < (uint32_t)FLASH_BLOCK_WORDS; index++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	e00d      	b.n	8002aa4 <STL_crc32Run+0x58>
      {
        CRC->DR = __REV(*(pRunCrc32Chk + index));
 8002a88:	4b3f      	ldr	r3, [pc, #252]	; (8002b88 <STL_crc32Run+0x13c>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	18d3      	adds	r3, r2, r3
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b3f      	ldr	r3, [pc, #252]	; (8002b94 <STL_crc32Run+0x148>)
 8002a96:	607a      	str	r2, [r7, #4]
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	ba12      	rev	r2, r2
 8002a9c:	601a      	str	r2, [r3, #0]
      for(index = 0; index < (uint32_t)FLASH_BLOCK_WORDS; index++)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	4b3a      	ldr	r3, [pc, #232]	; (8002b90 <STL_crc32Run+0x144>)
 8002aa6:	22f8      	movs	r2, #248	; 0xf8
 8002aa8:	0612      	lsls	r2, r2, #24
 8002aaa:	4694      	mov	ip, r2
 8002aac:	4463      	add	r3, ip
 8002aae:	089a      	lsrs	r2, r3, #2
 8002ab0:	4b37      	ldr	r3, [pc, #220]	; (8002b90 <STL_crc32Run+0x144>)
 8002ab2:	21f8      	movs	r1, #248	; 0xf8
 8002ab4:	0609      	lsls	r1, r1, #24
 8002ab6:	468c      	mov	ip, r1
 8002ab8:	4463      	add	r3, ip
 8002aba:	099b      	lsrs	r3, r3, #6
 8002abc:	0019      	movs	r1, r3
 8002abe:	0010      	movs	r0, r2
 8002ac0:	f7fd fb3e 	bl	8000140 <__udivsi3>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	001a      	movs	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d3dc      	bcc.n	8002a88 <STL_crc32Run+0x3c>
      }
      pRunCrc32Chk += FLASH_BLOCK_WORDS;     /* Increment pointer to next block */
 8002ace:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <STL_crc32Run+0x13c>)
 8002ad0:	681c      	ldr	r4, [r3, #0]
 8002ad2:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <STL_crc32Run+0x144>)
 8002ad4:	22f8      	movs	r2, #248	; 0xf8
 8002ad6:	0612      	lsls	r2, r2, #24
 8002ad8:	4694      	mov	ip, r2
 8002ada:	4463      	add	r3, ip
 8002adc:	089a      	lsrs	r2, r3, #2
 8002ade:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <STL_crc32Run+0x144>)
 8002ae0:	21f8      	movs	r1, #248	; 0xf8
 8002ae2:	0609      	lsls	r1, r1, #24
 8002ae4:	468c      	mov	ip, r1
 8002ae6:	4463      	add	r3, ip
 8002ae8:	099b      	lsrs	r3, r3, #6
 8002aea:	0019      	movs	r1, r3
 8002aec:	0010      	movs	r0, r2
 8002aee:	f7fd fb27 	bl	8000140 <__udivsi3>
 8002af2:	0003      	movs	r3, r0
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	18e2      	adds	r2, r4, r3
 8002af8:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <STL_crc32Run+0x13c>)
 8002afa:	601a      	str	r2, [r3, #0]
      pRunCrc32ChkInv = ((uint32_t *)~((uint32_t)pRunCrc32Chk));
 8002afc:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <STL_crc32Run+0x13c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	001a      	movs	r2, r3
 8002b04:	4b21      	ldr	r3, [pc, #132]	; (8002b8c <STL_crc32Run+0x140>)
 8002b06:	601a      	str	r2, [r3, #0]
      result = TEST_RUNNING;
 8002b08:	230f      	movs	r3, #15
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
 8002b10:	e02b      	b.n	8002b6a <STL_crc32Run+0x11e>
    }
    else
    {
      if ((RefCrc32 ^ RefCrc32Inv) == 0xFFFFFFFFuL)
 8002b12:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <STL_crc32Run+0x14c>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <STL_crc32Run+0x150>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4053      	eors	r3, r2
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	d11b      	bne.n	8002b58 <STL_crc32Run+0x10c>
      {
        CtrlFlowCnt += CRC32_INIT_CALLER;
 8002b20:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <STL_crc32Run+0x138>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	1dda      	adds	r2, r3, #7
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <STL_crc32Run+0x138>)
 8002b28:	601a      	str	r2, [r3, #0]
        if(CRC->DR == *(uint32_t *)(&REF_CRC32))
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <STL_crc32Run+0x148>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <STL_crc32Run+0x144>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d104      	bne.n	8002b40 <STL_crc32Run+0xf4>
        {
          result = TEST_OK;
 8002b36:	230f      	movs	r3, #15
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	e003      	b.n	8002b48 <STL_crc32Run+0xfc>
        }
        else
        {
          result = TEST_FAILURE;
 8002b40:	230f      	movs	r3, #15
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	2203      	movs	r2, #3
 8002b46:	701a      	strb	r2, [r3, #0]
        }
        STL_FlashCrc32Init(); /* Prepare next test (or redo it if this one failed) */
 8002b48:	f7ff ff4c 	bl	80029e4 <STL_FlashCrc32Init>
        
        CtrlFlowCntInv -= CRC32_INIT_CALLER;
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <STL_crc32Run+0x154>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	1fda      	subs	r2, r3, #7
 8002b52:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <STL_crc32Run+0x154>)
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e008      	b.n	8002b6a <STL_crc32Run+0x11e>
      }
      else /* Class B error on RefCrc32 */
      {
        result = CLASS_B_DATA_FAIL;
 8002b58:	230f      	movs	r3, #15
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
 8002b60:	e003      	b.n	8002b6a <STL_crc32Run+0x11e>
      }
    }
  }
  else  /* Class B error pRunCrc32Chk */
  {
    result = CLASS_B_DATA_FAIL;
 8002b62:	230f      	movs	r3, #15
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
  }

  CtrlFlowCntInv -= CRC32_RUN_TEST_CALLEE;
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <STL_crc32Run+0x154>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	3b3f      	subs	r3, #63	; 0x3f
 8002b70:	001a      	movs	r2, r3
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <STL_crc32Run+0x154>)
 8002b74:	601a      	str	r2, [r3, #0]

  return (result);
 8002b76:	230f      	movs	r3, #15
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	781b      	ldrb	r3, [r3, #0]

}
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b005      	add	sp, #20
 8002b82:	bd90      	pop	{r4, r7, pc}
 8002b84:	20000030 	.word	0x20000030
 8002b88:	2000004c 	.word	0x2000004c
 8002b8c:	20000070 	.word	0x20000070
 8002b90:	0800ad80 	.word	0x0800ad80
 8002b94:	40023000 	.word	0x40023000
 8002b98:	20000050 	.word	0x20000050
 8002b9c:	20000074 	.word	0x20000074
 8002ba0:	20000054 	.word	0x20000054

08002ba4 <STL_InitRunTimeChecks>:
  *   counterparts. Init also the Systick for clock frequency monitoring.
  * @param  : None
  * @retval : None
  */
void STL_InitRunTimeChecks(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
  uint32_t tout;
  
  /* Initialize variables for invariable memory check */
  STL_TranspMarchInit();
 8002baa:	f000 fe1f 	bl	80037ec <STL_TranspMarchInit>

  /* Init Class B variables required in main routine and SysTick interrupt
  service routine for timing purposes */
  TickCounter = 0u;
 8002bae:	4b35      	ldr	r3, [pc, #212]	; (8002c84 <STL_InitRunTimeChecks+0xe0>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
  TickCounterInv = 0xFFFFFFFFuL;
 8002bb4:	4b34      	ldr	r3, [pc, #208]	; (8002c88 <STL_InitRunTimeChecks+0xe4>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4252      	negs	r2, r2
 8002bba:	601a      	str	r2, [r3, #0]

  TimeBaseFlag = 0u;
 8002bbc:	4b33      	ldr	r3, [pc, #204]	; (8002c8c <STL_InitRunTimeChecks+0xe8>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
  TimeBaseFlagInv = 0xFFFFFFFFuL;
 8002bc2:	4b33      	ldr	r3, [pc, #204]	; (8002c90 <STL_InitRunTimeChecks+0xec>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	4252      	negs	r2, r2
 8002bc8:	601a      	str	r2, [r3, #0]

  LastCtrlFlowCnt = 0u;
 8002bca:	4b32      	ldr	r3, [pc, #200]	; (8002c94 <STL_InitRunTimeChecks+0xf0>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
  LastCtrlFlowCntInv = 0xFFFFFFFFuL;
 8002bd0:	4b31      	ldr	r3, [pc, #196]	; (8002c98 <STL_InitRunTimeChecks+0xf4>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	4252      	negs	r2, r2
 8002bd6:	601a      	str	r2, [r3, #0]
  init_control_flow();
 8002bd8:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <STL_InitRunTimeChecks+0xf8>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	4b2f      	ldr	r3, [pc, #188]	; (8002c9c <STL_InitRunTimeChecks+0xf8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	43da      	mvns	r2, r3
 8002be4:	4b2e      	ldr	r3, [pc, #184]	; (8002ca0 <STL_InitRunTimeChecks+0xfc>)
 8002be6:	601a      	str	r2, [r3, #0]

  /* Initialize variables for SysTick interrupt routine control flow monitoring */
  ISRCtrlFlowCnt = 0u;
 8002be8:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <STL_InitRunTimeChecks+0x100>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
  ISRCtrlFlowCntInv = 0xFFFFFFFFuL;
 8002bee:	4b2e      	ldr	r3, [pc, #184]	; (8002ca8 <STL_InitRunTimeChecks+0x104>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4252      	negs	r2, r2
 8002bf4:	601a      	str	r2, [r3, #0]

  /* Initialize SysTick to generate 1ms time base */
#ifdef HSE_CLOCK_APPLIED    
  if (HAL_SYSTICK_Config(SYSTCLK_AT_RUN_HSE/1000uL) != HAL_OK)
 8002bf6:	23fa      	movs	r3, #250	; 0xfa
 8002bf8:	01db      	lsls	r3, r3, #7
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f001 fdd3 	bl	80047a6 <HAL_SYSTICK_Config>
 8002c00:	1e03      	subs	r3, r0, #0
 8002c02:	d005      	beq.n	8002c10 <STL_InitRunTimeChecks+0x6c>
#else
  if (HAL_SYSTICK_Config(SYSTCLK_AT_RUN_HSI/1000uL) != HAL_OK)
#endif
  {
    #ifdef STL_VERBOSE_POR
      printf("Run time base init failure\n\r");
 8002c04:	4b29      	ldr	r3, [pc, #164]	; (8002cac <STL_InitRunTimeChecks+0x108>)
 8002c06:	0018      	movs	r0, r3
 8002c08:	f004 ffd4 	bl	8007bb4 <iprintf>
    #endif /* STL_VERBOSE_POR */
    FailSafePOR();
 8002c0c:	f000 fa06 	bl	800301c <FailSafePOR>
  }

  /* Initialize variables for invariable memory check */
  STL_FlashCrc32Init();
 8002c10:	f7ff fee8 	bl	80029e4 <STL_FlashCrc32Init>

  /* wait till HSE measurement is completed & check timer system */
  tout = HAL_GetTick() + 5u;
 8002c14:	f001 fcec 	bl	80045f0 <HAL_GetTick>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	3305      	adds	r3, #5
 8002c1c:	607b      	str	r3, [r7, #4]
  LSIPeriodFlag = 0u;
 8002c1e:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <STL_InitRunTimeChecks+0x10c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
  /* MISRA violation of rule 12.4, 12.5 - "&&" operand can't contain side effects 
    and shall be primary expressions  */
  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_suppress= Pm026,Pm027              
  #endif /* __IAR_SYSTEMS_ICC__ */
  while ( LSIPeriodFlag == 0u  &&  HAL_GetTick() < tout )
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <STL_InitRunTimeChecks+0x10c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d105      	bne.n	8002c3a <STL_InitRunTimeChecks+0x96>
 8002c2e:	f001 fcdf 	bl	80045f0 <HAL_GetTick>
 8002c32:	0002      	movs	r2, r0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d8f5      	bhi.n	8002c26 <STL_InitRunTimeChecks+0x82>
  { }
  LSIPeriodFlag = 0u;
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <STL_InitRunTimeChecks+0x10c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
  while ( LSIPeriodFlag == 0u  &&  HAL_GetTick() < tout )
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <STL_InitRunTimeChecks+0x10c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d105      	bne.n	8002c56 <STL_InitRunTimeChecks+0xb2>
 8002c4a:	f001 fcd1 	bl	80045f0 <HAL_GetTick>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d8f5      	bhi.n	8002c42 <STL_InitRunTimeChecks+0x9e>
  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_default= Pm026,Pm027
  #endif /* __IAR_SYSTEMS_ICC__ */
  /* ==============================================================================*/

  if(HAL_GetTick() >= tout)
 8002c56:	f001 fccb 	bl	80045f0 <HAL_GetTick>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d805      	bhi.n	8002c6e <STL_InitRunTimeChecks+0xca>
  {
    #ifdef STL_VERBOSE_POR
      printf("Run time clock measurement failure\n\r");
 8002c62:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <STL_InitRunTimeChecks+0x110>)
 8002c64:	0018      	movs	r0, r3
 8002c66:	f004 ffa5 	bl	8007bb4 <iprintf>
    #endif /* STL_VERBOSE_POR */
    FailSafePOR();
 8002c6a:	f000 f9d7 	bl	800301c <FailSafePOR>
  }
    
  /* Initialize variables for main routine control flow monitoring */
  CtrlFlowCnt = 0u;
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <STL_InitRunTimeChecks+0xf8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
  CtrlFlowCntInv = 0xFFFFFFFFuL;
 8002c74:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <STL_InitRunTimeChecks+0xfc>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	4252      	negs	r2, r2
 8002c7a:	601a      	str	r2, [r3, #0]
      printf(" WWDG init Error\n\r");
    #endif  /* STL_VERBOSE */
    FailSafePOR();
  }
#endif /* USE_WINDOW_WDOG */ 
}
 8002c7c:	46c0      	nop			; (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b002      	add	sp, #8
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	2000003c 	.word	0x2000003c
 8002c88:	20000060 	.word	0x20000060
 8002c8c:	20000040 	.word	0x20000040
 8002c90:	20000064 	.word	0x20000064
 8002c94:	20000048 	.word	0x20000048
 8002c98:	2000006c 	.word	0x2000006c
 8002c9c:	20000030 	.word	0x20000030
 8002ca0:	20000054 	.word	0x20000054
 8002ca4:	20000034 	.word	0x20000034
 8002ca8:	20000058 	.word	0x20000058
 8002cac:	08009fc4 	.word	0x08009fc4
 8002cb0:	20000044 	.word	0x20000044
 8002cb4:	08009fe4 	.word	0x08009fe4

08002cb8 <STL_DoRunTimeChecks>:
  *         (can be divided into more separated segments if necessary)
  * @param  : None
  * @retval : None
  */
void STL_DoRunTimeChecks(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
  uint32_t rom_test;
  
  /* Is the time base duration elapsed? */
  if (TimeBaseFlag == 0xAAAAAAAAuL)
 8002cbe:	4b98      	ldr	r3, [pc, #608]	; (8002f20 <STL_DoRunTimeChecks+0x268>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a98      	ldr	r2, [pc, #608]	; (8002f24 <STL_DoRunTimeChecks+0x26c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d000      	beq.n	8002cca <STL_DoRunTimeChecks+0x12>
 8002cc8:	e126      	b.n	8002f18 <STL_DoRunTimeChecks+0x260>
  {
    /* Toggle LED_Non Volatile Memory */
    #if defined STL_EVAL_MODE
      BSP_LED_Toggle(LED_NVM);
 8002cca:	23a0      	movs	r3, #160	; 0xa0
 8002ccc:	05db      	lsls	r3, r3, #23
 8002cce:	2140      	movs	r1, #64	; 0x40
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f002 f92c 	bl	8004f2e <HAL_GPIO_TogglePin>
    #endif  /* STL_EVAL_MODE */
      
    /* Verification of TimeBaseFlag integrity */
    /* The following pair of volatile variables is changed consistently at Systick ISR only */
    if ((TimeBaseFlag ^ TimeBaseFlagInv) == 0xFFFFFFFFuL)
 8002cd6:	4b92      	ldr	r3, [pc, #584]	; (8002f20 <STL_DoRunTimeChecks+0x268>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4b93      	ldr	r3, [pc, #588]	; (8002f28 <STL_DoRunTimeChecks+0x270>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4053      	eors	r3, r2
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	d000      	beq.n	8002ce6 <STL_DoRunTimeChecks+0x2e>
 8002ce4:	e10c      	b.n	8002f00 <STL_DoRunTimeChecks+0x248>
    {
      TimeBaseFlag = 0u;
 8002ce6:	4b8e      	ldr	r3, [pc, #568]	; (8002f20 <STL_DoRunTimeChecks+0x268>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
    
      /*----------------------------------------------------------------------*/
      /*---------------------------- CPU registers ----------------------------*/
      /*----------------------------------------------------------------------*/
      control_flow_call(CPU_TEST_CALLER);
 8002cec:	4b8f      	ldr	r3, [pc, #572]	; (8002f2c <STL_DoRunTimeChecks+0x274>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	1c9a      	adds	r2, r3, #2
 8002cf2:	4b8e      	ldr	r3, [pc, #568]	; (8002f2c <STL_DoRunTimeChecks+0x274>)
 8002cf4:	601a      	str	r2, [r3, #0]
      
      if (STL_RunTimeCPUTest() != CPUTEST_SUCCESS)
 8002cf6:	f000 fed3 	bl	8003aa0 <STL_RunTimeCPUTest>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d006      	beq.n	8002d0e <STL_DoRunTimeChecks+0x56>
      {
        #ifdef STL_VERBOSE
          printf("Run-time CPU Test Failure\n\r");
 8002d00:	4b8b      	ldr	r3, [pc, #556]	; (8002f30 <STL_DoRunTimeChecks+0x278>)
 8002d02:	0018      	movs	r0, r3
 8002d04:	f004 ff56 	bl	8007bb4 <iprintf>
        #endif /* STL_VERBOSE */
        FailSafePOR();
 8002d08:	f000 f988 	bl	800301c <FailSafePOR>
 8002d0c:	e004      	b.n	8002d18 <STL_DoRunTimeChecks+0x60>
      }
      else
      {
        control_flow_resume(CPU_TEST_CALLER);
 8002d0e:	4b89      	ldr	r3, [pc, #548]	; (8002f34 <STL_DoRunTimeChecks+0x27c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	1e9a      	subs	r2, r3, #2
 8002d14:	4b87      	ldr	r3, [pc, #540]	; (8002f34 <STL_DoRunTimeChecks+0x27c>)
 8002d16:	601a      	str	r2, [r3, #0]
      }
  
      /*----------------------------------------------------------------------*/
      /*------------------------- Stack overflow -----------------------------*/
      /*----------------------------------------------------------------------*/
      control_flow_call(STACK_OVERFLOW_TEST);
 8002d18:	4b84      	ldr	r3, [pc, #528]	; (8002f2c <STL_DoRunTimeChecks+0x274>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3335      	adds	r3, #53	; 0x35
 8002d1e:	001a      	movs	r2, r3
 8002d20:	4b82      	ldr	r3, [pc, #520]	; (8002f2c <STL_DoRunTimeChecks+0x274>)
 8002d22:	601a      	str	r2, [r3, #0]
      
      if (STL_CheckStack() != SUCCESS)
 8002d24:	f000 f922 	bl	8002f6c <STL_CheckStack>
 8002d28:	1e03      	subs	r3, r0, #0
 8002d2a:	d006      	beq.n	8002d3a <STL_DoRunTimeChecks+0x82>
      {
        #ifdef STL_VERBOSE
          printf("Stack overflow\n\r");
 8002d2c:	4b82      	ldr	r3, [pc, #520]	; (8002f38 <STL_DoRunTimeChecks+0x280>)
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f004 ff40 	bl	8007bb4 <iprintf>
        #endif /* STL_VERBOSE */
        FailSafePOR();
 8002d34:	f000 f972 	bl	800301c <FailSafePOR>
 8002d38:	e005      	b.n	8002d46 <STL_DoRunTimeChecks+0x8e>
      }
      else
      {
        control_flow_resume(STACK_OVERFLOW_TEST);
 8002d3a:	4b7e      	ldr	r3, [pc, #504]	; (8002f34 <STL_DoRunTimeChecks+0x27c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3b35      	subs	r3, #53	; 0x35
 8002d40:	001a      	movs	r2, r3
 8002d42:	4b7c      	ldr	r3, [pc, #496]	; (8002f34 <STL_DoRunTimeChecks+0x27c>)
 8002d44:	601a      	str	r2, [r3, #0]
      }
      
      /*----------------------------------------------------------------------*/
      /*------------------------- Clock monitoring ---------------------------*/
      /*----------------------------------------------------------------------*/
      control_flow_call(CLOCK_TEST_CALLER);
 8002d46:	4b79      	ldr	r3, [pc, #484]	; (8002f2c <STL_DoRunTimeChecks+0x274>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3317      	adds	r3, #23
 8002d4c:	001a      	movs	r2, r3
 8002d4e:	4b77      	ldr	r3, [pc, #476]	; (8002f2c <STL_DoRunTimeChecks+0x274>)
 8002d50:	601a      	str	r2, [r3, #0]
      
      switch ( STL_MainClockTest() )
 8002d52:	f7ff fd1d 	bl	8002790 <STL_MainClockTest>
 8002d56:	0003      	movs	r3, r0
 8002d58:	2b0a      	cmp	r3, #10
 8002d5a:	d005      	beq.n	8002d68 <STL_DoRunTimeChecks+0xb0>
 8002d5c:	dc3f      	bgt.n	8002dde <STL_DoRunTimeChecks+0x126>
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d009      	beq.n	8002d76 <STL_DoRunTimeChecks+0xbe>
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d034      	beq.n	8002dd0 <STL_DoRunTimeChecks+0x118>
 8002d66:	e03a      	b.n	8002dde <STL_DoRunTimeChecks+0x126>
      {
        case FREQ_OK:
          control_flow_resume(CLOCK_TEST_CALLER);
 8002d68:	4b72      	ldr	r3, [pc, #456]	; (8002f34 <STL_DoRunTimeChecks+0x27c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3b17      	subs	r3, #23
 8002d6e:	001a      	movs	r2, r3
 8002d70:	4b70      	ldr	r3, [pc, #448]	; (8002f34 <STL_DoRunTimeChecks+0x27c>)
 8002d72:	601a      	str	r2, [r3, #0]
          break;
 8002d74:	e03a      	b.n	8002dec <STL_DoRunTimeChecks+0x134>
  
        case EXT_SOURCE_FAIL:
          #ifdef STL_VERBOSE
            /* finish communication flow prior system clock change */
            UartHandle.Instance = USARTx;
 8002d76:	4b71      	ldr	r3, [pc, #452]	; (8002f3c <STL_DoRunTimeChecks+0x284>)
 8002d78:	4a71      	ldr	r2, [pc, #452]	; (8002f40 <STL_DoRunTimeChecks+0x288>)
 8002d7a:	601a      	str	r2, [r3, #0]
            while (HAL_UART_GetState(&UartHandle) == HAL_UART_STATE_BUSY_TX)
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	4b6f      	ldr	r3, [pc, #444]	; (8002f3c <STL_DoRunTimeChecks+0x284>)
 8002d80:	0018      	movs	r0, r3
 8002d82:	f003 fdcb 	bl	800691c <HAL_UART_GetState>
 8002d86:	0003      	movs	r3, r0
 8002d88:	2b21      	cmp	r3, #33	; 0x21
 8002d8a:	d0f8      	beq.n	8002d7e <STL_DoRunTimeChecks+0xc6>
            { }
            /* Re-init communication channel with modified clock setting */
            HAL_UART_DeInit(&UartHandle);
 8002d8c:	4b6b      	ldr	r3, [pc, #428]	; (8002f3c <STL_DoRunTimeChecks+0x284>)
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f003 fcd2 	bl	8006738 <HAL_UART_DeInit>
            UartHandle.Init.BaudRate   = 115200;
 8002d94:	4b69      	ldr	r3, [pc, #420]	; (8002f3c <STL_DoRunTimeChecks+0x284>)
 8002d96:	22e1      	movs	r2, #225	; 0xe1
 8002d98:	0252      	lsls	r2, r2, #9
 8002d9a:	605a      	str	r2, [r3, #4]
            UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002d9c:	4b67      	ldr	r3, [pc, #412]	; (8002f3c <STL_DoRunTimeChecks+0x284>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
            UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002da2:	4b66      	ldr	r3, [pc, #408]	; (8002f3c <STL_DoRunTimeChecks+0x284>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	60da      	str	r2, [r3, #12]
            UartHandle.Init.Parity     = UART_PARITY_NONE;
 8002da8:	4b64      	ldr	r3, [pc, #400]	; (8002f3c <STL_DoRunTimeChecks+0x284>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	611a      	str	r2, [r3, #16]
            UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002dae:	4b63      	ldr	r3, [pc, #396]	; (8002f3c <STL_DoRunTimeChecks+0x284>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	619a      	str	r2, [r3, #24]
            UartHandle.Init.Mode       = UART_MODE_TX;
 8002db4:	4b61      	ldr	r3, [pc, #388]	; (8002f3c <STL_DoRunTimeChecks+0x284>)
 8002db6:	2208      	movs	r2, #8
 8002db8:	615a      	str	r2, [r3, #20]
            HAL_UART_Init(&UartHandle);
 8002dba:	4b60      	ldr	r3, [pc, #384]	; (8002f3c <STL_DoRunTimeChecks+0x284>)
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f003 fc67 	bl	8006690 <HAL_UART_Init>
            printf("\n\r Clock Source failure (Run-time)\n\r");
 8002dc2:	4b60      	ldr	r3, [pc, #384]	; (8002f44 <STL_DoRunTimeChecks+0x28c>)
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f004 fef5 	bl	8007bb4 <iprintf>
          #endif /* STL_VERBOSE */
          FailSafePOR();
 8002dca:	f000 f927 	bl	800301c <FailSafePOR>
          break;
 8002dce:	e00d      	b.n	8002dec <STL_DoRunTimeChecks+0x134>
  
        case CLASS_B_VAR_FAIL:
          #ifdef STL_VERBOSE
            printf("\n\r Class B variable error (clock test)\n\r");
 8002dd0:	4b5d      	ldr	r3, [pc, #372]	; (8002f48 <STL_DoRunTimeChecks+0x290>)
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f004 feee 	bl	8007bb4 <iprintf>
          #endif /* STL_VERBOSE */
          FailSafePOR();
 8002dd8:	f000 f920 	bl	800301c <FailSafePOR>
          break;
 8002ddc:	e006      	b.n	8002dec <STL_DoRunTimeChecks+0x134>
        case HSI_HSE_SWITCH_FAIL:
        case TEST_ONGOING:
        case CTRL_FLOW_ERROR:
        default:
          #ifdef STL_VERBOSE
            printf("Abnormal Clock Test routine termination \n\r");
 8002dde:	4b5b      	ldr	r3, [pc, #364]	; (8002f4c <STL_DoRunTimeChecks+0x294>)
 8002de0:	0018      	movs	r0, r3
 8002de2:	f004 fee7 	bl	8007bb4 <iprintf>
          #endif  /* STL_VERBOSE */
          FailSafePOR();
 8002de6:	f000 f919 	bl	800301c <FailSafePOR>
          break;
 8002dea:	46c0      	nop			; (mov r8, r8)
  
  
      /*----------------------------------------------------------------------*/
      /*------------------ Invariable memory CRC check -----------------------*/
      /*----------------------------------------------------------------------*/
      control_flow_call(FLASH_TEST_CALLER);
 8002dec:	4b4f      	ldr	r3, [pc, #316]	; (8002f2c <STL_DoRunTimeChecks+0x274>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	333f      	adds	r3, #63	; 0x3f
 8002df2:	001a      	movs	r2, r3
 8002df4:	4b4d      	ldr	r3, [pc, #308]	; (8002f2c <STL_DoRunTimeChecks+0x274>)
 8002df6:	601a      	str	r2, [r3, #0]
			
      rom_test = STL_crc32Run();  /* Requires the control flow check to be modified */
 8002df8:	f7ff fe28 	bl	8002a4c <STL_crc32Run>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	607b      	str	r3, [r7, #4]
      switch ( rom_test )
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <STL_DoRunTimeChecks+0x156>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d007      	beq.n	8002e1c <STL_DoRunTimeChecks+0x164>
 8002e0c:	e016      	b.n	8002e3c <STL_DoRunTimeChecks+0x184>
      {
        case TEST_RUNNING:
            control_flow_resume(FLASH_TEST_CALLER);
 8002e0e:	4b49      	ldr	r3, [pc, #292]	; (8002f34 <STL_DoRunTimeChecks+0x27c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3b3f      	subs	r3, #63	; 0x3f
 8002e14:	001a      	movs	r2, r3
 8002e16:	4b47      	ldr	r3, [pc, #284]	; (8002f34 <STL_DoRunTimeChecks+0x27c>)
 8002e18:	601a      	str	r2, [r3, #0]
          break;
 8002e1a:	e016      	b.n	8002e4a <STL_DoRunTimeChecks+0x192>
          #ifdef STL_VERBOSE
            /* avoid any long string output here, '*' just marks the flash test completed ok */
            #ifndef __GNUC__
              putchar((int16_t)'*');
            #else
              __io_putchar((int16_t)'*');
 8002e1c:	202a      	movs	r0, #42	; 0x2a
 8002e1e:	f7ff fc6f 	bl	8002700 <__io_putchar>
            #endif /* __GNUC__ */
          #endif /* STL_VERBOSE */
          #if defined STL_EVAL_MODE
            /* Toggle LED_NVM for debug purpose */
            BSP_LED_Toggle(LED_NVM);
 8002e22:	23a0      	movs	r3, #160	; 0xa0
 8002e24:	05db      	lsls	r3, r3, #23
 8002e26:	2140      	movs	r1, #64	; 0x40
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f002 f880 	bl	8004f2e <HAL_GPIO_TogglePin>
          #endif  /* STL_EVAL_MODE */
          #if defined(STL_EVAL_LCD)
            ++MyFLASHCounter;
          #endif /* STL_EVAL_LCD */
          CtrlFlowCntInv -= FLASH_TEST_CALLER;
 8002e2e:	4b41      	ldr	r3, [pc, #260]	; (8002f34 <STL_DoRunTimeChecks+0x27c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3b3f      	subs	r3, #63	; 0x3f
 8002e34:	001a      	movs	r2, r3
 8002e36:	4b3f      	ldr	r3, [pc, #252]	; (8002f34 <STL_DoRunTimeChecks+0x27c>)
 8002e38:	601a      	str	r2, [r3, #0]
          break;
 8002e3a:	e006      	b.n	8002e4a <STL_DoRunTimeChecks+0x192>
  
        case TEST_FAILURE:
        case CLASS_B_DATA_FAIL:
        default:
          #ifdef STL_VERBOSE
            printf(" Run-time FLASH CRC Error\n\r");
 8002e3c:	4b44      	ldr	r3, [pc, #272]	; (8002f50 <STL_DoRunTimeChecks+0x298>)
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f004 feb8 	bl	8007bb4 <iprintf>
          #endif  /* STL_VERBOSE */
          FailSafePOR();
 8002e44:	f000 f8ea 	bl	800301c <FailSafePOR>
          break;
 8002e48:	46c0      	nop			; (mov r8, r8)
          #endif  /* STL_VERBOSE */
          FailSafePOR();
        }
      #endif /* USE_INDEPENDENT_WDOG */
  
      if (((CtrlFlowCnt ^ CtrlFlowCntInv) == 0xFFFFFFFFuL)
 8002e4a:	4b38      	ldr	r3, [pc, #224]	; (8002f2c <STL_DoRunTimeChecks+0x274>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <STL_DoRunTimeChecks+0x27c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4053      	eors	r3, r2
 8002e54:	3301      	adds	r3, #1
 8002e56:	d14c      	bne.n	8002ef2 <STL_DoRunTimeChecks+0x23a>
        &&((LastCtrlFlowCnt ^ LastCtrlFlowCntInv) == 0xFFFFFFFFuL))
 8002e58:	4b3e      	ldr	r3, [pc, #248]	; (8002f54 <STL_DoRunTimeChecks+0x29c>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b3e      	ldr	r3, [pc, #248]	; (8002f58 <STL_DoRunTimeChecks+0x2a0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4053      	eors	r3, r2
 8002e62:	3301      	adds	r3, #1
 8002e64:	d145      	bne.n	8002ef2 <STL_DoRunTimeChecks+0x23a>
      {
        if (rom_test == TEST_OK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d12a      	bne.n	8002ec2 <STL_DoRunTimeChecks+0x20a>
          /* ==============================================================================*/
          /* MISRA violation of rule 11.4,17.4 - pointer arithmetic & casting has is used */
          #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
            #pragma diag_suppress=Pm088,Pm141
          #endif /* __IAR_SYSTEMS_ICC__ */
          if ((CtrlFlowCnt == FULL_FLASH_CHECKED) 
 8002e6c:	4b2f      	ldr	r3, [pc, #188]	; (8002f2c <STL_DoRunTimeChecks+0x274>)
 8002e6e:	6819      	ldr	r1, [r3, #0]
 8002e70:	4b3a      	ldr	r3, [pc, #232]	; (8002f5c <STL_DoRunTimeChecks+0x2a4>)
 8002e72:	22f8      	movs	r2, #248	; 0xf8
 8002e74:	0612      	lsls	r2, r2, #24
 8002e76:	4694      	mov	ip, r2
 8002e78:	4463      	add	r3, ip
 8002e7a:	099a      	lsrs	r2, r3, #6
 8002e7c:	0013      	movs	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	189b      	adds	r3, r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	189b      	adds	r3, r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	334f      	adds	r3, #79	; 0x4f
 8002e8c:	33ff      	adds	r3, #255	; 0xff
 8002e8e:	4299      	cmp	r1, r3
 8002e90:	d110      	bne.n	8002eb4 <STL_DoRunTimeChecks+0x1fc>
            && ((CtrlFlowCnt - LastCtrlFlowCnt) == (LAST_DELTA_MAIN)))
 8002e92:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <STL_DoRunTimeChecks+0x274>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4b2f      	ldr	r3, [pc, #188]	; (8002f54 <STL_DoRunTimeChecks+0x29c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	1ad2      	subs	r2, r2, r3
 8002e9c:	23a7      	movs	r3, #167	; 0xa7
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d107      	bne.n	8002eb4 <STL_DoRunTimeChecks+0x1fc>
          #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
            #pragma diag_default=Pm088,Pm141
          #endif /* __IAR_SYSTEMS_ICC__ */
          /* ==============================================================================*/
          {
            CtrlFlowCnt = 0u;
 8002ea4:	4b21      	ldr	r3, [pc, #132]	; (8002f2c <STL_DoRunTimeChecks+0x274>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
            CtrlFlowCntInv = 0xFFFFFFFFuL;
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <STL_DoRunTimeChecks+0x27c>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	4252      	negs	r2, r2
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	e015      	b.n	8002ee0 <STL_DoRunTimeChecks+0x228>
          }
          else  /* Return value form crc check was corrupted */
          {
            #ifdef STL_VERBOSE
              printf("Control Flow Error (main loop, Flash CRC)\n\r");
 8002eb4:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <STL_DoRunTimeChecks+0x2a8>)
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f004 fe7c 	bl	8007bb4 <iprintf>
            #endif  /* STL_VERBOSE */
            FailSafePOR();
 8002ebc:	f000 f8ae 	bl	800301c <FailSafePOR>
 8002ec0:	e00e      	b.n	8002ee0 <STL_DoRunTimeChecks+0x228>
          }
        }
        else  /* Flash test not completed yet */
        {
          if ((CtrlFlowCnt - LastCtrlFlowCnt) != DELTA_MAIN)
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <STL_DoRunTimeChecks+0x274>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <STL_DoRunTimeChecks+0x29c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	1ad2      	subs	r2, r2, r3
 8002ecc:	2348      	movs	r3, #72	; 0x48
 8002ece:	33ff      	adds	r3, #255	; 0xff
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d005      	beq.n	8002ee0 <STL_DoRunTimeChecks+0x228>
          {
            #ifdef STL_VERBOSE
              printf("Control Flow Error (main loop, Flash CRC on-going)\n\r");
 8002ed4:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <STL_DoRunTimeChecks+0x2ac>)
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f004 fe6c 	bl	8007bb4 <iprintf>
            #endif  /* STL_VERBOSE */
            FailSafePOR();
 8002edc:	f000 f89e 	bl	800301c <FailSafePOR>
          }
        }
  
        LastCtrlFlowCnt = CtrlFlowCnt;
 8002ee0:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <STL_DoRunTimeChecks+0x274>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <STL_DoRunTimeChecks+0x29c>)
 8002ee6:	601a      	str	r2, [r3, #0]
        LastCtrlFlowCntInv = CtrlFlowCntInv;
 8002ee8:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <STL_DoRunTimeChecks+0x27c>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <STL_DoRunTimeChecks+0x2a0>)
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	e00c      	b.n	8002f0c <STL_DoRunTimeChecks+0x254>
      }
      else
      {
        #ifdef STL_VERBOSE
          printf("Class B variable Error (main loop)\n\r");
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <STL_DoRunTimeChecks+0x2b0>)
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f004 fe5d 	bl	8007bb4 <iprintf>
        #endif  /* STL_VERBOSE */
        FailSafePOR();
 8002efa:	f000 f88f 	bl	800301c <FailSafePOR>
 8002efe:	e005      	b.n	8002f0c <STL_DoRunTimeChecks+0x254>
      }
    }
    else
    {
      #ifdef STL_VERBOSE
        printf("Class B variable Error (main loop)\n\r");
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <STL_DoRunTimeChecks+0x2b0>)
 8002f02:	0018      	movs	r0, r3
 8002f04:	f004 fe56 	bl	8007bb4 <iprintf>
      #endif  /* STL_VERBOSE */
      FailSafePOR();
 8002f08:	f000 f888 	bl	800301c <FailSafePOR>
    }
    #if defined STL_EVAL_MODE
      /* Toggle LD3 for debug purpose */
      BSP_LED_Toggle(LED_NVM);
 8002f0c:	23a0      	movs	r3, #160	; 0xa0
 8002f0e:	05db      	lsls	r3, r3, #23
 8002f10:	2140      	movs	r1, #64	; 0x40
 8002f12:	0018      	movs	r0, r3
 8002f14:	f002 f80b 	bl	8004f2e <HAL_GPIO_TogglePin>
    #endif  /* STL_EVAL_MODE */
  } /* End of periodic Self-test routine */
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000040 	.word	0x20000040
 8002f24:	aaaaaaaa 	.word	0xaaaaaaaa
 8002f28:	20000064 	.word	0x20000064
 8002f2c:	20000030 	.word	0x20000030
 8002f30:	0800a00c 	.word	0x0800a00c
 8002f34:	20000054 	.word	0x20000054
 8002f38:	0800a028 	.word	0x0800a028
 8002f3c:	200002d0 	.word	0x200002d0
 8002f40:	40004400 	.word	0x40004400
 8002f44:	0800a03c 	.word	0x0800a03c
 8002f48:	0800a064 	.word	0x0800a064
 8002f4c:	0800a090 	.word	0x0800a090
 8002f50:	0800a0bc 	.word	0x0800a0bc
 8002f54:	20000048 	.word	0x20000048
 8002f58:	2000006c 	.word	0x2000006c
 8002f5c:	0800ad80 	.word	0x0800ad80
 8002f60:	0800a0d8 	.word	0x0800a0d8
 8002f64:	0800a104 	.word	0x0800a104
 8002f68:	0800a13c 	.word	0x0800a13c

08002f6c <STL_CheckStack>:
  * @brief  This function verifies that Stack didn't overflow
  * @param  : None
  * @retval : ErrorStatus = (ERROR, SUCCESS)
  */
ErrorStatus STL_CheckStack(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
  ErrorStatus result = SUCCESS;
 8002f72:	1dfb      	adds	r3, r7, #7
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
  
  CtrlFlowCnt += STACK_OVERFLOW_CALLEE;
 8002f78:	4b18      	ldr	r3, [pc, #96]	; (8002fdc <STL_CheckStack+0x70>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	333b      	adds	r3, #59	; 0x3b
 8002f7e:	001a      	movs	r2, r3
 8002f80:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <STL_CheckStack+0x70>)
 8002f82:	601a      	str	r2, [r3, #0]

  if ( aStackOverFlowPtrn[0] != 0xEEEEEEEEuL )
 8002f84:	4b16      	ldr	r3, [pc, #88]	; (8002fe0 <STL_CheckStack+0x74>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <STL_CheckStack+0x78>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d002      	beq.n	8002f94 <STL_CheckStack+0x28>
  {
    result = ERROR;
 8002f8e:	1dfb      	adds	r3, r7, #7
 8002f90:	2201      	movs	r2, #1
 8002f92:	701a      	strb	r2, [r3, #0]
  }
  if ( aStackOverFlowPtrn[1] != 0xCCCCCCCCuL )
 8002f94:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <STL_CheckStack+0x74>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <STL_CheckStack+0x7c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d002      	beq.n	8002fa4 <STL_CheckStack+0x38>
  {
    result = ERROR;
 8002f9e:	1dfb      	adds	r3, r7, #7
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
  }
  if ( aStackOverFlowPtrn[2] != 0xBBBBBBBBuL )
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <STL_CheckStack+0x74>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4a10      	ldr	r2, [pc, #64]	; (8002fec <STL_CheckStack+0x80>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d002      	beq.n	8002fb4 <STL_CheckStack+0x48>
  {
    result = ERROR;
 8002fae:	1dfb      	adds	r3, r7, #7
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	701a      	strb	r2, [r3, #0]
  }
  if ( aStackOverFlowPtrn[3] != 0xDDDDDDDDuL )
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <STL_CheckStack+0x74>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4a0d      	ldr	r2, [pc, #52]	; (8002ff0 <STL_CheckStack+0x84>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d002      	beq.n	8002fc4 <STL_CheckStack+0x58>
  {
    result = ERROR;
 8002fbe:	1dfb      	adds	r3, r7, #7
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	701a      	strb	r2, [r3, #0]
  }

  CtrlFlowCntInv -= STACK_OVERFLOW_CALLEE;
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <STL_CheckStack+0x88>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3b3b      	subs	r3, #59	; 0x3b
 8002fca:	001a      	movs	r2, r3
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <STL_CheckStack+0x88>)
 8002fce:	601a      	str	r2, [r3, #0]

  return (result);
 8002fd0:	1dfb      	adds	r3, r7, #7
 8002fd2:	781b      	ldrb	r3, [r3, #0]
}
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b002      	add	sp, #8
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000030 	.word	0x20000030
 8002fe0:	200007b8 	.word	0x200007b8
 8002fe4:	eeeeeeee 	.word	0xeeeeeeee
 8002fe8:	cccccccc 	.word	0xcccccccc
 8002fec:	bbbbbbbb 	.word	0xbbbbbbbb
 8002ff0:	dddddddd 	.word	0xdddddddd
 8002ff4:	20000054 	.word	0x20000054

08002ff8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002ffc:	f3bf 8f4f 	dsb	sy
}
 8003000:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003002:	4b04      	ldr	r3, [pc, #16]	; (8003014 <__NVIC_SystemReset+0x1c>)
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <__NVIC_SystemReset+0x20>)
 8003006:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003008:	f3bf 8f4f 	dsb	sy
}
 800300c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	e7fd      	b.n	800300e <__NVIC_SystemReset+0x16>
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	e000ed00 	.word	0xe000ed00
 8003018:	05fa0004 	.word	0x05fa0004

0800301c <FailSafePOR>:
  *    user to keep application safe while define proper recovery operation
  * @param  : None
  * @retval : None
  */
void FailSafePOR(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* disable any checking services at SystTick interrupt */
  TickCounter = TickCounterInv = 0u;
 8003020:	4b09      	ldr	r3, [pc, #36]	; (8003048 <FailSafePOR+0x2c>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <FailSafePOR+0x2c>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <FailSafePOR+0x30>)
 800302c:	601a      	str	r2, [r3, #0]
  
  #ifdef STL_VERBOSE_POR
    printf(" >>>>>>>>>> POR FailSafe Mode <<<<<<<<<<\n\r");
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <FailSafePOR+0x34>)
 8003030:	0018      	movs	r0, r3
 8003032:	f004 fdbf 	bl	8007bb4 <iprintf>
  #endif  /* STL_VERBOSE_POR */
  
  #if defined STL_EVAL_MODE
    /* LED_ERR On for debug purposes */
    BSP_LED_On(LED_ERR);
 8003036:	23a0      	movs	r3, #160	; 0xa0
 8003038:	05db      	lsls	r3, r3, #23
 800303a:	2201      	movs	r2, #1
 800303c:	2180      	movs	r1, #128	; 0x80
 800303e:	0018      	movs	r0, r3
 8003040:	f001 ff58 	bl	8004ef4 <HAL_GPIO_WritePin>
  {
    #ifndef NO_RESET_AT_FAIL_MODE
      /* Generate system reset */
      HAL_NVIC_SystemReset();
    #else
      while(1)
 8003044:	e7fe      	b.n	8003044 <FailSafePOR+0x28>
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	20000060 	.word	0x20000060
 800304c:	2000003c 	.word	0x2000003c
 8003050:	0800a164 	.word	0x0800a164

08003054 <STL_StartUp>:
  * @param  : None
  *   Flash interface initialized, Systick timer ON (2ms timebase)
  * @retval : None
  */
void STL_StartUp(void)
{
 8003054:	b5b0      	push	{r4, r5, r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
  uint32_t crc_result;
  uint32_t index;
  ClockStatus clk_sts;
	
  /* block run time tests performed at SysTick interrupt */
  TickCounter= TickCounterInv= 0;
 800305a:	4beb      	ldr	r3, [pc, #940]	; (8003408 <STL_StartUp+0x3b4>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	4be9      	ldr	r3, [pc, #932]	; (8003408 <STL_StartUp+0x3b4>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4be9      	ldr	r3, [pc, #932]	; (800340c <STL_StartUp+0x3b8>)
 8003066:	601a      	str	r2, [r3, #0]
  
  /* Reset of all peripherals, Initializes the Flash interface and the Systick */
  HAL_Init();
 8003068:	f001 fa5c 	bl	8004524 <HAL_Init>

  #ifdef STL_VERBOSE_POR
    /* Update the SystemCoreClock global variable as USART Baud rate setting depends on it */
  	SystemCoreClockUpdate();
 800306c:	f001 f984 	bl	8004378 <SystemCoreClockUpdate>
    USART_Configuration();
 8003070:	f7ff fac2 	bl	80025f8 <USART_Configuration>
    printf("\n\n\r *******  Self Test Library Init  *******\n\r");
 8003074:	4be6      	ldr	r3, [pc, #920]	; (8003410 <STL_StartUp+0x3bc>)
 8003076:	0018      	movs	r0, r3
 8003078:	f004 fd9c 	bl	8007bb4 <iprintf>
  #endif

  #if defined STL_EVAL_MODE
    /* init LEDs on evaluation board  to indicate phases of startup */
    BSP_LED_Init(LED_VLM);
 800307c:	2020      	movs	r0, #32
 800307e:	f7ff fa8d 	bl	800259c <User_signal_Init>
    BSP_LED_Init(LED_NVM);
 8003082:	2040      	movs	r0, #64	; 0x40
 8003084:	f7ff fa8a 	bl	800259c <User_signal_Init>
    BSP_LED_Init(LED_ERR);
 8003088:	2080      	movs	r0, #128	; 0x80
 800308a:	f7ff fa87 	bl	800259c <User_signal_Init>
  /*--------------------------------------------------------------------------*/
  /*------------------- CPU registers and flags self test --------------------*/
  /*--------------------------------------------------------------------------*/

  /* Initialization of counters for control flow monitoring */
  init_control_flow();
 800308e:	4be1      	ldr	r3, [pc, #900]	; (8003414 <STL_StartUp+0x3c0>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	4bdf      	ldr	r3, [pc, #892]	; (8003414 <STL_StartUp+0x3c0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	43da      	mvns	r2, r3
 800309a:	4bdf      	ldr	r3, [pc, #892]	; (8003418 <STL_StartUp+0x3c4>)
 800309c:	601a      	str	r2, [r3, #0]

  control_flow_call(CPU_TEST_CALLER);
 800309e:	4bdd      	ldr	r3, [pc, #884]	; (8003414 <STL_StartUp+0x3c0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	1c9a      	adds	r2, r3, #2
 80030a4:	4bdb      	ldr	r3, [pc, #876]	; (8003414 <STL_StartUp+0x3c0>)
 80030a6:	601a      	str	r2, [r3, #0]
  /* WARNING: all registers destroyed when exiting this function (including
  preserved registers R4 to R11) while excluding stack pointer R13) */
  if (STL_StartUpCPUTest() != CPUTEST_SUCCESS)
 80030a8:	f000 fdc4 	bl	8003c34 <STL_StartUpCPUTest>
 80030ac:	0003      	movs	r3, r0
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d006      	beq.n	80030c0 <STL_StartUp+0x6c>
  {
    #ifdef STL_VERBOSE_POR
      printf("Start-up CPU Test Failure\n\r");
 80030b2:	4bda      	ldr	r3, [pc, #872]	; (800341c <STL_StartUp+0x3c8>)
 80030b4:	0018      	movs	r0, r3
 80030b6:	f004 fd7d 	bl	8007bb4 <iprintf>
    #endif /* STL_VERBOSE_POR */
    
    FailSafePOR();
 80030ba:	f7ff ffaf 	bl	800301c <FailSafePOR>
 80030be:	e008      	b.n	80030d2 <STL_StartUp+0x7e>
  }
  else  /* CPU Test OK */
  {
    control_flow_resume(CPU_TEST_CALLER);
 80030c0:	4bd5      	ldr	r3, [pc, #852]	; (8003418 <STL_StartUp+0x3c4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	1e9a      	subs	r2, r3, #2
 80030c6:	4bd4      	ldr	r3, [pc, #848]	; (8003418 <STL_StartUp+0x3c4>)
 80030c8:	601a      	str	r2, [r3, #0]
    
    #ifdef STL_VERBOSE_POR
      printf(" Start-up CPU Test OK\n\r");
 80030ca:	4bd5      	ldr	r3, [pc, #852]	; (8003420 <STL_StartUp+0x3cc>)
 80030cc:	0018      	movs	r0, r3
 80030ce:	f004 fd71 	bl	8007bb4 <iprintf>

  /*--------------------------------------------------------------------------*/
  /*--------------------- WDOGs functionality self test ----------------------*/
  /*--------------------------------------------------------------------------*/

  control_flow_call(WDG_TEST_CALLER);
 80030d2:	4bd0      	ldr	r3, [pc, #832]	; (8003414 <STL_StartUp+0x3c0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	1d5a      	adds	r2, r3, #5
 80030d8:	4bce      	ldr	r3, [pc, #824]	; (8003414 <STL_StartUp+0x3c0>)
 80030da:	601a      	str	r2, [r3, #0]

  /* two phases IWDG & WWDG test, system reset is performed here */
  STL_WDGSelfTest();
 80030dc:	f000 fa40 	bl	8003560 <STL_WDGSelfTest>
  
  control_flow_resume(WDG_TEST_CALLER);
 80030e0:	4bcd      	ldr	r3, [pc, #820]	; (8003418 <STL_StartUp+0x3c4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	1f5a      	subs	r2, r3, #5
 80030e6:	4bcc      	ldr	r3, [pc, #816]	; (8003418 <STL_StartUp+0x3c4>)
 80030e8:	601a      	str	r2, [r3, #0]
  /*--------------------------------------------------------------------------*/
  /*--------------------- Switch ON PLL for maximum speed --------------------*/
  /*--------------------------------------------------------------------------*/
  #ifdef STL_VERBOSE_POR
    /* finish communication flow prior system clock change */
    while (HAL_UART_GetState(&UartHandle) == HAL_UART_STATE_BUSY_TX)
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	4bcd      	ldr	r3, [pc, #820]	; (8003424 <STL_StartUp+0x3d0>)
 80030ee:	0018      	movs	r0, r3
 80030f0:	f003 fc14 	bl	800691c <HAL_UART_GetState>
 80030f4:	0003      	movs	r3, r0
 80030f6:	2b21      	cmp	r3, #33	; 0x21
 80030f8:	d0f8      	beq.n	80030ec <STL_StartUp+0x98>
    { }
  #endif /* STL_VERBOSE_POR */
  
  /* No Control flow check here (not safety critical) */
  /* Switch on the PLL to speed-up Flash and RAM tests */
  StartUpClock_Config();
 80030fa:	f7ff f9df 	bl	80024bc <StartUpClock_Config>

  #ifdef STL_VERBOSE_POR
    /* Re-init communication channel with modified clock setting */
    HAL_UART_DeInit(&UartHandle);
 80030fe:	4bc9      	ldr	r3, [pc, #804]	; (8003424 <STL_StartUp+0x3d0>)
 8003100:	0018      	movs	r0, r3
 8003102:	f003 fb19 	bl	8006738 <HAL_UART_DeInit>
    HAL_UART_Init(&UartHandle);
 8003106:	4bc7      	ldr	r3, [pc, #796]	; (8003424 <STL_StartUp+0x3d0>)
 8003108:	0018      	movs	r0, r3
 800310a:	f003 fac1 	bl	8006690 <HAL_UART_Init>
  /*--------------------- Invariable memory CRC check ------------------------*/
  /*--------------------------------------------------------------------------*/
  
  #ifdef STL_EVAL_MODE
    /* init LED pins in push pull slow output mode */
    BSP_LED_Init(LED_VLM);
 800310e:	2020      	movs	r0, #32
 8003110:	f7ff fa44 	bl	800259c <User_signal_Init>
    BSP_LED_Init(LED_NVM);
 8003114:	2040      	movs	r0, #64	; 0x40
 8003116:	f7ff fa41 	bl	800259c <User_signal_Init>
    BSP_LED_Init(LED_ERR);
 800311a:	2080      	movs	r0, #128	; 0x80
 800311c:	f7ff fa3e 	bl	800259c <User_signal_Init>
    
    /* LED_NVM On for debug purposes */
    BSP_LED_On(LED_NVM);
 8003120:	23a0      	movs	r3, #160	; 0xa0
 8003122:	05db      	lsls	r3, r3, #23
 8003124:	2201      	movs	r2, #1
 8003126:	2140      	movs	r1, #64	; 0x40
 8003128:	0018      	movs	r0, r3
 800312a:	f001 fee3 	bl	8004ef4 <HAL_GPIO_WritePin>
  #endif /* STL_EVAL_MODE */
    if (control_flow_check_point(WDG_TEST_CALLER + CPU_TEST_CALLER + CPU_TEST_CALLEE) == ERROR) {
 800312e:	200a      	movs	r0, #10
 8003130:	f000 fb4e 	bl	80037d0 <control_flow_check_point>
 8003134:	0003      	movs	r3, r0
 8003136:	2b01      	cmp	r3, #1
 8003138:	d105      	bne.n	8003146 <STL_StartUp+0xf2>
        printf("control_flow_check_point after WDG test and CPU test failed\n\r");
 800313a:	4bbb      	ldr	r3, [pc, #748]	; (8003428 <STL_StartUp+0x3d4>)
 800313c:	0018      	movs	r0, r3
 800313e:	f004 fd39 	bl	8007bb4 <iprintf>
        FailSafePOR();
 8003142:	f7ff ff6b 	bl	800301c <FailSafePOR>
    }

  control_flow_call(CRC32_TEST_CALLER);
 8003146:	4bb3      	ldr	r3, [pc, #716]	; (8003414 <STL_StartUp+0x3c0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	330b      	adds	r3, #11
 800314c:	001a      	movs	r2, r3
 800314e:	4bb1      	ldr	r3, [pc, #708]	; (8003414 <STL_StartUp+0x3c0>)
 8003150:	601a      	str	r2, [r3, #0]
  /* Compute the 32-bit crc of the whole Flash by CRC unit except the checksum
     pattern stored at top of FLASH */
//  for (volatile int i = 0; i < 32000000; i++); // delay 1 sec
  __CRC_CLK_ENABLE();
 8003152:	4bb6      	ldr	r3, [pc, #728]	; (800342c <STL_StartUp+0x3d8>)
 8003154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003156:	4bb5      	ldr	r3, [pc, #724]	; (800342c <STL_StartUp+0x3d8>)
 8003158:	2180      	movs	r1, #128	; 0x80
 800315a:	0149      	lsls	r1, r1, #5
 800315c:	430a      	orrs	r2, r1
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
 8003160:	4bb2      	ldr	r3, [pc, #712]	; (800342c <STL_StartUp+0x3d8>)
 8003162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	015b      	lsls	r3, r3, #5
 8003168:	4013      	ands	r3, r2
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	687b      	ldr	r3, [r7, #4]

  CrcHandle.Instance = CRC;
 800316e:	4bb0      	ldr	r3, [pc, #704]	; (8003430 <STL_StartUp+0x3dc>)
 8003170:	4ab0      	ldr	r2, [pc, #704]	; (8003434 <STL_StartUp+0x3e0>)
 8003172:	601a      	str	r2, [r3, #0]
  #ifdef  CRC_UNIT_CONFIGURABLE
    CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_ENABLE;
 8003174:	4bae      	ldr	r3, [pc, #696]	; (8003430 <STL_StartUp+0x3dc>)
 8003176:	2200      	movs	r2, #0
 8003178:	711a      	strb	r2, [r3, #4]
    CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_ENABLE;
 800317a:	4bad      	ldr	r3, [pc, #692]	; (8003430 <STL_StartUp+0x3dc>)
 800317c:	2200      	movs	r2, #0
 800317e:	715a      	strb	r2, [r3, #5]
    CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 8003180:	4bab      	ldr	r3, [pc, #684]	; (8003430 <STL_StartUp+0x3dc>)
 8003182:	2200      	movs	r2, #0
 8003184:	615a      	str	r2, [r3, #20]
    CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLED;
 8003186:	4baa      	ldr	r3, [pc, #680]	; (8003430 <STL_StartUp+0x3dc>)
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]
    CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_WORDS;
 800318c:	4ba8      	ldr	r3, [pc, #672]	; (8003430 <STL_StartUp+0x3dc>)
 800318e:	2203      	movs	r2, #3
 8003190:	621a      	str	r2, [r3, #32]
  #endif
  HAL_CRC_Init(&CrcHandle);
 8003192:	4ba7      	ldr	r3, [pc, #668]	; (8003430 <STL_StartUp+0x3dc>)
 8003194:	0018      	movs	r0, r3
 8003196:	f001 fb13 	bl	80047c0 <HAL_CRC_Init>

/* the next lines replaces the standard HAL function call
   crc_result = HAL_CRC_Calculate(&CrcHandle, (uint32_t *)ROM_START, (uint32_t)ROM_SIZEinWORDS);
  due to bug at IAR linker - check sum computation can't support both big & little endian  */

  for(index = 0; index < (uint32_t)ROM_SIZEinWORDS; index++)
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e00e      	b.n	80031be <STL_StartUp+0x16a>
  {
    CRC->DR = __REV(*((uint32_t *)ROM_START + index));
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	2280      	movs	r2, #128	; 0x80
 80031a6:	0512      	lsls	r2, r2, #20
 80031a8:	4694      	mov	ip, r2
 80031aa:	4463      	add	r3, ip
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4ba1      	ldr	r3, [pc, #644]	; (8003434 <STL_StartUp+0x3e0>)
 80031b0:	60ba      	str	r2, [r7, #8]
  return __builtin_bswap32(value);
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	ba12      	rev	r2, r2
 80031b6:	601a      	str	r2, [r3, #0]
  for(index = 0; index < (uint32_t)ROM_SIZEinWORDS; index++)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3301      	adds	r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	4b9e      	ldr	r3, [pc, #632]	; (8003438 <STL_StartUp+0x3e4>)
 80031c0:	22f8      	movs	r2, #248	; 0xf8
 80031c2:	0612      	lsls	r2, r2, #24
 80031c4:	4694      	mov	ip, r2
 80031c6:	4463      	add	r3, ip
 80031c8:	089b      	lsrs	r3, r3, #2
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d3e7      	bcc.n	80031a0 <STL_StartUp+0x14c>
  }
  crc_result = CRC->DR;
 80031d0:	4b98      	ldr	r3, [pc, #608]	; (8003434 <STL_StartUp+0x3e0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	613b      	str	r3, [r7, #16]
  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_default=Pm088,Pm141
    /* ==============================================================================*/
  #endif  /* __IAR_SYSTEMS_ICC__ */

  control_flow_resume(CRC32_TEST_CALLER);
 80031d6:	4b90      	ldr	r3, [pc, #576]	; (8003418 <STL_StartUp+0x3c4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3b0b      	subs	r3, #11
 80031dc:	001a      	movs	r2, r3
 80031de:	4b8e      	ldr	r3, [pc, #568]	; (8003418 <STL_StartUp+0x3c4>)
 80031e0:	601a      	str	r2, [r3, #0]
  /* Store pattern for regular 32-bit crc computation */
  control_flow_call(CRC_TEST_CALLER);
 80031e2:	4b8c      	ldr	r3, [pc, #560]	; (8003414 <STL_StartUp+0x3c0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3311      	adds	r3, #17
 80031e8:	001a      	movs	r2, r3
 80031ea:	4b8a      	ldr	r3, [pc, #552]	; (8003414 <STL_StartUp+0x3c0>)
 80031ec:	601a      	str	r2, [r3, #0]
  #if defined(__CC_ARM) || defined(__GNUC__)             /* KEIL or GCC Compiler */
    /* Computed 32-bit crc check is temporary stored at crc_result. This value must be copied
       into __Check_Sum address placed at the end of Flash area (see file startup_stm32fxx.s)
       Condition here can be reversed for debugging */

    if(crc_result != *(uint32_t *)(&REF_CRC32))
 80031ee:	4b92      	ldr	r3, [pc, #584]	; (8003438 <STL_StartUp+0x3e4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d006      	beq.n	8003206 <STL_StartUp+0x1b2>
  #endif  /* __CC_ARM */
    {
      #ifdef STL_VERBOSE_POR
        printf("FLASH 32-bit CRC Error at Start-up\n\r");
 80031f8:	4b90      	ldr	r3, [pc, #576]	; (800343c <STL_StartUp+0x3e8>)
 80031fa:	0018      	movs	r0, r3
 80031fc:	f004 fcda 	bl	8007bb4 <iprintf>
      #endif  /* STL_VERBOSE_POR */
      FailSafePOR();
 8003200:	f7ff ff0c 	bl	800301c <FailSafePOR>
 8003204:	e009      	b.n	800321a <STL_StartUp+0x1c6>
    }
    else
    { /* Test OK */
      #ifdef STL_VERBOSE_POR
        printf(" Start-up FLASH 32-bit CRC OK\n\r");
 8003206:	4b8e      	ldr	r3, [pc, #568]	; (8003440 <STL_StartUp+0x3ec>)
 8003208:	0018      	movs	r0, r3
 800320a:	f004 fcd3 	bl	8007bb4 <iprintf>
      #endif  /* STL_VERBOSE_POR */

      /* If else statement is not executed, it will be detected by control flow monitoring */
      control_flow_resume(CRC_TEST_CALLER);
 800320e:	4b82      	ldr	r3, [pc, #520]	; (8003418 <STL_StartUp+0x3c4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3b11      	subs	r3, #17
 8003214:	001a      	movs	r2, r3
 8003216:	4b80      	ldr	r3, [pc, #512]	; (8003418 <STL_StartUp+0x3c4>)
 8003218:	601a      	str	r2, [r3, #0]
    }

  HAL_CRC_DeInit(&CrcHandle);
 800321a:	4b85      	ldr	r3, [pc, #532]	; (8003430 <STL_StartUp+0x3dc>)
 800321c:	0018      	movs	r0, r3
 800321e:	f001 fb35 	bl	800488c <HAL_CRC_DeInit>
  #ifdef STL_EVAL_MODE
    /* LED_NVM Off for debug purposes */
    BSP_LED_Off(LED_NVM);
 8003222:	23a0      	movs	r3, #160	; 0xa0
 8003224:	05db      	lsls	r3, r3, #23
 8003226:	2200      	movs	r2, #0
 8003228:	2140      	movs	r1, #64	; 0x40
 800322a:	0018      	movs	r0, r3
 800322c:	f001 fe62 	bl	8004ef4 <HAL_GPIO_WritePin>
  #endif /* STL_EVAL_MODE */

  /*--------------------------------------------------------------------------*/
  /*   Verify Control flow before RAM init (which clears Ctrl flow counters)  */
  /*--------------------------------------------------------------------------*/
  if (control_flow_check_point(CHECKPOINT1) == ERROR)
 8003230:	2026      	movs	r0, #38	; 0x26
 8003232:	f000 facd 	bl	80037d0 <control_flow_check_point>
 8003236:	0003      	movs	r3, r0
 8003238:	2b01      	cmp	r3, #1
 800323a:	d106      	bne.n	800324a <STL_StartUp+0x1f6>
  {
     #ifdef STL_VERBOSE_POR
       printf("Control Flow Error Checkpoint 1\n\r");
 800323c:	4b81      	ldr	r3, [pc, #516]	; (8003444 <STL_StartUp+0x3f0>)
 800323e:	0018      	movs	r0, r3
 8003240:	f004 fcb8 	bl	8007bb4 <iprintf>
     #endif  /* STL_VERBOSE_POR */
     FailSafePOR();
 8003244:	f7ff feea 	bl	800301c <FailSafePOR>
 8003248:	e003      	b.n	8003252 <STL_StartUp+0x1fe>
  }
  else
  {
   #ifdef STL_VERBOSE_POR
    printf(" Control Flow Checkpoint 1 OK \n\r");
 800324a:	4b7f      	ldr	r3, [pc, #508]	; (8003448 <STL_StartUp+0x3f4>)
 800324c:	0018      	movs	r0, r3
 800324e:	f004 fcb1 	bl	8007bb4 <iprintf>
  /*--------------------------------------------------------------------------*/
  /* --------------------- Variable memory functional test -------------------*/
  /*--------------------------------------------------------------------------*/
  #ifdef STL_EVAL_MODE
    /* LED_VLM On for debug purposes */
    BSP_LED_On(LED_VLM);
 8003252:	23a0      	movs	r3, #160	; 0xa0
 8003254:	05db      	lsls	r3, r3, #23
 8003256:	2201      	movs	r2, #1
 8003258:	2120      	movs	r1, #32
 800325a:	0018      	movs	r0, r3
 800325c:	f001 fe4a 	bl	8004ef4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8003260:	b672      	cpsid	i
}
 8003262:	46c0      	nop			; (mov r8, r8)
  
  /* no stack operation can be performed during the test */  
	__disable_irq();
  
  /* WARNING: Stack is zero-initialized when exiting from this routine */
  if (STL_FullRamMarchC(RAM_START, RAM_END, BCKGRND) != SUCCESS)
 8003264:	4979      	ldr	r1, [pc, #484]	; (800344c <STL_StartUp+0x3f8>)
 8003266:	2380      	movs	r3, #128	; 0x80
 8003268:	059b      	lsls	r3, r3, #22
 800326a:	2200      	movs	r2, #0
 800326c:	0018      	movs	r0, r3
 800326e:	f000 fb41 	bl	80038f4 <STL_FullRamMarchC>
 8003272:	1e03      	subs	r3, r0, #0
 8003274:	d016      	beq.n	80032a4 <STL_StartUp+0x250>
  __ASM volatile ("cpsie i" : : : "memory");
 8003276:	b662      	cpsie	i
}
 8003278:	46c0      	nop			; (mov r8, r8)
  {
    #ifdef STL_VERBOSE_POR
      /* restore interrupt capability */
      __enable_irq();
      /* restore destroyed content of HAL structure for UART */
      UartHandle.Instance = USARTx;
 800327a:	4b6a      	ldr	r3, [pc, #424]	; (8003424 <STL_StartUp+0x3d0>)
 800327c:	4a74      	ldr	r2, [pc, #464]	; (8003450 <STL_StartUp+0x3fc>)
 800327e:	601a      	str	r2, [r3, #0]
      UartHandle.ErrorCode = HAL_UART_ERROR_NONE;
 8003280:	4b68      	ldr	r3, [pc, #416]	; (8003424 <STL_StartUp+0x3d0>)
 8003282:	2280      	movs	r2, #128	; 0x80
 8003284:	2100      	movs	r1, #0
 8003286:	5099      	str	r1, [r3, r2]
      __HAL_UART_RESET_HANDLE_STATE(&UartHandle);
 8003288:	4b66      	ldr	r3, [pc, #408]	; (8003424 <STL_StartUp+0x3d0>)
 800328a:	2200      	movs	r2, #0
 800328c:	679a      	str	r2, [r3, #120]	; 0x78
 800328e:	4b65      	ldr	r3, [pc, #404]	; (8003424 <STL_StartUp+0x3d0>)
 8003290:	2200      	movs	r2, #0
 8003292:	67da      	str	r2, [r3, #124]	; 0x7c

      #ifdef __GNUC__
      /* restore the data segment initializers from flash to SRAM (repeat  procedure from startup) */
        extern void Startup_Copy_Handler (void);
        Startup_Copy_Handler();
 8003294:	f001 f914 	bl	80044c0 <Startup_Copy_Handler>
        printf("RAM Test Failure\n\r");
 8003298:	4b6e      	ldr	r3, [pc, #440]	; (8003454 <STL_StartUp+0x400>)
 800329a:	0018      	movs	r0, r3
 800329c:	f004 fc8a 	bl	8007bb4 <iprintf>
      #ifdef __IAR_SYSTEMS_ICC__
        __iar_data_init3();
        printf("RAM Test Failure\n\r");
      #endif /* __IAR_SYSTEMS_ICC__ */
    #endif  /* STL_VERBOSE_POR */
    FailSafePOR();
 80032a0:	f7ff febc 	bl	800301c <FailSafePOR>
  __ASM volatile ("cpsie i" : : : "memory");
 80032a4:	b662      	cpsie	i
}
 80032a6:	46c0      	nop			; (mov r8, r8)
  }
  #ifdef STL_VERBOSE_POR
    /* restore interrupt capability */
    __enable_irq();
    /* restore destroyed content of HAL structure for UART */
    UartHandle.Instance = USARTx;
 80032a8:	4b5e      	ldr	r3, [pc, #376]	; (8003424 <STL_StartUp+0x3d0>)
 80032aa:	4a69      	ldr	r2, [pc, #420]	; (8003450 <STL_StartUp+0x3fc>)
 80032ac:	601a      	str	r2, [r3, #0]
    UartHandle.ErrorCode = HAL_UART_ERROR_NONE;
 80032ae:	4b5d      	ldr	r3, [pc, #372]	; (8003424 <STL_StartUp+0x3d0>)
 80032b0:	2280      	movs	r2, #128	; 0x80
 80032b2:	2100      	movs	r1, #0
 80032b4:	5099      	str	r1, [r3, r2]
    __HAL_UART_RESET_HANDLE_STATE(&UartHandle);
 80032b6:	4b5b      	ldr	r3, [pc, #364]	; (8003424 <STL_StartUp+0x3d0>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	679a      	str	r2, [r3, #120]	; 0x78
 80032bc:	4b59      	ldr	r3, [pc, #356]	; (8003424 <STL_StartUp+0x3d0>)
 80032be:	2200      	movs	r2, #0
 80032c0:	67da      	str	r2, [r3, #124]	; 0x7c
    
    /* restore the data segment initializers from flash to SRAM (repeat procedure from IAR & GCC startup) */
    #ifdef __GNUC__
      extern void Startup_Copy_Handler (void);
      Startup_Copy_Handler();
 80032c2:	f001 f8fd 	bl	80044c0 <Startup_Copy_Handler>
      printf(" Full RAM Test OK\n\r");
 80032c6:	4b64      	ldr	r3, [pc, #400]	; (8003458 <STL_StartUp+0x404>)
 80032c8:	0018      	movs	r0, r3
 80032ca:	f004 fc73 	bl	8007bb4 <iprintf>
  __ASM volatile ("cpsie i" : : : "memory");
 80032ce:	b662      	cpsie	i
}
 80032d0:	46c0      	nop			; (mov r8, r8)
  /* restore interrupt capability */
  __enable_irq();
  
  /* Initialization of counters for control flow monitoring 
     (destroyed during RAM test) */
  init_control_flow();
 80032d2:	4b50      	ldr	r3, [pc, #320]	; (8003414 <STL_StartUp+0x3c0>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	4b4e      	ldr	r3, [pc, #312]	; (8003414 <STL_StartUp+0x3c0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	43da      	mvns	r2, r3
 80032de:	4b4e      	ldr	r3, [pc, #312]	; (8003418 <STL_StartUp+0x3c4>)
 80032e0:	601a      	str	r2, [r3, #0]

      /* LED_VLM Off for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_Off(LED_VLM);
    #endif /* __IAR_SYSTEMS_ICC__ */
    #ifdef __GNUC__  /* GCC Compiler */
      Startup_Copy_Handler();
 80032e2:	f001 f8ed 	bl	80044c0 <Startup_Copy_Handler>
      /* LED_VLM Off for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_Off(LED_VLM);
 80032e6:	23a0      	movs	r3, #160	; 0xa0
 80032e8:	05db      	lsls	r3, r3, #23
 80032ea:	2200      	movs	r2, #0
 80032ec:	2120      	movs	r1, #32
 80032ee:	0018      	movs	r0, r3
 80032f0:	f001 fe00 	bl	8004ef4 <HAL_GPIO_WritePin>


  /*--------------------------------------------------------------------------*/
  /*------------- Store reference 32-bit CRC in RAM after RAM test -----------*/
  /*--------------------------------------------------------------------------*/
  control_flow_call(CRC_STORE_CALLER);
 80032f4:	4b47      	ldr	r3, [pc, #284]	; (8003414 <STL_StartUp+0x3c0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	3313      	adds	r3, #19
 80032fa:	001a      	movs	r2, r3
 80032fc:	4b45      	ldr	r3, [pc, #276]	; (8003414 <STL_StartUp+0x3c0>)
 80032fe:	601a      	str	r2, [r3, #0]
  
  /* restore destroyed content of HAL structure for CRC */
  CrcHandle.Instance = CRC;
 8003300:	4b4b      	ldr	r3, [pc, #300]	; (8003430 <STL_StartUp+0x3dc>)
 8003302:	4a4c      	ldr	r2, [pc, #304]	; (8003434 <STL_StartUp+0x3e0>)
 8003304:	601a      	str	r2, [r3, #0]
  CrcHandle.State= HAL_CRC_STATE_READY;
 8003306:	4b4a      	ldr	r3, [pc, #296]	; (8003430 <STL_StartUp+0x3dc>)
 8003308:	2201      	movs	r2, #1
 800330a:	775a      	strb	r2, [r3, #29]
  #ifdef  CRC_UNIT_CONFIGURABLE
    CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_ENABLE;
 800330c:	4b48      	ldr	r3, [pc, #288]	; (8003430 <STL_StartUp+0x3dc>)
 800330e:	2200      	movs	r2, #0
 8003310:	711a      	strb	r2, [r3, #4]
    CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_ENABLE;
 8003312:	4b47      	ldr	r3, [pc, #284]	; (8003430 <STL_StartUp+0x3dc>)
 8003314:	2200      	movs	r2, #0
 8003316:	715a      	strb	r2, [r3, #5]
    CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 8003318:	4b45      	ldr	r3, [pc, #276]	; (8003430 <STL_StartUp+0x3dc>)
 800331a:	2200      	movs	r2, #0
 800331c:	615a      	str	r2, [r3, #20]
    CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLED;
 800331e:	4b44      	ldr	r3, [pc, #272]	; (8003430 <STL_StartUp+0x3dc>)
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
    CrcHandle.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8003324:	4b42      	ldr	r3, [pc, #264]	; (8003430 <STL_StartUp+0x3dc>)
 8003326:	2203      	movs	r2, #3
 8003328:	621a      	str	r2, [r3, #32]
  #endif
  
  /* read and store content of CRC calculation result */
  RefCrc32 = HAL_CRC_Accumulate(&CrcHandle, 0u, 0u);  
 800332a:	4b41      	ldr	r3, [pc, #260]	; (8003430 <STL_StartUp+0x3dc>)
 800332c:	2200      	movs	r2, #0
 800332e:	2100      	movs	r1, #0
 8003330:	0018      	movs	r0, r3
 8003332:	f001 faec 	bl	800490e <HAL_CRC_Accumulate>
 8003336:	0002      	movs	r2, r0
 8003338:	4b48      	ldr	r3, [pc, #288]	; (800345c <STL_StartUp+0x408>)
 800333a:	601a      	str	r2, [r3, #0]
  RefCrc32Inv = ~RefCrc32;
 800333c:	4b47      	ldr	r3, [pc, #284]	; (800345c <STL_StartUp+0x408>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	43da      	mvns	r2, r3
 8003342:	4b47      	ldr	r3, [pc, #284]	; (8003460 <STL_StartUp+0x40c>)
 8003344:	601a      	str	r2, [r3, #0]
  
  control_flow_resume(CRC_STORE_CALLER);  
 8003346:	4b34      	ldr	r3, [pc, #208]	; (8003418 <STL_StartUp+0x3c4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3b13      	subs	r3, #19
 800334c:	001a      	movs	r2, r3
 800334e:	4b32      	ldr	r3, [pc, #200]	; (8003418 <STL_StartUp+0x3c4>)
 8003350:	601a      	str	r2, [r3, #0]
      /* LED_NVM On for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_On(LED_NVM);
    #endif /* __IAR_SYSTEMS_ICC__ */
    #ifdef __GNUC__  /* GCC Compiler */
      /* LED_VLM On for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_On(LED_NVM);
 8003352:	23a0      	movs	r3, #160	; 0xa0
 8003354:	05db      	lsls	r3, r3, #23
 8003356:	2201      	movs	r2, #1
 8003358:	2140      	movs	r1, #64	; 0x40
 800335a:	0018      	movs	r0, r3
 800335c:	f001 fdca 	bl	8004ef4 <HAL_GPIO_WritePin>
    #endif /* __GNUC__ */
  #endif /* STL_EVAL_MODE */
    
  #ifdef STL_VERBOSE_POR
    /* finish communication flow prior system clock change */
    while (HAL_UART_GetState(&UartHandle) == HAL_UART_STATE_BUSY_TX)
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	4b30      	ldr	r3, [pc, #192]	; (8003424 <STL_StartUp+0x3d0>)
 8003364:	0018      	movs	r0, r3
 8003366:	f003 fad9 	bl	800691c <HAL_UART_GetState>
 800336a:	0003      	movs	r3, r0
 800336c:	2b21      	cmp	r3, #33	; 0x21
 800336e:	d0f8      	beq.n	8003362 <STL_StartUp+0x30e>
    { }
  #endif /* STL_VERBOSE_POR */
  
  control_flow_call(CLOCK_TEST_CALLER);
 8003370:	4b28      	ldr	r3, [pc, #160]	; (8003414 <STL_StartUp+0x3c0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3317      	adds	r3, #23
 8003376:	001a      	movs	r2, r3
 8003378:	4b26      	ldr	r3, [pc, #152]	; (8003414 <STL_StartUp+0x3c0>)
 800337a:	601a      	str	r2, [r3, #0]
  
  /* test LSI & HSE clock systems */
  clk_sts = STL_ClockStartUpTest();
 800337c:	250f      	movs	r5, #15
 800337e:	197c      	adds	r4, r7, r5
 8003380:	f7ff fa74 	bl	800286c <STL_ClockStartUpTest>
 8003384:	0003      	movs	r3, r0
 8003386:	7023      	strb	r3, [r4, #0]
  
  #ifdef STL_VERBOSE_POR
    /* Re-init communication channel with modified clock setting */
    UartHandle.Instance        = USARTx;
 8003388:	4b26      	ldr	r3, [pc, #152]	; (8003424 <STL_StartUp+0x3d0>)
 800338a:	4a31      	ldr	r2, [pc, #196]	; (8003450 <STL_StartUp+0x3fc>)
 800338c:	601a      	str	r2, [r3, #0]
    HAL_UART_DeInit(&UartHandle);
 800338e:	4b25      	ldr	r3, [pc, #148]	; (8003424 <STL_StartUp+0x3d0>)
 8003390:	0018      	movs	r0, r3
 8003392:	f003 f9d1 	bl	8006738 <HAL_UART_DeInit>
    
    UartHandle.Init.BaudRate   = 115200;
 8003396:	4b23      	ldr	r3, [pc, #140]	; (8003424 <STL_StartUp+0x3d0>)
 8003398:	22e1      	movs	r2, #225	; 0xe1
 800339a:	0252      	lsls	r2, r2, #9
 800339c:	605a      	str	r2, [r3, #4]
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800339e:	4b21      	ldr	r3, [pc, #132]	; (8003424 <STL_StartUp+0x3d0>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	609a      	str	r2, [r3, #8]
    UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80033a4:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <STL_StartUp+0x3d0>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	60da      	str	r2, [r3, #12]
    UartHandle.Init.Parity     = UART_PARITY_NONE;
 80033aa:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <STL_StartUp+0x3d0>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	611a      	str	r2, [r3, #16]
    UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80033b0:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <STL_StartUp+0x3d0>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	619a      	str	r2, [r3, #24]
    UartHandle.Init.Mode       = UART_MODE_TX;
 80033b6:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <STL_StartUp+0x3d0>)
 80033b8:	2208      	movs	r2, #8
 80033ba:	615a      	str	r2, [r3, #20]
    HAL_UART_Init(&UartHandle);
 80033bc:	4b19      	ldr	r3, [pc, #100]	; (8003424 <STL_StartUp+0x3d0>)
 80033be:	0018      	movs	r0, r3
 80033c0:	f003 f966 	bl	8006690 <HAL_UART_Init>
    /* print out the test result */
    switch(clk_sts)
 80033c4:	197b      	adds	r3, r7, r5
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b0a      	cmp	r3, #10
 80033ca:	d85c      	bhi.n	8003486 <STL_StartUp+0x432>
 80033cc:	009a      	lsls	r2, r3, #2
 80033ce:	4b25      	ldr	r3, [pc, #148]	; (8003464 <STL_StartUp+0x410>)
 80033d0:	18d3      	adds	r3, r2, r3
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	469f      	mov	pc, r3
    {
      case LSI_START_FAIL:
        printf("LSI start-up failure \n\r");
 80033d6:	4b24      	ldr	r3, [pc, #144]	; (8003468 <STL_StartUp+0x414>)
 80033d8:	0018      	movs	r0, r3
 80033da:	f004 fbeb 	bl	8007bb4 <iprintf>
        break;
 80033de:	e056      	b.n	800348e <STL_StartUp+0x43a>
  
      case HSE_START_FAIL:
        printf("HSE start-up failure \n\r");
 80033e0:	4b22      	ldr	r3, [pc, #136]	; (800346c <STL_StartUp+0x418>)
 80033e2:	0018      	movs	r0, r3
 80033e4:	f004 fbe6 	bl	8007bb4 <iprintf>
        break;
 80033e8:	e051      	b.n	800348e <STL_StartUp+0x43a>
  
      case HSI_HSE_SWITCH_FAIL:
      case HSE_HSI_SWITCH_FAIL:
      case PLL_OFF_FAIL:
        printf("Clock switch failure \n\r");
 80033ea:	4b21      	ldr	r3, [pc, #132]	; (8003470 <STL_StartUp+0x41c>)
 80033ec:	0018      	movs	r0, r3
 80033ee:	f004 fbe1 	bl	8007bb4 <iprintf>
        break;
 80033f2:	e04c      	b.n	800348e <STL_StartUp+0x43a>
  
      case XCROSS_CONFIG_FAIL:
        printf("Clock Xcross measurement failure \n\r");
 80033f4:	4b1f      	ldr	r3, [pc, #124]	; (8003474 <STL_StartUp+0x420>)
 80033f6:	0018      	movs	r0, r3
 80033f8:	f004 fbdc 	bl	8007bb4 <iprintf>
        break;
 80033fc:	e047      	b.n	800348e <STL_StartUp+0x43a>
  
      case EXT_SOURCE_FAIL:
        printf("HSE clock found out of range\n\r");
 80033fe:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <STL_StartUp+0x424>)
 8003400:	0018      	movs	r0, r3
 8003402:	f004 fbd7 	bl	8007bb4 <iprintf>
        break;
 8003406:	e042      	b.n	800348e <STL_StartUp+0x43a>
 8003408:	20000060 	.word	0x20000060
 800340c:	2000003c 	.word	0x2000003c
 8003410:	0800a190 	.word	0x0800a190
 8003414:	20000030 	.word	0x20000030
 8003418:	20000054 	.word	0x20000054
 800341c:	0800a1c0 	.word	0x0800a1c0
 8003420:	0800a1dc 	.word	0x0800a1dc
 8003424:	200002d0 	.word	0x200002d0
 8003428:	0800a1f4 	.word	0x0800a1f4
 800342c:	40021000 	.word	0x40021000
 8003430:	2000029c 	.word	0x2000029c
 8003434:	40023000 	.word	0x40023000
 8003438:	0800ad80 	.word	0x0800ad80
 800343c:	0800a234 	.word	0x0800a234
 8003440:	0800a25c 	.word	0x0800a25c
 8003444:	0800a27c 	.word	0x0800a27c
 8003448:	0800a2a0 	.word	0x0800a2a0
 800344c:	20001fff 	.word	0x20001fff
 8003450:	40004400 	.word	0x40004400
 8003454:	0800a2c4 	.word	0x0800a2c4
 8003458:	0800a2d8 	.word	0x0800a2d8
 800345c:	20000050 	.word	0x20000050
 8003460:	20000074 	.word	0x20000074
 8003464:	0800a6fc 	.word	0x0800a6fc
 8003468:	0800a2ec 	.word	0x0800a2ec
 800346c:	0800a304 	.word	0x0800a304
 8003470:	0800a31c 	.word	0x0800a31c
 8003474:	0800a334 	.word	0x0800a334
 8003478:	0800a358 	.word	0x0800a358
        
      case FREQ_OK:
        printf(" Clock frequency OK \n\r");
 800347c:	4b2c      	ldr	r3, [pc, #176]	; (8003530 <STL_StartUp+0x4dc>)
 800347e:	0018      	movs	r0, r3
 8003480:	f004 fb98 	bl	8007bb4 <iprintf>
        break;
 8003484:	e003      	b.n	800348e <STL_StartUp+0x43a>
        
      default:
        printf("Abnormal exit from clock test\n\r");
 8003486:	4b2b      	ldr	r3, [pc, #172]	; (8003534 <STL_StartUp+0x4e0>)
 8003488:	0018      	movs	r0, r3
 800348a:	f004 fb93 	bl	8007bb4 <iprintf>
    }
  #endif /* STL_VERBOSE_POR */
  
  if(clk_sts != FREQ_OK)
 800348e:	230f      	movs	r3, #15
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b0a      	cmp	r3, #10
 8003496:	d001      	beq.n	800349c <STL_StartUp+0x448>
  {
      FailSafePOR();
 8003498:	f7ff fdc0 	bl	800301c <FailSafePOR>
  }
    
  control_flow_resume(CLOCK_TEST_CALLER);  
 800349c:	4b26      	ldr	r3, [pc, #152]	; (8003538 <STL_StartUp+0x4e4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3b17      	subs	r3, #23
 80034a2:	001a      	movs	r2, r3
 80034a4:	4b24      	ldr	r3, [pc, #144]	; (8003538 <STL_StartUp+0x4e4>)
 80034a6:	601a      	str	r2, [r3, #0]
      /* LED_NVM Off for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_Off(LED_NVM);
    #endif /* __IAR_SYSTEMS_ICC__ */
    #ifdef __GNUC__  /* GCC Compiler */
      /* LED_NVM Off for debug purposes - can be applied after C-data refresh at SRAM exclusively */
      BSP_LED_Off(LED_NVM);
 80034a8:	23a0      	movs	r3, #160	; 0xa0
 80034aa:	05db      	lsls	r3, r3, #23
 80034ac:	2200      	movs	r2, #0
 80034ae:	2140      	movs	r1, #64	; 0x40
 80034b0:	0018      	movs	r0, r3
 80034b2:	f001 fd1f 	bl	8004ef4 <HAL_GPIO_WritePin>

  /*--------------------------------------------------------------------------*/
  /* --------------- Initialize stack overflow pattern ---------------------- */
  /*--------------------------------------------------------------------------*/

  control_flow_call(STACK_OVERFLOW_TEST);
 80034b6:	4b21      	ldr	r3, [pc, #132]	; (800353c <STL_StartUp+0x4e8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3335      	adds	r3, #53	; 0x35
 80034bc:	001a      	movs	r2, r3
 80034be:	4b1f      	ldr	r3, [pc, #124]	; (800353c <STL_StartUp+0x4e8>)
 80034c0:	601a      	str	r2, [r3, #0]
  
  aStackOverFlowPtrn[0] = 0xEEEEEEEEuL;
 80034c2:	4b1f      	ldr	r3, [pc, #124]	; (8003540 <STL_StartUp+0x4ec>)
 80034c4:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <STL_StartUp+0x4f0>)
 80034c6:	601a      	str	r2, [r3, #0]
  aStackOverFlowPtrn[1] = 0xCCCCCCCCuL;
 80034c8:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <STL_StartUp+0x4ec>)
 80034ca:	4a1f      	ldr	r2, [pc, #124]	; (8003548 <STL_StartUp+0x4f4>)
 80034cc:	605a      	str	r2, [r3, #4]
  aStackOverFlowPtrn[2] = 0xBBBBBBBBuL;
 80034ce:	4b1c      	ldr	r3, [pc, #112]	; (8003540 <STL_StartUp+0x4ec>)
 80034d0:	4a1e      	ldr	r2, [pc, #120]	; (800354c <STL_StartUp+0x4f8>)
 80034d2:	609a      	str	r2, [r3, #8]
  aStackOverFlowPtrn[3] = 0xDDDDDDDDuL;
 80034d4:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <STL_StartUp+0x4ec>)
 80034d6:	4a1e      	ldr	r2, [pc, #120]	; (8003550 <STL_StartUp+0x4fc>)
 80034d8:	60da      	str	r2, [r3, #12]
  
  control_flow_resume(STACK_OVERFLOW_TEST);  
 80034da:	4b17      	ldr	r3, [pc, #92]	; (8003538 <STL_StartUp+0x4e4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3b35      	subs	r3, #53	; 0x35
 80034e0:	001a      	movs	r2, r3
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <STL_StartUp+0x4e4>)
 80034e4:	601a      	str	r2, [r3, #0]

  /*--------------------------------------------------------------------------*/
  /* -----  Verify Control flow before Starting main program execution ------ */
  /*--------------------------------------------------------------------------*/
   
  if (control_flow_check_point(CHECKPOINT2) == ERROR)
 80034e6:	207c      	movs	r0, #124	; 0x7c
 80034e8:	f000 f972 	bl	80037d0 <control_flow_check_point>
 80034ec:	0003      	movs	r3, r0
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d105      	bne.n	80034fe <STL_StartUp+0x4aa>
  {
     #ifdef STL_VERBOSE_POR
       printf("Control Flow Error Checkpoint 2\n\r");
 80034f2:	4b18      	ldr	r3, [pc, #96]	; (8003554 <STL_StartUp+0x500>)
 80034f4:	0018      	movs	r0, r3
 80034f6:	f004 fb5d 	bl	8007bb4 <iprintf>
     #endif  /* STL_VERBOSE_POR */
     FailSafePOR();
 80034fa:	f7ff fd8f 	bl	800301c <FailSafePOR>
   }
   #ifdef STL_VERBOSE_POR
    printf(" Control Flow Checkpoint 2 OK \n\r");
 80034fe:	4b16      	ldr	r3, [pc, #88]	; (8003558 <STL_StartUp+0x504>)
 8003500:	0018      	movs	r0, r3
 8003502:	f004 fb57 	bl	8007bb4 <iprintf>
  
    /* finish communication flow prior system clock change */
    while (HAL_UART_GetState(&UartHandle) == HAL_UART_STATE_BUSY_TX)
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <STL_StartUp+0x508>)
 800350a:	0018      	movs	r0, r3
 800350c:	f003 fa06 	bl	800691c <HAL_UART_GetState>
 8003510:	0003      	movs	r3, r0
 8003512:	2b21      	cmp	r3, #33	; 0x21
 8003514:	d0f8      	beq.n	8003508 <STL_StartUp+0x4b4>
    { }
   #endif  /* STL_VERBOSE_POR */
     
   /* startup test completed successfully - restart the application */
   GotoCompilerStartUp();
 8003516:	f000 ffd3 	bl	80044c0 <Startup_Copy_Handler>
 800351a:	f000 feef 	bl	80042fc <SystemInit>
 800351e:	f003 fea3 	bl	8007268 <__libc_init_array>
 8003522:	f7fe ff17 	bl	8002354 <main>
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	b006      	add	sp, #24
 800352c:	bdb0      	pop	{r4, r5, r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	0800a378 	.word	0x0800a378
 8003534:	0800a390 	.word	0x0800a390
 8003538:	20000054 	.word	0x20000054
 800353c:	20000030 	.word	0x20000030
 8003540:	200007b8 	.word	0x200007b8
 8003544:	eeeeeeee 	.word	0xeeeeeeee
 8003548:	cccccccc 	.word	0xcccccccc
 800354c:	bbbbbbbb 	.word	0xbbbbbbbb
 8003550:	dddddddd 	.word	0xdddddddd
 8003554:	0800a3b0 	.word	0x0800a3b0
 8003558:	0800a3d4 	.word	0x0800a3d4
 800355c:	200002d0 	.word	0x200002d0

08003560 <STL_WDGSelfTest>:
  * @brief  Verifies the watchdog by forcing watchdog resets
  * @param  : None
  * @retval : None
  */
void STL_WDGSelfTest(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_suppress=Pm026
  #endif /* __IAR_SYSTEMS_ICC__ */

  #ifdef STL_VERBOSE_POR  
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)  != RESET) printf("Pin reset \r\n");
 8003564:	4b88      	ldr	r3, [pc, #544]	; (8003788 <STL_WDGSelfTest+0x228>)
 8003566:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	04db      	lsls	r3, r3, #19
 800356c:	4013      	ands	r3, r2
 800356e:	d003      	beq.n	8003578 <STL_WDGSelfTest+0x18>
 8003570:	4b86      	ldr	r3, [pc, #536]	; (800378c <STL_WDGSelfTest+0x22c>)
 8003572:	0018      	movs	r0, r3
 8003574:	f004 fbaa 	bl	8007ccc <puts>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)  != RESET) printf("POR reset \r\n");
 8003578:	4b83      	ldr	r3, [pc, #524]	; (8003788 <STL_WDGSelfTest+0x228>)
 800357a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	051b      	lsls	r3, r3, #20
 8003580:	4013      	ands	r3, r2
 8003582:	d003      	beq.n	800358c <STL_WDGSelfTest+0x2c>
 8003584:	4b82      	ldr	r3, [pc, #520]	; (8003790 <STL_WDGSelfTest+0x230>)
 8003586:	0018      	movs	r0, r3
 8003588:	f004 fba0 	bl	8007ccc <puts>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)  != RESET) printf("SW reset \r\n");
 800358c:	4b7e      	ldr	r3, [pc, #504]	; (8003788 <STL_WDGSelfTest+0x228>)
 800358e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	055b      	lsls	r3, r3, #21
 8003594:	4013      	ands	r3, r2
 8003596:	d003      	beq.n	80035a0 <STL_WDGSelfTest+0x40>
 8003598:	4b7e      	ldr	r3, [pc, #504]	; (8003794 <STL_WDGSelfTest+0x234>)
 800359a:	0018      	movs	r0, r3
 800359c:	f004 fb96 	bl	8007ccc <puts>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) printf("IWDG reset \r\n");
 80035a0:	4b79      	ldr	r3, [pc, #484]	; (8003788 <STL_WDGSelfTest+0x228>)
 80035a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	059b      	lsls	r3, r3, #22
 80035a8:	4013      	ands	r3, r2
 80035aa:	d003      	beq.n	80035b4 <STL_WDGSelfTest+0x54>
 80035ac:	4b7a      	ldr	r3, [pc, #488]	; (8003798 <STL_WDGSelfTest+0x238>)
 80035ae:	0018      	movs	r0, r3
 80035b0:	f004 fb8c 	bl	8007ccc <puts>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET) printf("WWDG reset \r\n");
 80035b4:	4b74      	ldr	r3, [pc, #464]	; (8003788 <STL_WDGSelfTest+0x228>)
 80035b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	05db      	lsls	r3, r3, #23
 80035bc:	4013      	ands	r3, r2
 80035be:	d003      	beq.n	80035c8 <STL_WDGSelfTest+0x68>
 80035c0:	4b76      	ldr	r3, [pc, #472]	; (800379c <STL_WDGSelfTest+0x23c>)
 80035c2:	0018      	movs	r0, r3
 80035c4:	f004 fb82 	bl	8007ccc <puts>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET) printf("LP reset \r\n");
 80035c8:	4b6f      	ldr	r3, [pc, #444]	; (8003788 <STL_WDGSelfTest+0x228>)
 80035ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	da03      	bge.n	80035d8 <STL_WDGSelfTest+0x78>
 80035d0:	4b73      	ldr	r3, [pc, #460]	; (80037a0 <STL_WDGSelfTest+0x240>)
 80035d2:	0018      	movs	r0, r3
 80035d4:	f004 fb7a 	bl	8007ccc <puts>
  #endif /* STL_VERBOSE_POR */

  /* start watchdogs test if one of the 4 conditions below is valid */
  if ( (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)\
 80035d8:	4b6b      	ldr	r3, [pc, #428]	; (8003788 <STL_WDGSelfTest+0x228>)
 80035da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035dc:	2380      	movs	r3, #128	; 0x80
 80035de:	051b      	lsls	r3, r3, #20
 80035e0:	4013      	ands	r3, r2
 80035e2:	d11b      	bne.n	800361c <STL_WDGSelfTest+0xbc>
   ||  (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET)\
 80035e4:	4b68      	ldr	r3, [pc, #416]	; (8003788 <STL_WDGSelfTest+0x228>)
 80035e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	055b      	lsls	r3, r3, #21
 80035ec:	4013      	ands	r3, r2
 80035ee:	d115      	bne.n	800361c <STL_WDGSelfTest+0xbc>
   ||  (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET)\
 80035f0:	4b65      	ldr	r3, [pc, #404]	; (8003788 <STL_WDGSelfTest+0x228>)
 80035f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	db11      	blt.n	800361c <STL_WDGSelfTest+0xbc>
   || ((__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == RESET)))
 80035f8:	4b63      	ldr	r3, [pc, #396]	; (8003788 <STL_WDGSelfTest+0x228>)
 80035fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	04db      	lsls	r3, r3, #19
 8003600:	4013      	ands	r3, r2
 8003602:	d035      	beq.n	8003670 <STL_WDGSelfTest+0x110>
 8003604:	4b60      	ldr	r3, [pc, #384]	; (8003788 <STL_WDGSelfTest+0x228>)
 8003606:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	059b      	lsls	r3, r3, #22
 800360c:	4013      	ands	r3, r2
 800360e:	d12f      	bne.n	8003670 <STL_WDGSelfTest+0x110>
 8003610:	4b5d      	ldr	r3, [pc, #372]	; (8003788 <STL_WDGSelfTest+0x228>)
 8003612:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	05db      	lsls	r3, r3, #23
 8003618:	4013      	ands	r3, r2
 800361a:	d129      	bne.n	8003670 <STL_WDGSelfTest+0x110>
  {
    #ifdef STL_VERBOSE_POR
      printf("... Power-on or software reset, testing IWDG ... \r\n");
 800361c:	4b61      	ldr	r3, [pc, #388]	; (80037a4 <STL_WDGSelfTest+0x244>)
 800361e:	0018      	movs	r0, r3
 8003620:	f004 fb54 	bl	8007ccc <puts>
    #endif  /* STL_VERBOSE_POR */

    #if defined(STL_EVAL_MODE)
      /* IWDG at debug mode */
      __DBGMCU_CLK_ENABLE();
 8003624:	4b58      	ldr	r3, [pc, #352]	; (8003788 <STL_WDGSelfTest+0x228>)
 8003626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003628:	4b57      	ldr	r3, [pc, #348]	; (8003788 <STL_WDGSelfTest+0x228>)
 800362a:	2180      	movs	r1, #128	; 0x80
 800362c:	03c9      	lsls	r1, r1, #15
 800362e:	430a      	orrs	r2, r1
 8003630:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_FREEZE_IWDG_DBGMCU();
 8003632:	4b5d      	ldr	r3, [pc, #372]	; (80037a8 <STL_WDGSelfTest+0x248>)
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	4b5c      	ldr	r3, [pc, #368]	; (80037a8 <STL_WDGSelfTest+0x248>)
 8003638:	2180      	movs	r1, #128	; 0x80
 800363a:	0149      	lsls	r1, r1, #5
 800363c:	430a      	orrs	r2, r1
 800363e:	609a      	str	r2, [r3, #8]
    #endif  /* STL_EVAL_MODE */

    /* Clear all flags before resuming test */
    __HAL_RCC_CLEAR_FLAG();
 8003640:	4b51      	ldr	r3, [pc, #324]	; (8003788 <STL_WDGSelfTest+0x228>)
 8003642:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003644:	4b50      	ldr	r3, [pc, #320]	; (8003788 <STL_WDGSelfTest+0x228>)
 8003646:	2180      	movs	r1, #128	; 0x80
 8003648:	0409      	lsls	r1, r1, #16
 800364a:	430a      	orrs	r2, r1
 800364c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Setup IWDG to minimum period */
    IwdgHandle.Instance = IWDG;
 800364e:	4b57      	ldr	r3, [pc, #348]	; (80037ac <STL_WDGSelfTest+0x24c>)
 8003650:	4a57      	ldr	r2, [pc, #348]	; (80037b0 <STL_WDGSelfTest+0x250>)
 8003652:	601a      	str	r2, [r3, #0]
    IwdgHandle.Init.Prescaler = IWDG_PRESCALER_4;
 8003654:	4b55      	ldr	r3, [pc, #340]	; (80037ac <STL_WDGSelfTest+0x24c>)
 8003656:	2200      	movs	r2, #0
 8003658:	605a      	str	r2, [r3, #4]
    IwdgHandle.Init.Reload = 1U;
 800365a:	4b54      	ldr	r3, [pc, #336]	; (80037ac <STL_WDGSelfTest+0x24c>)
 800365c:	2201      	movs	r2, #1
 800365e:	609a      	str	r2, [r3, #8]
    #ifdef IWDG_FEATURES_BY_WINDOW_OPTION
      IwdgHandle.Init.Window = IWDG_WINDOW_DISABLE;
 8003660:	4b52      	ldr	r3, [pc, #328]	; (80037ac <STL_WDGSelfTest+0x24c>)
 8003662:	4a54      	ldr	r2, [pc, #336]	; (80037b4 <STL_WDGSelfTest+0x254>)
 8003664:	60da      	str	r2, [r3, #12]
    #endif /* IWDG_FEATURES_BY_WINDOW_OPTION */
    /* Initialization */
    HAL_IWDG_Init(&IwdgHandle);
 8003666:	4b51      	ldr	r3, [pc, #324]	; (80037ac <STL_WDGSelfTest+0x24c>)
 8003668:	0018      	movs	r0, r3
 800366a:	f001 fc7b 	bl	8004f64 <HAL_IWDG_Init>

    /* Wait for an independent watchdog reset */
    while(1)
 800366e:	e7fe      	b.n	800366e <STL_WDGSelfTest+0x10e>
    { }
  }
  else  /* Watchdog test or software reset triggered by application failure */
  {
    /* If WWDG only was set, re-start the complete test (indicates a reset triggered by safety routines */
    if ((__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)  != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET))
 8003670:	4b45      	ldr	r3, [pc, #276]	; (8003788 <STL_WDGSelfTest+0x228>)
 8003672:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	04db      	lsls	r3, r3, #19
 8003678:	4013      	ands	r3, r2
 800367a:	d018      	beq.n	80036ae <STL_WDGSelfTest+0x14e>
 800367c:	4b42      	ldr	r3, [pc, #264]	; (8003788 <STL_WDGSelfTest+0x228>)
 800367e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003680:	2380      	movs	r3, #128	; 0x80
 8003682:	059b      	lsls	r3, r3, #22
 8003684:	4013      	ands	r3, r2
 8003686:	d112      	bne.n	80036ae <STL_WDGSelfTest+0x14e>
 8003688:	4b3f      	ldr	r3, [pc, #252]	; (8003788 <STL_WDGSelfTest+0x228>)
 800368a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800368c:	2380      	movs	r3, #128	; 0x80
 800368e:	05db      	lsls	r3, r3, #23
 8003690:	4013      	ands	r3, r2
 8003692:	d00c      	beq.n	80036ae <STL_WDGSelfTest+0x14e>
    {
      __HAL_RCC_CLEAR_FLAG();
 8003694:	4b3c      	ldr	r3, [pc, #240]	; (8003788 <STL_WDGSelfTest+0x228>)
 8003696:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003698:	4b3b      	ldr	r3, [pc, #236]	; (8003788 <STL_WDGSelfTest+0x228>)
 800369a:	2180      	movs	r1, #128	; 0x80
 800369c:	0409      	lsls	r1, r1, #16
 800369e:	430a      	orrs	r2, r1
 80036a0:	651a      	str	r2, [r3, #80]	; 0x50
      #ifdef STL_VERBOSE_POR
        printf("... WWDG reset, re-start WDG test ... \r\n");
 80036a2:	4b45      	ldr	r3, [pc, #276]	; (80037b8 <STL_WDGSelfTest+0x258>)
 80036a4:	0018      	movs	r0, r3
 80036a6:	f004 fb11 	bl	8007ccc <puts>
      #endif  /* STL_VERBOSE_POR */
      NVIC_SystemReset();
 80036aa:	f7ff fca5 	bl	8002ff8 <__NVIC_SystemReset>
    }
    else  /* If IWDG only was set, continue the test with WWDG test*/
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)  != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == RESET))
 80036ae:	4b36      	ldr	r3, [pc, #216]	; (8003788 <STL_WDGSelfTest+0x228>)
 80036b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036b2:	2380      	movs	r3, #128	; 0x80
 80036b4:	04db      	lsls	r3, r3, #19
 80036b6:	4013      	ands	r3, r2
 80036b8:	d038      	beq.n	800372c <STL_WDGSelfTest+0x1cc>
 80036ba:	4b33      	ldr	r3, [pc, #204]	; (8003788 <STL_WDGSelfTest+0x228>)
 80036bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	059b      	lsls	r3, r3, #22
 80036c2:	4013      	ands	r3, r2
 80036c4:	d032      	beq.n	800372c <STL_WDGSelfTest+0x1cc>
 80036c6:	4b30      	ldr	r3, [pc, #192]	; (8003788 <STL_WDGSelfTest+0x228>)
 80036c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	05db      	lsls	r3, r3, #23
 80036ce:	4013      	ands	r3, r2
 80036d0:	d12c      	bne.n	800372c <STL_WDGSelfTest+0x1cc>
      { /* If IWDG only was set, test WWDG*/
        #ifdef STL_VERBOSE_POR
          printf("... IWDG reset from test or application, testing WWDG\r\n");
 80036d2:	4b3a      	ldr	r3, [pc, #232]	; (80037bc <STL_WDGSelfTest+0x25c>)
 80036d4:	0018      	movs	r0, r3
 80036d6:	f004 faf9 	bl	8007ccc <puts>
        #endif  /* STL_VERBOSE_POR */
          
        #if defined(STL_EVAL_MODE)
          /* WWDG at debug mode */
          __DBGMCU_CLK_ENABLE();
 80036da:	4b2b      	ldr	r3, [pc, #172]	; (8003788 <STL_WDGSelfTest+0x228>)
 80036dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036de:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <STL_WDGSelfTest+0x228>)
 80036e0:	2180      	movs	r1, #128	; 0x80
 80036e2:	03c9      	lsls	r1, r1, #15
 80036e4:	430a      	orrs	r2, r1
 80036e6:	635a      	str	r2, [r3, #52]	; 0x34
          __HAL_FREEZE_WWDG_DBGMCU();
 80036e8:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <STL_WDGSelfTest+0x248>)
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	4b2e      	ldr	r3, [pc, #184]	; (80037a8 <STL_WDGSelfTest+0x248>)
 80036ee:	2180      	movs	r1, #128	; 0x80
 80036f0:	0109      	lsls	r1, r1, #4
 80036f2:	430a      	orrs	r2, r1
 80036f4:	609a      	str	r2, [r3, #8]
        #endif  /* STL_EVAL_MODE */
          
         /* Setup WWDG to minimum period */
        __WWDG_CLK_ENABLE();
 80036f6:	4b24      	ldr	r3, [pc, #144]	; (8003788 <STL_WDGSelfTest+0x228>)
 80036f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036fa:	4b23      	ldr	r3, [pc, #140]	; (8003788 <STL_WDGSelfTest+0x228>)
 80036fc:	2180      	movs	r1, #128	; 0x80
 80036fe:	0109      	lsls	r1, r1, #4
 8003700:	430a      	orrs	r2, r1
 8003702:	639a      	str	r2, [r3, #56]	; 0x38
        WwdgHandle.Instance = WWDG;
 8003704:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <STL_WDGSelfTest+0x260>)
 8003706:	4a2f      	ldr	r2, [pc, #188]	; (80037c4 <STL_WDGSelfTest+0x264>)
 8003708:	601a      	str	r2, [r3, #0]
        WwdgHandle.Init.Prescaler = WWDG_PRESCALER_1;
 800370a:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <STL_WDGSelfTest+0x260>)
 800370c:	2200      	movs	r2, #0
 800370e:	605a      	str	r2, [r3, #4]
        WwdgHandle.Init.Counter = 64U;
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <STL_WDGSelfTest+0x260>)
 8003712:	2240      	movs	r2, #64	; 0x40
 8003714:	60da      	str	r2, [r3, #12]
        WwdgHandle.Init.Window = 63U;
 8003716:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <STL_WDGSelfTest+0x260>)
 8003718:	223f      	movs	r2, #63	; 0x3f
 800371a:	609a      	str	r2, [r3, #8]
        WwdgHandle.Init.EWIMode = WWDG_EWI_DISABLE;
 800371c:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <STL_WDGSelfTest+0x260>)
 800371e:	2200      	movs	r2, #0
 8003720:	611a      	str	r2, [r3, #16]
        HAL_WWDG_Init(&WwdgHandle);
 8003722:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <STL_WDGSelfTest+0x260>)
 8003724:	0018      	movs	r0, r3
 8003726:	f003 fd6b 	bl	8007200 <HAL_WWDG_Init>

        while(1)
 800372a:	e7fe      	b.n	800372a <STL_WDGSelfTest+0x1ca>
        { }
      }
      else  /* If both flags IWDG & WWDG flags are set, means that watchdog test is completed */
      {
        if ((__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)  != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) && (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET))
 800372c:	4b16      	ldr	r3, [pc, #88]	; (8003788 <STL_WDGSelfTest+0x228>)
 800372e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	04db      	lsls	r3, r3, #19
 8003734:	4013      	ands	r3, r2
 8003736:	d017      	beq.n	8003768 <STL_WDGSelfTest+0x208>
 8003738:	4b13      	ldr	r3, [pc, #76]	; (8003788 <STL_WDGSelfTest+0x228>)
 800373a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	059b      	lsls	r3, r3, #22
 8003740:	4013      	ands	r3, r2
 8003742:	d011      	beq.n	8003768 <STL_WDGSelfTest+0x208>
 8003744:	4b10      	ldr	r3, [pc, #64]	; (8003788 <STL_WDGSelfTest+0x228>)
 8003746:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	05db      	lsls	r3, r3, #23
 800374c:	4013      	ands	r3, r2
 800374e:	d00b      	beq.n	8003768 <STL_WDGSelfTest+0x208>
        {
          __HAL_RCC_CLEAR_FLAG();
 8003750:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <STL_WDGSelfTest+0x228>)
 8003752:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <STL_WDGSelfTest+0x228>)
 8003756:	2180      	movs	r1, #128	; 0x80
 8003758:	0409      	lsls	r1, r1, #16
 800375a:	430a      	orrs	r2, r1
 800375c:	651a      	str	r2, [r3, #80]	; 0x50
          #ifdef STL_VERBOSE_POR
            printf("... WWDG reset, WDG test completed ... \r\n");
 800375e:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <STL_WDGSelfTest+0x268>)
 8003760:	0018      	movs	r0, r3
 8003762:	f004 fab3 	bl	8007ccc <puts>

  #ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
    #pragma diag_default=Pm026
  #endif /* __IAR_SYSTEMS_ICC__ */
  /* ==============================================================================*/
}
 8003766:	e00c      	b.n	8003782 <STL_WDGSelfTest+0x222>
          __HAL_RCC_CLEAR_FLAG();
 8003768:	4b07      	ldr	r3, [pc, #28]	; (8003788 <STL_WDGSelfTest+0x228>)
 800376a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <STL_WDGSelfTest+0x228>)
 800376e:	2180      	movs	r1, #128	; 0x80
 8003770:	0409      	lsls	r1, r1, #16
 8003772:	430a      	orrs	r2, r1
 8003774:	651a      	str	r2, [r3, #80]	; 0x50
            printf("...Unexpected Flag configuration, re-start WDG test... \r\n");
 8003776:	4b15      	ldr	r3, [pc, #84]	; (80037cc <STL_WDGSelfTest+0x26c>)
 8003778:	0018      	movs	r0, r3
 800377a:	f004 faa7 	bl	8007ccc <puts>
        NVIC_SystemReset();
 800377e:	f7ff fc3b 	bl	8002ff8 <__NVIC_SystemReset>
}
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	40021000 	.word	0x40021000
 800378c:	0800a3f8 	.word	0x0800a3f8
 8003790:	0800a404 	.word	0x0800a404
 8003794:	0800a410 	.word	0x0800a410
 8003798:	0800a41c 	.word	0x0800a41c
 800379c:	0800a42c 	.word	0x0800a42c
 80037a0:	0800a43c 	.word	0x0800a43c
 80037a4:	0800a448 	.word	0x0800a448
 80037a8:	40015800 	.word	0x40015800
 80037ac:	20000278 	.word	0x20000278
 80037b0:	40003000 	.word	0x40003000
 80037b4:	00000fff 	.word	0x00000fff
 80037b8:	0800a47c 	.word	0x0800a47c
 80037bc:	0800a4a4 	.word	0x0800a4a4
 80037c0:	20000288 	.word	0x20000288
 80037c4:	40002c00 	.word	0x40002c00
 80037c8:	0800a4dc 	.word	0x0800a4dc
 80037cc:	0800a508 	.word	0x0800a508

080037d0 <control_flow_check_point>:
  * @brief  Verifies the consistency and value of control flow counters
  * @param  : check value of the positive counter
  * @retval : ErrorStatus (SUCCESS, ERROR)
  */
ErrorStatus control_flow_check_point(uint32_t chck)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  ErrorStatus Result= SUCCESS;
 80037d8:	210f      	movs	r1, #15
 80037da:	187b      	adds	r3, r7, r1
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
  
//  if ((CtrlFlowCnt != (chck)) || ((CtrlFlowCnt ^ CtrlFlowCntInv) != 0xFFFFFFFFuL))
//  {
//    Result= ERROR;
//  }
  return(Result);
 80037e0:	187b      	adds	r3, r7, r1
 80037e2:	781b      	ldrb	r3, [r3, #0]
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b004      	add	sp, #16
 80037ea:	bd80      	pop	{r7, pc}

080037ec <STL_TranspMarchInit>:
  *   transparent functional test.
  * @param  : None
  * @retval : None
  */
void STL_TranspMarchInit(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* start address of the test has to be aligned to 16 address range */	  
   pRunTimeRamChk = (uint32_t *)((uint32_t)CLASS_B_START & 0xFFFFFFFCuL);
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <STL_TranspMarchInit+0x1c>)
 80037f2:	4a06      	ldr	r2, [pc, #24]	; (800380c <STL_TranspMarchInit+0x20>)
 80037f4:	601a      	str	r2, [r3, #0]
   pRunTimeRamChkInv = (uint32_t *)(uint32_t)(~(uint32_t)pRunTimeRamChk);
 80037f6:	4b04      	ldr	r3, [pc, #16]	; (8003808 <STL_TranspMarchInit+0x1c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	001a      	movs	r2, r3
 80037fe:	4b04      	ldr	r3, [pc, #16]	; (8003810 <STL_TranspMarchInit+0x24>)
 8003800:	601a      	str	r2, [r3, #0]
}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	20000020 	.word	0x20000020
 800380c:	20000030 	.word	0x20000030
 8003810:	20000024 	.word	0x20000024

08003814 <STL_TranspMarch>:
  * @param  : None
  * @retval : ClassBTestStatus (TEST_RUNNING, CLASS_B_DATA_FAIL,
  *   TEST_FAILURE, TEST_OK)
  */
ClassBTestStatus STL_TranspMarch(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
  ClassBTestStatus result = TEST_RUNNING;
 800381a:	1dfb      	adds	r3, r7, #7
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
  
  /* Check Class B var integrity */
  if ((((uint32_t)pRunTimeRamChk) ^ ((uint32_t)pRunTimeRamChkInv)) == 0xFFFFFFFFuL)
 8003820:	4b23      	ldr	r3, [pc, #140]	; (80038b0 <STL_TranspMarch+0x9c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	001a      	movs	r2, r3
 8003826:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <STL_TranspMarch+0xa0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4053      	eors	r3, r2
 800382c:	3301      	adds	r3, #1
 800382e:	d136      	bne.n	800389e <STL_TranspMarch+0x8a>
  {
    if (pRunTimeRamChk >= CLASS_B_END)
 8003830:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <STL_TranspMarch+0x9c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a20      	ldr	r2, [pc, #128]	; (80038b8 <STL_TranspMarch+0xa4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d916      	bls.n	8003868 <STL_TranspMarch+0x54>
    {
      /*------------- March test applied on the RAM Buffer itself --------------- */
      if (STL_TranspRamMarchCXStep(&aRunTimeRamBuf[0], &aRunTimeRamBuf[0], BCKGRND) == MARCH_STEP_SUCCESS)         
 800383a:	4920      	ldr	r1, [pc, #128]	; (80038bc <STL_TranspMarch+0xa8>)
 800383c:	4b1f      	ldr	r3, [pc, #124]	; (80038bc <STL_TranspMarch+0xa8>)
 800383e:	2200      	movs	r2, #0
 8003840:	0018      	movs	r0, r3
 8003842:	f000 f8c3 	bl	80039cc <STL_TranspRamMarchCXStep>
 8003846:	0003      	movs	r3, r0
 8003848:	2b01      	cmp	r3, #1
 800384a:	d103      	bne.n	8003854 <STL_TranspMarch+0x40>
      {
        /* All the RAM test is completed successfully */
        result = TEST_OK;
 800384c:	1dfb      	adds	r3, r7, #7
 800384e:	2204      	movs	r2, #4
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	e002      	b.n	800385a <STL_TranspMarch+0x46>
      }
      else  /* Buffer is not functional */
      {
        result = TEST_FAILURE;
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	2203      	movs	r2, #3
 8003858:	701a      	strb	r2, [r3, #0]
      }
      /* Init next cycle of the transparent RAM test starting from the begin of the Class B area */
      pRunTimeRamChk = CLASS_B_START;
 800385a:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <STL_TranspMarch+0x9c>)
 800385c:	4a18      	ldr	r2, [pc, #96]	; (80038c0 <STL_TranspMarch+0xac>)
 800385e:	601a      	str	r2, [r3, #0]
      pRunTimeRamChkInv = ((uint32_t *)~((uint32_t)CLASS_B_START));
 8003860:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <STL_TranspMarch+0xa0>)
 8003862:	4a18      	ldr	r2, [pc, #96]	; (80038c4 <STL_TranspMarch+0xb0>)
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	e01d      	b.n	80038a4 <STL_TranspMarch+0x90>
    }
    else
    { /* ------------- March test applied on Class B data area ------------------ */
      /* !!! Application has to ensure that no write or read operation
               is performed within Class B RAM area during this test !!!      */
      if (STL_TranspRamMarchCXStep(pRunTimeRamChk, &aRunTimeRamBuf[1], BCKGRND) == MARCH_STEP_SUCCESS)         
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <STL_TranspMarch+0x9c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4916      	ldr	r1, [pc, #88]	; (80038c8 <STL_TranspMarch+0xb4>)
 800386e:	2200      	movs	r2, #0
 8003870:	0018      	movs	r0, r3
 8003872:	f000 f8ab 	bl	80039cc <STL_TranspRamMarchCXStep>
 8003876:	0003      	movs	r3, r0
 8003878:	2b01      	cmp	r3, #1
 800387a:	d10c      	bne.n	8003896 <STL_TranspMarch+0x82>
      {
        /* Prepare next Row Transparent RAM test */
        pRunTimeRamChk += RT_RAM_BLOCKSIZE - (2u * RT_RAM_BLOCK_OVERLAP);
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <STL_TranspMarch+0x9c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3310      	adds	r3, #16
 8003882:	001a      	movs	r2, r3
 8003884:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <STL_TranspMarch+0x9c>)
 8003886:	601a      	str	r2, [r3, #0]
        pRunTimeRamChkInv = (uint32_t *)(uint32_t)(~(uint32_t)pRunTimeRamChk);
 8003888:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <STL_TranspMarch+0x9c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	43db      	mvns	r3, r3
 800388e:	001a      	movs	r2, r3
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <STL_TranspMarch+0xa0>)
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e006      	b.n	80038a4 <STL_TranspMarch+0x90>
      }
      else
      {
        result = TEST_FAILURE;  /* Word line under test was not functional */
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	2203      	movs	r2, #3
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	e002      	b.n	80038a4 <STL_TranspMarch+0x90>
      }
    }
  }
  else  /* Class B error on pRunTimeRamChk */
  {
    result = CLASS_B_DATA_FAIL;
 800389e:	1dfb      	adds	r3, r7, #7
 80038a0:	2201      	movs	r2, #1
 80038a2:	701a      	strb	r2, [r3, #0]
  }
  return (result);  
 80038a4:	1dfb      	adds	r3, r7, #7
 80038a6:	781b      	ldrb	r3, [r3, #0]
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b002      	add	sp, #8
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000020 	.word	0x20000020
 80038b4:	20000024 	.word	0x20000024
 80038b8:	2000007a 	.word	0x2000007a
 80038bc:	20000000 	.word	0x20000000
 80038c0:	20000030 	.word	0x20000030
 80038c4:	dfffffcf 	.word	0xdfffffcf
 80038c8:	20000004 	.word	0x20000004
 80038cc:	00000000 	.word	0x00000000

080038d0 <__ARTISAN_RAM_ORDER>:
 80038d0:	fffffff8 00000000 00000004 0000000c     ................
 80038e0:	00000008 00000010 00000014 0000001c     ................
 80038f0:	00000018                                ....

080038f4 <STL_FullRamMarchC>:
  .section  .text.STL_FullRamMarchC
  .type  STL_FullRamMarchC, %function
  .size  STL_FullRamMarchC, .-STL_FullRamMarchC

STL_FullRamMarchC:
  MOVS  R4, #0x1       /* Test success status by default */
 80038f4:	2401      	movs	r4, #1
  
  MOVS  R3,R2          /* setup inverted background pattern */
 80038f6:	0013      	movs	r3, r2
  RSBS  R3, R3, #0
 80038f8:	425b      	negs	r3, r3
  SUBS  R3,R3, #1
 80038fa:	3b01      	subs	r3, #1
  
/* *** Step 1 *** */
/* Write background pattern with addresses increasing */
  MOVS  R5,R0
 80038fc:	0005      	movs	r5, r0

080038fe <__FULL1_LOOP>:
__FULL1_LOOP:
  CMP   R5,R1
 80038fe:	428d      	cmp	r5, r1
  BHI   __FULLSTEP_2
 8003900:	d802      	bhi.n	8003908 <__FULLSTEP_2>
  STR   R2,[R5, #+0]
 8003902:	602a      	str	r2, [r5, #0]
  ADDS  R5,R5,#+4
 8003904:	3504      	adds	r5, #4
  B     __FULL1_LOOP
 8003906:	e7fa      	b.n	80038fe <__FULL1_LOOP>

08003908 <__FULLSTEP_2>:
    
/* *** Step 2 *** */
/* Verify background and write inverted background with addresses increasing */
__FULLSTEP_2:
  MOVS  R5,R0
 8003908:	0005      	movs	r5, r0

0800390a <__FULL2_LOOP>:
__FULL2_LOOP:
  CMP   R5,R1
 800390a:	428d      	cmp	r5, r1
  BHI   __FULLSTEP_3
 800390c:	d811      	bhi.n	8003932 <__FULLSTEP_3>
  LDR   R6,[R5,#+0]
 800390e:	682e      	ldr	r6, [r5, #0]
  CMP   R6,R2
 8003910:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 8003912:	d157      	bne.n	80039c4 <__FULL_ERR>
  STR   R3,[R5,#+0]
 8003914:	602b      	str	r3, [r5, #0]
  LDR   R6,[R5,#+4]
 8003916:	686e      	ldr	r6, [r5, #4]
  CMP   R6,R2
 8003918:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 800391a:	d153      	bne.n	80039c4 <__FULL_ERR>
  STR   R3,[R5,#+4]
 800391c:	606b      	str	r3, [r5, #4]
#ifdef ARTISAN
  LDR   R6,[R5,#+12]
 800391e:	68ee      	ldr	r6, [r5, #12]
  CMP   R6,R2
 8003920:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 8003922:	d14f      	bne.n	80039c4 <__FULL_ERR>
  STR   R3,[R5,#+12]
 8003924:	60eb      	str	r3, [r5, #12]
  LDR   R6,[R5,#+8]
 8003926:	68ae      	ldr	r6, [r5, #8]
  CMP   R6,R2
 8003928:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 800392a:	d14b      	bne.n	80039c4 <__FULL_ERR>
  STR   R3,[R5,#+8]
 800392c:	60ab      	str	r3, [r5, #8]
  LDR   R6,[R5,#+12]
  CMP   R6,R2
  BNE   __FULL_ERR
  STR   R3,[R5,#+12]
 #endif /* ARTISAN */
  ADDS  R5,R5,#+16
 800392e:	3510      	adds	r5, #16
  B     __FULL2_LOOP
 8003930:	e7eb      	b.n	800390a <__FULL2_LOOP>

08003932 <__FULLSTEP_3>:
  
/* *** Step 3 *** */
/* Verify inverted background and write background with addresses increasing   */
__FULLSTEP_3:
  MOVS  R5,R0
 8003932:	0005      	movs	r5, r0

08003934 <__FULL3_LOOP>:
__FULL3_LOOP:
  CMP   R5,R1
 8003934:	428d      	cmp	r5, r1
  BHI   __FULLSTEP_4  
 8003936:	d811      	bhi.n	800395c <__FULLSTEP_4>
  LDR   R6,[R5,#+0]
 8003938:	682e      	ldr	r6, [r5, #0]
  CMP   R6,R3
 800393a:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 800393c:	d142      	bne.n	80039c4 <__FULL_ERR>
  STR   R2,[R5,#+0]
 800393e:	602a      	str	r2, [r5, #0]
  LDR   R6,[R5,#+4]
 8003940:	686e      	ldr	r6, [r5, #4]
  CMP   R6,R3
 8003942:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 8003944:	d13e      	bne.n	80039c4 <__FULL_ERR>
  STR   R2,[R5,#+4]
 8003946:	606a      	str	r2, [r5, #4]
#ifdef ARTISAN
  LDR   R6,[R5,#+12]
 8003948:	68ee      	ldr	r6, [r5, #12]
  CMP   R6,R3
 800394a:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 800394c:	d13a      	bne.n	80039c4 <__FULL_ERR>
  STR   R2,[R5,#+12]
 800394e:	60ea      	str	r2, [r5, #12]
  LDR   R6,[R5,#+8]
 8003950:	68ae      	ldr	r6, [r5, #8]
  CMP   R6,R3
 8003952:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 8003954:	d136      	bne.n	80039c4 <__FULL_ERR>
  STR   R2,[R5,#+8]
 8003956:	60aa      	str	r2, [r5, #8]
  LDR   R6,[R5,#+12]
  CMP   R6,R3
  BNE   __FULL_ERR
  STR   R2,[R5,#+12]
#endif /* ARTISAN */
  ADDS  R5,R5,#+16
 8003958:	3510      	adds	r5, #16
  B     __FULL3_LOOP
 800395a:	e7eb      	b.n	8003934 <__FULL3_LOOP>

0800395c <__FULLSTEP_4>:

/* *** Step 4 *** */
/* Verify background and write inverted background with addresses decreasing */
__FULLSTEP_4:
  MOVS  R5,R1
 800395c:	000d      	movs	r5, r1
  SUBS  R5,R5,#+15
 800395e:	3d0f      	subs	r5, #15

08003960 <__FULL4_LOOP>:
__FULL4_LOOP:
  CMP   R5,R0
 8003960:	4285      	cmp	r5, r0
  BLO   __FULLSTEP_5
 8003962:	d311      	bcc.n	8003988 <__FULLSTEP_5>
#ifdef ARTISAN
  LDR   R6,[R5,#+8]
 8003964:	68ae      	ldr	r6, [r5, #8]
  CMP   R6,R2
 8003966:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 8003968:	d12c      	bne.n	80039c4 <__FULL_ERR>
  STR   R3,[R5,#+8]
 800396a:	60ab      	str	r3, [r5, #8]
  LDR   R6,[R5,#+12]
 800396c:	68ee      	ldr	r6, [r5, #12]
  CMP   R6,R2
 800396e:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 8003970:	d128      	bne.n	80039c4 <__FULL_ERR>
  STR   R3,[R5,#+12]
 8003972:	60eb      	str	r3, [r5, #12]
  LDR   R6,[R5,#+8]
  CMP   R6,R2
  BNE   __FULL_ERR
  STR   R3,[R5,#+8]
 #endif /* ARTISAN */
  LDR   R6,[R5,#+4]
 8003974:	686e      	ldr	r6, [r5, #4]
  CMP   R6,R2
 8003976:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 8003978:	d124      	bne.n	80039c4 <__FULL_ERR>
  STR   R3,[R5,#+4]
 800397a:	606b      	str	r3, [r5, #4]
  LDR   R6,[R5,#+0]
 800397c:	682e      	ldr	r6, [r5, #0]
  CMP   R6,R2
 800397e:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 8003980:	d120      	bne.n	80039c4 <__FULL_ERR>
  STR   R3,[R5,#+0]
 8003982:	602b      	str	r3, [r5, #0]
  SUBS  R5,R5,#+16
 8003984:	3d10      	subs	r5, #16
  B     __FULL4_LOOP
 8003986:	e7eb      	b.n	8003960 <__FULL4_LOOP>

08003988 <__FULLSTEP_5>:
  
/* *** Step 5 *** */
/* Verify inverted background and write background with addresses decreasing */
__FULLSTEP_5:
  MOVS  R5,R1
 8003988:	000d      	movs	r5, r1
  SUBS  R5,R5,#+15
 800398a:	3d0f      	subs	r5, #15

0800398c <__FULL5_LOOP>:
__FULL5_LOOP:
  CMP   R5,R0
 800398c:	4285      	cmp	r5, r0
  BLO   __FULLSTEP_6
 800398e:	d311      	bcc.n	80039b4 <__FULLSTEP_6>
#ifdef ARTISAN
  LDR   R6,[R5,#+8]
 8003990:	68ae      	ldr	r6, [r5, #8]
  CMP   R6,R3
 8003992:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 8003994:	d116      	bne.n	80039c4 <__FULL_ERR>
  STR   R2,[R5,#+8]
 8003996:	60aa      	str	r2, [r5, #8]
  LDR   R6,[R5,#+12]
 8003998:	68ee      	ldr	r6, [r5, #12]
  CMP   R6,R3
 800399a:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 800399c:	d112      	bne.n	80039c4 <__FULL_ERR>
  STR   R2,[R5,#+12]
 800399e:	60ea      	str	r2, [r5, #12]
  LDR   R6,[R5,#+8]
  CMP   R6,R3
  BNE   __FULL_ERR
  STR   R2,[R5,#+8]
 #endif /* ARTISAN */
  LDR   R6,[R5,#+4]
 80039a0:	686e      	ldr	r6, [r5, #4]
  CMP   R6,R3
 80039a2:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 80039a4:	d10e      	bne.n	80039c4 <__FULL_ERR>
  STR   R2,[R5,#+4]
 80039a6:	606a      	str	r2, [r5, #4]
  LDR   R6,[R5,#+0]
 80039a8:	682e      	ldr	r6, [r5, #0]
  CMP   R6,R3
 80039aa:	429e      	cmp	r6, r3
  BNE   __FULL_ERR
 80039ac:	d10a      	bne.n	80039c4 <__FULL_ERR>
  STR   R2,[R5,#+0]
 80039ae:	602a      	str	r2, [r5, #0]
  SUBS  R5,R5,#+16
 80039b0:	3d10      	subs	r5, #16
  B     __FULL5_LOOP
 80039b2:	e7eb      	b.n	800398c <__FULL5_LOOP>

080039b4 <__FULLSTEP_6>:

/* *** Step 6 *** */
/* Verify background with addresses increasing */
__FULLSTEP_6:
  MOVS  R5,R0
 80039b4:	0005      	movs	r5, r0

080039b6 <__FULL6_LOOP>:
__FULL6_LOOP:
  CMP   R5,R1
 80039b6:	428d      	cmp	r5, r1
  BHI   __FULL_RET
 80039b8:	d805      	bhi.n	80039c6 <__FULL_RET>
  LDR   R6,[R5,#+0]
 80039ba:	682e      	ldr	r6, [r5, #0]
  CMP   R6,R2
 80039bc:	4296      	cmp	r6, r2
  BNE   __FULL_ERR
 80039be:	d101      	bne.n	80039c4 <__FULL_ERR>
  ADDS  R5,R5,#+4
 80039c0:	3504      	adds	r5, #4
  B     __FULL6_LOOP
 80039c2:	e7f8      	b.n	80039b6 <__FULL6_LOOP>

080039c4 <__FULL_ERR>:

__FULL_ERR:
  MOVS  R4,#0       /* error result */
 80039c4:	2400      	movs	r4, #0

080039c6 <__FULL_RET>:

__FULL_RET:
  MOVS  R0,R4
 80039c6:	0020      	movs	r0, r4
  BX    LR          /* return to the caller */
 80039c8:	4770      	bx	lr
	...

080039cc <STL_TranspRamMarchCXStep>:
  .section  .text.STL_TranspRamMarchCXStep
  .type  STL_TranspRamMarchCXStep, %function
  .size  STL_TranspRamMarchCXStep, .-STL_TranspRamMarchCXStep

STL_TranspRamMarchCXStep:
  PUSH  {R4-R7}
 80039cc:	b4f0      	push	{r4, r5, r6, r7}

  LDR   R5,=ISRCtrlFlowCnt  /* Control flow control */
 80039ce:	4d31      	ldr	r5, [pc, #196]	; (8003a94 <__STEP_RET+0x4>)
  LDR   R6,[R5]
 80039d0:	682e      	ldr	r6, [r5, #0]
  ADDS  R6,R6,#11
 80039d2:	360b      	adds	r6, #11
  STR   R6,[R5]
 80039d4:	602e      	str	r6, [r5, #0]
  
  MOVS  R3,R2               /* setup inverted background pattern (R3) */
 80039d6:	0013      	movs	r3, r2
  RSBS  R3, R3, #0
 80039d8:	425b      	negs	r3, r3
  SUBS  R3,R3, #1  
 80039da:	3b01      	subs	r3, #1

#ifdef ARTISAN
  LDR   R4, =__ARTISAN_RAM_ORDER /* setup pointer to physical order of the addresses (R4) */
 80039dc:	4c2e      	ldr	r4, [pc, #184]	; (8003a98 <__STEP_RET+0x8>)
#else
  LDR   R4, =__STANDARD_RAM_ORDER
#endif /* ARTISAN */

  MOVS  R5,R0       /* backup buffer to be tested? */
 80039de:	0005      	movs	r5, r0
  CMP   R5,R1
 80039e0:	428d      	cmp	r5, r1
  BEQ   __BUFF_TEST
 80039e2:	d02e      	beq.n	8003a42 <__BUFF_TEST>
  
/* ***************** test of the RAM slice ********************* */
  MOVS  R5, #0       /* NO - save content of the RAM slice into the backup buffer */
 80039e4:	2500      	movs	r5, #0

080039e6 <__SAVE_LOOP>:
__SAVE_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 80039e6:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* load data from RAM */
 80039e8:	5987      	ldr	r7, [r0, r6]
  ADDS  R5,R5,#4     /* original data are stored starting from second item of the buffer */
 80039ea:	3504      	adds	r5, #4
  STR   R7,[R1, R5]  /* (first and last items are used for testing purpose exclusively) */
 80039ec:	514f      	str	r7, [r1, r5]
  CMP   R5, #20
 80039ee:	2d14      	cmp	r5, #20
  BLE   __SAVE_LOOP
 80039f0:	ddf9      	ble.n	80039e6 <__SAVE_LOOP>
  
/* *** Step 1 *** */
/* Write background pattern with addresses increasing */
  MOVS  R5, #0
 80039f2:	2500      	movs	r5, #0

080039f4 <__STEP1_LOOP>:
__STEP1_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 80039f4:	5966      	ldr	r6, [r4, r5]
  STR   R2,[R0, R6]  /* store background pattern */
 80039f6:	5182      	str	r2, [r0, r6]
  ADDS  R5,R5,#4
 80039f8:	3504      	adds	r5, #4
  CMP   R5, #20
 80039fa:	2d14      	cmp	r5, #20
  BLE   __STEP1_LOOP
 80039fc:	ddfa      	ble.n	80039f4 <__STEP1_LOOP>
  
/* *** Step 2 *** */
/* Verify background and write inverted background with addresses increasing */
  MOVS  R5, #0
 80039fe:	2500      	movs	r5, #0

08003a00 <__STEP2_LOOP>:
__STEP2_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 8003a00:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify background pattern */
 8003a02:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R2
 8003a04:	4297      	cmp	r7, r2
  BNE   __STEP_ERR
 8003a06:	d142      	bne.n	8003a8e <__STEP_ERR>
  STR   R3,[R0, R6]  /* store inverted background pattern */
 8003a08:	5183      	str	r3, [r0, r6]
  ADDS  R5,R5,#4
 8003a0a:	3504      	adds	r5, #4
  CMP   R5, #20
 8003a0c:	2d14      	cmp	r5, #20
  BLE   __STEP2_LOOP
 8003a0e:	ddf7      	ble.n	8003a00 <__STEP2_LOOP>
  BHI   __STEP4_LOOP
#endif /* March-X  */
  
/* *** Step 5 *** */
/* Verify inverted background and write background with addresses decreasing  */
  MOVS  R5, #24
 8003a10:	2518      	movs	r5, #24

08003a12 <__STEP5_LOOP>:
__STEP5_LOOP:
  SUBS  R5,R5,#4
 8003a12:	3d04      	subs	r5, #4
  LDR   R6,[R4, R5]  /* load data offset */
 8003a14:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify inverted background pattern */
 8003a16:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R3
 8003a18:	429f      	cmp	r7, r3
  BNE   __STEP_ERR
 8003a1a:	d138      	bne.n	8003a8e <__STEP_ERR>
  STR   R2,[R0, R6]  /* store background pattrern */
 8003a1c:	5182      	str	r2, [r0, r6]
  CMP   R5, #0
 8003a1e:	2d00      	cmp	r5, #0
  BHI   __STEP5_LOOP
 8003a20:	d8f7      	bhi.n	8003a12 <__STEP5_LOOP>

/* *** Step 6 *** */
/* Verify background with addresses increasing */
  MOVS  R5, #0
 8003a22:	2500      	movs	r5, #0

08003a24 <__STEP6_LOOP>:
__STEP6_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 8003a24:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify background pattern */
 8003a26:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R2
 8003a28:	4297      	cmp	r7, r2
  BNE   __STEP_ERR
 8003a2a:	d130      	bne.n	8003a8e <__STEP_ERR>
  ADDS  R5,R5,#4
 8003a2c:	3504      	adds	r5, #4
  CMP   R5, #20
 8003a2e:	2d14      	cmp	r5, #20
  BLE   __STEP6_LOOP
 8003a30:	ddf8      	ble.n	8003a24 <__STEP6_LOOP>

  MOVS  R5, #24      /* restore content of the RAM slice back from the backup buffer */
 8003a32:	2518      	movs	r5, #24

08003a34 <__RESTORE_LOOP>:
__RESTORE_LOOP:
  LDR   R7,[R1, R5]  /* (first and last items are used for testing purpose exclusively) */
 8003a34:	594f      	ldr	r7, [r1, r5]
  SUBS  R5,R5,#4     /* original data are stored starting from second item of the buffer */
 8003a36:	3d04      	subs	r5, #4
  LDR   R6,[R4, R5]  /* load data offset */
 8003a38:	5966      	ldr	r6, [r4, r5]
  STR   R7,[R0, R6]  /* load data from RAM */
 8003a3a:	5187      	str	r7, [r0, r6]
  CMP   R5, #0
 8003a3c:	2d00      	cmp	r5, #0
  BHI   __RESTORE_LOOP
 8003a3e:	d8f9      	bhi.n	8003a34 <__RESTORE_LOOP>
  
  B     __MARCH_RET
 8003a40:	e01f      	b.n	8003a82 <__MARCH_RET>

08003a42 <__BUFF_TEST>:

/* ************** test of the buffer itself ******************** */
__BUFF_TEST:
/* *** Step 1 ***  */
/* Write background pattern with addresses increasing */
  MOVS  R5, #4
 8003a42:	2504      	movs	r5, #4

08003a44 <__BUFF1_LOOP>:
__BUFF1_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 8003a44:	5966      	ldr	r6, [r4, r5]
  STR   R2,[R0, R6]  /* store background pattern */
 8003a46:	5182      	str	r2, [r0, r6]
  ADDS   R5,R5,#4
 8003a48:	3504      	adds	r5, #4
  CMP   R5, #32
 8003a4a:	2d20      	cmp	r5, #32
  BLE   __BUFF1_LOOP
 8003a4c:	ddfa      	ble.n	8003a44 <__BUFF1_LOOP>
  
/* *** Step 2 *** */
/* Verify background and write inverted background with addresses increasing */
  MOVS  R5, #4
 8003a4e:	2504      	movs	r5, #4

08003a50 <__BUFF2_LOOP>:
__BUFF2_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 8003a50:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify background pattern */
 8003a52:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R2
 8003a54:	4297      	cmp	r7, r2
  BNE   __STEP_ERR
 8003a56:	d11a      	bne.n	8003a8e <__STEP_ERR>
  STR   R3,[R0, R6]  /* store inverted background pattern */
 8003a58:	5183      	str	r3, [r0, r6]
  ADDS  R5,R5,#4
 8003a5a:	3504      	adds	r5, #4
  CMP   R5, #32
 8003a5c:	2d20      	cmp	r5, #32
  BLE   __BUFF2_LOOP
 8003a5e:	ddf7      	ble.n	8003a50 <__BUFF2_LOOP>
  BHI   __BUFF4_LOOP
#endif /* March-X  */

/* *** Step 5 *** */
/* Verify inverted background and write background with addresses decreasing */
  MOVS  R5, #36
 8003a60:	2524      	movs	r5, #36	; 0x24

08003a62 <__BUFF5_LOOP>:
__BUFF5_LOOP:
  SUBS  R5,R5,#4
 8003a62:	3d04      	subs	r5, #4
  LDR   R6,[R4, R5]  /* load data offset  */
 8003a64:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify inverted background pattern */
 8003a66:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R3
 8003a68:	429f      	cmp	r7, r3
  BNE   __STEP_ERR
 8003a6a:	d110      	bne.n	8003a8e <__STEP_ERR>
  STR   R2,[R0, R6]  /* store background pattrern */
 8003a6c:	5182      	str	r2, [r0, r6]
  CMP   R5, #4
 8003a6e:	2d04      	cmp	r5, #4
  BHI   __BUFF5_LOOP
 8003a70:	d8f7      	bhi.n	8003a62 <__BUFF5_LOOP>

/* *** Step 6 *** */
/* Verify background with addresses increasing */
  MOVS  R5, #4
 8003a72:	2504      	movs	r5, #4

08003a74 <__BUFF6_LOOP>:
__BUFF6_LOOP:
  LDR   R6,[R4, R5]  /* load data offset */
 8003a74:	5966      	ldr	r6, [r4, r5]
  LDR   R7,[R0, R6]  /* verify background pattern */
 8003a76:	5987      	ldr	r7, [r0, r6]
  CMP   R7, R2
 8003a78:	4297      	cmp	r7, r2
  BNE   __STEP_ERR
 8003a7a:	d108      	bne.n	8003a8e <__STEP_ERR>
  ADDS  R5,R5,#4
 8003a7c:	3504      	adds	r5, #4
  CMP   R5, #32
 8003a7e:	2d20      	cmp	r5, #32
  BLE   __BUFF6_LOOP
 8003a80:	ddf8      	ble.n	8003a74 <__BUFF6_LOOP>

08003a82 <__MARCH_RET>:

__MARCH_RET:
  LDR   R4,=ISRCtrlFlowCntInv  /* Control flow control */
 8003a82:	4c06      	ldr	r4, [pc, #24]	; (8003a9c <__STEP_RET+0xc>)
  LDR   R5,[R4]
 8003a84:	6825      	ldr	r5, [r4, #0]
  SUBS  R5,R5,#11
 8003a86:	3d0b      	subs	r5, #11
  STR   R5,[R4]
 8003a88:	6025      	str	r5, [r4, #0]
  
  MOVS  R0, #1       /* Correct return */
 8003a8a:	2001      	movs	r0, #1
  B     __STEP_RET
 8003a8c:	e000      	b.n	8003a90 <__STEP_RET>

08003a8e <__STEP_ERR>:
  
__STEP_ERR:
  MOVS  R0, #0       /* error result */
 8003a8e:	2000      	movs	r0, #0

08003a90 <__STEP_RET>:
  
__STEP_RET:
  POP   {R4-R7}
 8003a90:	bcf0      	pop	{r4, r5, r6, r7}
  BX    LR           /* return to the caller */
 8003a92:	4770      	bx	lr
  LDR   R5,=ISRCtrlFlowCnt  /* Control flow control */
 8003a94:	20000034 	.word	0x20000034
  LDR   R4, =__ARTISAN_RAM_ORDER /* setup pointer to physical order of the addresses (R4) */
 8003a98:	080038d0 	.word	0x080038d0
  LDR   R4,=ISRCtrlFlowCntInv  /* Control flow control */
 8003a9c:	20000058 	.word	0x20000058

08003aa0 <STL_RunTimeCPUTest>:
  .section  .text.STL_RunTimeCPUTest
  .type  STL_RunTimeCPUTest, %function
  .size  STL_RunTimeCPUTest, .-STL_RunTimeCPUTest

STL_RunTimeCPUTest:
    PUSH {R4-R7}       /* Safe registers */
 8003aa0:	b4f0      	push	{r4, r5, r6, r7}
    //STMDB SP!, {R4, R5, R6, R7, R8, R9, R10, R11}
    //STMDB SP!, {R4-R11}
    /* PUSH {R4, R5, R6, R7, R8, R9, R10, R11} */
    //PUSH {R8-R11, !SP}
    /* This is for control flow test (ENTRY point) */
    LDR R0,=CtrlFlowCnt
 8003aa2:	485a      	ldr	r0, [pc, #360]	; (8003c0c <CPUTstCont+0xaa>)
    /* Assumes R1 OK   If not, error will be detected by R1 test and Ctrl flow test later on */
    LDR R1,[R0]
 8003aa4:	6801      	ldr	r1, [r0, #0]
    ADDS R1,R1,#0x3	    /* CtrlFlowCnt += OxO3 */
 8003aa6:	3103      	adds	r1, #3
    STR R1,[R0]
 8003aa8:	6001      	str	r1, [r0, #0]

    /* Register R1 */
    LDR R0, =conAA
 8003aaa:	4859      	ldr	r0, [pc, #356]	; (8003c10 <CPUTstCont+0xae>)
    LDR R1,[R0]
 8003aac:	6801      	ldr	r1, [r0, #0]
    LDR R0,[R0]
 8003aae:	6800      	ldr	r0, [r0, #0]
    CMP R0,R1
 8003ab0:	4288      	cmp	r0, r1
    BNE CPUTestFail
 8003ab2:	d154      	bne.n	8003b5e <CPUTestFail>
    LDR R0, =con55
 8003ab4:	4857      	ldr	r0, [pc, #348]	; (8003c14 <CPUTstCont+0xb2>)
    LDR R1,[R0]
 8003ab6:	6801      	ldr	r1, [r0, #0]
    LDR R0,[R0]
 8003ab8:	6800      	ldr	r0, [r0, #0]
    CMP R0,R1
 8003aba:	4288      	cmp	r0, r1
    BNE CPUTestFail
 8003abc:	d14f      	bne.n	8003b5e <CPUTestFail>
    MOVS R1, #0x1        /* For ramp test */
 8003abe:	2101      	movs	r1, #1

    /* Register R2 */
    LDR R0, =conAA
 8003ac0:	4853      	ldr	r0, [pc, #332]	; (8003c10 <CPUTstCont+0xae>)
    LDR R2,[R0]
 8003ac2:	6802      	ldr	r2, [r0, #0]
    LDR R0,[R0]
 8003ac4:	6800      	ldr	r0, [r0, #0]
    CMP R0,R2
 8003ac6:	4290      	cmp	r0, r2
    BNE CPUTestFail
 8003ac8:	d149      	bne.n	8003b5e <CPUTestFail>
    LDR R0, =con55
 8003aca:	4852      	ldr	r0, [pc, #328]	; (8003c14 <CPUTstCont+0xb2>)
    LDR R2,[R0]
 8003acc:	6802      	ldr	r2, [r0, #0]
    LDR R0,[R0]
 8003ace:	6800      	ldr	r0, [r0, #0]
    CMP R0,R2
 8003ad0:	4290      	cmp	r0, r2
    BNE CPUTestFail
 8003ad2:	d144      	bne.n	8003b5e <CPUTestFail>
    MOVS R2, #0x2          /* For ramp test */
 8003ad4:	2202      	movs	r2, #2

    /* Register R3 */
    LDR R0, =conAA
 8003ad6:	484e      	ldr	r0, [pc, #312]	; (8003c10 <CPUTstCont+0xae>)
    LDR R3,[R0]
 8003ad8:	6803      	ldr	r3, [r0, #0]
    LDR R0,[R0]
 8003ada:	6800      	ldr	r0, [r0, #0]
    CMP R0,R3
 8003adc:	4298      	cmp	r0, r3
    BNE CPUTestFail
 8003ade:	d13e      	bne.n	8003b5e <CPUTestFail>
    LDR R0, =con55
 8003ae0:	484c      	ldr	r0, [pc, #304]	; (8003c14 <CPUTstCont+0xb2>)
    LDR R3,[R0]
 8003ae2:	6803      	ldr	r3, [r0, #0]
    LDR R0,[R0]
 8003ae4:	6800      	ldr	r0, [r0, #0]
    CMP R0,R3
 8003ae6:	4298      	cmp	r0, r3
    BNE CPUTestFail
 8003ae8:	d139      	bne.n	8003b5e <CPUTestFail>
    MOVS R3, #0x3          /* For ramp test */
 8003aea:	2303      	movs	r3, #3

    /* Register R4 */
    LDR R0, =conAA
 8003aec:	4848      	ldr	r0, [pc, #288]	; (8003c10 <CPUTstCont+0xae>)
    LDR R4,[R0]
 8003aee:	6804      	ldr	r4, [r0, #0]
    LDR R0,[R0]
 8003af0:	6800      	ldr	r0, [r0, #0]
    CMP R0,R4
 8003af2:	42a0      	cmp	r0, r4
    BNE CPUTestFail
 8003af4:	d133      	bne.n	8003b5e <CPUTestFail>
    LDR R0, =con55
 8003af6:	4847      	ldr	r0, [pc, #284]	; (8003c14 <CPUTstCont+0xb2>)
    LDR R4,[R0]
 8003af8:	6804      	ldr	r4, [r0, #0]
    LDR R0,[R0]
 8003afa:	6800      	ldr	r0, [r0, #0]
    CMP R0,R4
 8003afc:	42a0      	cmp	r0, r4
    BNE CPUTestFail
 8003afe:	d12e      	bne.n	8003b5e <CPUTestFail>
    MOVS R4, #0x4           /* For ramp test */
 8003b00:	2404      	movs	r4, #4

    /* Register R5 */
    LDR R0, =conAA
 8003b02:	4843      	ldr	r0, [pc, #268]	; (8003c10 <CPUTstCont+0xae>)
    LDR R5,[R0]
 8003b04:	6805      	ldr	r5, [r0, #0]
    LDR R0,[R0]
 8003b06:	6800      	ldr	r0, [r0, #0]
    CMP R0,R5
 8003b08:	42a8      	cmp	r0, r5
    BNE CPUTestFail
 8003b0a:	d128      	bne.n	8003b5e <CPUTestFail>
    LDR R0, =con55
 8003b0c:	4841      	ldr	r0, [pc, #260]	; (8003c14 <CPUTstCont+0xb2>)
    LDR R5,[R0]
 8003b0e:	6805      	ldr	r5, [r0, #0]
    LDR R0,[R0]
 8003b10:	6800      	ldr	r0, [r0, #0]
    CMP R0,R5
 8003b12:	42a8      	cmp	r0, r5
    BNE CPUTestFail
 8003b14:	d123      	bne.n	8003b5e <CPUTestFail>
    MOVS R5, #0x5           /* For ramp test */
 8003b16:	2505      	movs	r5, #5

    /* Register R6 */
    LDR R0, =conAA
 8003b18:	483d      	ldr	r0, [pc, #244]	; (8003c10 <CPUTstCont+0xae>)
    LDR R6,[R0]
 8003b1a:	6806      	ldr	r6, [r0, #0]
    LDR R0,[R0]
 8003b1c:	6800      	ldr	r0, [r0, #0]
    CMP R0,R6
 8003b1e:	42b0      	cmp	r0, r6
    BNE CPUTestFail
 8003b20:	d11d      	bne.n	8003b5e <CPUTestFail>
    LDR R0, =con55
 8003b22:	483c      	ldr	r0, [pc, #240]	; (8003c14 <CPUTstCont+0xb2>)
    LDR R6,[R0]
 8003b24:	6806      	ldr	r6, [r0, #0]
    LDR R0,[R0]
 8003b26:	6800      	ldr	r0, [r0, #0]
    CMP R0,R6
 8003b28:	42b0      	cmp	r0, r6
    BNE CPUTestFail
 8003b2a:	d118      	bne.n	8003b5e <CPUTestFail>
    MOVS R6, #0x6            /* For ramp test */
 8003b2c:	2606      	movs	r6, #6

    /* Register R7 */
    LDR R0, =conAA
 8003b2e:	4838      	ldr	r0, [pc, #224]	; (8003c10 <CPUTstCont+0xae>)
    LDR R7,[R0]
 8003b30:	6807      	ldr	r7, [r0, #0]
    LDR R0,[R0]
 8003b32:	6800      	ldr	r0, [r0, #0]
    CMP R0,R7
 8003b34:	42b8      	cmp	r0, r7
    BNE CPUTestFail
 8003b36:	d112      	bne.n	8003b5e <CPUTestFail>
    LDR R0, =con55
 8003b38:	4836      	ldr	r0, [pc, #216]	; (8003c14 <CPUTstCont+0xb2>)
    LDR R7,[R0]
 8003b3a:	6807      	ldr	r7, [r0, #0]
    LDR R0,[R0]
 8003b3c:	6800      	ldr	r0, [r0, #0]
    CMP R0,R7
 8003b3e:	42b8      	cmp	r0, r7
    BNE CPUTestFail
 8003b40:	d10d      	bne.n	8003b5e <CPUTestFail>
    MOVS R7, #0x7            /* For ramp test */
 8003b42:	2707      	movs	r7, #7

    /* Register R8 */
    LDR R0, =conAA
 8003b44:	4832      	ldr	r0, [pc, #200]	; (8003c10 <CPUTstCont+0xae>)
    LDR R0,[R0]
 8003b46:	6800      	ldr	r0, [r0, #0]
    MOV R8,R0
 8003b48:	4680      	mov	r8, r0
    CMP R0,R8
 8003b4a:	4540      	cmp	r0, r8
    BNE CPUTestFail
 8003b4c:	d107      	bne.n	8003b5e <CPUTestFail>
    LDR R0, =con55
 8003b4e:	4831      	ldr	r0, [pc, #196]	; (8003c14 <CPUTstCont+0xb2>)
    LDR R0,[R0]
 8003b50:	6800      	ldr	r0, [r0, #0]
    MOV R8,R0
 8003b52:	4680      	mov	r8, r0
    CMP R0,R8
 8003b54:	4540      	cmp	r0, r8
    BNE CPUTestFail
 8003b56:	d102      	bne.n	8003b5e <CPUTestFail>
    MOVS R0, #0x08           /* For ramp test */
 8003b58:	2008      	movs	r0, #8
    MOV	R8,R0
 8003b5a:	4680      	mov	r8, r0

    BAL CPUTstCont
 8003b5c:	e001      	b.n	8003b62 <CPUTstCont>

08003b5e <CPUTestFail>:

CPUTestFail:
    BLAL FailSafePOR
 8003b5e:	f7ff fa5d 	bl	800301c <FailSafePOR>

08003b62 <CPUTstCont>:

CPUTstCont:
    /* Register R9 */
    LDR R0, =conAA
 8003b62:	482b      	ldr	r0, [pc, #172]	; (8003c10 <CPUTstCont+0xae>)
    LDR R0,[R0]
 8003b64:	6800      	ldr	r0, [r0, #0]
    MOV R9,R0
 8003b66:	4681      	mov	r9, r0
    CMP R0,R9
 8003b68:	4548      	cmp	r0, r9
    BNE CPUTestFail
 8003b6a:	d1f8      	bne.n	8003b5e <CPUTestFail>
    LDR R0, =con55
 8003b6c:	4829      	ldr	r0, [pc, #164]	; (8003c14 <CPUTstCont+0xb2>)
    LDR R0,[R0]
 8003b6e:	6800      	ldr	r0, [r0, #0]
    MOV R9,R0
 8003b70:	4681      	mov	r9, r0
    CMP R0,R9
 8003b72:	4548      	cmp	r0, r9
    BNE CPUTestFail
 8003b74:	d1f3      	bne.n	8003b5e <CPUTestFail>
    MOVS R0, #0x09            /* For ramp test */
 8003b76:	2009      	movs	r0, #9
    MOV	R9,R0
 8003b78:	4681      	mov	r9, r0

    /* Register R10 */
    LDR R0, =conAA
 8003b7a:	4825      	ldr	r0, [pc, #148]	; (8003c10 <CPUTstCont+0xae>)
    LDR R0,[R0]
 8003b7c:	6800      	ldr	r0, [r0, #0]
    MOV R10,R0
 8003b7e:	4682      	mov	sl, r0
    CMP R0,R10
 8003b80:	4550      	cmp	r0, sl
    BNE CPUTestFail
 8003b82:	d1ec      	bne.n	8003b5e <CPUTestFail>
    LDR R0, =con55
 8003b84:	4823      	ldr	r0, [pc, #140]	; (8003c14 <CPUTstCont+0xb2>)
    LDR R0,[R0]
 8003b86:	6800      	ldr	r0, [r0, #0]
    MOV R10,R0
 8003b88:	4682      	mov	sl, r0
    CMP R0,R10
 8003b8a:	4550      	cmp	r0, sl
    BNE CPUTestFail
 8003b8c:	d1e7      	bne.n	8003b5e <CPUTestFail>
    MOVS R0, #0x0A           /* For ramp test */
 8003b8e:	200a      	movs	r0, #10
    MOV	R10,R0
 8003b90:	4682      	mov	sl, r0

    /* Register R11 */
    LDR R0, =conAA
 8003b92:	481f      	ldr	r0, [pc, #124]	; (8003c10 <CPUTstCont+0xae>)
    LDR R0,[R0]
 8003b94:	6800      	ldr	r0, [r0, #0]
    MOV R11,R0
 8003b96:	4683      	mov	fp, r0
    CMP R0,R11
 8003b98:	4558      	cmp	r0, fp
    BNE CPUTestFail
 8003b9a:	d1e0      	bne.n	8003b5e <CPUTestFail>
    LDR R0, =con55
 8003b9c:	481d      	ldr	r0, [pc, #116]	; (8003c14 <CPUTstCont+0xb2>)
    LDR R0,[R0]
 8003b9e:	6800      	ldr	r0, [r0, #0]
    MOV R11,R0
 8003ba0:	4683      	mov	fp, r0
    CMP R0,R11
 8003ba2:	4558      	cmp	r0, fp
    BNE CPUTestFail
 8003ba4:	d1db      	bne.n	8003b5e <CPUTestFail>
    MOVS R0, #0x0B           /* For ramp test */
 8003ba6:	200b      	movs	r0, #11
    MOV	R11,R0
 8003ba8:	4683      	mov	fp, r0

    /* Register R12 */
    LDR R0, =conAA
 8003baa:	4819      	ldr	r0, [pc, #100]	; (8003c10 <CPUTstCont+0xae>)
    LDR R0,[R0]
 8003bac:	6800      	ldr	r0, [r0, #0]
    MOV R12,R0
 8003bae:	4684      	mov	ip, r0
    CMP R0,R12
 8003bb0:	4560      	cmp	r0, ip
    BNE CPUTestFail
 8003bb2:	d1d4      	bne.n	8003b5e <CPUTestFail>
    LDR R0, =con55
 8003bb4:	4817      	ldr	r0, [pc, #92]	; (8003c14 <CPUTstCont+0xb2>)
    LDR R0,[R0]
 8003bb6:	6800      	ldr	r0, [r0, #0]
    MOV R12,R0
 8003bb8:	4684      	mov	ip, r0
    CMP R0,R12
 8003bba:	4560      	cmp	r0, ip
    BNE CPUTestFail
 8003bbc:	d1cf      	bne.n	8003b5e <CPUTestFail>
    MOVS R0, #0x0C            /* For ramp test */
 8003bbe:	200c      	movs	r0, #12
    MOV	R12,R0
 8003bc0:	4684      	mov	ip, r0
    LDR R0, =CPUTstCont
 8003bc2:	4815      	ldr	r0, [pc, #84]	; (8003c18 <CPUTstCont+0xb6>)

    /* Link register R14	cannot be tested an error should be detected by	Ctrl flow test later */

    /* Ramp pattern verification	(R0 is not tested) */
    CMP R1, #0x01
 8003bc4:	2901      	cmp	r1, #1
    BNE CPUTestFail
 8003bc6:	d1ca      	bne.n	8003b5e <CPUTestFail>
    CMP R2, #0x02
 8003bc8:	2a02      	cmp	r2, #2
    BNE CPUTestFail
 8003bca:	d1c8      	bne.n	8003b5e <CPUTestFail>
    CMP R3, #0x03
 8003bcc:	2b03      	cmp	r3, #3
    BNE CPUTestFail
 8003bce:	d1c6      	bne.n	8003b5e <CPUTestFail>
    CMP R4, #0x04
 8003bd0:	2c04      	cmp	r4, #4
    BNE CPUTestFail
 8003bd2:	d1c4      	bne.n	8003b5e <CPUTestFail>
    CMP R5, #0x05
 8003bd4:	2d05      	cmp	r5, #5
    BNE CPUTestFail
 8003bd6:	d1c2      	bne.n	8003b5e <CPUTestFail>
    CMP R6, #0x06
 8003bd8:	2e06      	cmp	r6, #6
    BNE CPUTestFail
 8003bda:	d1c0      	bne.n	8003b5e <CPUTestFail>
    CMP R7, #0x07
 8003bdc:	2f07      	cmp	r7, #7
    BNE CPUTestFail
 8003bde:	d1be      	bne.n	8003b5e <CPUTestFail>
    MOVS R0, #0x08
 8003be0:	2008      	movs	r0, #8
    CMP R0,R8
 8003be2:	4540      	cmp	r0, r8
    BNE CPUTestFail
 8003be4:	d1bb      	bne.n	8003b5e <CPUTestFail>
    MOVS R0, #0x09
 8003be6:	2009      	movs	r0, #9
    CMP R0,R9
 8003be8:	4548      	cmp	r0, r9
    BNE CPUTestFail
 8003bea:	d1b8      	bne.n	8003b5e <CPUTestFail>
    MOVS R0, #0x0A
 8003bec:	200a      	movs	r0, #10
    CMP R0,R10
 8003bee:	4550      	cmp	r0, sl
    BNE CPUTestFail
 8003bf0:	d1b5      	bne.n	8003b5e <CPUTestFail>
    MOVS R0, #0x0B
 8003bf2:	200b      	movs	r0, #11
    CMP R0,R11
 8003bf4:	4558      	cmp	r0, fp
    BNE CPUTestFail
 8003bf6:	d1b2      	bne.n	8003b5e <CPUTestFail>
    MOVS R0, #0x0C
 8003bf8:	200c      	movs	r0, #12
    CMP R0,R12
 8003bfa:	4560      	cmp	r0, ip
    BNE CPUTestFail
 8003bfc:	d1af      	bne.n	8003b5e <CPUTestFail>

    /* Control flow test (EXIT point) */
    LDR R0,=CtrlFlowCntInv
 8003bfe:	4807      	ldr	r0, [pc, #28]	; (8003c1c <CPUTstCont+0xba>)
    LDR R1,[R0]
 8003c00:	6801      	ldr	r1, [r0, #0]
    SUBS R1,R1,#0x3	    /* CtrlFlowCntInv -= OxO3 */
 8003c02:	3903      	subs	r1, #3
    STR R1,[R0]
 8003c04:	6001      	str	r1, [r0, #0]

    POP {R4-R7}         /* Restore registers */
 8003c06:	bcf0      	pop	{r4, r5, r6, r7}

    MOVS R0, #0x1       /* CPUTEST_SUCCESS */
 8003c08:	2001      	movs	r0, #1

    /*LDMIA SP!, {R4, R5, R6, R7, R8, R9, R10, R11} */
    /* POP {R4, R5, R6, R7, R8, R9, R10, R11} */
    //POP {R8-R11}
    BX LR               /* return to the caller */
 8003c0a:	4770      	bx	lr
    LDR R0,=CtrlFlowCnt
 8003c0c:	20000030 	.word	0x20000030
    LDR R0, =conAA
 8003c10:	08003c20 	.word	0x08003c20
    LDR R0, =con55
 8003c14:	08003c24 	.word	0x08003c24
    LDR R0, =CPUTstCont
 8003c18:	08003b62 	.word	0x08003b62
    LDR R0,=CtrlFlowCntInv
 8003c1c:	20000054 	.word	0x20000054

08003c20 <__TEST_PATTERNS>:
 8003c20:	aaaaaaaa                                ....

08003c24 <con55>:
 8003c24:	55555555 	.word	0x55555555

08003c28 <con80>:
 8003c28:	80000000 	.word	0x80000000

08003c2c <conA8>:
 8003c2c:	aaaaaaa8 	.word	0xaaaaaaa8

08003c30 <con54>:
 8003c30:	55555554 	.word	0x55555554

08003c34 <STL_StartUpCPUTest>:
  .section  .text.STL_StartUpCPUTest
  .type  STL_StartUpCPUTest, %function
  .size  STL_StartUpCPUTest, .-STL_StartUpCPUTest

STL_StartUpCPUTest:
    PUSH {R4-R6}               /* Safe critical registers */
 8003c34:	b470      	push	{r4, r5, r6}

    MOVS R0, #0x00      	  
 8003c36:	2000      	movs	r0, #0
    UXTB R0,R0
 8003c38:	b2c0      	uxtb	r0, r0
    ADDS R0,#0				   /* Set Z(ero) Flag */
 8003c3a:	3000      	adds	r0, #0
    BNE CPUTestFail            /* Fails if Z clear */
 8003c3c:	d168      	bne.n	8003d10 <CPUTestFail>
    BMI CPUTestFail            /* Fails if N is set */
 8003c3e:	d467      	bmi.n	8003d10 <CPUTestFail>
    SUBS R0,#1                 /* Set N(egative) Flag */
 8003c40:	3801      	subs	r0, #1
    BPL CPUTestFail            /* Fails if N clear */
 8003c42:	d565      	bpl.n	8003d10 <CPUTestFail>
    ADDS R0,#2                 /* Set C(arry) Flag and do not set Z */
 8003c44:	3002      	adds	r0, #2
    BCC CPUTestFail            /* Fails if C clear */
 8003c46:	d363      	bcc.n	8003d10 <CPUTestFail>
    BEQ CPUTestFail            /* Fails if Z is set */
 8003c48:	d062      	beq.n	8003d10 <CPUTestFail>
    BMI CPUTestFail            /* Fails if N is set */
 8003c4a:	d461      	bmi.n	8003d10 <CPUTestFail>

    LDR R0,=con80      	  	   /* Prepares Overflow test */
 8003c4c:	4870      	ldr	r0, [pc, #448]	; (8003e10 <CPUTstCont+0xfc>)
    LDR R0,[R0]
 8003c4e:	6800      	ldr	r0, [r0, #0]
    ADDS R0, R0, R0            /* Set V(overflow) Flag */
 8003c50:	1800      	adds	r0, r0, r0
    BVC CPUTestFail            /* Fails if V clear */
 8003c52:	d75d      	bvc.n	8003d10 <CPUTestFail>

    /*  This is for control flow test (ENTRY point) */
    LDR R0,=CtrlFlowCnt
 8003c54:	486f      	ldr	r0, [pc, #444]	; (8003e14 <CPUTstCont+0x100>)
    /* Assumes R1 OK If not, error will be detected by R1 test and Ctrl flow test later on */
    LDR R1,[R0]
 8003c56:	6801      	ldr	r1, [r0, #0]
    ADDS R1,R1,#0x3	           /* CtrlFlowCnt += OxO3 */
 8003c58:	3103      	adds	r1, #3
    STR R1,[R0]
 8003c5a:	6001      	str	r1, [r0, #0]

    /* Register R1 */
    LDR R0, =conAA
 8003c5c:	486e      	ldr	r0, [pc, #440]	; (8003e18 <CPUTstCont+0x104>)
    LDR R1,[R0]
 8003c5e:	6801      	ldr	r1, [r0, #0]
    LDR R0,[R0]
 8003c60:	6800      	ldr	r0, [r0, #0]
    CMP R0,R1
 8003c62:	4288      	cmp	r0, r1
    BNE CPUTestFail
 8003c64:	d154      	bne.n	8003d10 <CPUTestFail>
    LDR R0, =con55
 8003c66:	486d      	ldr	r0, [pc, #436]	; (8003e1c <CPUTstCont+0x108>)
    LDR R1,[R0]
 8003c68:	6801      	ldr	r1, [r0, #0]
    LDR R0,[R0]
 8003c6a:	6800      	ldr	r0, [r0, #0]
    CMP R0,R1
 8003c6c:	4288      	cmp	r0, r1
    BNE CPUTestFail
 8003c6e:	d14f      	bne.n	8003d10 <CPUTestFail>
    MOVS R1, #0x1              /* For ramp test */
 8003c70:	2101      	movs	r1, #1

    /* Register R2 */
    LDR R0, =conAA
 8003c72:	4869      	ldr	r0, [pc, #420]	; (8003e18 <CPUTstCont+0x104>)
    LDR R2,[R0]
 8003c74:	6802      	ldr	r2, [r0, #0]
    LDR R0,[R0]
 8003c76:	6800      	ldr	r0, [r0, #0]
    CMP R0,R2
 8003c78:	4290      	cmp	r0, r2
    BNE CPUTestFail
 8003c7a:	d149      	bne.n	8003d10 <CPUTestFail>
    LDR R0, =con55
 8003c7c:	4867      	ldr	r0, [pc, #412]	; (8003e1c <CPUTstCont+0x108>)
    LDR R2,[R0]
 8003c7e:	6802      	ldr	r2, [r0, #0]
    LDR R0,[R0]
 8003c80:	6800      	ldr	r0, [r0, #0]
    CMP R0,R2
 8003c82:	4290      	cmp	r0, r2
    BNE CPUTestFail
 8003c84:	d144      	bne.n	8003d10 <CPUTestFail>
    MOVS R2, #0x2              /* For ramp test */
 8003c86:	2202      	movs	r2, #2

    /* Register R3 */
    LDR R0, =conAA
 8003c88:	4863      	ldr	r0, [pc, #396]	; (8003e18 <CPUTstCont+0x104>)
    LDR R3,[R0]
 8003c8a:	6803      	ldr	r3, [r0, #0]
    LDR R0,[R0]
 8003c8c:	6800      	ldr	r0, [r0, #0]
    CMP R0,R3
 8003c8e:	4298      	cmp	r0, r3
    BNE CPUTestFail
 8003c90:	d13e      	bne.n	8003d10 <CPUTestFail>
    LDR R0, =con55
 8003c92:	4862      	ldr	r0, [pc, #392]	; (8003e1c <CPUTstCont+0x108>)
    LDR R3,[R0]
 8003c94:	6803      	ldr	r3, [r0, #0]
    LDR R0,[R0]
 8003c96:	6800      	ldr	r0, [r0, #0]
    CMP R0,R3
 8003c98:	4298      	cmp	r0, r3
    BNE CPUTestFail
 8003c9a:	d139      	bne.n	8003d10 <CPUTestFail>
    MOVS R3, #0x3              /* For ramp test */
 8003c9c:	2303      	movs	r3, #3

    /* Register R4 */
    LDR R0, =conAA
 8003c9e:	485e      	ldr	r0, [pc, #376]	; (8003e18 <CPUTstCont+0x104>)
    LDR R4,[R0]
 8003ca0:	6804      	ldr	r4, [r0, #0]
    LDR R0,[R0]
 8003ca2:	6800      	ldr	r0, [r0, #0]
    CMP R0,R4
 8003ca4:	42a0      	cmp	r0, r4
    BNE CPUTestFail
 8003ca6:	d133      	bne.n	8003d10 <CPUTestFail>
    LDR R0, =con55
 8003ca8:	485c      	ldr	r0, [pc, #368]	; (8003e1c <CPUTstCont+0x108>)
    LDR R4,[R0]
 8003caa:	6804      	ldr	r4, [r0, #0]
    LDR R0,[R0]
 8003cac:	6800      	ldr	r0, [r0, #0]
    CMP R0,R4
 8003cae:	42a0      	cmp	r0, r4
    BNE CPUTestFail
 8003cb0:	d12e      	bne.n	8003d10 <CPUTestFail>
    MOVS R4, #0x4              /* For ramp test */
 8003cb2:	2404      	movs	r4, #4

    /* Register R5 */
    LDR R0, =conAA
 8003cb4:	4858      	ldr	r0, [pc, #352]	; (8003e18 <CPUTstCont+0x104>)
    LDR R5,[R0]
 8003cb6:	6805      	ldr	r5, [r0, #0]
    LDR R0,[R0]
 8003cb8:	6800      	ldr	r0, [r0, #0]
    CMP R0,R5
 8003cba:	42a8      	cmp	r0, r5
    BNE CPUTestFail
 8003cbc:	d128      	bne.n	8003d10 <CPUTestFail>
    LDR R0, =con55
 8003cbe:	4857      	ldr	r0, [pc, #348]	; (8003e1c <CPUTstCont+0x108>)
    LDR R5,[R0]
 8003cc0:	6805      	ldr	r5, [r0, #0]
    LDR R0,[R0]
 8003cc2:	6800      	ldr	r0, [r0, #0]
    CMP R0,R5
 8003cc4:	42a8      	cmp	r0, r5
    BNE CPUTestFail
 8003cc6:	d123      	bne.n	8003d10 <CPUTestFail>
    MOVS R5, #0x5              /* For ramp test */
 8003cc8:	2505      	movs	r5, #5

    /* Register R6 */
    LDR R0, =conAA
 8003cca:	4853      	ldr	r0, [pc, #332]	; (8003e18 <CPUTstCont+0x104>)
    LDR R6,[R0]
 8003ccc:	6806      	ldr	r6, [r0, #0]
    LDR R0,[R0]
 8003cce:	6800      	ldr	r0, [r0, #0]
    CMP R0,R6
 8003cd0:	42b0      	cmp	r0, r6
    BNE CPUTestFail
 8003cd2:	d11d      	bne.n	8003d10 <CPUTestFail>
    LDR R0, =con55
 8003cd4:	4851      	ldr	r0, [pc, #324]	; (8003e1c <CPUTstCont+0x108>)
    LDR R6,[R0]
 8003cd6:	6806      	ldr	r6, [r0, #0]
    LDR R0,[R0]
 8003cd8:	6800      	ldr	r0, [r0, #0]
    CMP R0,R6
 8003cda:	42b0      	cmp	r0, r6
    BNE CPUTestFail
 8003cdc:	d118      	bne.n	8003d10 <CPUTestFail>
    MOVS R6, #0x6              /* For ramp test */
 8003cde:	2606      	movs	r6, #6

    /* Register R7 */
    LDR R0, =conAA
 8003ce0:	484d      	ldr	r0, [pc, #308]	; (8003e18 <CPUTstCont+0x104>)
    LDR R7,[R0]
 8003ce2:	6807      	ldr	r7, [r0, #0]
    LDR R0,[R0]
 8003ce4:	6800      	ldr	r0, [r0, #0]
    CMP R0,R7
 8003ce6:	42b8      	cmp	r0, r7
    BNE CPUTestFail
 8003ce8:	d112      	bne.n	8003d10 <CPUTestFail>
    LDR R0, =con55
 8003cea:	484c      	ldr	r0, [pc, #304]	; (8003e1c <CPUTstCont+0x108>)
    LDR R7,[R0]
 8003cec:	6807      	ldr	r7, [r0, #0]
    LDR R0,[R0]
 8003cee:	6800      	ldr	r0, [r0, #0]
    CMP R0,R7
 8003cf0:	42b8      	cmp	r0, r7
    BNE CPUTestFail
 8003cf2:	d10d      	bne.n	8003d10 <CPUTestFail>
    MOVS R7, #0x7              /* For ramp test */
 8003cf4:	2707      	movs	r7, #7

    /* Register R8 */
    LDR R0, =conAA
 8003cf6:	4848      	ldr	r0, [pc, #288]	; (8003e18 <CPUTstCont+0x104>)
    LDR R0,[R0]
 8003cf8:	6800      	ldr	r0, [r0, #0]
    MOV R8,R0
 8003cfa:	4680      	mov	r8, r0
    CMP R0,R8
 8003cfc:	4540      	cmp	r0, r8
    BNE CPUTestFail
 8003cfe:	d107      	bne.n	8003d10 <CPUTestFail>
    LDR R0, =con55
 8003d00:	4846      	ldr	r0, [pc, #280]	; (8003e1c <CPUTstCont+0x108>)
    LDR R0,[R0]
 8003d02:	6800      	ldr	r0, [r0, #0]
    MOV R8,R0
 8003d04:	4680      	mov	r8, r0
    CMP R0,R8
 8003d06:	4540      	cmp	r0, r8
    BNE CPUTestFail
 8003d08:	d102      	bne.n	8003d10 <CPUTestFail>
    MOVS R0, #0x08             /* For ramp test */
 8003d0a:	2008      	movs	r0, #8
    MOV	R8,R0
 8003d0c:	4680      	mov	r8, r0

    BAL CPUTstCont
 8003d0e:	e001      	b.n	8003d14 <CPUTstCont>

08003d10 <CPUTestFail>:

CPUTestFail:
    BLAL FailSafePOR
 8003d10:	f7ff f984 	bl	800301c <FailSafePOR>

08003d14 <CPUTstCont>:

CPUTstCont:
    /* Register R9 */
    LDR R0, =conAA
 8003d14:	4840      	ldr	r0, [pc, #256]	; (8003e18 <CPUTstCont+0x104>)
    LDR R0,[R0]
 8003d16:	6800      	ldr	r0, [r0, #0]
    MOV R9,R0
 8003d18:	4681      	mov	r9, r0
    CMP R0,R9
 8003d1a:	4548      	cmp	r0, r9
    BNE CPUTestFail
 8003d1c:	d1f8      	bne.n	8003d10 <CPUTestFail>
    LDR R0, =con55
 8003d1e:	483f      	ldr	r0, [pc, #252]	; (8003e1c <CPUTstCont+0x108>)
    LDR R0,[R0]
 8003d20:	6800      	ldr	r0, [r0, #0]
    MOV R9,R0
 8003d22:	4681      	mov	r9, r0
    CMP R0,R9
 8003d24:	4548      	cmp	r0, r9
    BNE CPUTestFail
 8003d26:	d1f3      	bne.n	8003d10 <CPUTestFail>
    MOVS R0, #0x09             /* For ramp test */
 8003d28:	2009      	movs	r0, #9
    MOV	R9,R0
 8003d2a:	4681      	mov	r9, r0

    /* Register R10 */
    LDR R0, =conAA
 8003d2c:	483a      	ldr	r0, [pc, #232]	; (8003e18 <CPUTstCont+0x104>)
    LDR R0,[R0]
 8003d2e:	6800      	ldr	r0, [r0, #0]
    MOV R10,R0
 8003d30:	4682      	mov	sl, r0
    CMP R0,R10
 8003d32:	4550      	cmp	r0, sl
    BNE CPUTestFail
 8003d34:	d1ec      	bne.n	8003d10 <CPUTestFail>
    LDR R0, =con55
 8003d36:	4839      	ldr	r0, [pc, #228]	; (8003e1c <CPUTstCont+0x108>)
    LDR R0,[R0]
 8003d38:	6800      	ldr	r0, [r0, #0]
    MOV R10,R0
 8003d3a:	4682      	mov	sl, r0
    CMP R0,R10
 8003d3c:	4550      	cmp	r0, sl
    BNE CPUTestFail
 8003d3e:	d1e7      	bne.n	8003d10 <CPUTestFail>
    MOVS R0, #0x0A             /* For ramp test */
 8003d40:	200a      	movs	r0, #10
    MOV	R10,R0
 8003d42:	4682      	mov	sl, r0

    /* Register R11 */
    LDR R0, =conAA
 8003d44:	4834      	ldr	r0, [pc, #208]	; (8003e18 <CPUTstCont+0x104>)
    LDR R0,[R0]
 8003d46:	6800      	ldr	r0, [r0, #0]
    MOV R11,R0
 8003d48:	4683      	mov	fp, r0
    CMP R0,R11
 8003d4a:	4558      	cmp	r0, fp
    BNE CPUTestFail
 8003d4c:	d1e0      	bne.n	8003d10 <CPUTestFail>
    LDR R0, =con55
 8003d4e:	4833      	ldr	r0, [pc, #204]	; (8003e1c <CPUTstCont+0x108>)
    LDR R0,[R0]
 8003d50:	6800      	ldr	r0, [r0, #0]
    MOV R11,R0
 8003d52:	4683      	mov	fp, r0
    CMP R0,R11
 8003d54:	4558      	cmp	r0, fp
    BNE CPUTestFail
 8003d56:	d1db      	bne.n	8003d10 <CPUTestFail>
    MOVS R0, #0x0B             /* For ramp test */
 8003d58:	200b      	movs	r0, #11
    MOV	R11,R0
 8003d5a:	4683      	mov	fp, r0

    /* Register R12 */
    LDR R0, =conAA
 8003d5c:	482e      	ldr	r0, [pc, #184]	; (8003e18 <CPUTstCont+0x104>)
    LDR R0,[R0]
 8003d5e:	6800      	ldr	r0, [r0, #0]
    MOV R12,R0
 8003d60:	4684      	mov	ip, r0
    CMP R0,R12
 8003d62:	4560      	cmp	r0, ip
    BNE CPUTestFail
 8003d64:	d1d4      	bne.n	8003d10 <CPUTestFail>
    LDR R0, =con55
 8003d66:	482d      	ldr	r0, [pc, #180]	; (8003e1c <CPUTstCont+0x108>)
    LDR R0,[R0]
 8003d68:	6800      	ldr	r0, [r0, #0]
    MOV R12,R0
 8003d6a:	4684      	mov	ip, r0
    CMP R0,R12
 8003d6c:	4560      	cmp	r0, ip
    BNE CPUTestFail
 8003d6e:	d1cf      	bne.n	8003d10 <CPUTestFail>
    MOVS R0, #0x0C             /* For ramp test */
 8003d70:	200c      	movs	r0, #12
    MOV	R12,R0
 8003d72:	4684      	mov	ip, r0
    LDR R0, =CPUTstCont
 8003d74:	482a      	ldr	r0, [pc, #168]	; (8003e20 <CPUTstCont+0x10c>)

    /* Ramp pattern verification	(R0 is not tested) */
    CMP R1, #0x01
 8003d76:	2901      	cmp	r1, #1
    BNE CPUTestFail
 8003d78:	d1ca      	bne.n	8003d10 <CPUTestFail>
    CMP R2, #0x02
 8003d7a:	2a02      	cmp	r2, #2
    BNE CPUTestFail
 8003d7c:	d1c8      	bne.n	8003d10 <CPUTestFail>
    CMP R3, #0x03
 8003d7e:	2b03      	cmp	r3, #3
    BNE CPUTestFail
 8003d80:	d1c6      	bne.n	8003d10 <CPUTestFail>
    CMP R4, #0x04
 8003d82:	2c04      	cmp	r4, #4
    BNE CPUTestFail
 8003d84:	d1c4      	bne.n	8003d10 <CPUTestFail>
    CMP R5, #0x05
 8003d86:	2d05      	cmp	r5, #5
    BNE CPUTestFail
 8003d88:	d1c2      	bne.n	8003d10 <CPUTestFail>
    CMP R6, #0x06
 8003d8a:	2e06      	cmp	r6, #6
    BNE CPUTestFail
 8003d8c:	d1c0      	bne.n	8003d10 <CPUTestFail>
    CMP R7, #0x07
 8003d8e:	2f07      	cmp	r7, #7
    BNE CPUTestFail
 8003d90:	d1be      	bne.n	8003d10 <CPUTestFail>
    MOVS R0, #0x08
 8003d92:	2008      	movs	r0, #8
    CMP R0,R8
 8003d94:	4540      	cmp	r0, r8
    BNE CPUTestFail
 8003d96:	d1bb      	bne.n	8003d10 <CPUTestFail>
    MOVS R0, #0x09
 8003d98:	2009      	movs	r0, #9
    CMP R0,R9
 8003d9a:	4548      	cmp	r0, r9
    BNE CPUTestFail
 8003d9c:	d1b8      	bne.n	8003d10 <CPUTestFail>
    MOVS R0, #0x0A
 8003d9e:	200a      	movs	r0, #10
    CMP R0,R10
 8003da0:	4550      	cmp	r0, sl
    BNE CPUTestFail
 8003da2:	d1b5      	bne.n	8003d10 <CPUTestFail>
    MOVS R0, #0x0B
 8003da4:	200b      	movs	r0, #11
    CMP R0,R11
 8003da6:	4558      	cmp	r0, fp
    BNE CPUTestFail
 8003da8:	d1b2      	bne.n	8003d10 <CPUTestFail>
    MOVS R0, #0x0C
 8003daa:	200c      	movs	r0, #12
    CMP R0,R12
 8003dac:	4560      	cmp	r0, ip
    BNE CPUTestFail
 8003dae:	d1af      	bne.n	8003d10 <CPUTestFail>

    /* Process Stack pointer (banked Register R13) */
    MRS R0,PSP           /* Save process stack value */
 8003db0:	f3ef 8009 	mrs	r0, PSP
    LDR R1, =conA8       /* Test is different (PSP is word aligned, 2 LSB cleared) */
 8003db4:	491b      	ldr	r1, [pc, #108]	; (8003e24 <CPUTstCont+0x110>)
    LDR R1,[R1]
 8003db6:	6809      	ldr	r1, [r1, #0]
    MSR PSP,R1           /* load process stack value */
 8003db8:	f381 8809 	msr	PSP, r1
    MRS R2,PSP           /* Get back process stack value */
 8003dbc:	f3ef 8209 	mrs	r2, PSP
    CMP R2,R1            /* Verify value */
 8003dc0:	428a      	cmp	r2, r1
    BNE CPUTestFail
 8003dc2:	d1a5      	bne.n	8003d10 <CPUTestFail>
    LDR R1, =con54       /* Test is different (PSP is word aligned, 2 LSB cleared) */
 8003dc4:	4918      	ldr	r1, [pc, #96]	; (8003e28 <CPUTstCont+0x114>)
    LDR R1,[R1]
 8003dc6:	6809      	ldr	r1, [r1, #0]
    MSR PSP,R1           /* load process stack value */
 8003dc8:	f381 8809 	msr	PSP, r1
    MRS R2,PSP           /* Get back process stack value */
 8003dcc:	f3ef 8209 	mrs	r2, PSP
    CMP R2,R1            /* Verify value */
 8003dd0:	428a      	cmp	r2, r1
    BNE CPUTestFail
 8003dd2:	d19d      	bne.n	8003d10 <CPUTestFail>
    MSR PSP, R0          /* Restore process stack value */
 8003dd4:	f380 8809 	msr	PSP, r0

    /* Stack pointer (Register R13) */
    MRS R0,MSP           /* Save stack pointer value */
 8003dd8:	f3ef 8008 	mrs	r0, MSP
    LDR R1, =conA8       /* Test is different (SP is word aligned, 2 LSB cleared) */
 8003ddc:	4911      	ldr	r1, [pc, #68]	; (8003e24 <CPUTstCont+0x110>)
    LDR R1,[R1]
 8003dde:	6809      	ldr	r1, [r1, #0]
    MSR MSP,R1			 /* load SP value */
 8003de0:	f381 8808 	msr	MSP, r1
    MRS R2,MSP			 /* Get back SP value */
 8003de4:	f3ef 8208 	mrs	r2, MSP
    CMP R2,R1			 /* Verify value */
 8003de8:	428a      	cmp	r2, r1
    BNE CPUTestFail
 8003dea:	d191      	bne.n	8003d10 <CPUTestFail>
    LDR R1, =con54
 8003dec:	490e      	ldr	r1, [pc, #56]	; (8003e28 <CPUTstCont+0x114>)
    LDR R1,[R1]			 /* load SP value */
 8003dee:	6809      	ldr	r1, [r1, #0]
    MSR MSP,R1			 /* Get back SP value */
 8003df0:	f381 8808 	msr	MSP, r1
    MRS R2,MSP			 /* Verify value */
 8003df4:	f3ef 8208 	mrs	r2, MSP
    CMP R2,R1
 8003df8:	428a      	cmp	r2, r1
    BNE CPUTestFail
 8003dfa:	d189      	bne.n	8003d10 <CPUTestFail>
    MSR MSP,R0			 /* Restore stack pointer value */
 8003dfc:	f380 8808 	msr	MSP, r0

    /* Link register R14	cannot be tested an error should be detected by	Ctrl flow test later */

    /* Control flow test (EXIT point) */
    LDR R0,=CtrlFlowCntInv
 8003e00:	480a      	ldr	r0, [pc, #40]	; (8003e2c <CPUTstCont+0x118>)
    LDR R1,[R0]
 8003e02:	6801      	ldr	r1, [r0, #0]
    SUBS R1,R1,#0x3	     /* CtrlFlowCntInv -= OxO3 */
 8003e04:	3903      	subs	r1, #3
    STR R1,[R0]
 8003e06:	6001      	str	r1, [r0, #0]

    POP {R4-R6}			 /* Restore critical registers */
 8003e08:	bc70      	pop	{r4, r5, r6}

    /* If next instruction is not executed, R0 will hold a value different from 0 */
    MOVS R0, #0x1        /* CPUTEST_SUCCESS */
 8003e0a:	2001      	movs	r0, #1
    BX LR                /* return to the caller */
 8003e0c:	4770      	bx	lr
 8003e0e:	0000      	.short	0x0000
    LDR R0,=con80      	  	   /* Prepares Overflow test */
 8003e10:	08003c28 	.word	0x08003c28
    LDR R0,=CtrlFlowCnt
 8003e14:	20000030 	.word	0x20000030
    LDR R0, =conAA
 8003e18:	08003c20 	.word	0x08003c20
    LDR R0, =con55
 8003e1c:	08003c24 	.word	0x08003c24
    LDR R0, =CPUTstCont
 8003e20:	08003d14 	.word	0x08003d14
    LDR R1, =conA8       /* Test is different (PSP is word aligned, 2 LSB cleared) */
 8003e24:	08003c2c 	.word	0x08003c2c
    LDR R1, =con54       /* Test is different (PSP is word aligned, 2 LSB cleared) */
 8003e28:	08003c30 	.word	0x08003c30
    LDR R0,=CtrlFlowCntInv
 8003e2c:	20000054 	.word	0x20000054

08003e30 <HAL_MspInit>:
  * @brief  Initializes the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually  
            modified by the user
   */ 
}
 8003e34:	46c0      	nop			; (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  : None
  * @retval : None
  */
void NMI_Handler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
#ifdef STL_VERBOSE
  if (__HAL_RCC_GET_IT_SOURCE(RCC_IT_CSS))
 8003e40:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <NMI_Handler+0x54>)
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	401a      	ands	r2, r3
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d10e      	bne.n	8003e70 <NMI_Handler+0x34>
  {
    while(__HAL_USART_GET_FLAG(&UartHandle, USART_FLAG_TC) == 0)
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <NMI_Handler+0x58>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	2240      	movs	r2, #64	; 0x40
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d1f8      	bne.n	8003e54 <NMI_Handler+0x18>
    {   /* Wait previous transmission completion */
    }
    /* Re-configure USART baud rate to have 115200 bds with HSI clock (8MHz) */
    USART_Configuration();
 8003e62:	f7fe fbc9 	bl	80025f8 <USART_Configuration>
    printf("\n\r Clock Source failure (Clock Security System)\n\r");
 8003e66:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <NMI_Handler+0x5c>)
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f003 fea3 	bl	8007bb4 <iprintf>
 8003e6e:	e003      	b.n	8003e78 <NMI_Handler+0x3c>
  }
  else
  {
    printf("\n\r NMI Exception\n\r");
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <NMI_Handler+0x60>)
 8003e72:	0018      	movs	r0, r3
 8003e74:	f003 fe9e 	bl	8007bb4 <iprintf>
  }
#endif /* STL_VERBOSE */

#if defined STL_EVAL_MODE
  /* LED_ERR Off for debug purposes */
  BSP_LED_Off(LED_ERR);
 8003e78:	23a0      	movs	r3, #160	; 0xa0
 8003e7a:	05db      	lsls	r3, r3, #23
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2180      	movs	r1, #128	; 0x80
 8003e80:	0018      	movs	r0, r3
 8003e82:	f001 f837 	bl	8004ef4 <HAL_GPIO_WritePin>
#endif  /* STL_EVAL_MODE */

  FailSafePOR();
 8003e86:	f7ff f8c9 	bl	800301c <FailSafePOR>
}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	200002d0 	.word	0x200002d0
 8003e98:	0800a544 	.word	0x0800a544
 8003e9c:	0800a578 	.word	0x0800a578

08003ea0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  : None
  * @retval : None
  */
void HardFault_Handler(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
#ifdef STL_VERBOSE
  printf("\n\r Hard fault Exception \n\r");
 8003ea4:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <HardFault_Handler+0x24>)
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f003 fe84 	bl	8007bb4 <iprintf>
#endif /* STL_VERBOSE */

#if defined STL_EVAL_MODE
  /* LED_ERR Off for debug purposes */
  BSP_LED_Off(LED_ERR);
 8003eac:	23a0      	movs	r3, #160	; 0xa0
 8003eae:	05db      	lsls	r3, r3, #23
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2180      	movs	r1, #128	; 0x80
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f001 f81d 	bl	8004ef4 <HAL_GPIO_WritePin>
#endif  /* STL_EVAL_MODE */

  FailSafePOR();
 8003eba:	f7ff f8af 	bl	800301c <FailSafePOR>
}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	0800a58c 	.word	0x0800a58c

08003ec8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  : None
  * @retval : None
  */
void SVC_Handler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
#ifdef STL_VERBOSE
  printf("\n\r SVCall Exception \n\r");
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <SVC_Handler+0x18>)
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f003 fe70 	bl	8007bb4 <iprintf>
#endif /* STL_VERBOSE */

  FailSafePOR();
 8003ed4:	f7ff f8a2 	bl	800301c <FailSafePOR>
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	0800a5a8 	.word	0x0800a5a8

08003ee4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  : None
  * @retval : None
  */
void PendSV_Handler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
#ifdef STL_VERBOSE
  printf("\n\r PendSVC Exception \n\r");
 8003ee8:	4b04      	ldr	r3, [pc, #16]	; (8003efc <PendSV_Handler+0x18>)
 8003eea:	0018      	movs	r0, r3
 8003eec:	f003 fe62 	bl	8007bb4 <iprintf>
#endif /* STL_VERBOSE */

  FailSafePOR();
 8003ef0:	f7ff f894 	bl	800301c <FailSafePOR>
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	0800a5e0 	.word	0x0800a5e0

08003f00 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  : None
  * @retval : None
  */
void SysTick_Handler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8003f06:	f000 fb61 	bl	80045cc <HAL_IncTick>
    
  /* Verify TickCounter integrity */
  if ((TickCounter ^ TickCounterInv) == 0xFFFFFFFFuL)
 8003f0a:	4b40      	ldr	r3, [pc, #256]	; (800400c <SysTick_Handler+0x10c>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b40      	ldr	r3, [pc, #256]	; (8004010 <SysTick_Handler+0x110>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4053      	eors	r3, r2
 8003f14:	3301      	adds	r3, #1
 8003f16:	d000      	beq.n	8003f1a <SysTick_Handler+0x1a>
 8003f18:	e073      	b.n	8004002 <SysTick_Handler+0x102>
  {
    TickCounter++;
 8003f1a:	4b3c      	ldr	r3, [pc, #240]	; (800400c <SysTick_Handler+0x10c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	4b3a      	ldr	r3, [pc, #232]	; (800400c <SysTick_Handler+0x10c>)
 8003f22:	601a      	str	r2, [r3, #0]
    TickCounterInv = ~TickCounter;
 8003f24:	4b39      	ldr	r3, [pc, #228]	; (800400c <SysTick_Handler+0x10c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	43da      	mvns	r2, r3
 8003f2a:	4b39      	ldr	r3, [pc, #228]	; (8004010 <SysTick_Handler+0x110>)
 8003f2c:	601a      	str	r2, [r3, #0]

    if (TickCounter >= SYSTICK_10ms_TB)
 8003f2e:	4b37      	ldr	r3, [pc, #220]	; (800400c <SysTick_Handler+0x10c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b09      	cmp	r3, #9
 8003f34:	d965      	bls.n	8004002 <SysTick_Handler+0x102>
    {
      uint32_t RamTestResult;

      #if defined STL_EVAL_MODE
        /* Toggle LED_VLM for debug purposes */
        BSP_LED_Toggle(LED_VLM);
 8003f36:	23a0      	movs	r3, #160	; 0xa0
 8003f38:	05db      	lsls	r3, r3, #23
 8003f3a:	2120      	movs	r1, #32
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f000 fff6 	bl	8004f2e <HAL_GPIO_TogglePin>
      #endif  /* STL_EVAL_MODE */

      /* Reset timebase counter */
      TickCounter = 0u;
 8003f42:	4b32      	ldr	r3, [pc, #200]	; (800400c <SysTick_Handler+0x10c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
      TickCounterInv = 0xFFFFFFFFuL;
 8003f48:	4b31      	ldr	r3, [pc, #196]	; (8004010 <SysTick_Handler+0x110>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	4252      	negs	r2, r2
 8003f4e:	601a      	str	r2, [r3, #0]

      /* Set Flag read in main loop */
      TimeBaseFlag = 0xAAAAAAAAuL;
 8003f50:	4b30      	ldr	r3, [pc, #192]	; (8004014 <SysTick_Handler+0x114>)
 8003f52:	4a31      	ldr	r2, [pc, #196]	; (8004018 <SysTick_Handler+0x118>)
 8003f54:	601a      	str	r2, [r3, #0]
      TimeBaseFlagInv = 0x55555555uL;
 8003f56:	4b31      	ldr	r3, [pc, #196]	; (800401c <SysTick_Handler+0x11c>)
 8003f58:	4a31      	ldr	r2, [pc, #196]	; (8004020 <SysTick_Handler+0x120>)
 8003f5a:	601a      	str	r2, [r3, #0]

      ISRCtrlFlowCnt += RAM_MARCHC_ISR_CALLER;
 8003f5c:	4b31      	ldr	r3, [pc, #196]	; (8004024 <SysTick_Handler+0x124>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	1dda      	adds	r2, r3, #7
 8003f62:	4b30      	ldr	r3, [pc, #192]	; (8004024 <SysTick_Handler+0x124>)
 8003f64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f66:	b672      	cpsid	i
}
 8003f68:	46c0      	nop			; (mov r8, r8)
			__disable_irq();
      RamTestResult = STL_TranspMarch();
 8003f6a:	f7ff fc53 	bl	8003814 <STL_TranspMarch>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f72:	b662      	cpsie	i
}
 8003f74:	46c0      	nop			; (mov r8, r8)
			__enable_irq();
      ISRCtrlFlowCntInv -= RAM_MARCHC_ISR_CALLER;
 8003f76:	4b2c      	ldr	r3, [pc, #176]	; (8004028 <SysTick_Handler+0x128>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	1fda      	subs	r2, r3, #7
 8003f7c:	4b2a      	ldr	r3, [pc, #168]	; (8004028 <SysTick_Handler+0x128>)
 8003f7e:	601a      	str	r2, [r3, #0]

      switch ( RamTestResult )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d013      	beq.n	8003fae <SysTick_Handler+0xae>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d109      	bne.n	8003fa0 <SysTick_Handler+0xa0>
          #ifdef STL_VERBOSE
          /* avoid any long string output here in the interrupt, '#' marks ram test completed ok */
            #ifndef __GNUC__
              putchar((int16_t)'#');
            #else
              __io_putchar((int16_t)'#');
 8003f8c:	2023      	movs	r0, #35	; 0x23
 8003f8e:	f7fe fbb7 	bl	8002700 <__io_putchar>
            #endif /* __GNUC__ */
          #endif  /* STL_VERBOSE */
          #ifdef STL_EVAL_MODE
            /* Toggle LED_VLM for debug purposes */
            BSP_LED_Toggle(LED_VLM);
 8003f92:	23a0      	movs	r3, #160	; 0xa0
 8003f94:	05db      	lsls	r3, r3, #23
 8003f96:	2120      	movs	r1, #32
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f000 ffc8 	bl	8004f2e <HAL_GPIO_TogglePin>
          #endif /* STL_EVAL_MODE */
          #if defined(STL_EVAL_LCD)
            ++MyRAMCounter;
          #endif /* STL_EVAL_LCD */
          break;
 8003f9e:	e007      	b.n	8003fb0 <SysTick_Handler+0xb0>
        case TEST_FAILURE:
        case CLASS_B_DATA_FAIL:
        default:
          #ifdef STL_VERBOSE
            printf("\n\r >>>>>>>>>>>>>>>>>>>  RAM Error (March C- Run-time check)\n\r");
 8003fa0:	4b22      	ldr	r3, [pc, #136]	; (800402c <SysTick_Handler+0x12c>)
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f003 fe06 	bl	8007bb4 <iprintf>
          #endif  /* STL_VERBOSE */
          FailSafePOR();
 8003fa8:	f7ff f838 	bl	800301c <FailSafePOR>
          break;
 8003fac:	e000      	b.n	8003fb0 <SysTick_Handler+0xb0>
          break;
 8003fae:	46c0      	nop			; (mov r8, r8)
      } /* End of the switch */

      /* Do we reached the end of RAM test? */
      /* Verify 1st ISRCtrlFlowCnt integrity */
      if ((ISRCtrlFlowCnt ^ ISRCtrlFlowCntInv) == 0xFFFFFFFFuL)
 8003fb0:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <SysTick_Handler+0x124>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4b1c      	ldr	r3, [pc, #112]	; (8004028 <SysTick_Handler+0x128>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4053      	eors	r3, r2
 8003fba:	3301      	adds	r3, #1
 8003fbc:	d115      	bne.n	8003fea <SysTick_Handler+0xea>
      {
        if (RamTestResult == TEST_OK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d118      	bne.n	8003ff6 <SysTick_Handler+0xf6>
  /* ==============================================================================*/
  /* MISRA violation of rule 17.4 - pointer arithmetic is used to check RAM test control flow */
	#ifdef __IAR_SYSTEMS_ICC__  /* IAR Compiler */
		#pragma diag_suppress=Pm088
	#endif /* __IAR_SYSTEMS_ICC__ */
          if (ISRCtrlFlowCnt != RAM_TEST_COMPLETED)
 8003fc4:	4b17      	ldr	r3, [pc, #92]	; (8004024 <SysTick_Handler+0x124>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b6c      	cmp	r3, #108	; 0x6c
 8003fca:	d006      	beq.n	8003fda <SysTick_Handler+0xda>
		#pragma diag_default=Pm088
	#endif /* __IAR_SYSTEMS_ICC__ */
  /* ==============================================================================*/
          {
          #ifdef STL_VERBOSE
            printf("\n\r Control Flow error (RAM test) \n\r");
 8003fcc:	4b18      	ldr	r3, [pc, #96]	; (8004030 <SysTick_Handler+0x130>)
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f003 fdf0 	bl	8007bb4 <iprintf>
          #endif  /* STL_VERBOSE */
          FailSafePOR();
 8003fd4:	f7ff f822 	bl	800301c <FailSafePOR>
 8003fd8:	e00d      	b.n	8003ff6 <SysTick_Handler+0xf6>
          }
          else  /* Full RAM was scanned */
          {
            ISRCtrlFlowCnt = 0u;
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <SysTick_Handler+0x124>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
            ISRCtrlFlowCntInv = 0xFFFFFFFFuL;
 8003fe0:	4b11      	ldr	r3, [pc, #68]	; (8004028 <SysTick_Handler+0x128>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	4252      	negs	r2, r2
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	e005      	b.n	8003ff6 <SysTick_Handler+0xf6>
        } /* End of RAM completed if*/
      } /* End of control flow monitoring */
      else
      {
      #ifdef STL_VERBOSE
        printf("\n\r Control Flow error in ISR \n\r");
 8003fea:	4b12      	ldr	r3, [pc, #72]	; (8004034 <SysTick_Handler+0x134>)
 8003fec:	0018      	movs	r0, r3
 8003fee:	f003 fde1 	bl	8007bb4 <iprintf>
      #endif  /* STL_VERBOSE */
      FailSafePOR();
 8003ff2:	f7ff f813 	bl	800301c <FailSafePOR>
      }
      #if defined STL_EVAL_MODE
        /* Toggle LED_VLM for debug purposes */
        BSP_LED_Toggle(LED_VLM);
 8003ff6:	23a0      	movs	r3, #160	; 0xa0
 8003ff8:	05db      	lsls	r3, r3, #23
 8003ffa:	2120      	movs	r1, #32
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f000 ff96 	bl	8004f2e <HAL_GPIO_TogglePin>
      #endif  /* STL_EVAL_MODE */
    } /* End of the 10 ms timebase interrupt */
  }  
}
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	46bd      	mov	sp, r7
 8004006:	b002      	add	sp, #8
 8004008:	bd80      	pop	{r7, pc}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	2000003c 	.word	0x2000003c
 8004010:	20000060 	.word	0x20000060
 8004014:	20000040 	.word	0x20000040
 8004018:	aaaaaaaa 	.word	0xaaaaaaaa
 800401c:	20000064 	.word	0x20000064
 8004020:	55555555 	.word	0x55555555
 8004024:	20000034 	.word	0x20000034
 8004028:	20000058 	.word	0x20000058
 800402c:	0800a5f8 	.word	0x0800a5f8
 8004030:	0800a638 	.word	0x0800a638
 8004034:	0800a65c 	.word	0x0800a65c

08004038 <TIM21_IRQHandler>:
  * @brief  This function handles TIM21 global interrupt request.
  * @param  : None
  * @retval : None
  */
void TIM21_IRQHandler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
  uint16_t tmpCC1_last_cpy;
   
  if ((TIM21->SR & TIM_SR_CC1IF) != 0u )
 800403e:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <TIM21_IRQHandler+0x78>)
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	2202      	movs	r2, #2
 8004044:	4013      	ands	r3, r2
 8004046:	d02e      	beq.n	80040a6 <TIM21_IRQHandler+0x6e>
  {
    /* store previous captured value */
    tmpCC1_last_cpy = tmpCC1_last; 
 8004048:	1dbb      	adds	r3, r7, #6
 800404a:	4a1a      	ldr	r2, [pc, #104]	; (80040b4 <TIM21_IRQHandler+0x7c>)
 800404c:	8812      	ldrh	r2, [r2, #0]
 800404e:	801a      	strh	r2, [r3, #0]
    /* get currently captured value */
    tmpCC1_last = (uint16_t)(TIM21->CCR1);
 8004050:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <TIM21_IRQHandler+0x78>)
 8004052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004054:	b29a      	uxth	r2, r3
 8004056:	4b17      	ldr	r3, [pc, #92]	; (80040b4 <TIM21_IRQHandler+0x7c>)
 8004058:	801a      	strh	r2, [r3, #0]
    /* The CC4IF flag is already cleared here be reading CCR4 register */

    /* overight results only in case the data is required */
    if (LSIPeriodFlag == 0u)
 800405a:	4b17      	ldr	r3, [pc, #92]	; (80040b8 <TIM21_IRQHandler+0x80>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d121      	bne.n	80040a6 <TIM21_IRQHandler+0x6e>
    {
      /* take correct measurement only */
      if ((TIM21->SR & TIM_SR_CC1OF) == 0u)
 8004062:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <TIM21_IRQHandler+0x78>)
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	2380      	movs	r3, #128	; 0x80
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4013      	ands	r3, r2
 800406c:	d115      	bne.n	800409a <TIM21_IRQHandler+0x62>
      {
        /* Compute period length */
        PeriodValue = ((uint32_t)(tmpCC1_last) - (uint32_t)(tmpCC1_last_cpy)) & 0xFFFFuL;
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <TIM21_IRQHandler+0x7c>)
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29a      	uxth	r2, r3
 8004074:	1dbb      	adds	r3, r7, #6
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	b29b      	uxth	r3, r3
 800407c:	001a      	movs	r2, r3
 800407e:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <TIM21_IRQHandler+0x84>)
 8004080:	601a      	str	r2, [r3, #0]
        PeriodValueInv = ~PeriodValue;
 8004082:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <TIM21_IRQHandler+0x84>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	43da      	mvns	r2, r3
 8004088:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <TIM21_IRQHandler+0x88>)
 800408a:	601a      	str	r2, [r3, #0]
              
        /* Set Flag tested at main loop */
        LSIPeriodFlag = 0xAAAAAAAAuL;
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <TIM21_IRQHandler+0x80>)
 800408e:	4a0d      	ldr	r2, [pc, #52]	; (80040c4 <TIM21_IRQHandler+0x8c>)
 8004090:	601a      	str	r2, [r3, #0]
        LSIPeriodFlagInv = 0x55555555uL;
 8004092:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <TIM21_IRQHandler+0x90>)
 8004094:	4a0d      	ldr	r2, [pc, #52]	; (80040cc <TIM21_IRQHandler+0x94>)
 8004096:	601a      	str	r2, [r3, #0]
        TIM21->SR &= (uint16_t)(~TIM_SR_CC1OF);
      }
    }
    /* ignore computation in case data is not required */
  }
}
 8004098:	e005      	b.n	80040a6 <TIM21_IRQHandler+0x6e>
        TIM21->SR &= (uint16_t)(~TIM_SR_CC1OF);
 800409a:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <TIM21_IRQHandler+0x78>)
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <TIM21_IRQHandler+0x78>)
 80040a0:	490b      	ldr	r1, [pc, #44]	; (80040d0 <TIM21_IRQHandler+0x98>)
 80040a2:	400a      	ands	r2, r1
 80040a4:	611a      	str	r2, [r3, #16]
}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b002      	add	sp, #8
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	40010800 	.word	0x40010800
 80040b4:	200002c0 	.word	0x200002c0
 80040b8:	20000044 	.word	0x20000044
 80040bc:	20000038 	.word	0x20000038
 80040c0:	2000005c 	.word	0x2000005c
 80040c4:	aaaaaaaa 	.word	0xaaaaaaaa
 80040c8:	20000068 	.word	0x20000068
 80040cc:	55555555 	.word	0x55555555
 80040d0:	0000fdff 	.word	0x0000fdff

080040d4 <STL_InitClock_Xcross_Measurement>:
  * @brief Configure TIM21 to measure LSI period
  * @param  : None
  * @retval : ErrorStatus = (ERROR, SUCCESS)
  */
ErrorStatus STL_InitClock_Xcross_Measurement(void)
{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b097      	sub	sp, #92	; 0x5c
 80040d8:	af00      	add	r7, sp, #0
  ErrorStatus result = SUCCESS;
 80040da:	2457      	movs	r4, #87	; 0x57
 80040dc:	193b      	adds	r3, r7, r4
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
  TIM_HandleTypeDef  tim_capture_handle;
  TIM_IC_InitTypeDef tim_input_config;
  
  /*## Enable peripherals and GPIO Clocks ####################################*/
  /* TIMx Peripheral clock enable */
  __TIM21_CLK_ENABLE();
 80040e2:	4b32      	ldr	r3, [pc, #200]	; (80041ac <STL_InitClock_Xcross_Measurement+0xd8>)
 80040e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e6:	4b31      	ldr	r3, [pc, #196]	; (80041ac <STL_InitClock_Xcross_Measurement+0xd8>)
 80040e8:	2104      	movs	r1, #4
 80040ea:	430a      	orrs	r2, r1
 80040ec:	635a      	str	r2, [r3, #52]	; 0x34
  
  /*## Configure the NVIC for TIMx ###########################################*/
  HAL_NVIC_SetPriority(TIM21_IRQn, 0u, 0u);
 80040ee:	2200      	movs	r2, #0
 80040f0:	2100      	movs	r1, #0
 80040f2:	2014      	movs	r0, #20
 80040f4:	f000 fb32 	bl	800475c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM21 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80040f8:	2014      	movs	r0, #20
 80040fa:	f000 fb44 	bl	8004786 <HAL_NVIC_EnableIRQ>
  /* TIM21 configuration: Input Capture mode ---------------------
  The LSI oscillator is connected to TIM21 CH1.
  The Rising edge is used as active edge, ICC input divided by 8
  The TIM21 CCR1 is used to compute the frequency value. 
  ------------------------------------------------------------ */
  tim_capture_handle.Instance = TIM21;
 80040fe:	2014      	movs	r0, #20
 8004100:	183b      	adds	r3, r7, r0
 8004102:	4a2b      	ldr	r2, [pc, #172]	; (80041b0 <STL_InitClock_Xcross_Measurement+0xdc>)
 8004104:	601a      	str	r2, [r3, #0]
  tim_capture_handle.Init.Prescaler         = 0u; 
 8004106:	183b      	adds	r3, r7, r0
 8004108:	2200      	movs	r2, #0
 800410a:	605a      	str	r2, [r3, #4]
  tim_capture_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;  
 800410c:	183b      	adds	r3, r7, r0
 800410e:	2200      	movs	r2, #0
 8004110:	609a      	str	r2, [r3, #8]
  tim_capture_handle.Init.Period            = 0xFFFFFFFFul; 
 8004112:	183b      	adds	r3, r7, r0
 8004114:	2201      	movs	r2, #1
 8004116:	4252      	negs	r2, r2
 8004118:	60da      	str	r2, [r3, #12]
  tim_capture_handle.Init.ClockDivision     = 0u;     
 800411a:	183b      	adds	r3, r7, r0
 800411c:	2200      	movs	r2, #0
 800411e:	611a      	str	r2, [r3, #16]
  /* define internal HAL driver status here as handle structure is defined locally */
  __HAL_RESET_HANDLE_STATE(&tim_capture_handle);
 8004120:	183b      	adds	r3, r7, r0
 8004122:	2239      	movs	r2, #57	; 0x39
 8004124:	2100      	movs	r1, #0
 8004126:	5499      	strb	r1, [r3, r2]
  if(HAL_TIM_IC_Init(&tim_capture_handle) != HAL_OK)
 8004128:	183b      	adds	r3, r7, r0
 800412a:	0018      	movs	r0, r3
 800412c:	f001 ff4a 	bl	8005fc4 <HAL_TIM_IC_Init>
 8004130:	1e03      	subs	r3, r0, #0
 8004132:	d002      	beq.n	800413a <STL_InitClock_Xcross_Measurement+0x66>
  {
    /* Initialization Error */
    result = ERROR;
 8004134:	193b      	adds	r3, r7, r4
 8004136:	2201      	movs	r2, #1
 8004138:	701a      	strb	r2, [r3, #0]
  }
  /* Connect internally the TIM21_CH1 Input Capture to the LSI clock output */
  HAL_TIMEx_RemapConfig(&tim_capture_handle, TIM21_TI1_LSI);
 800413a:	2414      	movs	r4, #20
 800413c:	193b      	adds	r3, r7, r4
 800413e:	2114      	movs	r1, #20
 8004140:	0018      	movs	r0, r3
 8004142:	f002 fa88 	bl	8006656 <HAL_TIMEx_RemapConfig>
  
  /* Configure the TIM21 Input Capture of channel 1 */
  tim_input_config.ICPolarity  = TIM_ICPOLARITY_RISING;
 8004146:	1d3b      	adds	r3, r7, #4
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
  tim_input_config.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800414c:	1d3b      	adds	r3, r7, #4
 800414e:	2201      	movs	r2, #1
 8004150:	605a      	str	r2, [r3, #4]
  tim_input_config.ICPrescaler = TIM_ICPSC_DIV8;
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	220c      	movs	r2, #12
 8004156:	609a      	str	r2, [r3, #8]
  tim_input_config.ICFilter    = 0u;
 8004158:	1d3b      	adds	r3, r7, #4
 800415a:	2200      	movs	r2, #0
 800415c:	60da      	str	r2, [r3, #12]
  if(HAL_TIM_IC_ConfigChannel(&tim_capture_handle, &tim_input_config, TIM_CHANNEL_1) != HAL_OK)
 800415e:	1d39      	adds	r1, r7, #4
 8004160:	193b      	adds	r3, r7, r4
 8004162:	2200      	movs	r2, #0
 8004164:	0018      	movs	r0, r3
 8004166:	f002 f83d 	bl	80061e4 <HAL_TIM_IC_ConfigChannel>
 800416a:	1e03      	subs	r3, r0, #0
 800416c:	d003      	beq.n	8004176 <STL_InitClock_Xcross_Measurement+0xa2>
  {
    /* Initialization Error */
    result = ERROR;
 800416e:	2357      	movs	r3, #87	; 0x57
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	2201      	movs	r2, #1
 8004174:	701a      	strb	r2, [r3, #0]
  }
  
  /* Reset the flags */
  tim_capture_handle.Instance->SR = 0u;
 8004176:	2114      	movs	r1, #20
 8004178:	187b      	adds	r3, r7, r1
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2200      	movs	r2, #0
 800417e:	611a      	str	r2, [r3, #16]
  LSIPeriodFlag = 0u;
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <STL_InitClock_Xcross_Measurement+0xe0>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
  
  /* Start the TIM Input Capture measurement in interrupt mode */
  if(HAL_TIM_IC_Start_IT(&tim_capture_handle, TIM_CHANNEL_1) != HAL_OK)
 8004186:	187b      	adds	r3, r7, r1
 8004188:	2100      	movs	r1, #0
 800418a:	0018      	movs	r0, r3
 800418c:	f001 ff62 	bl	8006054 <HAL_TIM_IC_Start_IT>
 8004190:	1e03      	subs	r3, r0, #0
 8004192:	d003      	beq.n	800419c <STL_InitClock_Xcross_Measurement+0xc8>
  {
    /* Initialization Error */
    result = ERROR;
 8004194:	2357      	movs	r3, #87	; 0x57
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	2201      	movs	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
  }
  return(result);
 800419c:	2357      	movs	r3, #87	; 0x57
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	781b      	ldrb	r3, [r3, #0]
}
 80041a2:	0018      	movs	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b017      	add	sp, #92	; 0x5c
 80041a8:	bd90      	pop	{r4, r7, pc}
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40010800 	.word	0x40010800
 80041b4:	20000044 	.word	0x20000044

080041b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  return 1;
 80041bc:	2301      	movs	r3, #1
}
 80041be:	0018      	movs	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <_kill>:

int _kill(int pid, int sig)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80041ce:	f003 f845 	bl	800725c <__errno>
 80041d2:	0003      	movs	r3, r0
 80041d4:	2216      	movs	r2, #22
 80041d6:	601a      	str	r2, [r3, #0]
  return -1;
 80041d8:	2301      	movs	r3, #1
 80041da:	425b      	negs	r3, r3
}
 80041dc:	0018      	movs	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	b002      	add	sp, #8
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_exit>:

void _exit (int status)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041ec:	2301      	movs	r3, #1
 80041ee:	425a      	negs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	0011      	movs	r1, r2
 80041f4:	0018      	movs	r0, r3
 80041f6:	f7ff ffe5 	bl	80041c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80041fa:	e7fe      	b.n	80041fa <_exit+0x16>

080041fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	e00a      	b.n	8004224 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800420e:	e000      	b.n	8004212 <_read+0x16>
 8004210:	bf00      	nop
 8004212:	0001      	movs	r1, r0
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	60ba      	str	r2, [r7, #8]
 800421a:	b2ca      	uxtb	r2, r1
 800421c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	3301      	adds	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	429a      	cmp	r2, r3
 800422a:	dbf0      	blt.n	800420e <_read+0x12>
  }

  return len;
 800422c:	687b      	ldr	r3, [r7, #4]
}
 800422e:	0018      	movs	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	b006      	add	sp, #24
 8004234:	bd80      	pop	{r7, pc}

08004236 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800423e:	2301      	movs	r3, #1
 8004240:	425b      	negs	r3, r3
}
 8004242:	0018      	movs	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	b002      	add	sp, #8
 8004248:	bd80      	pop	{r7, pc}

0800424a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2280      	movs	r2, #128	; 0x80
 8004258:	0192      	lsls	r2, r2, #6
 800425a:	605a      	str	r2, [r3, #4]
  return 0;
 800425c:	2300      	movs	r3, #0
}
 800425e:	0018      	movs	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	b002      	add	sp, #8
 8004264:	bd80      	pop	{r7, pc}

08004266 <_isatty>:

int _isatty(int file)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800426e:	2301      	movs	r3, #1
}
 8004270:	0018      	movs	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	b002      	add	sp, #8
 8004276:	bd80      	pop	{r7, pc}

08004278 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004284:	2300      	movs	r3, #0
}
 8004286:	0018      	movs	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	b004      	add	sp, #16
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004298:	4a14      	ldr	r2, [pc, #80]	; (80042ec <_sbrk+0x5c>)
 800429a:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <_sbrk+0x60>)
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042a4:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <_sbrk+0x64>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d102      	bne.n	80042b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042ac:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <_sbrk+0x64>)
 80042ae:	4a12      	ldr	r2, [pc, #72]	; (80042f8 <_sbrk+0x68>)
 80042b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042b2:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <_sbrk+0x64>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	18d3      	adds	r3, r2, r3
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d207      	bcs.n	80042d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042c0:	f002 ffcc 	bl	800725c <__errno>
 80042c4:	0003      	movs	r3, r0
 80042c6:	220c      	movs	r2, #12
 80042c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042ca:	2301      	movs	r3, #1
 80042cc:	425b      	negs	r3, r3
 80042ce:	e009      	b.n	80042e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042d0:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <_sbrk+0x64>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042d6:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <_sbrk+0x64>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	18d2      	adds	r2, r2, r3
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <_sbrk+0x64>)
 80042e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80042e2:	68fb      	ldr	r3, [r7, #12]
}
 80042e4:	0018      	movs	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b006      	add	sp, #24
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20002000 	.word	0x20002000
 80042f0:	00000800 	.word	0x00000800
 80042f4:	200002c4 	.word	0x200002c4
 80042f8:	200003b8 	.word	0x200003b8

080042fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004300:	4b17      	ldr	r3, [pc, #92]	; (8004360 <SystemInit+0x64>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4b16      	ldr	r3, [pc, #88]	; (8004360 <SystemInit+0x64>)
 8004306:	2180      	movs	r1, #128	; 0x80
 8004308:	0049      	lsls	r1, r1, #1
 800430a:	430a      	orrs	r2, r1
 800430c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800430e:	4b14      	ldr	r3, [pc, #80]	; (8004360 <SystemInit+0x64>)
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	4b13      	ldr	r3, [pc, #76]	; (8004360 <SystemInit+0x64>)
 8004314:	4913      	ldr	r1, [pc, #76]	; (8004364 <SystemInit+0x68>)
 8004316:	400a      	ands	r2, r1
 8004318:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800431a:	4b11      	ldr	r3, [pc, #68]	; (8004360 <SystemInit+0x64>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b10      	ldr	r3, [pc, #64]	; (8004360 <SystemInit+0x64>)
 8004320:	4911      	ldr	r1, [pc, #68]	; (8004368 <SystemInit+0x6c>)
 8004322:	400a      	ands	r2, r1
 8004324:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004326:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <SystemInit+0x64>)
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <SystemInit+0x64>)
 800432c:	2101      	movs	r1, #1
 800432e:	438a      	bics	r2, r1
 8004330:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004332:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <SystemInit+0x64>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <SystemInit+0x64>)
 8004338:	490c      	ldr	r1, [pc, #48]	; (800436c <SystemInit+0x70>)
 800433a:	400a      	ands	r2, r1
 800433c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800433e:	4b08      	ldr	r3, [pc, #32]	; (8004360 <SystemInit+0x64>)
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	4b07      	ldr	r3, [pc, #28]	; (8004360 <SystemInit+0x64>)
 8004344:	490a      	ldr	r1, [pc, #40]	; (8004370 <SystemInit+0x74>)
 8004346:	400a      	ands	r2, r1
 8004348:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800434a:	4b05      	ldr	r3, [pc, #20]	; (8004360 <SystemInit+0x64>)
 800434c:	2200      	movs	r2, #0
 800434e:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004350:	4b08      	ldr	r3, [pc, #32]	; (8004374 <SystemInit+0x78>)
 8004352:	2280      	movs	r2, #128	; 0x80
 8004354:	0512      	lsls	r2, r2, #20
 8004356:	609a      	str	r2, [r3, #8]
#endif
}
 8004358:	46c0      	nop			; (mov r8, r8)
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	40021000 	.word	0x40021000
 8004364:	88ff400c 	.word	0x88ff400c
 8004368:	fef6fff6 	.word	0xfef6fff6
 800436c:	fffbffff 	.word	0xfffbffff
 8004370:	ff02ffff 	.word	0xff02ffff
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmul = 0U, plldiv = 0U, pllsource = 0U, msirange = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	2300      	movs	r3, #0
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	2300      	movs	r3, #0
 8004390:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004392:	4b45      	ldr	r3, [pc, #276]	; (80044a8 <SystemCoreClockUpdate+0x130>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	220c      	movs	r2, #12
 8004398:	4013      	ands	r3, r2
 800439a:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2b0c      	cmp	r3, #12
 80043a0:	d025      	beq.n	80043ee <SystemCoreClockUpdate+0x76>
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b0c      	cmp	r3, #12
 80043a6:	d85e      	bhi.n	8004466 <SystemCoreClockUpdate+0xee>
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d01b      	beq.n	80043e6 <SystemCoreClockUpdate+0x6e>
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d858      	bhi.n	8004466 <SystemCoreClockUpdate+0xee>
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <SystemCoreClockUpdate+0x4a>
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d00e      	beq.n	80043de <SystemCoreClockUpdate+0x66>
 80043c0:	e051      	b.n	8004466 <SystemCoreClockUpdate+0xee>
  {
    case 0x00U:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13U;
 80043c2:	4b39      	ldr	r3, [pc, #228]	; (80044a8 <SystemCoreClockUpdate+0x130>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	0b5b      	lsrs	r3, r3, #13
 80043c8:	2207      	movs	r2, #7
 80043ca:	4013      	ands	r3, r2
 80043cc:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3301      	adds	r3, #1
 80043d2:	2280      	movs	r2, #128	; 0x80
 80043d4:	0212      	lsls	r2, r2, #8
 80043d6:	409a      	lsls	r2, r3
 80043d8:	4b34      	ldr	r3, [pc, #208]	; (80044ac <SystemCoreClockUpdate+0x134>)
 80043da:	601a      	str	r2, [r3, #0]
      break;
 80043dc:	e051      	b.n	8004482 <SystemCoreClockUpdate+0x10a>
    case 0x04U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80043de:	4b33      	ldr	r3, [pc, #204]	; (80044ac <SystemCoreClockUpdate+0x134>)
 80043e0:	4a33      	ldr	r2, [pc, #204]	; (80044b0 <SystemCoreClockUpdate+0x138>)
 80043e2:	601a      	str	r2, [r3, #0]
      break;
 80043e4:	e04d      	b.n	8004482 <SystemCoreClockUpdate+0x10a>
    case 0x08U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80043e6:	4b31      	ldr	r3, [pc, #196]	; (80044ac <SystemCoreClockUpdate+0x134>)
 80043e8:	4a32      	ldr	r2, [pc, #200]	; (80044b4 <SystemCoreClockUpdate+0x13c>)
 80043ea:	601a      	str	r2, [r3, #0]
      break;
 80043ec:	e049      	b.n	8004482 <SystemCoreClockUpdate+0x10a>
    case 0x0CU:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80043ee:	4b2e      	ldr	r3, [pc, #184]	; (80044a8 <SystemCoreClockUpdate+0x130>)
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	23f0      	movs	r3, #240	; 0xf0
 80043f4:	039b      	lsls	r3, r3, #14
 80043f6:	4013      	ands	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80043fa:	4b2b      	ldr	r3, [pc, #172]	; (80044a8 <SystemCoreClockUpdate+0x130>)
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	23c0      	movs	r3, #192	; 0xc0
 8004400:	041b      	lsls	r3, r3, #16
 8004402:	4013      	ands	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18U)];
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	0c9b      	lsrs	r3, r3, #18
 800440a:	4a2b      	ldr	r2, [pc, #172]	; (80044b8 <SystemCoreClockUpdate+0x140>)
 800440c:	5cd3      	ldrb	r3, [r2, r3]
 800440e:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22U) + 1U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	0d9b      	lsrs	r3, r3, #22
 8004414:	3301      	adds	r3, #1
 8004416:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8004418:	4b23      	ldr	r3, [pc, #140]	; (80044a8 <SystemCoreClockUpdate+0x130>)
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	2380      	movs	r3, #128	; 0x80
 800441e:	025b      	lsls	r3, r3, #9
 8004420:	4013      	ands	r3, r2
 8004422:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00U)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d111      	bne.n	800444e <SystemCoreClockUpdate+0xd6>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 800442a:	6939      	ldr	r1, [r7, #16]
 800442c:	000a      	movs	r2, r1
 800442e:	0152      	lsls	r2, r2, #5
 8004430:	1a52      	subs	r2, r2, r1
 8004432:	0193      	lsls	r3, r2, #6
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	185b      	adds	r3, r3, r1
 800443a:	029b      	lsls	r3, r3, #10
 800443c:	68f9      	ldr	r1, [r7, #12]
 800443e:	0018      	movs	r0, r3
 8004440:	f7fb fe7e 	bl	8000140 <__udivsi3>
 8004444:	0003      	movs	r3, r0
 8004446:	001a      	movs	r2, r3
 8004448:	4b18      	ldr	r3, [pc, #96]	; (80044ac <SystemCoreClockUpdate+0x134>)
 800444a:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 800444c:	e019      	b.n	8004482 <SystemCoreClockUpdate+0x10a>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4a18      	ldr	r2, [pc, #96]	; (80044b4 <SystemCoreClockUpdate+0x13c>)
 8004452:	4353      	muls	r3, r2
 8004454:	68f9      	ldr	r1, [r7, #12]
 8004456:	0018      	movs	r0, r3
 8004458:	f7fb fe72 	bl	8000140 <__udivsi3>
 800445c:	0003      	movs	r3, r0
 800445e:	001a      	movs	r2, r3
 8004460:	4b12      	ldr	r3, [pc, #72]	; (80044ac <SystemCoreClockUpdate+0x134>)
 8004462:	601a      	str	r2, [r3, #0]
      break;
 8004464:	e00d      	b.n	8004482 <SystemCoreClockUpdate+0x10a>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13U;
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <SystemCoreClockUpdate+0x130>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	0b5b      	lsrs	r3, r3, #13
 800446c:	2207      	movs	r2, #7
 800446e:	4013      	ands	r3, r2
 8004470:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3301      	adds	r3, #1
 8004476:	2280      	movs	r2, #128	; 0x80
 8004478:	0212      	lsls	r2, r2, #8
 800447a:	409a      	lsls	r2, r3
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <SystemCoreClockUpdate+0x134>)
 800447e:	601a      	str	r2, [r3, #0]
      break;
 8004480:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <SystemCoreClockUpdate+0x130>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	091b      	lsrs	r3, r3, #4
 8004488:	220f      	movs	r2, #15
 800448a:	4013      	ands	r3, r2
 800448c:	4a0b      	ldr	r2, [pc, #44]	; (80044bc <SystemCoreClockUpdate+0x144>)
 800448e:	5cd3      	ldrb	r3, [r2, r3]
 8004490:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <SystemCoreClockUpdate+0x134>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	40da      	lsrs	r2, r3
 800449a:	4b04      	ldr	r3, [pc, #16]	; (80044ac <SystemCoreClockUpdate+0x134>)
 800449c:	601a      	str	r2, [r3, #0]
}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b006      	add	sp, #24
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	40021000 	.word	0x40021000
 80044ac:	20000080 	.word	0x20000080
 80044b0:	00f42400 	.word	0x00f42400
 80044b4:	0030d400 	.word	0x0030d400
 80044b8:	0800a740 	.word	0x0800a740
 80044bc:	0800a728 	.word	0x0800a728

080044c0 <Startup_Copy_Handler>:
  .section  .text.Copy_Handler
  .weak  Startup_Copy_Handler
  .type  Startup_Copy_Handler, %function
Startup_Copy_Handler:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80044c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80044c2:	e003      	b.n	80044cc <LoopCopyDataInit>

080044c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80044c4:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <LoopFillZerobss+0x8>)
  ldr  r3, [r3, r1]
 80044c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80044c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80044ca:	3104      	adds	r1, #4

080044cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80044cc:	4807      	ldr	r0, [pc, #28]	; (80044ec <LoopFillZerobss+0xc>)
  ldr  r3, =_edata
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <LoopFillZerobss+0x10>)
  adds  r2, r0, r1
 80044d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80044d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80044d4:	d3f6      	bcc.n	80044c4 <CopyDataInit>
  ldr  r2, =_sbss
 80044d6:	4a07      	ldr	r2, [pc, #28]	; (80044f4 <LoopFillZerobss+0x14>)
  b  LoopFillZerobss
 80044d8:	e002      	b.n	80044e0 <LoopFillZerobss>

080044da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80044da:	2300      	movs	r3, #0
  str  r3, [r2]
 80044dc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044de:	3204      	adds	r2, #4

080044e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <LoopFillZerobss+0x18>)
  cmp  r2, r3
 80044e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80044e4:	d3f9      	bcc.n	80044da <FillZerobss>
  bx  lr    
 80044e6:	4770      	bx	lr
  ldr  r3, =_sidata
 80044e8:	0800ab84 	.word	0x0800ab84
  ldr  r0, =_sdata
 80044ec:	20000080 	.word	0x20000080
  ldr  r3, =_edata
 80044f0:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 80044f4:	2000025c 	.word	0x2000025c
  ldr  r3, = _ebss
 80044f8:	200003b4 	.word	0x200003b4

080044fc <Reset_Handler>:
*/
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80044fc:	4806      	ldr	r0, [pc, #24]	; (8004518 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80044fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  bl   Startup_Copy_Handler
 8004500:	f7ff ffde 	bl	80044c0 <Startup_Copy_Handler>

/* implement STL start-up procedures - it calls appli entry point when resume */
  ldr  r0, =STL_StartUp
 8004504:	4805      	ldr	r0, [pc, #20]	; (800451c <LoopForever+0x8>)
  bx   r0
 8004506:	4700      	bx	r0

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004508:	f7ff fef8 	bl	80042fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800450c:	f002 feac 	bl	8007268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004510:	f7fd ff20 	bl	8002354 <main>

08004514 <LoopForever>:

LoopForever:
    b LoopForever
 8004514:	e7fe      	b.n	8004514 <LoopForever>
 8004516:	0000      	.short	0x0000
  ldr   r0, =_estack
 8004518:	20002000 	.word	0x20002000
  ldr  r0, =STL_StartUp
 800451c:	08003055 	.word	0x08003055

08004520 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004520:	e7fe      	b.n	8004520 <ADC1_COMP_IRQHandler>
	...

08004524 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800452a:	1dfb      	adds	r3, r7, #7
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_Init+0x3c>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <HAL_Init+0x3c>)
 8004536:	2140      	movs	r1, #64	; 0x40
 8004538:	430a      	orrs	r2, r1
 800453a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800453c:	2003      	movs	r0, #3
 800453e:	f000 f811 	bl	8004564 <HAL_InitTick>
 8004542:	1e03      	subs	r3, r0, #0
 8004544:	d003      	beq.n	800454e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004546:	1dfb      	adds	r3, r7, #7
 8004548:	2201      	movs	r2, #1
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	e001      	b.n	8004552 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800454e:	f7ff fc6f 	bl	8003e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004552:	1dfb      	adds	r3, r7, #7
 8004554:	781b      	ldrb	r3, [r3, #0]
}
 8004556:	0018      	movs	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	b002      	add	sp, #8
 800455c:	bd80      	pop	{r7, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	40022000 	.word	0x40022000

08004564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800456c:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <HAL_InitTick+0x5c>)
 800456e:	681c      	ldr	r4, [r3, #0]
 8004570:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <HAL_InitTick+0x60>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	0019      	movs	r1, r3
 8004576:	23fa      	movs	r3, #250	; 0xfa
 8004578:	0098      	lsls	r0, r3, #2
 800457a:	f7fb fde1 	bl	8000140 <__udivsi3>
 800457e:	0003      	movs	r3, r0
 8004580:	0019      	movs	r1, r3
 8004582:	0020      	movs	r0, r4
 8004584:	f7fb fddc 	bl	8000140 <__udivsi3>
 8004588:	0003      	movs	r3, r0
 800458a:	0018      	movs	r0, r3
 800458c:	f000 f90b 	bl	80047a6 <HAL_SYSTICK_Config>
 8004590:	1e03      	subs	r3, r0, #0
 8004592:	d001      	beq.n	8004598 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e00f      	b.n	80045b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b03      	cmp	r3, #3
 800459c:	d80b      	bhi.n	80045b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	2301      	movs	r3, #1
 80045a2:	425b      	negs	r3, r3
 80045a4:	2200      	movs	r2, #0
 80045a6:	0018      	movs	r0, r3
 80045a8:	f000 f8d8 	bl	800475c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045ac:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <HAL_InitTick+0x64>)
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e000      	b.n	80045b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
}
 80045b8:	0018      	movs	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b003      	add	sp, #12
 80045be:	bd90      	pop	{r4, r7, pc}
 80045c0:	20000080 	.word	0x20000080
 80045c4:	20000088 	.word	0x20000088
 80045c8:	20000084 	.word	0x20000084

080045cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <HAL_IncTick+0x1c>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	001a      	movs	r2, r3
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <HAL_IncTick+0x20>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	18d2      	adds	r2, r2, r3
 80045dc:	4b03      	ldr	r3, [pc, #12]	; (80045ec <HAL_IncTick+0x20>)
 80045de:	601a      	str	r2, [r3, #0]
}
 80045e0:	46c0      	nop			; (mov r8, r8)
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	20000088 	.word	0x20000088
 80045ec:	200003a0 	.word	0x200003a0

080045f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  return uwTick;
 80045f4:	4b02      	ldr	r3, [pc, #8]	; (8004600 <HAL_GetTick+0x10>)
 80045f6:	681b      	ldr	r3, [r3, #0]
}
 80045f8:	0018      	movs	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	200003a0 	.word	0x200003a0

08004604 <__NVIC_EnableIRQ>:
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	0002      	movs	r2, r0
 800460c:	1dfb      	adds	r3, r7, #7
 800460e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004610:	1dfb      	adds	r3, r7, #7
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b7f      	cmp	r3, #127	; 0x7f
 8004616:	d809      	bhi.n	800462c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004618:	1dfb      	adds	r3, r7, #7
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	001a      	movs	r2, r3
 800461e:	231f      	movs	r3, #31
 8004620:	401a      	ands	r2, r3
 8004622:	4b04      	ldr	r3, [pc, #16]	; (8004634 <__NVIC_EnableIRQ+0x30>)
 8004624:	2101      	movs	r1, #1
 8004626:	4091      	lsls	r1, r2
 8004628:	000a      	movs	r2, r1
 800462a:	601a      	str	r2, [r3, #0]
}
 800462c:	46c0      	nop			; (mov r8, r8)
 800462e:	46bd      	mov	sp, r7
 8004630:	b002      	add	sp, #8
 8004632:	bd80      	pop	{r7, pc}
 8004634:	e000e100 	.word	0xe000e100

08004638 <__NVIC_SetPriority>:
{
 8004638:	b590      	push	{r4, r7, lr}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	0002      	movs	r2, r0
 8004640:	6039      	str	r1, [r7, #0]
 8004642:	1dfb      	adds	r3, r7, #7
 8004644:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004646:	1dfb      	adds	r3, r7, #7
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b7f      	cmp	r3, #127	; 0x7f
 800464c:	d828      	bhi.n	80046a0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800464e:	4a2f      	ldr	r2, [pc, #188]	; (800470c <__NVIC_SetPriority+0xd4>)
 8004650:	1dfb      	adds	r3, r7, #7
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	b25b      	sxtb	r3, r3
 8004656:	089b      	lsrs	r3, r3, #2
 8004658:	33c0      	adds	r3, #192	; 0xc0
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	589b      	ldr	r3, [r3, r2]
 800465e:	1dfa      	adds	r2, r7, #7
 8004660:	7812      	ldrb	r2, [r2, #0]
 8004662:	0011      	movs	r1, r2
 8004664:	2203      	movs	r2, #3
 8004666:	400a      	ands	r2, r1
 8004668:	00d2      	lsls	r2, r2, #3
 800466a:	21ff      	movs	r1, #255	; 0xff
 800466c:	4091      	lsls	r1, r2
 800466e:	000a      	movs	r2, r1
 8004670:	43d2      	mvns	r2, r2
 8004672:	401a      	ands	r2, r3
 8004674:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	019b      	lsls	r3, r3, #6
 800467a:	22ff      	movs	r2, #255	; 0xff
 800467c:	401a      	ands	r2, r3
 800467e:	1dfb      	adds	r3, r7, #7
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	0018      	movs	r0, r3
 8004684:	2303      	movs	r3, #3
 8004686:	4003      	ands	r3, r0
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800468c:	481f      	ldr	r0, [pc, #124]	; (800470c <__NVIC_SetPriority+0xd4>)
 800468e:	1dfb      	adds	r3, r7, #7
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	b25b      	sxtb	r3, r3
 8004694:	089b      	lsrs	r3, r3, #2
 8004696:	430a      	orrs	r2, r1
 8004698:	33c0      	adds	r3, #192	; 0xc0
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	501a      	str	r2, [r3, r0]
}
 800469e:	e031      	b.n	8004704 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046a0:	4a1b      	ldr	r2, [pc, #108]	; (8004710 <__NVIC_SetPriority+0xd8>)
 80046a2:	1dfb      	adds	r3, r7, #7
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	0019      	movs	r1, r3
 80046a8:	230f      	movs	r3, #15
 80046aa:	400b      	ands	r3, r1
 80046ac:	3b08      	subs	r3, #8
 80046ae:	089b      	lsrs	r3, r3, #2
 80046b0:	3306      	adds	r3, #6
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	18d3      	adds	r3, r2, r3
 80046b6:	3304      	adds	r3, #4
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	1dfa      	adds	r2, r7, #7
 80046bc:	7812      	ldrb	r2, [r2, #0]
 80046be:	0011      	movs	r1, r2
 80046c0:	2203      	movs	r2, #3
 80046c2:	400a      	ands	r2, r1
 80046c4:	00d2      	lsls	r2, r2, #3
 80046c6:	21ff      	movs	r1, #255	; 0xff
 80046c8:	4091      	lsls	r1, r2
 80046ca:	000a      	movs	r2, r1
 80046cc:	43d2      	mvns	r2, r2
 80046ce:	401a      	ands	r2, r3
 80046d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	019b      	lsls	r3, r3, #6
 80046d6:	22ff      	movs	r2, #255	; 0xff
 80046d8:	401a      	ands	r2, r3
 80046da:	1dfb      	adds	r3, r7, #7
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	0018      	movs	r0, r3
 80046e0:	2303      	movs	r3, #3
 80046e2:	4003      	ands	r3, r0
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046e8:	4809      	ldr	r0, [pc, #36]	; (8004710 <__NVIC_SetPriority+0xd8>)
 80046ea:	1dfb      	adds	r3, r7, #7
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	001c      	movs	r4, r3
 80046f0:	230f      	movs	r3, #15
 80046f2:	4023      	ands	r3, r4
 80046f4:	3b08      	subs	r3, #8
 80046f6:	089b      	lsrs	r3, r3, #2
 80046f8:	430a      	orrs	r2, r1
 80046fa:	3306      	adds	r3, #6
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	18c3      	adds	r3, r0, r3
 8004700:	3304      	adds	r3, #4
 8004702:	601a      	str	r2, [r3, #0]
}
 8004704:	46c0      	nop			; (mov r8, r8)
 8004706:	46bd      	mov	sp, r7
 8004708:	b003      	add	sp, #12
 800470a:	bd90      	pop	{r4, r7, pc}
 800470c:	e000e100 	.word	0xe000e100
 8004710:	e000ed00 	.word	0xe000ed00

08004714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	1e5a      	subs	r2, r3, #1
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	045b      	lsls	r3, r3, #17
 8004724:	429a      	cmp	r2, r3
 8004726:	d301      	bcc.n	800472c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004728:	2301      	movs	r3, #1
 800472a:	e010      	b.n	800474e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800472c:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <SysTick_Config+0x44>)
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	3a01      	subs	r2, #1
 8004732:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004734:	2301      	movs	r3, #1
 8004736:	425b      	negs	r3, r3
 8004738:	2103      	movs	r1, #3
 800473a:	0018      	movs	r0, r3
 800473c:	f7ff ff7c 	bl	8004638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <SysTick_Config+0x44>)
 8004742:	2200      	movs	r2, #0
 8004744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004746:	4b04      	ldr	r3, [pc, #16]	; (8004758 <SysTick_Config+0x44>)
 8004748:	2207      	movs	r2, #7
 800474a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800474c:	2300      	movs	r3, #0
}
 800474e:	0018      	movs	r0, r3
 8004750:	46bd      	mov	sp, r7
 8004752:	b002      	add	sp, #8
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	e000e010 	.word	0xe000e010

0800475c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	210f      	movs	r1, #15
 8004768:	187b      	adds	r3, r7, r1
 800476a:	1c02      	adds	r2, r0, #0
 800476c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	187b      	adds	r3, r7, r1
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	b25b      	sxtb	r3, r3
 8004776:	0011      	movs	r1, r2
 8004778:	0018      	movs	r0, r3
 800477a:	f7ff ff5d 	bl	8004638 <__NVIC_SetPriority>
}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	46bd      	mov	sp, r7
 8004782:	b004      	add	sp, #16
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	0002      	movs	r2, r0
 800478e:	1dfb      	adds	r3, r7, #7
 8004790:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004792:	1dfb      	adds	r3, r7, #7
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	b25b      	sxtb	r3, r3
 8004798:	0018      	movs	r0, r3
 800479a:	f7ff ff33 	bl	8004604 <__NVIC_EnableIRQ>
}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b002      	add	sp, #8
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f7ff ffaf 	bl	8004714 <SysTick_Config>
 80047b6:	0003      	movs	r3, r0
}
 80047b8:	0018      	movs	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	b002      	add	sp, #8
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e056      	b.n	8004880 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	7f5b      	ldrb	r3, [r3, #29]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f000 f882 	bl	80048ee <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	791b      	ldrb	r3, [r3, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10c      	bne.n	8004812 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a22      	ldr	r2, [pc, #136]	; (8004888 <HAL_CRC_Init+0xc8>)
 80047fe:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2118      	movs	r1, #24
 800480c:	438a      	bics	r2, r1
 800480e:	609a      	str	r2, [r3, #8]
 8004810:	e00b      	b.n	800482a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6899      	ldr	r1, [r3, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	0018      	movs	r0, r3
 800481e:	f000 f985 	bl	8004b2c <HAL_CRCEx_Polynomial_Set>
 8004822:	1e03      	subs	r3, r0, #0
 8004824:	d001      	beq.n	800482a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e02a      	b.n	8004880 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	795b      	ldrb	r3, [r3, #5]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d105      	bne.n	800483e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2201      	movs	r2, #1
 8004838:	4252      	negs	r2, r2
 800483a:	611a      	str	r2, [r3, #16]
 800483c:	e004      	b.n	8004848 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6912      	ldr	r2, [r2, #16]
 8004846:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2260      	movs	r2, #96	; 0x60
 8004850:	4393      	bics	r3, r2
 8004852:	0019      	movs	r1, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	695a      	ldr	r2, [r3, #20]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2280      	movs	r2, #128	; 0x80
 8004868:	4393      	bics	r3, r2
 800486a:	0019      	movs	r1, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699a      	ldr	r2, [r3, #24]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	0018      	movs	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	b002      	add	sp, #8
 8004886:	bd80      	pop	{r7, pc}
 8004888:	04c11db7 	.word	0x04c11db7

0800488c <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e023      	b.n	80048e6 <HAL_CRC_DeInit+0x5a>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	7f5b      	ldrb	r3, [r3, #29]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d101      	bne.n	80048ac <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 80048a8:	2302      	movs	r3, #2
 80048aa:	e01c      	b.n	80048e6 <HAL_CRC_DeInit+0x5a>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2101      	movs	r1, #1
 80048be:	430a      	orrs	r2, r1
 80048c0:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	791b      	ldrb	r3, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2200      	movs	r2, #0
 80048ce:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	0018      	movs	r0, r3
 80048d4:	f000 f813 	bl	80048fe <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	775a      	strb	r2, [r3, #29]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	771a      	strb	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	0018      	movs	r0, r3
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b002      	add	sp, #8
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_CRC_MspInit>:
  * @brief  Initializes the CRC MSP.
  * @param  hcrc CRC handle
  * @retval None
  */
__weak void HAL_CRC_MspInit(CRC_HandleTypeDef *hcrc)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b082      	sub	sp, #8
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcrc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CRC_MspInit can be implemented in the user file
   */
}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b002      	add	sp, #8
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_CRC_MspDeInit>:
  * @brief  DeInitialize the CRC MSP.
  * @param  hcrc CRC handle
  * @retval None
  */
__weak void HAL_CRC_MspDeInit(CRC_HandleTypeDef *hcrc)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b082      	sub	sp, #8
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  UNUSED(hcrc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CRC_MspDeInit can be implemented in the user file
   */
}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	46bd      	mov	sp, r7
 800490a:	b002      	add	sp, #8
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b086      	sub	sp, #24
 8004912:	af00      	add	r7, sp, #0
 8004914:	60f8      	str	r0, [r7, #12]
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800491a:	2300      	movs	r3, #0
 800491c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2202      	movs	r2, #2
 8004922:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d005      	beq.n	8004938 <HAL_CRC_Accumulate+0x2a>
 800492c:	d82d      	bhi.n	800498a <HAL_CRC_Accumulate+0x7c>
 800492e:	2b01      	cmp	r3, #1
 8004930:	d019      	beq.n	8004966 <HAL_CRC_Accumulate+0x58>
 8004932:	2b02      	cmp	r3, #2
 8004934:	d020      	beq.n	8004978 <HAL_CRC_Accumulate+0x6a>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8004936:	e028      	b.n	800498a <HAL_CRC_Accumulate+0x7c>
      for (index = 0U; index < BufferLength; index++)
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	e00a      	b.n	8004954 <HAL_CRC_Accumulate+0x46>
        hcrc->Instance->DR = pBuffer[index];
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	18d2      	adds	r2, r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	3301      	adds	r3, #1
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	429a      	cmp	r2, r3
 800495a:	d3f0      	bcc.n	800493e <HAL_CRC_Accumulate+0x30>
      temp = hcrc->Instance->DR;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	613b      	str	r3, [r7, #16]
      break;
 8004964:	e012      	b.n	800498c <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	68b9      	ldr	r1, [r7, #8]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	0018      	movs	r0, r3
 800496e:	f000 f815 	bl	800499c <CRC_Handle_8>
 8004972:	0003      	movs	r3, r0
 8004974:	613b      	str	r3, [r7, #16]
      break;
 8004976:	e009      	b.n	800498c <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	0018      	movs	r0, r3
 8004980:	f000 f89d 	bl	8004abe <CRC_Handle_16>
 8004984:	0003      	movs	r3, r0
 8004986:	613b      	str	r3, [r7, #16]
      break;
 8004988:	e000      	b.n	800498c <HAL_CRC_Accumulate+0x7e>
      break;
 800498a:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2201      	movs	r2, #1
 8004990:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8004992:	693b      	ldr	r3, [r7, #16]
}
 8004994:	0018      	movs	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	b006      	add	sp, #24
 800499a:	bd80      	pop	{r7, pc}

0800499c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80049a8:	2300      	movs	r3, #0
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	e023      	b.n	80049f6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	18d3      	adds	r3, r2, r3
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	3301      	adds	r3, #1
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	18cb      	adds	r3, r1, r3
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80049c8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	3302      	adds	r3, #2
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	18cb      	adds	r3, r1, r3
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80049d8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	3303      	adds	r3, #3
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	18cb      	adds	r3, r1, r3
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80049ec:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80049ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	3301      	adds	r3, #1
 80049f4:	61fb      	str	r3, [r7, #28]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d3d6      	bcc.n	80049ae <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2203      	movs	r2, #3
 8004a04:	4013      	ands	r3, r2
 8004a06:	d053      	beq.n	8004ab0 <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d107      	bne.n	8004a22 <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	18d2      	adds	r2, r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	7812      	ldrb	r2, [r2, #0]
 8004a20:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2203      	movs	r2, #3
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d119      	bne.n	8004a60 <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	18d3      	adds	r3, r2, r3
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	021b      	lsls	r3, r3, #8
 8004a38:	b21a      	sxth	r2, r3
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	3301      	adds	r3, #1
 8004a40:	68b9      	ldr	r1, [r7, #8]
 8004a42:	18cb      	adds	r3, r1, r3
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	b21b      	sxth	r3, r3
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	b21a      	sxth	r2, r3
 8004a4c:	211a      	movs	r1, #26
 8004a4e:	187b      	adds	r3, r7, r1
 8004a50:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	187a      	adds	r2, r7, r1
 8004a5c:	8812      	ldrh	r2, [r2, #0]
 8004a5e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2203      	movs	r2, #3
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d122      	bne.n	8004ab0 <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	18d3      	adds	r3, r2, r3
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	b21a      	sxth	r2, r3
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	18cb      	adds	r3, r1, r3
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	b21b      	sxth	r3, r3
 8004a86:	4313      	orrs	r3, r2
 8004a88:	b21a      	sxth	r2, r3
 8004a8a:	211a      	movs	r1, #26
 8004a8c:	187b      	adds	r3, r7, r1
 8004a8e:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	187a      	adds	r2, r7, r1
 8004a9a:	8812      	ldrh	r2, [r2, #0]
 8004a9c:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	3302      	adds	r3, #2
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	18d2      	adds	r2, r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	7812      	ldrb	r2, [r2, #0]
 8004aae:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
}
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b008      	add	sp, #32
 8004abc:	bd80      	pop	{r7, pc}

08004abe <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b086      	sub	sp, #24
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	e013      	b.n	8004af8 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	18d3      	adds	r3, r2, r3
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	041a      	lsls	r2, r3, #16
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	3302      	adds	r3, #2
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	18cb      	adds	r3, r1, r3
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	0019      	movs	r1, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	3301      	adds	r3, #1
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	085b      	lsrs	r3, r3, #1
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d3e6      	bcc.n	8004ad0 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	4013      	ands	r3, r2
 8004b08:	d009      	beq.n	8004b1e <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	18d3      	adds	r3, r2, r3
 8004b18:	881a      	ldrh	r2, [r3, #0]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
}
 8004b24:	0018      	movs	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b006      	add	sp, #24
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b38:	2317      	movs	r3, #23
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004b40:	231f      	movs	r3, #31
 8004b42:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004b44:	46c0      	nop			; (mov r8, r8)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1e5a      	subs	r2, r3, #1
 8004b4a:	613a      	str	r2, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <HAL_CRCEx_Polynomial_Set+0x36>
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	221f      	movs	r2, #31
 8004b54:	4013      	ands	r3, r2
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	40da      	lsrs	r2, r3
 8004b5a:	0013      	movs	r3, r2
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d0f1      	beq.n	8004b46 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b18      	cmp	r3, #24
 8004b66:	d00f      	beq.n	8004b88 <HAL_CRCEx_Polynomial_Set+0x5c>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b18      	cmp	r3, #24
 8004b6c:	d824      	bhi.n	8004bb8 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b10      	cmp	r3, #16
 8004b72:	d011      	beq.n	8004b98 <HAL_CRCEx_Polynomial_Set+0x6c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d81e      	bhi.n	8004bb8 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d020      	beq.n	8004bc2 <HAL_CRCEx_Polynomial_Set+0x96>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d010      	beq.n	8004ba8 <HAL_CRCEx_Polynomial_Set+0x7c>
 8004b86:	e017      	b.n	8004bb8 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b06      	cmp	r3, #6
 8004b8c:	d91b      	bls.n	8004bc6 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8004b8e:	2317      	movs	r3, #23
 8004b90:	18fb      	adds	r3, r7, r3
 8004b92:	2201      	movs	r2, #1
 8004b94:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004b96:	e016      	b.n	8004bc6 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b07      	cmp	r3, #7
 8004b9c:	d915      	bls.n	8004bca <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8004b9e:	2317      	movs	r3, #23
 8004ba0:	18fb      	adds	r3, r7, r3
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004ba6:	e010      	b.n	8004bca <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	2b0f      	cmp	r3, #15
 8004bac:	d90f      	bls.n	8004bce <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8004bae:	2317      	movs	r3, #23
 8004bb0:	18fb      	adds	r3, r7, r3
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004bb6:	e00a      	b.n	8004bce <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004bb8:	2317      	movs	r3, #23
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
      break;
 8004bc0:	e006      	b.n	8004bd0 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	e004      	b.n	8004bd0 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	e002      	b.n	8004bd0 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	e000      	b.n	8004bd0 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004bce:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8004bd0:	2317      	movs	r3, #23
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2218      	movs	r2, #24
 8004bea:	4393      	bics	r3, r2
 8004bec:	0019      	movs	r1, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004bf8:	2317      	movs	r3, #23
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	781b      	ldrb	r3, [r3, #0]
}
 8004bfe:	0018      	movs	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b006      	add	sp, #24
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004c1e:	e14f      	b.n	8004ec0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2101      	movs	r1, #1
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4091      	lsls	r1, r2
 8004c2a:	000a      	movs	r2, r1
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d100      	bne.n	8004c38 <HAL_GPIO_Init+0x30>
 8004c36:	e140      	b.n	8004eba <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	4013      	ands	r3, r2
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d005      	beq.n	8004c50 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2203      	movs	r2, #3
 8004c4a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d130      	bne.n	8004cb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	409a      	lsls	r2, r3
 8004c5e:	0013      	movs	r3, r2
 8004c60:	43da      	mvns	r2, r3
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	4013      	ands	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	409a      	lsls	r2, r3
 8004c72:	0013      	movs	r3, r2
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c86:	2201      	movs	r2, #1
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	0013      	movs	r3, r2
 8004c8e:	43da      	mvns	r2, r3
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4013      	ands	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	091b      	lsrs	r3, r3, #4
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	401a      	ands	r2, r3
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	409a      	lsls	r2, r3
 8004ca4:	0013      	movs	r3, r2
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2203      	movs	r2, #3
 8004cb8:	4013      	ands	r3, r2
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d017      	beq.n	8004cee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	2203      	movs	r2, #3
 8004cca:	409a      	lsls	r2, r3
 8004ccc:	0013      	movs	r3, r2
 8004cce:	43da      	mvns	r2, r3
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	409a      	lsls	r2, r3
 8004ce0:	0013      	movs	r3, r2
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d123      	bne.n	8004d42 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	08da      	lsrs	r2, r3, #3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3208      	adds	r2, #8
 8004d02:	0092      	lsls	r2, r2, #2
 8004d04:	58d3      	ldr	r3, [r2, r3]
 8004d06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2207      	movs	r2, #7
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	220f      	movs	r2, #15
 8004d12:	409a      	lsls	r2, r3
 8004d14:	0013      	movs	r3, r2
 8004d16:	43da      	mvns	r2, r3
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2107      	movs	r1, #7
 8004d26:	400b      	ands	r3, r1
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	409a      	lsls	r2, r3
 8004d2c:	0013      	movs	r3, r2
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	08da      	lsrs	r2, r3, #3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3208      	adds	r2, #8
 8004d3c:	0092      	lsls	r2, r2, #2
 8004d3e:	6939      	ldr	r1, [r7, #16]
 8004d40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	0013      	movs	r3, r2
 8004d52:	43da      	mvns	r2, r3
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4013      	ands	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2203      	movs	r2, #3
 8004d60:	401a      	ands	r2, r3
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	409a      	lsls	r2, r3
 8004d68:	0013      	movs	r3, r2
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	23c0      	movs	r3, #192	; 0xc0
 8004d7c:	029b      	lsls	r3, r3, #10
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d100      	bne.n	8004d84 <HAL_GPIO_Init+0x17c>
 8004d82:	e09a      	b.n	8004eba <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d84:	4b54      	ldr	r3, [pc, #336]	; (8004ed8 <HAL_GPIO_Init+0x2d0>)
 8004d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d88:	4b53      	ldr	r3, [pc, #332]	; (8004ed8 <HAL_GPIO_Init+0x2d0>)
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d90:	4a52      	ldr	r2, [pc, #328]	; (8004edc <HAL_GPIO_Init+0x2d4>)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	089b      	lsrs	r3, r3, #2
 8004d96:	3302      	adds	r3, #2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	589b      	ldr	r3, [r3, r2]
 8004d9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2203      	movs	r2, #3
 8004da2:	4013      	ands	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	220f      	movs	r2, #15
 8004da8:	409a      	lsls	r2, r3
 8004daa:	0013      	movs	r3, r2
 8004dac:	43da      	mvns	r2, r3
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4013      	ands	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	23a0      	movs	r3, #160	; 0xa0
 8004db8:	05db      	lsls	r3, r3, #23
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d019      	beq.n	8004df2 <HAL_GPIO_Init+0x1ea>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a47      	ldr	r2, [pc, #284]	; (8004ee0 <HAL_GPIO_Init+0x2d8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d013      	beq.n	8004dee <HAL_GPIO_Init+0x1e6>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a46      	ldr	r2, [pc, #280]	; (8004ee4 <HAL_GPIO_Init+0x2dc>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00d      	beq.n	8004dea <HAL_GPIO_Init+0x1e2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a45      	ldr	r2, [pc, #276]	; (8004ee8 <HAL_GPIO_Init+0x2e0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d007      	beq.n	8004de6 <HAL_GPIO_Init+0x1de>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a44      	ldr	r2, [pc, #272]	; (8004eec <HAL_GPIO_Init+0x2e4>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d101      	bne.n	8004de2 <HAL_GPIO_Init+0x1da>
 8004dde:	2305      	movs	r3, #5
 8004de0:	e008      	b.n	8004df4 <HAL_GPIO_Init+0x1ec>
 8004de2:	2306      	movs	r3, #6
 8004de4:	e006      	b.n	8004df4 <HAL_GPIO_Init+0x1ec>
 8004de6:	2303      	movs	r3, #3
 8004de8:	e004      	b.n	8004df4 <HAL_GPIO_Init+0x1ec>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e002      	b.n	8004df4 <HAL_GPIO_Init+0x1ec>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <HAL_GPIO_Init+0x1ec>
 8004df2:	2300      	movs	r3, #0
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	2103      	movs	r1, #3
 8004df8:	400a      	ands	r2, r1
 8004dfa:	0092      	lsls	r2, r2, #2
 8004dfc:	4093      	lsls	r3, r2
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e04:	4935      	ldr	r1, [pc, #212]	; (8004edc <HAL_GPIO_Init+0x2d4>)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	089b      	lsrs	r3, r3, #2
 8004e0a:	3302      	adds	r3, #2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e12:	4b37      	ldr	r3, [pc, #220]	; (8004ef0 <HAL_GPIO_Init+0x2e8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	43da      	mvns	r2, r3
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	2380      	movs	r3, #128	; 0x80
 8004e28:	025b      	lsls	r3, r3, #9
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d003      	beq.n	8004e36 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004e36:	4b2e      	ldr	r3, [pc, #184]	; (8004ef0 <HAL_GPIO_Init+0x2e8>)
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004e3c:	4b2c      	ldr	r3, [pc, #176]	; (8004ef0 <HAL_GPIO_Init+0x2e8>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	43da      	mvns	r2, r3
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	029b      	lsls	r3, r3, #10
 8004e54:	4013      	ands	r3, r2
 8004e56:	d003      	beq.n	8004e60 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e60:	4b23      	ldr	r3, [pc, #140]	; (8004ef0 <HAL_GPIO_Init+0x2e8>)
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e66:	4b22      	ldr	r3, [pc, #136]	; (8004ef0 <HAL_GPIO_Init+0x2e8>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	43da      	mvns	r2, r3
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	4013      	ands	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	2380      	movs	r3, #128	; 0x80
 8004e7c:	035b      	lsls	r3, r3, #13
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e8a:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <HAL_GPIO_Init+0x2e8>)
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004e90:	4b17      	ldr	r3, [pc, #92]	; (8004ef0 <HAL_GPIO_Init+0x2e8>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	43da      	mvns	r2, r3
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	2380      	movs	r3, #128	; 0x80
 8004ea6:	039b      	lsls	r3, r3, #14
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004eb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <HAL_GPIO_Init+0x2e8>)
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	40da      	lsrs	r2, r3
 8004ec8:	1e13      	subs	r3, r2, #0
 8004eca:	d000      	beq.n	8004ece <HAL_GPIO_Init+0x2c6>
 8004ecc:	e6a8      	b.n	8004c20 <HAL_GPIO_Init+0x18>
  }
}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	46c0      	nop			; (mov r8, r8)
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b006      	add	sp, #24
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	50000400 	.word	0x50000400
 8004ee4:	50000800 	.word	0x50000800
 8004ee8:	50000c00 	.word	0x50000c00
 8004eec:	50001c00 	.word	0x50001c00
 8004ef0:	40010400 	.word	0x40010400

08004ef4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	0008      	movs	r0, r1
 8004efe:	0011      	movs	r1, r2
 8004f00:	1cbb      	adds	r3, r7, #2
 8004f02:	1c02      	adds	r2, r0, #0
 8004f04:	801a      	strh	r2, [r3, #0]
 8004f06:	1c7b      	adds	r3, r7, #1
 8004f08:	1c0a      	adds	r2, r1, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f0c:	1c7b      	adds	r3, r7, #1
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d004      	beq.n	8004f1e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f14:	1cbb      	adds	r3, r7, #2
 8004f16:	881a      	ldrh	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004f1c:	e003      	b.n	8004f26 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004f1e:	1cbb      	adds	r3, r7, #2
 8004f20:	881a      	ldrh	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b002      	add	sp, #8
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	000a      	movs	r2, r1
 8004f38:	1cbb      	adds	r3, r7, #2
 8004f3a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f42:	1cbb      	adds	r3, r7, #2
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	041a      	lsls	r2, r3, #16
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	1cb9      	adds	r1, r7, #2
 8004f52:	8809      	ldrh	r1, [r1, #0]
 8004f54:	400b      	ands	r3, r1
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	619a      	str	r2, [r3, #24]
}
 8004f5c:	46c0      	nop			; (mov r8, r8)
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b004      	add	sp, #16
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e03d      	b.n	8004ff2 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a20      	ldr	r2, [pc, #128]	; (8004ffc <HAL_IWDG_Init+0x98>)
 8004f7c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1f      	ldr	r2, [pc, #124]	; (8005000 <HAL_IWDG_Init+0x9c>)
 8004f84:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6852      	ldr	r2, [r2, #4]
 8004f8e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6892      	ldr	r2, [r2, #8]
 8004f98:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004f9a:	f7ff fb29 	bl	80045f0 <HAL_GetTick>
 8004f9e:	0003      	movs	r3, r0
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004fa2:	e00e      	b.n	8004fc2 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004fa4:	f7ff fb24 	bl	80045f0 <HAL_GetTick>
 8004fa8:	0002      	movs	r2, r0
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb0:	d907      	bls.n	8004fc2 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2207      	movs	r2, #7
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d001      	beq.n	8004fc2 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e017      	b.n	8004ff2 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	2207      	movs	r2, #7
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d1ea      	bne.n	8004fa4 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d005      	beq.n	8004fe8 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	68d2      	ldr	r2, [r2, #12]
 8004fe4:	611a      	str	r2, [r3, #16]
 8004fe6:	e003      	b.n	8004ff0 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a05      	ldr	r2, [pc, #20]	; (8005004 <HAL_IWDG_Init+0xa0>)
 8004fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	b004      	add	sp, #16
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	0000cccc 	.word	0x0000cccc
 8005000:	00005555 	.word	0x00005555
 8005004:	0000aaaa 	.word	0x0000aaaa

08005008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005008:	b5b0      	push	{r4, r5, r7, lr}
 800500a:	b08a      	sub	sp, #40	; 0x28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d102      	bne.n	800501c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f000 fbaf 	bl	800577a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800501c:	4bcf      	ldr	r3, [pc, #828]	; (800535c <HAL_RCC_OscConfig+0x354>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	220c      	movs	r2, #12
 8005022:	4013      	ands	r3, r2
 8005024:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005026:	4bcd      	ldr	r3, [pc, #820]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	025b      	lsls	r3, r3, #9
 800502e:	4013      	ands	r3, r2
 8005030:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2201      	movs	r2, #1
 8005038:	4013      	ands	r3, r2
 800503a:	d100      	bne.n	800503e <HAL_RCC_OscConfig+0x36>
 800503c:	e07e      	b.n	800513c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	2b08      	cmp	r3, #8
 8005042:	d007      	beq.n	8005054 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	2b0c      	cmp	r3, #12
 8005048:	d112      	bne.n	8005070 <HAL_RCC_OscConfig+0x68>
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	2380      	movs	r3, #128	; 0x80
 800504e:	025b      	lsls	r3, r3, #9
 8005050:	429a      	cmp	r2, r3
 8005052:	d10d      	bne.n	8005070 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005054:	4bc1      	ldr	r3, [pc, #772]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	029b      	lsls	r3, r3, #10
 800505c:	4013      	ands	r3, r2
 800505e:	d100      	bne.n	8005062 <HAL_RCC_OscConfig+0x5a>
 8005060:	e06b      	b.n	800513a <HAL_RCC_OscConfig+0x132>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d167      	bne.n	800513a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f000 fb85 	bl	800577a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	2380      	movs	r3, #128	; 0x80
 8005076:	025b      	lsls	r3, r3, #9
 8005078:	429a      	cmp	r2, r3
 800507a:	d107      	bne.n	800508c <HAL_RCC_OscConfig+0x84>
 800507c:	4bb7      	ldr	r3, [pc, #732]	; (800535c <HAL_RCC_OscConfig+0x354>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	4bb6      	ldr	r3, [pc, #728]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005082:	2180      	movs	r1, #128	; 0x80
 8005084:	0249      	lsls	r1, r1, #9
 8005086:	430a      	orrs	r2, r1
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	e027      	b.n	80050dc <HAL_RCC_OscConfig+0xd4>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	23a0      	movs	r3, #160	; 0xa0
 8005092:	02db      	lsls	r3, r3, #11
 8005094:	429a      	cmp	r2, r3
 8005096:	d10e      	bne.n	80050b6 <HAL_RCC_OscConfig+0xae>
 8005098:	4bb0      	ldr	r3, [pc, #704]	; (800535c <HAL_RCC_OscConfig+0x354>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	4baf      	ldr	r3, [pc, #700]	; (800535c <HAL_RCC_OscConfig+0x354>)
 800509e:	2180      	movs	r1, #128	; 0x80
 80050a0:	02c9      	lsls	r1, r1, #11
 80050a2:	430a      	orrs	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	4bad      	ldr	r3, [pc, #692]	; (800535c <HAL_RCC_OscConfig+0x354>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	4bac      	ldr	r3, [pc, #688]	; (800535c <HAL_RCC_OscConfig+0x354>)
 80050ac:	2180      	movs	r1, #128	; 0x80
 80050ae:	0249      	lsls	r1, r1, #9
 80050b0:	430a      	orrs	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e012      	b.n	80050dc <HAL_RCC_OscConfig+0xd4>
 80050b6:	4ba9      	ldr	r3, [pc, #676]	; (800535c <HAL_RCC_OscConfig+0x354>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4ba8      	ldr	r3, [pc, #672]	; (800535c <HAL_RCC_OscConfig+0x354>)
 80050bc:	49a8      	ldr	r1, [pc, #672]	; (8005360 <HAL_RCC_OscConfig+0x358>)
 80050be:	400a      	ands	r2, r1
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	4ba6      	ldr	r3, [pc, #664]	; (800535c <HAL_RCC_OscConfig+0x354>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	2380      	movs	r3, #128	; 0x80
 80050c8:	025b      	lsls	r3, r3, #9
 80050ca:	4013      	ands	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4ba2      	ldr	r3, [pc, #648]	; (800535c <HAL_RCC_OscConfig+0x354>)
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	4ba1      	ldr	r3, [pc, #644]	; (800535c <HAL_RCC_OscConfig+0x354>)
 80050d6:	49a3      	ldr	r1, [pc, #652]	; (8005364 <HAL_RCC_OscConfig+0x35c>)
 80050d8:	400a      	ands	r2, r1
 80050da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d015      	beq.n	8005110 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e4:	f7ff fa84 	bl	80045f0 <HAL_GetTick>
 80050e8:	0003      	movs	r3, r0
 80050ea:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050ec:	e009      	b.n	8005102 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050ee:	f7ff fa7f 	bl	80045f0 <HAL_GetTick>
 80050f2:	0002      	movs	r2, r0
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b64      	cmp	r3, #100	; 0x64
 80050fa:	d902      	bls.n	8005102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	f000 fb3c 	bl	800577a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005102:	4b96      	ldr	r3, [pc, #600]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	2380      	movs	r3, #128	; 0x80
 8005108:	029b      	lsls	r3, r3, #10
 800510a:	4013      	ands	r3, r2
 800510c:	d0ef      	beq.n	80050ee <HAL_RCC_OscConfig+0xe6>
 800510e:	e015      	b.n	800513c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005110:	f7ff fa6e 	bl	80045f0 <HAL_GetTick>
 8005114:	0003      	movs	r3, r0
 8005116:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800511a:	f7ff fa69 	bl	80045f0 <HAL_GetTick>
 800511e:	0002      	movs	r2, r0
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b64      	cmp	r3, #100	; 0x64
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e326      	b.n	800577a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800512c:	4b8b      	ldr	r3, [pc, #556]	; (800535c <HAL_RCC_OscConfig+0x354>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	029b      	lsls	r3, r3, #10
 8005134:	4013      	ands	r3, r2
 8005136:	d1f0      	bne.n	800511a <HAL_RCC_OscConfig+0x112>
 8005138:	e000      	b.n	800513c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800513a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2202      	movs	r2, #2
 8005142:	4013      	ands	r3, r2
 8005144:	d100      	bne.n	8005148 <HAL_RCC_OscConfig+0x140>
 8005146:	e08b      	b.n	8005260 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	2b04      	cmp	r3, #4
 8005152:	d005      	beq.n	8005160 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	2b0c      	cmp	r3, #12
 8005158:	d13e      	bne.n	80051d8 <HAL_RCC_OscConfig+0x1d0>
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d13b      	bne.n	80051d8 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005160:	4b7e      	ldr	r3, [pc, #504]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2204      	movs	r2, #4
 8005166:	4013      	ands	r3, r2
 8005168:	d004      	beq.n	8005174 <HAL_RCC_OscConfig+0x16c>
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e302      	b.n	800577a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005174:	4b79      	ldr	r3, [pc, #484]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	4a7b      	ldr	r2, [pc, #492]	; (8005368 <HAL_RCC_OscConfig+0x360>)
 800517a:	4013      	ands	r3, r2
 800517c:	0019      	movs	r1, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	021a      	lsls	r2, r3, #8
 8005184:	4b75      	ldr	r3, [pc, #468]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800518a:	4b74      	ldr	r3, [pc, #464]	; (800535c <HAL_RCC_OscConfig+0x354>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2209      	movs	r2, #9
 8005190:	4393      	bics	r3, r2
 8005192:	0019      	movs	r1, r3
 8005194:	4b71      	ldr	r3, [pc, #452]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	430a      	orrs	r2, r1
 800519a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800519c:	f000 fcd2 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 80051a0:	0001      	movs	r1, r0
 80051a2:	4b6e      	ldr	r3, [pc, #440]	; (800535c <HAL_RCC_OscConfig+0x354>)
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	091b      	lsrs	r3, r3, #4
 80051a8:	220f      	movs	r2, #15
 80051aa:	4013      	ands	r3, r2
 80051ac:	4a6f      	ldr	r2, [pc, #444]	; (800536c <HAL_RCC_OscConfig+0x364>)
 80051ae:	5cd3      	ldrb	r3, [r2, r3]
 80051b0:	000a      	movs	r2, r1
 80051b2:	40da      	lsrs	r2, r3
 80051b4:	4b6e      	ldr	r3, [pc, #440]	; (8005370 <HAL_RCC_OscConfig+0x368>)
 80051b6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80051b8:	4b6e      	ldr	r3, [pc, #440]	; (8005374 <HAL_RCC_OscConfig+0x36c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2513      	movs	r5, #19
 80051be:	197c      	adds	r4, r7, r5
 80051c0:	0018      	movs	r0, r3
 80051c2:	f7ff f9cf 	bl	8004564 <HAL_InitTick>
 80051c6:	0003      	movs	r3, r0
 80051c8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80051ca:	197b      	adds	r3, r7, r5
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d046      	beq.n	8005260 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80051d2:	197b      	adds	r3, r7, r5
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	e2d0      	b.n	800577a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d027      	beq.n	800522e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80051de:	4b5f      	ldr	r3, [pc, #380]	; (800535c <HAL_RCC_OscConfig+0x354>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2209      	movs	r2, #9
 80051e4:	4393      	bics	r3, r2
 80051e6:	0019      	movs	r1, r3
 80051e8:	4b5c      	ldr	r3, [pc, #368]	; (800535c <HAL_RCC_OscConfig+0x354>)
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f0:	f7ff f9fe 	bl	80045f0 <HAL_GetTick>
 80051f4:	0003      	movs	r3, r0
 80051f6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051fa:	f7ff f9f9 	bl	80045f0 <HAL_GetTick>
 80051fe:	0002      	movs	r2, r0
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e2b6      	b.n	800577a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800520c:	4b53      	ldr	r3, [pc, #332]	; (800535c <HAL_RCC_OscConfig+0x354>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2204      	movs	r2, #4
 8005212:	4013      	ands	r3, r2
 8005214:	d0f1      	beq.n	80051fa <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005216:	4b51      	ldr	r3, [pc, #324]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	4a53      	ldr	r2, [pc, #332]	; (8005368 <HAL_RCC_OscConfig+0x360>)
 800521c:	4013      	ands	r3, r2
 800521e:	0019      	movs	r1, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	021a      	lsls	r2, r3, #8
 8005226:	4b4d      	ldr	r3, [pc, #308]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005228:	430a      	orrs	r2, r1
 800522a:	605a      	str	r2, [r3, #4]
 800522c:	e018      	b.n	8005260 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800522e:	4b4b      	ldr	r3, [pc, #300]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4b4a      	ldr	r3, [pc, #296]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005234:	2101      	movs	r1, #1
 8005236:	438a      	bics	r2, r1
 8005238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523a:	f7ff f9d9 	bl	80045f0 <HAL_GetTick>
 800523e:	0003      	movs	r3, r0
 8005240:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005244:	f7ff f9d4 	bl	80045f0 <HAL_GetTick>
 8005248:	0002      	movs	r2, r0
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e291      	b.n	800577a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005256:	4b41      	ldr	r3, [pc, #260]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2204      	movs	r2, #4
 800525c:	4013      	ands	r3, r2
 800525e:	d1f1      	bne.n	8005244 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2210      	movs	r2, #16
 8005266:	4013      	ands	r3, r2
 8005268:	d100      	bne.n	800526c <HAL_RCC_OscConfig+0x264>
 800526a:	e0a1      	b.n	80053b0 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d140      	bne.n	80052f4 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005272:	4b3a      	ldr	r3, [pc, #232]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	2380      	movs	r3, #128	; 0x80
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4013      	ands	r3, r2
 800527c:	d005      	beq.n	800528a <HAL_RCC_OscConfig+0x282>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e277      	b.n	800577a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800528a:	4b34      	ldr	r3, [pc, #208]	; (800535c <HAL_RCC_OscConfig+0x354>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	4a3a      	ldr	r2, [pc, #232]	; (8005378 <HAL_RCC_OscConfig+0x370>)
 8005290:	4013      	ands	r3, r2
 8005292:	0019      	movs	r1, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005298:	4b30      	ldr	r3, [pc, #192]	; (800535c <HAL_RCC_OscConfig+0x354>)
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800529e:	4b2f      	ldr	r3, [pc, #188]	; (800535c <HAL_RCC_OscConfig+0x354>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	0a19      	lsrs	r1, r3, #8
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	061a      	lsls	r2, r3, #24
 80052ac:	4b2b      	ldr	r3, [pc, #172]	; (800535c <HAL_RCC_OscConfig+0x354>)
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	0b5b      	lsrs	r3, r3, #13
 80052b8:	3301      	adds	r3, #1
 80052ba:	2280      	movs	r2, #128	; 0x80
 80052bc:	0212      	lsls	r2, r2, #8
 80052be:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80052c0:	4b26      	ldr	r3, [pc, #152]	; (800535c <HAL_RCC_OscConfig+0x354>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	091b      	lsrs	r3, r3, #4
 80052c6:	210f      	movs	r1, #15
 80052c8:	400b      	ands	r3, r1
 80052ca:	4928      	ldr	r1, [pc, #160]	; (800536c <HAL_RCC_OscConfig+0x364>)
 80052cc:	5ccb      	ldrb	r3, [r1, r3]
 80052ce:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80052d0:	4b27      	ldr	r3, [pc, #156]	; (8005370 <HAL_RCC_OscConfig+0x368>)
 80052d2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80052d4:	4b27      	ldr	r3, [pc, #156]	; (8005374 <HAL_RCC_OscConfig+0x36c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2513      	movs	r5, #19
 80052da:	197c      	adds	r4, r7, r5
 80052dc:	0018      	movs	r0, r3
 80052de:	f7ff f941 	bl	8004564 <HAL_InitTick>
 80052e2:	0003      	movs	r3, r0
 80052e4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80052e6:	197b      	adds	r3, r7, r5
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d060      	beq.n	80053b0 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80052ee:	197b      	adds	r3, r7, r5
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	e242      	b.n	800577a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d03f      	beq.n	800537c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80052fc:	4b17      	ldr	r3, [pc, #92]	; (800535c <HAL_RCC_OscConfig+0x354>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	4b16      	ldr	r3, [pc, #88]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005302:	2180      	movs	r1, #128	; 0x80
 8005304:	0049      	lsls	r1, r1, #1
 8005306:	430a      	orrs	r2, r1
 8005308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530a:	f7ff f971 	bl	80045f0 <HAL_GetTick>
 800530e:	0003      	movs	r3, r0
 8005310:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005314:	f7ff f96c 	bl	80045f0 <HAL_GetTick>
 8005318:	0002      	movs	r2, r0
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e229      	b.n	800577a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005326:	4b0d      	ldr	r3, [pc, #52]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	2380      	movs	r3, #128	; 0x80
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4013      	ands	r3, r2
 8005330:	d0f0      	beq.n	8005314 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005332:	4b0a      	ldr	r3, [pc, #40]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4a10      	ldr	r2, [pc, #64]	; (8005378 <HAL_RCC_OscConfig+0x370>)
 8005338:	4013      	ands	r3, r2
 800533a:	0019      	movs	r1, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005340:	4b06      	ldr	r3, [pc, #24]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005346:	4b05      	ldr	r3, [pc, #20]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	0a19      	lsrs	r1, r3, #8
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	061a      	lsls	r2, r3, #24
 8005354:	4b01      	ldr	r3, [pc, #4]	; (800535c <HAL_RCC_OscConfig+0x354>)
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
 800535a:	e029      	b.n	80053b0 <HAL_RCC_OscConfig+0x3a8>
 800535c:	40021000 	.word	0x40021000
 8005360:	fffeffff 	.word	0xfffeffff
 8005364:	fffbffff 	.word	0xfffbffff
 8005368:	ffffe0ff 	.word	0xffffe0ff
 800536c:	0800a728 	.word	0x0800a728
 8005370:	20000080 	.word	0x20000080
 8005374:	20000084 	.word	0x20000084
 8005378:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800537c:	4bbd      	ldr	r3, [pc, #756]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	4bbc      	ldr	r3, [pc, #752]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 8005382:	49bd      	ldr	r1, [pc, #756]	; (8005678 <HAL_RCC_OscConfig+0x670>)
 8005384:	400a      	ands	r2, r1
 8005386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005388:	f7ff f932 	bl	80045f0 <HAL_GetTick>
 800538c:	0003      	movs	r3, r0
 800538e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005392:	f7ff f92d 	bl	80045f0 <HAL_GetTick>
 8005396:	0002      	movs	r2, r0
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e1ea      	b.n	800577a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80053a4:	4bb3      	ldr	r3, [pc, #716]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	2380      	movs	r3, #128	; 0x80
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4013      	ands	r3, r2
 80053ae:	d1f0      	bne.n	8005392 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2208      	movs	r2, #8
 80053b6:	4013      	ands	r3, r2
 80053b8:	d036      	beq.n	8005428 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d019      	beq.n	80053f6 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053c2:	4bac      	ldr	r3, [pc, #688]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80053c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053c6:	4bab      	ldr	r3, [pc, #684]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80053c8:	2101      	movs	r1, #1
 80053ca:	430a      	orrs	r2, r1
 80053cc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ce:	f7ff f90f 	bl	80045f0 <HAL_GetTick>
 80053d2:	0003      	movs	r3, r0
 80053d4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053d8:	f7ff f90a 	bl	80045f0 <HAL_GetTick>
 80053dc:	0002      	movs	r2, r0
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e1c7      	b.n	800577a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053ea:	4ba2      	ldr	r3, [pc, #648]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80053ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ee:	2202      	movs	r2, #2
 80053f0:	4013      	ands	r3, r2
 80053f2:	d0f1      	beq.n	80053d8 <HAL_RCC_OscConfig+0x3d0>
 80053f4:	e018      	b.n	8005428 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053f6:	4b9f      	ldr	r3, [pc, #636]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80053f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053fa:	4b9e      	ldr	r3, [pc, #632]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80053fc:	2101      	movs	r1, #1
 80053fe:	438a      	bics	r2, r1
 8005400:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005402:	f7ff f8f5 	bl	80045f0 <HAL_GetTick>
 8005406:	0003      	movs	r3, r0
 8005408:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800540c:	f7ff f8f0 	bl	80045f0 <HAL_GetTick>
 8005410:	0002      	movs	r2, r0
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e1ad      	b.n	800577a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800541e:	4b95      	ldr	r3, [pc, #596]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 8005420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005422:	2202      	movs	r2, #2
 8005424:	4013      	ands	r3, r2
 8005426:	d1f1      	bne.n	800540c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2204      	movs	r2, #4
 800542e:	4013      	ands	r3, r2
 8005430:	d100      	bne.n	8005434 <HAL_RCC_OscConfig+0x42c>
 8005432:	e0ae      	b.n	8005592 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005434:	2027      	movs	r0, #39	; 0x27
 8005436:	183b      	adds	r3, r7, r0
 8005438:	2200      	movs	r2, #0
 800543a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800543c:	4b8d      	ldr	r3, [pc, #564]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 800543e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005440:	2380      	movs	r3, #128	; 0x80
 8005442:	055b      	lsls	r3, r3, #21
 8005444:	4013      	ands	r3, r2
 8005446:	d109      	bne.n	800545c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005448:	4b8a      	ldr	r3, [pc, #552]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 800544a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800544c:	4b89      	ldr	r3, [pc, #548]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 800544e:	2180      	movs	r1, #128	; 0x80
 8005450:	0549      	lsls	r1, r1, #21
 8005452:	430a      	orrs	r2, r1
 8005454:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005456:	183b      	adds	r3, r7, r0
 8005458:	2201      	movs	r2, #1
 800545a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545c:	4b87      	ldr	r3, [pc, #540]	; (800567c <HAL_RCC_OscConfig+0x674>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	4013      	ands	r3, r2
 8005466:	d11a      	bne.n	800549e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005468:	4b84      	ldr	r3, [pc, #528]	; (800567c <HAL_RCC_OscConfig+0x674>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4b83      	ldr	r3, [pc, #524]	; (800567c <HAL_RCC_OscConfig+0x674>)
 800546e:	2180      	movs	r1, #128	; 0x80
 8005470:	0049      	lsls	r1, r1, #1
 8005472:	430a      	orrs	r2, r1
 8005474:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005476:	f7ff f8bb 	bl	80045f0 <HAL_GetTick>
 800547a:	0003      	movs	r3, r0
 800547c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005480:	f7ff f8b6 	bl	80045f0 <HAL_GetTick>
 8005484:	0002      	movs	r2, r0
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b64      	cmp	r3, #100	; 0x64
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e173      	b.n	800577a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005492:	4b7a      	ldr	r3, [pc, #488]	; (800567c <HAL_RCC_OscConfig+0x674>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	4013      	ands	r3, r2
 800549c:	d0f0      	beq.n	8005480 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	2380      	movs	r3, #128	; 0x80
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d107      	bne.n	80054ba <HAL_RCC_OscConfig+0x4b2>
 80054aa:	4b72      	ldr	r3, [pc, #456]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80054ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ae:	4b71      	ldr	r3, [pc, #452]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80054b0:	2180      	movs	r1, #128	; 0x80
 80054b2:	0049      	lsls	r1, r1, #1
 80054b4:	430a      	orrs	r2, r1
 80054b6:	651a      	str	r2, [r3, #80]	; 0x50
 80054b8:	e031      	b.n	800551e <HAL_RCC_OscConfig+0x516>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10c      	bne.n	80054dc <HAL_RCC_OscConfig+0x4d4>
 80054c2:	4b6c      	ldr	r3, [pc, #432]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80054c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054c6:	4b6b      	ldr	r3, [pc, #428]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80054c8:	496b      	ldr	r1, [pc, #428]	; (8005678 <HAL_RCC_OscConfig+0x670>)
 80054ca:	400a      	ands	r2, r1
 80054cc:	651a      	str	r2, [r3, #80]	; 0x50
 80054ce:	4b69      	ldr	r3, [pc, #420]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80054d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054d2:	4b68      	ldr	r3, [pc, #416]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80054d4:	496a      	ldr	r1, [pc, #424]	; (8005680 <HAL_RCC_OscConfig+0x678>)
 80054d6:	400a      	ands	r2, r1
 80054d8:	651a      	str	r2, [r3, #80]	; 0x50
 80054da:	e020      	b.n	800551e <HAL_RCC_OscConfig+0x516>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	23a0      	movs	r3, #160	; 0xa0
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d10e      	bne.n	8005506 <HAL_RCC_OscConfig+0x4fe>
 80054e8:	4b62      	ldr	r3, [pc, #392]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80054ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ec:	4b61      	ldr	r3, [pc, #388]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80054ee:	2180      	movs	r1, #128	; 0x80
 80054f0:	00c9      	lsls	r1, r1, #3
 80054f2:	430a      	orrs	r2, r1
 80054f4:	651a      	str	r2, [r3, #80]	; 0x50
 80054f6:	4b5f      	ldr	r3, [pc, #380]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80054f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054fa:	4b5e      	ldr	r3, [pc, #376]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80054fc:	2180      	movs	r1, #128	; 0x80
 80054fe:	0049      	lsls	r1, r1, #1
 8005500:	430a      	orrs	r2, r1
 8005502:	651a      	str	r2, [r3, #80]	; 0x50
 8005504:	e00b      	b.n	800551e <HAL_RCC_OscConfig+0x516>
 8005506:	4b5b      	ldr	r3, [pc, #364]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 8005508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800550a:	4b5a      	ldr	r3, [pc, #360]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 800550c:	495a      	ldr	r1, [pc, #360]	; (8005678 <HAL_RCC_OscConfig+0x670>)
 800550e:	400a      	ands	r2, r1
 8005510:	651a      	str	r2, [r3, #80]	; 0x50
 8005512:	4b58      	ldr	r3, [pc, #352]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 8005514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005516:	4b57      	ldr	r3, [pc, #348]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 8005518:	4959      	ldr	r1, [pc, #356]	; (8005680 <HAL_RCC_OscConfig+0x678>)
 800551a:	400a      	ands	r2, r1
 800551c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d015      	beq.n	8005552 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005526:	f7ff f863 	bl	80045f0 <HAL_GetTick>
 800552a:	0003      	movs	r3, r0
 800552c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800552e:	e009      	b.n	8005544 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005530:	f7ff f85e 	bl	80045f0 <HAL_GetTick>
 8005534:	0002      	movs	r2, r0
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	4a52      	ldr	r2, [pc, #328]	; (8005684 <HAL_RCC_OscConfig+0x67c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e11a      	b.n	800577a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005544:	4b4b      	ldr	r3, [pc, #300]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 8005546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005548:	2380      	movs	r3, #128	; 0x80
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4013      	ands	r3, r2
 800554e:	d0ef      	beq.n	8005530 <HAL_RCC_OscConfig+0x528>
 8005550:	e014      	b.n	800557c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005552:	f7ff f84d 	bl	80045f0 <HAL_GetTick>
 8005556:	0003      	movs	r3, r0
 8005558:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800555a:	e009      	b.n	8005570 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800555c:	f7ff f848 	bl	80045f0 <HAL_GetTick>
 8005560:	0002      	movs	r2, r0
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	4a47      	ldr	r2, [pc, #284]	; (8005684 <HAL_RCC_OscConfig+0x67c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e104      	b.n	800577a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005570:	4b40      	ldr	r3, [pc, #256]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 8005572:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005574:	2380      	movs	r3, #128	; 0x80
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4013      	ands	r3, r2
 800557a:	d1ef      	bne.n	800555c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800557c:	2327      	movs	r3, #39	; 0x27
 800557e:	18fb      	adds	r3, r7, r3
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d105      	bne.n	8005592 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005586:	4b3b      	ldr	r3, [pc, #236]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 8005588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800558a:	4b3a      	ldr	r3, [pc, #232]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 800558c:	493e      	ldr	r1, [pc, #248]	; (8005688 <HAL_RCC_OscConfig+0x680>)
 800558e:	400a      	ands	r2, r1
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2220      	movs	r2, #32
 8005598:	4013      	ands	r3, r2
 800559a:	d049      	beq.n	8005630 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d026      	beq.n	80055f2 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80055a4:	4b33      	ldr	r3, [pc, #204]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	4b32      	ldr	r3, [pc, #200]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80055aa:	2101      	movs	r1, #1
 80055ac:	430a      	orrs	r2, r1
 80055ae:	609a      	str	r2, [r3, #8]
 80055b0:	4b30      	ldr	r3, [pc, #192]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80055b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b4:	4b2f      	ldr	r3, [pc, #188]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80055b6:	2101      	movs	r1, #1
 80055b8:	430a      	orrs	r2, r1
 80055ba:	635a      	str	r2, [r3, #52]	; 0x34
 80055bc:	4b33      	ldr	r3, [pc, #204]	; (800568c <HAL_RCC_OscConfig+0x684>)
 80055be:	6a1a      	ldr	r2, [r3, #32]
 80055c0:	4b32      	ldr	r3, [pc, #200]	; (800568c <HAL_RCC_OscConfig+0x684>)
 80055c2:	2180      	movs	r1, #128	; 0x80
 80055c4:	0189      	lsls	r1, r1, #6
 80055c6:	430a      	orrs	r2, r1
 80055c8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ca:	f7ff f811 	bl	80045f0 <HAL_GetTick>
 80055ce:	0003      	movs	r3, r0
 80055d0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055d4:	f7ff f80c 	bl	80045f0 <HAL_GetTick>
 80055d8:	0002      	movs	r2, r0
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e0c9      	b.n	800577a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055e6:	4b23      	ldr	r3, [pc, #140]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2202      	movs	r2, #2
 80055ec:	4013      	ands	r3, r2
 80055ee:	d0f1      	beq.n	80055d4 <HAL_RCC_OscConfig+0x5cc>
 80055f0:	e01e      	b.n	8005630 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80055f2:	4b20      	ldr	r3, [pc, #128]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	4b1f      	ldr	r3, [pc, #124]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 80055f8:	2101      	movs	r1, #1
 80055fa:	438a      	bics	r2, r1
 80055fc:	609a      	str	r2, [r3, #8]
 80055fe:	4b23      	ldr	r3, [pc, #140]	; (800568c <HAL_RCC_OscConfig+0x684>)
 8005600:	6a1a      	ldr	r2, [r3, #32]
 8005602:	4b22      	ldr	r3, [pc, #136]	; (800568c <HAL_RCC_OscConfig+0x684>)
 8005604:	4922      	ldr	r1, [pc, #136]	; (8005690 <HAL_RCC_OscConfig+0x688>)
 8005606:	400a      	ands	r2, r1
 8005608:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560a:	f7fe fff1 	bl	80045f0 <HAL_GetTick>
 800560e:	0003      	movs	r3, r0
 8005610:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005614:	f7fe ffec 	bl	80045f0 <HAL_GetTick>
 8005618:	0002      	movs	r2, r0
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e0a9      	b.n	800577a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005626:	4b13      	ldr	r3, [pc, #76]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	2202      	movs	r2, #2
 800562c:	4013      	ands	r3, r2
 800562e:	d1f1      	bne.n	8005614 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	2b00      	cmp	r3, #0
 8005636:	d100      	bne.n	800563a <HAL_RCC_OscConfig+0x632>
 8005638:	e09e      	b.n	8005778 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	2b0c      	cmp	r3, #12
 800563e:	d100      	bne.n	8005642 <HAL_RCC_OscConfig+0x63a>
 8005640:	e077      	b.n	8005732 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	2b02      	cmp	r3, #2
 8005648:	d158      	bne.n	80056fc <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564a:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4b09      	ldr	r3, [pc, #36]	; (8005674 <HAL_RCC_OscConfig+0x66c>)
 8005650:	4910      	ldr	r1, [pc, #64]	; (8005694 <HAL_RCC_OscConfig+0x68c>)
 8005652:	400a      	ands	r2, r1
 8005654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005656:	f7fe ffcb 	bl	80045f0 <HAL_GetTick>
 800565a:	0003      	movs	r3, r0
 800565c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800565e:	e01b      	b.n	8005698 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005660:	f7fe ffc6 	bl	80045f0 <HAL_GetTick>
 8005664:	0002      	movs	r2, r0
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d914      	bls.n	8005698 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e083      	b.n	800577a <HAL_RCC_OscConfig+0x772>
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	40021000 	.word	0x40021000
 8005678:	fffffeff 	.word	0xfffffeff
 800567c:	40007000 	.word	0x40007000
 8005680:	fffffbff 	.word	0xfffffbff
 8005684:	00001388 	.word	0x00001388
 8005688:	efffffff 	.word	0xefffffff
 800568c:	40010000 	.word	0x40010000
 8005690:	ffffdfff 	.word	0xffffdfff
 8005694:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005698:	4b3a      	ldr	r3, [pc, #232]	; (8005784 <HAL_RCC_OscConfig+0x77c>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	2380      	movs	r3, #128	; 0x80
 800569e:	049b      	lsls	r3, r3, #18
 80056a0:	4013      	ands	r3, r2
 80056a2:	d1dd      	bne.n	8005660 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056a4:	4b37      	ldr	r3, [pc, #220]	; (8005784 <HAL_RCC_OscConfig+0x77c>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	4a37      	ldr	r2, [pc, #220]	; (8005788 <HAL_RCC_OscConfig+0x780>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	0019      	movs	r1, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056bc:	431a      	orrs	r2, r3
 80056be:	4b31      	ldr	r3, [pc, #196]	; (8005784 <HAL_RCC_OscConfig+0x77c>)
 80056c0:	430a      	orrs	r2, r1
 80056c2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056c4:	4b2f      	ldr	r3, [pc, #188]	; (8005784 <HAL_RCC_OscConfig+0x77c>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	4b2e      	ldr	r3, [pc, #184]	; (8005784 <HAL_RCC_OscConfig+0x77c>)
 80056ca:	2180      	movs	r1, #128	; 0x80
 80056cc:	0449      	lsls	r1, r1, #17
 80056ce:	430a      	orrs	r2, r1
 80056d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d2:	f7fe ff8d 	bl	80045f0 <HAL_GetTick>
 80056d6:	0003      	movs	r3, r0
 80056d8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056dc:	f7fe ff88 	bl	80045f0 <HAL_GetTick>
 80056e0:	0002      	movs	r2, r0
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e045      	b.n	800577a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80056ee:	4b25      	ldr	r3, [pc, #148]	; (8005784 <HAL_RCC_OscConfig+0x77c>)
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	2380      	movs	r3, #128	; 0x80
 80056f4:	049b      	lsls	r3, r3, #18
 80056f6:	4013      	ands	r3, r2
 80056f8:	d0f0      	beq.n	80056dc <HAL_RCC_OscConfig+0x6d4>
 80056fa:	e03d      	b.n	8005778 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056fc:	4b21      	ldr	r3, [pc, #132]	; (8005784 <HAL_RCC_OscConfig+0x77c>)
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	4b20      	ldr	r3, [pc, #128]	; (8005784 <HAL_RCC_OscConfig+0x77c>)
 8005702:	4922      	ldr	r1, [pc, #136]	; (800578c <HAL_RCC_OscConfig+0x784>)
 8005704:	400a      	ands	r2, r1
 8005706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005708:	f7fe ff72 	bl	80045f0 <HAL_GetTick>
 800570c:	0003      	movs	r3, r0
 800570e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005712:	f7fe ff6d 	bl	80045f0 <HAL_GetTick>
 8005716:	0002      	movs	r2, r0
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e02a      	b.n	800577a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005724:	4b17      	ldr	r3, [pc, #92]	; (8005784 <HAL_RCC_OscConfig+0x77c>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	2380      	movs	r3, #128	; 0x80
 800572a:	049b      	lsls	r3, r3, #18
 800572c:	4013      	ands	r3, r2
 800572e:	d1f0      	bne.n	8005712 <HAL_RCC_OscConfig+0x70a>
 8005730:	e022      	b.n	8005778 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e01d      	b.n	800577a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800573e:	4b11      	ldr	r3, [pc, #68]	; (8005784 <HAL_RCC_OscConfig+0x77c>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005744:	69fa      	ldr	r2, [r7, #28]
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	025b      	lsls	r3, r3, #9
 800574a:	401a      	ands	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	429a      	cmp	r2, r3
 8005752:	d10f      	bne.n	8005774 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	23f0      	movs	r3, #240	; 0xf0
 8005758:	039b      	lsls	r3, r3, #14
 800575a:	401a      	ands	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005760:	429a      	cmp	r2, r3
 8005762:	d107      	bne.n	8005774 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	23c0      	movs	r3, #192	; 0xc0
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	401a      	ands	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	0018      	movs	r0, r3
 800577c:	46bd      	mov	sp, r7
 800577e:	b00a      	add	sp, #40	; 0x28
 8005780:	bdb0      	pop	{r4, r5, r7, pc}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	40021000 	.word	0x40021000
 8005788:	ff02ffff 	.word	0xff02ffff
 800578c:	feffffff 	.word	0xfeffffff

08005790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005790:	b5b0      	push	{r4, r5, r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e128      	b.n	80059f6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057a4:	4b96      	ldr	r3, [pc, #600]	; (8005a00 <HAL_RCC_ClockConfig+0x270>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2201      	movs	r2, #1
 80057aa:	4013      	ands	r3, r2
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d91e      	bls.n	80057f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b2:	4b93      	ldr	r3, [pc, #588]	; (8005a00 <HAL_RCC_ClockConfig+0x270>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2201      	movs	r2, #1
 80057b8:	4393      	bics	r3, r2
 80057ba:	0019      	movs	r1, r3
 80057bc:	4b90      	ldr	r3, [pc, #576]	; (8005a00 <HAL_RCC_ClockConfig+0x270>)
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057c4:	f7fe ff14 	bl	80045f0 <HAL_GetTick>
 80057c8:	0003      	movs	r3, r0
 80057ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057cc:	e009      	b.n	80057e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ce:	f7fe ff0f 	bl	80045f0 <HAL_GetTick>
 80057d2:	0002      	movs	r2, r0
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	4a8a      	ldr	r2, [pc, #552]	; (8005a04 <HAL_RCC_ClockConfig+0x274>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e109      	b.n	80059f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e2:	4b87      	ldr	r3, [pc, #540]	; (8005a00 <HAL_RCC_ClockConfig+0x270>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2201      	movs	r2, #1
 80057e8:	4013      	ands	r3, r2
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d1ee      	bne.n	80057ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2202      	movs	r2, #2
 80057f6:	4013      	ands	r3, r2
 80057f8:	d009      	beq.n	800580e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057fa:	4b83      	ldr	r3, [pc, #524]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	22f0      	movs	r2, #240	; 0xf0
 8005800:	4393      	bics	r3, r2
 8005802:	0019      	movs	r1, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	4b7f      	ldr	r3, [pc, #508]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 800580a:	430a      	orrs	r2, r1
 800580c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2201      	movs	r2, #1
 8005814:	4013      	ands	r3, r2
 8005816:	d100      	bne.n	800581a <HAL_RCC_ClockConfig+0x8a>
 8005818:	e089      	b.n	800592e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d107      	bne.n	8005832 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005822:	4b79      	ldr	r3, [pc, #484]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	2380      	movs	r3, #128	; 0x80
 8005828:	029b      	lsls	r3, r3, #10
 800582a:	4013      	ands	r3, r2
 800582c:	d120      	bne.n	8005870 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e0e1      	b.n	80059f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2b03      	cmp	r3, #3
 8005838:	d107      	bne.n	800584a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800583a:	4b73      	ldr	r3, [pc, #460]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	2380      	movs	r3, #128	; 0x80
 8005840:	049b      	lsls	r3, r3, #18
 8005842:	4013      	ands	r3, r2
 8005844:	d114      	bne.n	8005870 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e0d5      	b.n	80059f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d106      	bne.n	8005860 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005852:	4b6d      	ldr	r3, [pc, #436]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2204      	movs	r2, #4
 8005858:	4013      	ands	r3, r2
 800585a:	d109      	bne.n	8005870 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e0ca      	b.n	80059f6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005860:	4b69      	ldr	r3, [pc, #420]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4013      	ands	r3, r2
 800586a:	d101      	bne.n	8005870 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e0c2      	b.n	80059f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005870:	4b65      	ldr	r3, [pc, #404]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2203      	movs	r2, #3
 8005876:	4393      	bics	r3, r2
 8005878:	0019      	movs	r1, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	4b62      	ldr	r3, [pc, #392]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 8005880:	430a      	orrs	r2, r1
 8005882:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005884:	f7fe feb4 	bl	80045f0 <HAL_GetTick>
 8005888:	0003      	movs	r3, r0
 800588a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2b02      	cmp	r3, #2
 8005892:	d111      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005894:	e009      	b.n	80058aa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005896:	f7fe feab 	bl	80045f0 <HAL_GetTick>
 800589a:	0002      	movs	r2, r0
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	4a58      	ldr	r2, [pc, #352]	; (8005a04 <HAL_RCC_ClockConfig+0x274>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e0a5      	b.n	80059f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058aa:	4b57      	ldr	r3, [pc, #348]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	220c      	movs	r2, #12
 80058b0:	4013      	ands	r3, r2
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	d1ef      	bne.n	8005896 <HAL_RCC_ClockConfig+0x106>
 80058b6:	e03a      	b.n	800592e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d111      	bne.n	80058e4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058c0:	e009      	b.n	80058d6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058c2:	f7fe fe95 	bl	80045f0 <HAL_GetTick>
 80058c6:	0002      	movs	r2, r0
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	4a4d      	ldr	r2, [pc, #308]	; (8005a04 <HAL_RCC_ClockConfig+0x274>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e08f      	b.n	80059f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058d6:	4b4c      	ldr	r3, [pc, #304]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	220c      	movs	r2, #12
 80058dc:	4013      	ands	r3, r2
 80058de:	2b0c      	cmp	r3, #12
 80058e0:	d1ef      	bne.n	80058c2 <HAL_RCC_ClockConfig+0x132>
 80058e2:	e024      	b.n	800592e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d11b      	bne.n	8005924 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80058ec:	e009      	b.n	8005902 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ee:	f7fe fe7f 	bl	80045f0 <HAL_GetTick>
 80058f2:	0002      	movs	r2, r0
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	4a42      	ldr	r2, [pc, #264]	; (8005a04 <HAL_RCC_ClockConfig+0x274>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e079      	b.n	80059f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005902:	4b41      	ldr	r3, [pc, #260]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	220c      	movs	r2, #12
 8005908:	4013      	ands	r3, r2
 800590a:	2b04      	cmp	r3, #4
 800590c:	d1ef      	bne.n	80058ee <HAL_RCC_ClockConfig+0x15e>
 800590e:	e00e      	b.n	800592e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005910:	f7fe fe6e 	bl	80045f0 <HAL_GetTick>
 8005914:	0002      	movs	r2, r0
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	4a3a      	ldr	r2, [pc, #232]	; (8005a04 <HAL_RCC_ClockConfig+0x274>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d901      	bls.n	8005924 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e068      	b.n	80059f6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005924:	4b38      	ldr	r3, [pc, #224]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	220c      	movs	r2, #12
 800592a:	4013      	ands	r3, r2
 800592c:	d1f0      	bne.n	8005910 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800592e:	4b34      	ldr	r3, [pc, #208]	; (8005a00 <HAL_RCC_ClockConfig+0x270>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2201      	movs	r2, #1
 8005934:	4013      	ands	r3, r2
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d21e      	bcs.n	800597a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593c:	4b30      	ldr	r3, [pc, #192]	; (8005a00 <HAL_RCC_ClockConfig+0x270>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2201      	movs	r2, #1
 8005942:	4393      	bics	r3, r2
 8005944:	0019      	movs	r1, r3
 8005946:	4b2e      	ldr	r3, [pc, #184]	; (8005a00 <HAL_RCC_ClockConfig+0x270>)
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800594e:	f7fe fe4f 	bl	80045f0 <HAL_GetTick>
 8005952:	0003      	movs	r3, r0
 8005954:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005956:	e009      	b.n	800596c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005958:	f7fe fe4a 	bl	80045f0 <HAL_GetTick>
 800595c:	0002      	movs	r2, r0
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	4a28      	ldr	r2, [pc, #160]	; (8005a04 <HAL_RCC_ClockConfig+0x274>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d901      	bls.n	800596c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e044      	b.n	80059f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800596c:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <HAL_RCC_ClockConfig+0x270>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2201      	movs	r2, #1
 8005972:	4013      	ands	r3, r2
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d1ee      	bne.n	8005958 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2204      	movs	r2, #4
 8005980:	4013      	ands	r3, r2
 8005982:	d009      	beq.n	8005998 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005984:	4b20      	ldr	r3, [pc, #128]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4a20      	ldr	r2, [pc, #128]	; (8005a0c <HAL_RCC_ClockConfig+0x27c>)
 800598a:	4013      	ands	r3, r2
 800598c:	0019      	movs	r1, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	4b1d      	ldr	r3, [pc, #116]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 8005994:	430a      	orrs	r2, r1
 8005996:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2208      	movs	r2, #8
 800599e:	4013      	ands	r3, r2
 80059a0:	d00a      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059a2:	4b19      	ldr	r3, [pc, #100]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	4a1a      	ldr	r2, [pc, #104]	; (8005a10 <HAL_RCC_ClockConfig+0x280>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	0019      	movs	r1, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	00da      	lsls	r2, r3, #3
 80059b2:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 80059b4:	430a      	orrs	r2, r1
 80059b6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059b8:	f000 f8c4 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 80059bc:	0001      	movs	r1, r0
 80059be:	4b12      	ldr	r3, [pc, #72]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	091b      	lsrs	r3, r3, #4
 80059c4:	220f      	movs	r2, #15
 80059c6:	4013      	ands	r3, r2
 80059c8:	4a12      	ldr	r2, [pc, #72]	; (8005a14 <HAL_RCC_ClockConfig+0x284>)
 80059ca:	5cd3      	ldrb	r3, [r2, r3]
 80059cc:	000a      	movs	r2, r1
 80059ce:	40da      	lsrs	r2, r3
 80059d0:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <HAL_RCC_ClockConfig+0x288>)
 80059d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059d4:	4b11      	ldr	r3, [pc, #68]	; (8005a1c <HAL_RCC_ClockConfig+0x28c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	250b      	movs	r5, #11
 80059da:	197c      	adds	r4, r7, r5
 80059dc:	0018      	movs	r0, r3
 80059de:	f7fe fdc1 	bl	8004564 <HAL_InitTick>
 80059e2:	0003      	movs	r3, r0
 80059e4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80059e6:	197b      	adds	r3, r7, r5
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80059ee:	197b      	adds	r3, r7, r5
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	e000      	b.n	80059f6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	0018      	movs	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b004      	add	sp, #16
 80059fc:	bdb0      	pop	{r4, r5, r7, pc}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	40022000 	.word	0x40022000
 8005a04:	00001388 	.word	0x00001388
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	fffff8ff 	.word	0xfffff8ff
 8005a10:	ffffc7ff 	.word	0xffffc7ff
 8005a14:	0800a728 	.word	0x0800a728
 8005a18:	20000080 	.word	0x20000080
 8005a1c:	20000084 	.word	0x20000084

08005a20 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005a20:	b590      	push	{r4, r7, lr}
 8005a22:	b08d      	sub	sp, #52	; 0x34
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 8005a2c:	241c      	movs	r4, #28
 8005a2e:	193b      	adds	r3, r7, r4
 8005a30:	0018      	movs	r0, r3
 8005a32:	2314      	movs	r3, #20
 8005a34:	001a      	movs	r2, r3
 8005a36:	2100      	movs	r1, #0
 8005a38:	f001 fc3a 	bl	80072b0 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8005a3c:	0020      	movs	r0, r4
 8005a3e:	183b      	adds	r3, r7, r0
 8005a40:	2202      	movs	r2, #2
 8005a42:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005a44:	183b      	adds	r3, r7, r0
 8005a46:	2202      	movs	r2, #2
 8005a48:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 8005a4a:	183b      	adds	r3, r7, r0
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d11a      	bne.n	8005a8c <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 8005a56:	183b      	adds	r3, r7, r0
 8005a58:	2280      	movs	r2, #128	; 0x80
 8005a5a:	0052      	lsls	r2, r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8005a5e:	183b      	adds	r3, r7, r0
 8005a60:	2200      	movs	r2, #0
 8005a62:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005a64:	4b2d      	ldr	r3, [pc, #180]	; (8005b1c <HAL_RCC_MCOConfig+0xfc>)
 8005a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a68:	4b2c      	ldr	r3, [pc, #176]	; (8005b1c <HAL_RCC_MCOConfig+0xfc>)
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a70:	4b2a      	ldr	r3, [pc, #168]	; (8005b1c <HAL_RCC_MCOConfig+0xfc>)
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	2201      	movs	r2, #1
 8005a76:	4013      	ands	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8005a7c:	183a      	adds	r2, r7, r0
 8005a7e:	23a0      	movs	r3, #160	; 0xa0
 8005a80:	05db      	lsls	r3, r3, #23
 8005a82:	0011      	movs	r1, r2
 8005a84:	0018      	movs	r0, r3
 8005a86:	f7ff f8bf 	bl	8004c08 <HAL_GPIO_Init>
 8005a8a:	e038      	b.n	8005afe <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d11a      	bne.n	8005ac8 <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 8005a92:	201c      	movs	r0, #28
 8005a94:	183b      	adds	r3, r7, r0
 8005a96:	2280      	movs	r2, #128	; 0x80
 8005a98:	0192      	lsls	r2, r2, #6
 8005a9a:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 8005a9c:	183b      	adds	r3, r7, r0
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 8005aa2:	4b1e      	ldr	r3, [pc, #120]	; (8005b1c <HAL_RCC_MCOConfig+0xfc>)
 8005aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa6:	4b1d      	ldr	r3, [pc, #116]	; (8005b1c <HAL_RCC_MCOConfig+0xfc>)
 8005aa8:	2102      	movs	r1, #2
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	62da      	str	r2, [r3, #44]	; 0x2c
 8005aae:	4b1b      	ldr	r3, [pc, #108]	; (8005b1c <HAL_RCC_MCOConfig+0xfc>)
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 8005aba:	183b      	adds	r3, r7, r0
 8005abc:	4a18      	ldr	r2, [pc, #96]	; (8005b20 <HAL_RCC_MCOConfig+0x100>)
 8005abe:	0019      	movs	r1, r3
 8005ac0:	0010      	movs	r0, r2
 8005ac2:	f7ff f8a1 	bl	8004c08 <HAL_GPIO_Init>
 8005ac6:	e01a      	b.n	8005afe <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 8005ac8:	201c      	movs	r0, #28
 8005aca:	183b      	adds	r3, r7, r0
 8005acc:	2280      	movs	r2, #128	; 0x80
 8005ace:	0092      	lsls	r2, r2, #2
 8005ad0:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8005ad2:	183b      	adds	r3, r7, r0
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 8005ad8:	4b10      	ldr	r3, [pc, #64]	; (8005b1c <HAL_RCC_MCOConfig+0xfc>)
 8005ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005adc:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <HAL_RCC_MCOConfig+0xfc>)
 8005ade:	2101      	movs	r1, #1
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ae4:	4b0d      	ldr	r3, [pc, #52]	; (8005b1c <HAL_RCC_MCOConfig+0xfc>)
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	2201      	movs	r2, #1
 8005aea:	4013      	ands	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 8005af0:	183a      	adds	r2, r7, r0
 8005af2:	23a0      	movs	r3, #160	; 0xa0
 8005af4:	05db      	lsls	r3, r3, #23
 8005af6:	0011      	movs	r1, r2
 8005af8:	0018      	movs	r0, r3
 8005afa:	f7ff f885 	bl	8004c08 <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8005afe:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <HAL_RCC_MCOConfig+0xfc>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	4a08      	ldr	r2, [pc, #32]	; (8005b24 <HAL_RCC_MCOConfig+0x104>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	0019      	movs	r1, r3
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	4b03      	ldr	r3, [pc, #12]	; (8005b1c <HAL_RCC_MCOConfig+0xfc>)
 8005b10:	430a      	orrs	r2, r1
 8005b12:	60da      	str	r2, [r3, #12]
}
 8005b14:	46c0      	nop			; (mov r8, r8)
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b00d      	add	sp, #52	; 0x34
 8005b1a:	bd90      	pop	{r4, r7, pc}
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	50000400 	.word	0x50000400
 8005b24:	80ffffff 	.word	0x80ffffff

08005b28 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005b2c:	4b04      	ldr	r3, [pc, #16]	; (8005b40 <HAL_RCC_EnableCSS+0x18>)
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <HAL_RCC_EnableCSS+0x18>)
 8005b32:	2180      	movs	r1, #128	; 0x80
 8005b34:	0309      	lsls	r1, r1, #12
 8005b36:	430a      	orrs	r2, r1
 8005b38:	601a      	str	r2, [r3, #0]
}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40021000 	.word	0x40021000

08005b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b44:	b5b0      	push	{r4, r5, r7, lr}
 8005b46:	b08e      	sub	sp, #56	; 0x38
 8005b48:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005b4a:	4b4c      	ldr	r3, [pc, #304]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b52:	230c      	movs	r3, #12
 8005b54:	4013      	ands	r3, r2
 8005b56:	2b0c      	cmp	r3, #12
 8005b58:	d014      	beq.n	8005b84 <HAL_RCC_GetSysClockFreq+0x40>
 8005b5a:	d900      	bls.n	8005b5e <HAL_RCC_GetSysClockFreq+0x1a>
 8005b5c:	e07b      	b.n	8005c56 <HAL_RCC_GetSysClockFreq+0x112>
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d002      	beq.n	8005b68 <HAL_RCC_GetSysClockFreq+0x24>
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d00b      	beq.n	8005b7e <HAL_RCC_GetSysClockFreq+0x3a>
 8005b66:	e076      	b.n	8005c56 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005b68:	4b44      	ldr	r3, [pc, #272]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2210      	movs	r2, #16
 8005b6e:	4013      	ands	r3, r2
 8005b70:	d002      	beq.n	8005b78 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005b72:	4b43      	ldr	r3, [pc, #268]	; (8005c80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005b74:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005b76:	e07c      	b.n	8005c72 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005b78:	4b42      	ldr	r3, [pc, #264]	; (8005c84 <HAL_RCC_GetSysClockFreq+0x140>)
 8005b7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b7c:	e079      	b.n	8005c72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b7e:	4b42      	ldr	r3, [pc, #264]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x144>)
 8005b80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b82:	e076      	b.n	8005c72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b86:	0c9a      	lsrs	r2, r3, #18
 8005b88:	230f      	movs	r3, #15
 8005b8a:	401a      	ands	r2, r3
 8005b8c:	4b3f      	ldr	r3, [pc, #252]	; (8005c8c <HAL_RCC_GetSysClockFreq+0x148>)
 8005b8e:	5c9b      	ldrb	r3, [r3, r2]
 8005b90:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b94:	0d9a      	lsrs	r2, r3, #22
 8005b96:	2303      	movs	r3, #3
 8005b98:	4013      	ands	r3, r2
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b9e:	4b37      	ldr	r3, [pc, #220]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	2380      	movs	r3, #128	; 0x80
 8005ba4:	025b      	lsls	r3, r3, #9
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	d01a      	beq.n	8005be0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	61fb      	str	r3, [r7, #28]
 8005bb2:	4a35      	ldr	r2, [pc, #212]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x144>)
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	69b8      	ldr	r0, [r7, #24]
 8005bb8:	69f9      	ldr	r1, [r7, #28]
 8005bba:	f7fa fc95 	bl	80004e8 <__aeabi_lmul>
 8005bbe:	0002      	movs	r2, r0
 8005bc0:	000b      	movs	r3, r1
 8005bc2:	0010      	movs	r0, r2
 8005bc4:	0019      	movs	r1, r3
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f7fa fc69 	bl	80004a8 <__aeabi_uldivmod>
 8005bd6:	0002      	movs	r2, r0
 8005bd8:	000b      	movs	r3, r1
 8005bda:	0013      	movs	r3, r2
 8005bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8005bde:	e037      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005be0:	4b26      	ldr	r3, [pc, #152]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2210      	movs	r2, #16
 8005be6:	4013      	ands	r3, r2
 8005be8:	d01a      	beq.n	8005c20 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	60bb      	str	r3, [r7, #8]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	4a23      	ldr	r2, [pc, #140]	; (8005c80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	68b8      	ldr	r0, [r7, #8]
 8005bf8:	68f9      	ldr	r1, [r7, #12]
 8005bfa:	f7fa fc75 	bl	80004e8 <__aeabi_lmul>
 8005bfe:	0002      	movs	r2, r0
 8005c00:	000b      	movs	r3, r1
 8005c02:	0010      	movs	r0, r2
 8005c04:	0019      	movs	r1, r3
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	603b      	str	r3, [r7, #0]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	607b      	str	r3, [r7, #4]
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f7fa fc49 	bl	80004a8 <__aeabi_uldivmod>
 8005c16:	0002      	movs	r2, r0
 8005c18:	000b      	movs	r3, r1
 8005c1a:	0013      	movs	r3, r2
 8005c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1e:	e017      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	0018      	movs	r0, r3
 8005c24:	2300      	movs	r3, #0
 8005c26:	0019      	movs	r1, r3
 8005c28:	4a16      	ldr	r2, [pc, #88]	; (8005c84 <HAL_RCC_GetSysClockFreq+0x140>)
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f7fa fc5c 	bl	80004e8 <__aeabi_lmul>
 8005c30:	0002      	movs	r2, r0
 8005c32:	000b      	movs	r3, r1
 8005c34:	0010      	movs	r0, r2
 8005c36:	0019      	movs	r1, r3
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	001c      	movs	r4, r3
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	001d      	movs	r5, r3
 8005c40:	0022      	movs	r2, r4
 8005c42:	002b      	movs	r3, r5
 8005c44:	f7fa fc30 	bl	80004a8 <__aeabi_uldivmod>
 8005c48:	0002      	movs	r2, r0
 8005c4a:	000b      	movs	r3, r1
 8005c4c:	0013      	movs	r3, r2
 8005c4e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005c54:	e00d      	b.n	8005c72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005c56:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	0b5b      	lsrs	r3, r3, #13
 8005c5c:	2207      	movs	r2, #7
 8005c5e:	4013      	ands	r3, r2
 8005c60:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	3301      	adds	r3, #1
 8005c66:	2280      	movs	r2, #128	; 0x80
 8005c68:	0212      	lsls	r2, r2, #8
 8005c6a:	409a      	lsls	r2, r3
 8005c6c:	0013      	movs	r3, r2
 8005c6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005c70:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005c74:	0018      	movs	r0, r3
 8005c76:	46bd      	mov	sp, r7
 8005c78:	b00e      	add	sp, #56	; 0x38
 8005c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	003d0900 	.word	0x003d0900
 8005c84:	00f42400 	.word	0x00f42400
 8005c88:	0030d400 	.word	0x0030d400
 8005c8c:	0800a740 	.word	0x0800a740

08005c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c94:	4b02      	ldr	r3, [pc, #8]	; (8005ca0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c96:	681b      	ldr	r3, [r3, #0]
}
 8005c98:	0018      	movs	r0, r3
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	20000080 	.word	0x20000080

08005ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ca8:	f7ff fff2 	bl	8005c90 <HAL_RCC_GetHCLKFreq>
 8005cac:	0001      	movs	r1, r0
 8005cae:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	0a1b      	lsrs	r3, r3, #8
 8005cb4:	2207      	movs	r2, #7
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	4a04      	ldr	r2, [pc, #16]	; (8005ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cba:	5cd3      	ldrb	r3, [r2, r3]
 8005cbc:	40d9      	lsrs	r1, r3
 8005cbe:	000b      	movs	r3, r1
}
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	0800a738 	.word	0x0800a738

08005cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cd4:	f7ff ffdc 	bl	8005c90 <HAL_RCC_GetHCLKFreq>
 8005cd8:	0001      	movs	r1, r0
 8005cda:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	0adb      	lsrs	r3, r3, #11
 8005ce0:	2207      	movs	r2, #7
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	4a04      	ldr	r2, [pc, #16]	; (8005cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ce6:	5cd3      	ldrb	r3, [r2, r3]
 8005ce8:	40d9      	lsrs	r1, r3
 8005cea:	000b      	movs	r3, r1
}
 8005cec:	0018      	movs	r0, r3
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	0800a738 	.word	0x0800a738

08005cfc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005d04:	2317      	movs	r3, #23
 8005d06:	18fb      	adds	r3, r7, r3
 8005d08:	2200      	movs	r2, #0
 8005d0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2220      	movs	r2, #32
 8005d12:	4013      	ands	r3, r2
 8005d14:	d106      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	2380      	movs	r3, #128	; 0x80
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	4013      	ands	r3, r2
 8005d20:	d100      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005d22:	e0d9      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d24:	4b9c      	ldr	r3, [pc, #624]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d28:	2380      	movs	r3, #128	; 0x80
 8005d2a:	055b      	lsls	r3, r3, #21
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d10a      	bne.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d30:	4b99      	ldr	r3, [pc, #612]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d34:	4b98      	ldr	r3, [pc, #608]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d36:	2180      	movs	r1, #128	; 0x80
 8005d38:	0549      	lsls	r1, r1, #21
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005d3e:	2317      	movs	r3, #23
 8005d40:	18fb      	adds	r3, r7, r3
 8005d42:	2201      	movs	r2, #1
 8005d44:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d46:	4b95      	ldr	r3, [pc, #596]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	2380      	movs	r3, #128	; 0x80
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	4013      	ands	r3, r2
 8005d50:	d11a      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d52:	4b92      	ldr	r3, [pc, #584]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4b91      	ldr	r3, [pc, #580]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005d58:	2180      	movs	r1, #128	; 0x80
 8005d5a:	0049      	lsls	r1, r1, #1
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d60:	f7fe fc46 	bl	80045f0 <HAL_GetTick>
 8005d64:	0003      	movs	r3, r0
 8005d66:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d68:	e008      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d6a:	f7fe fc41 	bl	80045f0 <HAL_GetTick>
 8005d6e:	0002      	movs	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b64      	cmp	r3, #100	; 0x64
 8005d76:	d901      	bls.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e108      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d7c:	4b87      	ldr	r3, [pc, #540]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	2380      	movs	r3, #128	; 0x80
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	4013      	ands	r3, r2
 8005d86:	d0f0      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005d88:	4b83      	ldr	r3, [pc, #524]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	23c0      	movs	r3, #192	; 0xc0
 8005d8e:	039b      	lsls	r3, r3, #14
 8005d90:	4013      	ands	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	23c0      	movs	r3, #192	; 0xc0
 8005d9a:	039b      	lsls	r3, r3, #14
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d107      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	23c0      	movs	r3, #192	; 0xc0
 8005daa:	039b      	lsls	r3, r3, #14
 8005dac:	4013      	ands	r3, r2
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d013      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	23c0      	movs	r3, #192	; 0xc0
 8005dba:	029b      	lsls	r3, r3, #10
 8005dbc:	401a      	ands	r2, r3
 8005dbe:	23c0      	movs	r3, #192	; 0xc0
 8005dc0:	029b      	lsls	r3, r3, #10
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d10a      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005dc6:	4b74      	ldr	r3, [pc, #464]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	2380      	movs	r3, #128	; 0x80
 8005dcc:	029b      	lsls	r3, r3, #10
 8005dce:	401a      	ands	r2, r3
 8005dd0:	2380      	movs	r3, #128	; 0x80
 8005dd2:	029b      	lsls	r3, r3, #10
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d101      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e0d8      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005ddc:	4b6e      	ldr	r3, [pc, #440]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005dde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005de0:	23c0      	movs	r3, #192	; 0xc0
 8005de2:	029b      	lsls	r3, r3, #10
 8005de4:	4013      	ands	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d049      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	23c0      	movs	r3, #192	; 0xc0
 8005df4:	029b      	lsls	r3, r3, #10
 8005df6:	4013      	ands	r3, r2
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d004      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2220      	movs	r2, #32
 8005e04:	4013      	ands	r3, r2
 8005e06:	d10d      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	23c0      	movs	r3, #192	; 0xc0
 8005e0e:	029b      	lsls	r3, r3, #10
 8005e10:	4013      	ands	r3, r2
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d034      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	2380      	movs	r3, #128	; 0x80
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	4013      	ands	r3, r2
 8005e22:	d02e      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005e24:	4b5c      	ldr	r3, [pc, #368]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e28:	4a5d      	ldr	r2, [pc, #372]	; (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e2e:	4b5a      	ldr	r3, [pc, #360]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e32:	4b59      	ldr	r3, [pc, #356]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e34:	2180      	movs	r1, #128	; 0x80
 8005e36:	0309      	lsls	r1, r1, #12
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e3c:	4b56      	ldr	r3, [pc, #344]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e40:	4b55      	ldr	r3, [pc, #340]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e42:	4958      	ldr	r1, [pc, #352]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005e44:	400a      	ands	r2, r1
 8005e46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005e48:	4b53      	ldr	r3, [pc, #332]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	4013      	ands	r3, r2
 8005e56:	d014      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e58:	f7fe fbca 	bl	80045f0 <HAL_GetTick>
 8005e5c:	0003      	movs	r3, r0
 8005e5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e60:	e009      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e62:	f7fe fbc5 	bl	80045f0 <HAL_GetTick>
 8005e66:	0002      	movs	r2, r0
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	4a4e      	ldr	r2, [pc, #312]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e08b      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e76:	4b48      	ldr	r3, [pc, #288]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e7a:	2380      	movs	r3, #128	; 0x80
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4013      	ands	r3, r2
 8005e80:	d0ef      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	23c0      	movs	r3, #192	; 0xc0
 8005e88:	029b      	lsls	r3, r3, #10
 8005e8a:	401a      	ands	r2, r3
 8005e8c:	23c0      	movs	r3, #192	; 0xc0
 8005e8e:	029b      	lsls	r3, r3, #10
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d10c      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005e94:	4b40      	ldr	r3, [pc, #256]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a44      	ldr	r2, [pc, #272]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	0019      	movs	r1, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	23c0      	movs	r3, #192	; 0xc0
 8005ea4:	039b      	lsls	r3, r3, #14
 8005ea6:	401a      	ands	r2, r3
 8005ea8:	4b3b      	ldr	r3, [pc, #236]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	4b3a      	ldr	r3, [pc, #232]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005eb0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	23c0      	movs	r3, #192	; 0xc0
 8005eb8:	029b      	lsls	r3, r3, #10
 8005eba:	401a      	ands	r2, r3
 8005ebc:	4b36      	ldr	r3, [pc, #216]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005ec2:	2317      	movs	r3, #23
 8005ec4:	18fb      	adds	r3, r7, r3
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d105      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ecc:	4b32      	ldr	r3, [pc, #200]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ed0:	4b31      	ldr	r3, [pc, #196]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ed2:	4937      	ldr	r1, [pc, #220]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005ed4:	400a      	ands	r2, r1
 8005ed6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2201      	movs	r2, #1
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d009      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ee2:	4b2d      	ldr	r3, [pc, #180]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee6:	2203      	movs	r2, #3
 8005ee8:	4393      	bics	r3, r2
 8005eea:	0019      	movs	r1, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	4b29      	ldr	r3, [pc, #164]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2202      	movs	r2, #2
 8005efc:	4013      	ands	r3, r2
 8005efe:	d009      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f00:	4b25      	ldr	r3, [pc, #148]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f04:	220c      	movs	r2, #12
 8005f06:	4393      	bics	r3, r2
 8005f08:	0019      	movs	r1, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	4b22      	ldr	r3, [pc, #136]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f10:	430a      	orrs	r2, r1
 8005f12:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2204      	movs	r2, #4
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f1e:	4b1e      	ldr	r3, [pc, #120]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f22:	4a24      	ldr	r2, [pc, #144]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	0019      	movs	r1, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	695a      	ldr	r2, [r3, #20]
 8005f2c:	4b1a      	ldr	r3, [pc, #104]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2208      	movs	r2, #8
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d009      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f3c:	4b16      	ldr	r3, [pc, #88]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f40:	4a1d      	ldr	r2, [pc, #116]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f42:	4013      	ands	r3, r2
 8005f44:	0019      	movs	r1, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699a      	ldr	r2, [r3, #24]
 8005f4a:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2240      	movs	r2, #64	; 0x40
 8005f56:	4013      	ands	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f5a:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5e:	4a17      	ldr	r2, [pc, #92]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	0019      	movs	r1, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1a      	ldr	r2, [r3, #32]
 8005f68:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2280      	movs	r2, #128	; 0x80
 8005f74:	4013      	ands	r3, r2
 8005f76:	d009      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005f78:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7c:	4a10      	ldr	r2, [pc, #64]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f7e:	4013      	ands	r3, r2
 8005f80:	0019      	movs	r1, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69da      	ldr	r2, [r3, #28]
 8005f86:	4b04      	ldr	r3, [pc, #16]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	0018      	movs	r0, r3
 8005f90:	46bd      	mov	sp, r7
 8005f92:	b006      	add	sp, #24
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	46c0      	nop			; (mov r8, r8)
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40007000 	.word	0x40007000
 8005fa0:	fffcffff 	.word	0xfffcffff
 8005fa4:	fff7ffff 	.word	0xfff7ffff
 8005fa8:	00001388 	.word	0x00001388
 8005fac:	ffcfffff 	.word	0xffcfffff
 8005fb0:	efffffff 	.word	0xefffffff
 8005fb4:	fffff3ff 	.word	0xfffff3ff
 8005fb8:	ffffcfff 	.word	0xffffcfff
 8005fbc:	fbffffff 	.word	0xfbffffff
 8005fc0:	fff3ffff 	.word	0xfff3ffff

08005fc4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e032      	b.n	800603c <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2239      	movs	r2, #57	; 0x39
 8005fda:	5c9b      	ldrb	r3, [r3, r2]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d107      	bne.n	8005ff2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2238      	movs	r2, #56	; 0x38
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	0018      	movs	r0, r3
 8005fee:	f000 f829 	bl	8006044 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2239      	movs	r2, #57	; 0x39
 8005ff6:	2102      	movs	r1, #2
 8005ff8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3304      	adds	r3, #4
 8006002:	0019      	movs	r1, r3
 8006004:	0010      	movs	r0, r2
 8006006:	f000 f991 	bl	800632c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	223e      	movs	r2, #62	; 0x3e
 800600e:	2101      	movs	r1, #1
 8006010:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	223a      	movs	r2, #58	; 0x3a
 8006016:	2101      	movs	r1, #1
 8006018:	5499      	strb	r1, [r3, r2]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	223b      	movs	r2, #59	; 0x3b
 800601e:	2101      	movs	r1, #1
 8006020:	5499      	strb	r1, [r3, r2]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	223c      	movs	r2, #60	; 0x3c
 8006026:	2101      	movs	r1, #1
 8006028:	5499      	strb	r1, [r3, r2]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	223d      	movs	r2, #61	; 0x3d
 800602e:	2101      	movs	r1, #1
 8006030:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2239      	movs	r2, #57	; 0x39
 8006036:	2101      	movs	r1, #1
 8006038:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	0018      	movs	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	b002      	add	sp, #8
 8006042:	bd80      	pop	{r7, pc}

08006044 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800604c:	46c0      	nop			; (mov r8, r8)
 800604e:	46bd      	mov	sp, r7
 8006050:	b002      	add	sp, #8
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800605e:	230f      	movs	r3, #15
 8006060:	18fb      	adds	r3, r7, r3
 8006062:	2200      	movs	r2, #0
 8006064:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d104      	bne.n	8006076 <HAL_TIM_IC_Start_IT+0x22>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	223a      	movs	r2, #58	; 0x3a
 8006070:	5c9b      	ldrb	r3, [r3, r2]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	e013      	b.n	800609e <HAL_TIM_IC_Start_IT+0x4a>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b04      	cmp	r3, #4
 800607a:	d104      	bne.n	8006086 <HAL_TIM_IC_Start_IT+0x32>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	223b      	movs	r2, #59	; 0x3b
 8006080:	5c9b      	ldrb	r3, [r3, r2]
 8006082:	b2db      	uxtb	r3, r3
 8006084:	e00b      	b.n	800609e <HAL_TIM_IC_Start_IT+0x4a>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b08      	cmp	r3, #8
 800608a:	d104      	bne.n	8006096 <HAL_TIM_IC_Start_IT+0x42>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	223c      	movs	r2, #60	; 0x3c
 8006090:	5c9b      	ldrb	r3, [r3, r2]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	e003      	b.n	800609e <HAL_TIM_IC_Start_IT+0x4a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	223d      	movs	r2, #61	; 0x3d
 800609a:	5c9b      	ldrb	r3, [r3, r2]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	210e      	movs	r1, #14
 80060a0:	187a      	adds	r2, r7, r1
 80060a2:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80060a4:	187b      	adds	r3, r7, r1
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d001      	beq.n	80060b0 <HAL_TIM_IC_Start_IT+0x5c>
  {
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e090      	b.n	80061d2 <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <HAL_TIM_IC_Start_IT+0x6c>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	223a      	movs	r2, #58	; 0x3a
 80060ba:	2102      	movs	r1, #2
 80060bc:	5499      	strb	r1, [r3, r2]
 80060be:	e013      	b.n	80060e8 <HAL_TIM_IC_Start_IT+0x94>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d104      	bne.n	80060d0 <HAL_TIM_IC_Start_IT+0x7c>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	223b      	movs	r2, #59	; 0x3b
 80060ca:	2102      	movs	r1, #2
 80060cc:	5499      	strb	r1, [r3, r2]
 80060ce:	e00b      	b.n	80060e8 <HAL_TIM_IC_Start_IT+0x94>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	2b08      	cmp	r3, #8
 80060d4:	d104      	bne.n	80060e0 <HAL_TIM_IC_Start_IT+0x8c>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	223c      	movs	r2, #60	; 0x3c
 80060da:	2102      	movs	r1, #2
 80060dc:	5499      	strb	r1, [r3, r2]
 80060de:	e003      	b.n	80060e8 <HAL_TIM_IC_Start_IT+0x94>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	223d      	movs	r2, #61	; 0x3d
 80060e4:	2102      	movs	r1, #2
 80060e6:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b0c      	cmp	r3, #12
 80060ec:	d02a      	beq.n	8006144 <HAL_TIM_IC_Start_IT+0xf0>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b0c      	cmp	r3, #12
 80060f2:	d830      	bhi.n	8006156 <HAL_TIM_IC_Start_IT+0x102>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2b08      	cmp	r3, #8
 80060f8:	d01b      	beq.n	8006132 <HAL_TIM_IC_Start_IT+0xde>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d82a      	bhi.n	8006156 <HAL_TIM_IC_Start_IT+0x102>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_TIM_IC_Start_IT+0xba>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b04      	cmp	r3, #4
 800610a:	d009      	beq.n	8006120 <HAL_TIM_IC_Start_IT+0xcc>
 800610c:	e023      	b.n	8006156 <HAL_TIM_IC_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2102      	movs	r1, #2
 800611a:	430a      	orrs	r2, r1
 800611c:	60da      	str	r2, [r3, #12]
      break;
 800611e:	e01f      	b.n	8006160 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2104      	movs	r1, #4
 800612c:	430a      	orrs	r2, r1
 800612e:	60da      	str	r2, [r3, #12]
      break;
 8006130:	e016      	b.n	8006160 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2108      	movs	r1, #8
 800613e:	430a      	orrs	r2, r1
 8006140:	60da      	str	r2, [r3, #12]
      break;
 8006142:	e00d      	b.n	8006160 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2110      	movs	r1, #16
 8006150:	430a      	orrs	r2, r1
 8006152:	60da      	str	r2, [r3, #12]
      break;
 8006154:	e004      	b.n	8006160 <HAL_TIM_IC_Start_IT+0x10c>
    }

    default:
      status = HAL_ERROR;
 8006156:	230f      	movs	r3, #15
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	2201      	movs	r2, #1
 800615c:	701a      	strb	r2, [r3, #0]
      break;
 800615e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8006160:	230f      	movs	r3, #15
 8006162:	18fb      	adds	r3, r7, r3
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d130      	bne.n	80061cc <HAL_TIM_IC_Start_IT+0x178>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	2201      	movs	r2, #1
 8006172:	0018      	movs	r0, r3
 8006174:	f000 fa4c 	bl	8006610 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	2380      	movs	r3, #128	; 0x80
 800617e:	05db      	lsls	r3, r3, #23
 8006180:	429a      	cmp	r2, r3
 8006182:	d009      	beq.n	8006198 <HAL_TIM_IC_Start_IT+0x144>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a14      	ldr	r2, [pc, #80]	; (80061dc <HAL_TIM_IC_Start_IT+0x188>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d004      	beq.n	8006198 <HAL_TIM_IC_Start_IT+0x144>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a13      	ldr	r2, [pc, #76]	; (80061e0 <HAL_TIM_IC_Start_IT+0x18c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d111      	bne.n	80061bc <HAL_TIM_IC_Start_IT+0x168>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2207      	movs	r2, #7
 80061a0:	4013      	ands	r3, r2
 80061a2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b06      	cmp	r3, #6
 80061a8:	d010      	beq.n	80061cc <HAL_TIM_IC_Start_IT+0x178>
      {
        __HAL_TIM_ENABLE(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2101      	movs	r1, #1
 80061b6:	430a      	orrs	r2, r1
 80061b8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ba:	e007      	b.n	80061cc <HAL_TIM_IC_Start_IT+0x178>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2101      	movs	r1, #1
 80061c8:	430a      	orrs	r2, r1
 80061ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80061cc:	230f      	movs	r3, #15
 80061ce:	18fb      	adds	r3, r7, r3
 80061d0:	781b      	ldrb	r3, [r3, #0]
}
 80061d2:	0018      	movs	r0, r3
 80061d4:	46bd      	mov	sp, r7
 80061d6:	b004      	add	sp, #16
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	46c0      	nop			; (mov r8, r8)
 80061dc:	40010800 	.word	0x40010800
 80061e0:	40011400 	.word	0x40011400

080061e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061f0:	2317      	movs	r3, #23
 80061f2:	18fb      	adds	r3, r7, r3
 80061f4:	2200      	movs	r2, #0
 80061f6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2238      	movs	r2, #56	; 0x38
 80061fc:	5c9b      	ldrb	r3, [r3, r2]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d101      	bne.n	8006206 <HAL_TIM_IC_ConfigChannel+0x22>
 8006202:	2302      	movs	r3, #2
 8006204:	e08c      	b.n	8006320 <HAL_TIM_IC_ConfigChannel+0x13c>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2238      	movs	r2, #56	; 0x38
 800620a:	2101      	movs	r1, #1
 800620c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d11b      	bne.n	800624c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	6819      	ldr	r1, [r3, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f000 f8d6 	bl	80063d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	210c      	movs	r1, #12
 8006234:	438a      	bics	r2, r1
 8006236:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6999      	ldr	r1, [r3, #24]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	689a      	ldr	r2, [r3, #8]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	619a      	str	r2, [r3, #24]
 800624a:	e062      	b.n	8006312 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b04      	cmp	r3, #4
 8006250:	d11c      	bne.n	800628c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6818      	ldr	r0, [r3, #0]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	6819      	ldr	r1, [r3, #0]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f000 f90d 	bl	8006480 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	699a      	ldr	r2, [r3, #24]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	492d      	ldr	r1, [pc, #180]	; (8006328 <HAL_TIM_IC_ConfigChannel+0x144>)
 8006272:	400a      	ands	r2, r1
 8006274:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6999      	ldr	r1, [r3, #24]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	021a      	lsls	r2, r3, #8
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	619a      	str	r2, [r3, #24]
 800628a:	e042      	b.n	8006312 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b08      	cmp	r3, #8
 8006290:	d11b      	bne.n	80062ca <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6819      	ldr	r1, [r3, #0]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f000 f92f 	bl	8006504 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	210c      	movs	r1, #12
 80062b2:	438a      	bics	r2, r1
 80062b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69d9      	ldr	r1, [r3, #28]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	61da      	str	r2, [r3, #28]
 80062c8:	e023      	b.n	8006312 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b0c      	cmp	r3, #12
 80062ce:	d11c      	bne.n	800630a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	6819      	ldr	r1, [r3, #0]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f000 f950 	bl	8006584 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69da      	ldr	r2, [r3, #28]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	490e      	ldr	r1, [pc, #56]	; (8006328 <HAL_TIM_IC_ConfigChannel+0x144>)
 80062f0:	400a      	ands	r2, r1
 80062f2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69d9      	ldr	r1, [r3, #28]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	021a      	lsls	r2, r3, #8
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	61da      	str	r2, [r3, #28]
 8006308:	e003      	b.n	8006312 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800630a:	2317      	movs	r3, #23
 800630c:	18fb      	adds	r3, r7, r3
 800630e:	2201      	movs	r2, #1
 8006310:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2238      	movs	r2, #56	; 0x38
 8006316:	2100      	movs	r1, #0
 8006318:	5499      	strb	r1, [r3, r2]

  return status;
 800631a:	2317      	movs	r3, #23
 800631c:	18fb      	adds	r3, r7, r3
 800631e:	781b      	ldrb	r3, [r3, #0]
}
 8006320:	0018      	movs	r0, r3
 8006322:	46bd      	mov	sp, r7
 8006324:	b006      	add	sp, #24
 8006326:	bd80      	pop	{r7, pc}
 8006328:	fffff3ff 	.word	0xfffff3ff

0800632c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	2380      	movs	r3, #128	; 0x80
 8006340:	05db      	lsls	r3, r3, #23
 8006342:	429a      	cmp	r2, r3
 8006344:	d007      	beq.n	8006356 <TIM_Base_SetConfig+0x2a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a1f      	ldr	r2, [pc, #124]	; (80063c8 <TIM_Base_SetConfig+0x9c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d003      	beq.n	8006356 <TIM_Base_SetConfig+0x2a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a1e      	ldr	r2, [pc, #120]	; (80063cc <TIM_Base_SetConfig+0xa0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d108      	bne.n	8006368 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2270      	movs	r2, #112	; 0x70
 800635a:	4393      	bics	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	2380      	movs	r3, #128	; 0x80
 800636c:	05db      	lsls	r3, r3, #23
 800636e:	429a      	cmp	r2, r3
 8006370:	d007      	beq.n	8006382 <TIM_Base_SetConfig+0x56>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a14      	ldr	r2, [pc, #80]	; (80063c8 <TIM_Base_SetConfig+0x9c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d003      	beq.n	8006382 <TIM_Base_SetConfig+0x56>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a13      	ldr	r2, [pc, #76]	; (80063cc <TIM_Base_SetConfig+0xa0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d108      	bne.n	8006394 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4a12      	ldr	r2, [pc, #72]	; (80063d0 <TIM_Base_SetConfig+0xa4>)
 8006386:	4013      	ands	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	4313      	orrs	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2280      	movs	r2, #128	; 0x80
 8006398:	4393      	bics	r3, r2
 800639a:	001a      	movs	r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	615a      	str	r2, [r3, #20]
}
 80063c0:	46c0      	nop			; (mov r8, r8)
 80063c2:	46bd      	mov	sp, r7
 80063c4:	b004      	add	sp, #16
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	40010800 	.word	0x40010800
 80063cc:	40011400 	.word	0x40011400
 80063d0:	fffffcff 	.word	0xfffffcff

080063d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	2201      	movs	r2, #1
 80063e8:	4393      	bics	r3, r2
 80063ea:	001a      	movs	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	2380      	movs	r3, #128	; 0x80
 8006400:	05db      	lsls	r3, r3, #23
 8006402:	429a      	cmp	r2, r3
 8006404:	d007      	beq.n	8006416 <TIM_TI1_SetConfig+0x42>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4a1b      	ldr	r2, [pc, #108]	; (8006478 <TIM_TI1_SetConfig+0xa4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d003      	beq.n	8006416 <TIM_TI1_SetConfig+0x42>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4a1a      	ldr	r2, [pc, #104]	; (800647c <TIM_TI1_SetConfig+0xa8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d101      	bne.n	800641a <TIM_TI1_SetConfig+0x46>
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <TIM_TI1_SetConfig+0x48>
 800641a:	2300      	movs	r3, #0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2203      	movs	r2, #3
 8006424:	4393      	bics	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	e003      	b.n	800643a <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2201      	movs	r2, #1
 8006436:	4313      	orrs	r3, r2
 8006438:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	22f0      	movs	r2, #240	; 0xf0
 800643e:	4393      	bics	r3, r2
 8006440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	22ff      	movs	r2, #255	; 0xff
 8006448:	4013      	ands	r3, r2
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4313      	orrs	r3, r2
 800644e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	220a      	movs	r2, #10
 8006454:	4393      	bics	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	220a      	movs	r2, #10
 800645c:	4013      	ands	r3, r2
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	621a      	str	r2, [r3, #32]
}
 8006470:	46c0      	nop			; (mov r8, r8)
 8006472:	46bd      	mov	sp, r7
 8006474:	b006      	add	sp, #24
 8006476:	bd80      	pop	{r7, pc}
 8006478:	40010800 	.word	0x40010800
 800647c:	40011400 	.word	0x40011400

08006480 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	2210      	movs	r2, #16
 8006494:	4393      	bics	r3, r2
 8006496:	001a      	movs	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	4a14      	ldr	r2, [pc, #80]	; (80064fc <TIM_TI2_SetConfig+0x7c>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	4a10      	ldr	r2, [pc, #64]	; (8006500 <TIM_TI2_SetConfig+0x80>)
 80064be:	4013      	ands	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	031b      	lsls	r3, r3, #12
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	0c1b      	lsrs	r3, r3, #16
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	22a0      	movs	r2, #160	; 0xa0
 80064d4:	4393      	bics	r3, r2
 80064d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	22a0      	movs	r2, #160	; 0xa0
 80064de:	4013      	ands	r3, r2
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	621a      	str	r2, [r3, #32]
}
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	46bd      	mov	sp, r7
 80064f6:	b006      	add	sp, #24
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	46c0      	nop			; (mov r8, r8)
 80064fc:	fffffcff 	.word	0xfffffcff
 8006500:	ffff0fff 	.word	0xffff0fff

08006504 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	4a19      	ldr	r2, [pc, #100]	; (800657c <TIM_TI3_SetConfig+0x78>)
 8006518:	401a      	ands	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2203      	movs	r2, #3
 800652e:	4393      	bics	r3, r2
 8006530:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4313      	orrs	r3, r2
 8006538:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	22f0      	movs	r2, #240	; 0xf0
 800653e:	4393      	bics	r3, r2
 8006540:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	22ff      	movs	r2, #255	; 0xff
 8006548:	4013      	ands	r3, r2
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	4313      	orrs	r3, r2
 800654e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	4a0b      	ldr	r2, [pc, #44]	; (8006580 <TIM_TI3_SetConfig+0x7c>)
 8006554:	4013      	ands	r3, r2
 8006556:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	021a      	lsls	r2, r3, #8
 800655c:	23a0      	movs	r3, #160	; 0xa0
 800655e:	011b      	lsls	r3, r3, #4
 8006560:	4013      	ands	r3, r2
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	621a      	str	r2, [r3, #32]
}
 8006574:	46c0      	nop			; (mov r8, r8)
 8006576:	46bd      	mov	sp, r7
 8006578:	b006      	add	sp, #24
 800657a:	bd80      	pop	{r7, pc}
 800657c:	fffffeff 	.word	0xfffffeff
 8006580:	fffff5ff 	.word	0xfffff5ff

08006584 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	4a1a      	ldr	r2, [pc, #104]	; (8006600 <TIM_TI4_SetConfig+0x7c>)
 8006598:	401a      	ands	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	4a15      	ldr	r2, [pc, #84]	; (8006604 <TIM_TI4_SetConfig+0x80>)
 80065ae:	4013      	ands	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	021b      	lsls	r3, r3, #8
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	4a12      	ldr	r2, [pc, #72]	; (8006608 <TIM_TI4_SetConfig+0x84>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	031b      	lsls	r3, r3, #12
 80065c8:	041b      	lsls	r3, r3, #16
 80065ca:	0c1b      	lsrs	r3, r3, #16
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4a0d      	ldr	r2, [pc, #52]	; (800660c <TIM_TI4_SetConfig+0x88>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	031a      	lsls	r2, r3, #12
 80065de:	23a0      	movs	r3, #160	; 0xa0
 80065e0:	021b      	lsls	r3, r3, #8
 80065e2:	4013      	ands	r3, r2
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	621a      	str	r2, [r3, #32]
}
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	46bd      	mov	sp, r7
 80065fa:	b006      	add	sp, #24
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	46c0      	nop			; (mov r8, r8)
 8006600:	ffffefff 	.word	0xffffefff
 8006604:	fffffcff 	.word	0xfffffcff
 8006608:	ffff0fff 	.word	0xffff0fff
 800660c:	ffff5fff 	.word	0xffff5fff

08006610 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	221f      	movs	r2, #31
 8006620:	4013      	ands	r3, r2
 8006622:	2201      	movs	r2, #1
 8006624:	409a      	lsls	r2, r3
 8006626:	0013      	movs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	43d2      	mvns	r2, r2
 8006632:	401a      	ands	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a1a      	ldr	r2, [r3, #32]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	211f      	movs	r1, #31
 8006640:	400b      	ands	r3, r1
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	4099      	lsls	r1, r3
 8006646:	000b      	movs	r3, r1
 8006648:	431a      	orrs	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	621a      	str	r2, [r3, #32]
}
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	46bd      	mov	sp, r7
 8006652:	b006      	add	sp, #24
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b082      	sub	sp, #8
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2238      	movs	r2, #56	; 0x38
 8006664:	5c9b      	ldrb	r3, [r3, r2]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_TIMEx_RemapConfig+0x18>
 800666a:	2302      	movs	r3, #2
 800666c:	e00c      	b.n	8006688 <HAL_TIMEx_RemapConfig+0x32>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2238      	movs	r2, #56	; 0x38
 8006672:	2101      	movs	r1, #1
 8006674:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2238      	movs	r2, #56	; 0x38
 8006682:	2100      	movs	r1, #0
 8006684:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	0018      	movs	r0, r3
 800668a:	46bd      	mov	sp, r7
 800668c:	b002      	add	sp, #8
 800668e:	bd80      	pop	{r7, pc}

08006690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e044      	b.n	800672c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d107      	bne.n	80066ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2274      	movs	r2, #116	; 0x74
 80066ae:	2100      	movs	r1, #0
 80066b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	0018      	movs	r0, r3
 80066b6:	f000 f879 	bl	80067ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2224      	movs	r2, #36	; 0x24
 80066be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2101      	movs	r1, #1
 80066cc:	438a      	bics	r2, r1
 80066ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	0018      	movs	r0, r3
 80066d4:	f000 f934 	bl	8006940 <UART_SetConfig>
 80066d8:	0003      	movs	r3, r0
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e024      	b.n	800672c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	0018      	movs	r0, r3
 80066ee:	f000 fbc7 	bl	8006e80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	490d      	ldr	r1, [pc, #52]	; (8006734 <HAL_UART_Init+0xa4>)
 80066fe:	400a      	ands	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	212a      	movs	r1, #42	; 0x2a
 800670e:	438a      	bics	r2, r1
 8006710:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2101      	movs	r1, #1
 800671e:	430a      	orrs	r2, r1
 8006720:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	0018      	movs	r0, r3
 8006726:	f000 fc5f 	bl	8006fe8 <UART_CheckIdleState>
 800672a:	0003      	movs	r3, r0
}
 800672c:	0018      	movs	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	b002      	add	sp, #8
 8006732:	bd80      	pop	{r7, pc}
 8006734:	ffffb7ff 	.word	0xffffb7ff

08006738 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e02c      	b.n	80067a4 <HAL_UART_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2224      	movs	r2, #36	; 0x24
 800674e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2101      	movs	r1, #1
 800675c:	438a      	bics	r2, r1
 800675e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2200      	movs	r2, #0
 8006766:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2200      	movs	r2, #0
 800676e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2200      	movs	r2, #0
 8006776:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	0018      	movs	r0, r3
 800677c:	f000 f81e 	bl	80067bc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2280      	movs	r2, #128	; 0x80
 8006784:	2100      	movs	r1, #0
 8006786:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2274      	movs	r2, #116	; 0x74
 800679e:	2100      	movs	r1, #0
 80067a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	0018      	movs	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	b002      	add	sp, #8
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80067b4:	46c0      	nop			; (mov r8, r8)
 80067b6:	46bd      	mov	sp, r7
 80067b8:	b002      	add	sp, #8
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80067c4:	46c0      	nop			; (mov r8, r8)
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b002      	add	sp, #8
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08a      	sub	sp, #40	; 0x28
 80067d0:	af02      	add	r7, sp, #8
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	603b      	str	r3, [r7, #0]
 80067d8:	1dbb      	adds	r3, r7, #6
 80067da:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067e0:	2b20      	cmp	r3, #32
 80067e2:	d000      	beq.n	80067e6 <HAL_UART_Transmit+0x1a>
 80067e4:	e095      	b.n	8006912 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <HAL_UART_Transmit+0x28>
 80067ec:	1dbb      	adds	r3, r7, #6
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e08d      	b.n	8006914 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	2380      	movs	r3, #128	; 0x80
 80067fe:	015b      	lsls	r3, r3, #5
 8006800:	429a      	cmp	r2, r3
 8006802:	d109      	bne.n	8006818 <HAL_UART_Transmit+0x4c>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d105      	bne.n	8006818 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	2201      	movs	r2, #1
 8006810:	4013      	ands	r3, r2
 8006812:	d001      	beq.n	8006818 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e07d      	b.n	8006914 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2274      	movs	r2, #116	; 0x74
 800681c:	5c9b      	ldrb	r3, [r3, r2]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d101      	bne.n	8006826 <HAL_UART_Transmit+0x5a>
 8006822:	2302      	movs	r3, #2
 8006824:	e076      	b.n	8006914 <HAL_UART_Transmit+0x148>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2274      	movs	r2, #116	; 0x74
 800682a:	2101      	movs	r1, #1
 800682c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2280      	movs	r2, #128	; 0x80
 8006832:	2100      	movs	r1, #0
 8006834:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2221      	movs	r2, #33	; 0x21
 800683a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800683c:	f7fd fed8 	bl	80045f0 <HAL_GetTick>
 8006840:	0003      	movs	r3, r0
 8006842:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	1dba      	adds	r2, r7, #6
 8006848:	2150      	movs	r1, #80	; 0x50
 800684a:	8812      	ldrh	r2, [r2, #0]
 800684c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	1dba      	adds	r2, r7, #6
 8006852:	2152      	movs	r1, #82	; 0x52
 8006854:	8812      	ldrh	r2, [r2, #0]
 8006856:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	2380      	movs	r3, #128	; 0x80
 800685e:	015b      	lsls	r3, r3, #5
 8006860:	429a      	cmp	r2, r3
 8006862:	d108      	bne.n	8006876 <HAL_UART_Transmit+0xaa>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d104      	bne.n	8006876 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800686c:	2300      	movs	r3, #0
 800686e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	61bb      	str	r3, [r7, #24]
 8006874:	e003      	b.n	800687e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800687a:	2300      	movs	r3, #0
 800687c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2274      	movs	r2, #116	; 0x74
 8006882:	2100      	movs	r1, #0
 8006884:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006886:	e02c      	b.n	80068e2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	0013      	movs	r3, r2
 8006892:	2200      	movs	r2, #0
 8006894:	2180      	movs	r1, #128	; 0x80
 8006896:	f000 fbef 	bl	8007078 <UART_WaitOnFlagUntilTimeout>
 800689a:	1e03      	subs	r3, r0, #0
 800689c:	d001      	beq.n	80068a2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e038      	b.n	8006914 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10b      	bne.n	80068c0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	001a      	movs	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	05d2      	lsls	r2, r2, #23
 80068b4:	0dd2      	lsrs	r2, r2, #23
 80068b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	3302      	adds	r3, #2
 80068bc:	61bb      	str	r3, [r7, #24]
 80068be:	e007      	b.n	80068d0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	781a      	ldrb	r2, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	3301      	adds	r3, #1
 80068ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2252      	movs	r2, #82	; 0x52
 80068d4:	5a9b      	ldrh	r3, [r3, r2]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b299      	uxth	r1, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2252      	movs	r2, #82	; 0x52
 80068e0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2252      	movs	r2, #82	; 0x52
 80068e6:	5a9b      	ldrh	r3, [r3, r2]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1cc      	bne.n	8006888 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	0013      	movs	r3, r2
 80068f8:	2200      	movs	r2, #0
 80068fa:	2140      	movs	r1, #64	; 0x40
 80068fc:	f000 fbbc 	bl	8007078 <UART_WaitOnFlagUntilTimeout>
 8006900:	1e03      	subs	r3, r0, #0
 8006902:	d001      	beq.n	8006908 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e005      	b.n	8006914 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2220      	movs	r2, #32
 800690c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	e000      	b.n	8006914 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8006912:	2302      	movs	r3, #2
  }
}
 8006914:	0018      	movs	r0, r3
 8006916:	46bd      	mov	sp, r7
 8006918:	b008      	add	sp, #32
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006928:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800692e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	4313      	orrs	r3, r2
}
 8006936:	0018      	movs	r0, r3
 8006938:	46bd      	mov	sp, r7
 800693a:	b004      	add	sp, #16
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006940:	b5b0      	push	{r4, r5, r7, lr}
 8006942:	b08e      	sub	sp, #56	; 0x38
 8006944:	af00      	add	r7, sp, #0
 8006946:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006948:	231a      	movs	r3, #26
 800694a:	2218      	movs	r2, #24
 800694c:	4694      	mov	ip, r2
 800694e:	44bc      	add	ip, r7
 8006950:	4463      	add	r3, ip
 8006952:	2200      	movs	r2, #0
 8006954:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	431a      	orrs	r2, r3
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	431a      	orrs	r2, r3
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	4313      	orrs	r3, r2
 800696c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4ac1      	ldr	r2, [pc, #772]	; (8006c7c <UART_SetConfig+0x33c>)
 8006976:	4013      	ands	r3, r2
 8006978:	0019      	movs	r1, r3
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006980:	430a      	orrs	r2, r1
 8006982:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	4abd      	ldr	r2, [pc, #756]	; (8006c80 <UART_SetConfig+0x340>)
 800698c:	4013      	ands	r3, r2
 800698e:	0019      	movs	r1, r3
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4ab7      	ldr	r2, [pc, #732]	; (8006c84 <UART_SetConfig+0x344>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d004      	beq.n	80069b6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069b2:	4313      	orrs	r3, r2
 80069b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	4ab2      	ldr	r2, [pc, #712]	; (8006c88 <UART_SetConfig+0x348>)
 80069be:	4013      	ands	r3, r2
 80069c0:	0019      	movs	r1, r3
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069c8:	430a      	orrs	r2, r1
 80069ca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4aae      	ldr	r2, [pc, #696]	; (8006c8c <UART_SetConfig+0x34c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d136      	bne.n	8006a44 <UART_SetConfig+0x104>
 80069d6:	4bae      	ldr	r3, [pc, #696]	; (8006c90 <UART_SetConfig+0x350>)
 80069d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069da:	2203      	movs	r2, #3
 80069dc:	4013      	ands	r3, r2
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d020      	beq.n	8006a24 <UART_SetConfig+0xe4>
 80069e2:	d827      	bhi.n	8006a34 <UART_SetConfig+0xf4>
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d00d      	beq.n	8006a04 <UART_SetConfig+0xc4>
 80069e8:	d824      	bhi.n	8006a34 <UART_SetConfig+0xf4>
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <UART_SetConfig+0xb4>
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d010      	beq.n	8006a14 <UART_SetConfig+0xd4>
 80069f2:	e01f      	b.n	8006a34 <UART_SetConfig+0xf4>
 80069f4:	231b      	movs	r3, #27
 80069f6:	2218      	movs	r2, #24
 80069f8:	4694      	mov	ip, r2
 80069fa:	44bc      	add	ip, r7
 80069fc:	4463      	add	r3, ip
 80069fe:	2201      	movs	r2, #1
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	e0ab      	b.n	8006b5c <UART_SetConfig+0x21c>
 8006a04:	231b      	movs	r3, #27
 8006a06:	2218      	movs	r2, #24
 8006a08:	4694      	mov	ip, r2
 8006a0a:	44bc      	add	ip, r7
 8006a0c:	4463      	add	r3, ip
 8006a0e:	2202      	movs	r2, #2
 8006a10:	701a      	strb	r2, [r3, #0]
 8006a12:	e0a3      	b.n	8006b5c <UART_SetConfig+0x21c>
 8006a14:	231b      	movs	r3, #27
 8006a16:	2218      	movs	r2, #24
 8006a18:	4694      	mov	ip, r2
 8006a1a:	44bc      	add	ip, r7
 8006a1c:	4463      	add	r3, ip
 8006a1e:	2204      	movs	r2, #4
 8006a20:	701a      	strb	r2, [r3, #0]
 8006a22:	e09b      	b.n	8006b5c <UART_SetConfig+0x21c>
 8006a24:	231b      	movs	r3, #27
 8006a26:	2218      	movs	r2, #24
 8006a28:	4694      	mov	ip, r2
 8006a2a:	44bc      	add	ip, r7
 8006a2c:	4463      	add	r3, ip
 8006a2e:	2208      	movs	r2, #8
 8006a30:	701a      	strb	r2, [r3, #0]
 8006a32:	e093      	b.n	8006b5c <UART_SetConfig+0x21c>
 8006a34:	231b      	movs	r3, #27
 8006a36:	2218      	movs	r2, #24
 8006a38:	4694      	mov	ip, r2
 8006a3a:	44bc      	add	ip, r7
 8006a3c:	4463      	add	r3, ip
 8006a3e:	2210      	movs	r2, #16
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	e08b      	b.n	8006b5c <UART_SetConfig+0x21c>
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a92      	ldr	r2, [pc, #584]	; (8006c94 <UART_SetConfig+0x354>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d136      	bne.n	8006abc <UART_SetConfig+0x17c>
 8006a4e:	4b90      	ldr	r3, [pc, #576]	; (8006c90 <UART_SetConfig+0x350>)
 8006a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a52:	220c      	movs	r2, #12
 8006a54:	4013      	ands	r3, r2
 8006a56:	2b0c      	cmp	r3, #12
 8006a58:	d020      	beq.n	8006a9c <UART_SetConfig+0x15c>
 8006a5a:	d827      	bhi.n	8006aac <UART_SetConfig+0x16c>
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d00d      	beq.n	8006a7c <UART_SetConfig+0x13c>
 8006a60:	d824      	bhi.n	8006aac <UART_SetConfig+0x16c>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <UART_SetConfig+0x12c>
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d010      	beq.n	8006a8c <UART_SetConfig+0x14c>
 8006a6a:	e01f      	b.n	8006aac <UART_SetConfig+0x16c>
 8006a6c:	231b      	movs	r3, #27
 8006a6e:	2218      	movs	r2, #24
 8006a70:	4694      	mov	ip, r2
 8006a72:	44bc      	add	ip, r7
 8006a74:	4463      	add	r3, ip
 8006a76:	2200      	movs	r2, #0
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	e06f      	b.n	8006b5c <UART_SetConfig+0x21c>
 8006a7c:	231b      	movs	r3, #27
 8006a7e:	2218      	movs	r2, #24
 8006a80:	4694      	mov	ip, r2
 8006a82:	44bc      	add	ip, r7
 8006a84:	4463      	add	r3, ip
 8006a86:	2202      	movs	r2, #2
 8006a88:	701a      	strb	r2, [r3, #0]
 8006a8a:	e067      	b.n	8006b5c <UART_SetConfig+0x21c>
 8006a8c:	231b      	movs	r3, #27
 8006a8e:	2218      	movs	r2, #24
 8006a90:	4694      	mov	ip, r2
 8006a92:	44bc      	add	ip, r7
 8006a94:	4463      	add	r3, ip
 8006a96:	2204      	movs	r2, #4
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	e05f      	b.n	8006b5c <UART_SetConfig+0x21c>
 8006a9c:	231b      	movs	r3, #27
 8006a9e:	2218      	movs	r2, #24
 8006aa0:	4694      	mov	ip, r2
 8006aa2:	44bc      	add	ip, r7
 8006aa4:	4463      	add	r3, ip
 8006aa6:	2208      	movs	r2, #8
 8006aa8:	701a      	strb	r2, [r3, #0]
 8006aaa:	e057      	b.n	8006b5c <UART_SetConfig+0x21c>
 8006aac:	231b      	movs	r3, #27
 8006aae:	2218      	movs	r2, #24
 8006ab0:	4694      	mov	ip, r2
 8006ab2:	44bc      	add	ip, r7
 8006ab4:	4463      	add	r3, ip
 8006ab6:	2210      	movs	r2, #16
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	e04f      	b.n	8006b5c <UART_SetConfig+0x21c>
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a70      	ldr	r2, [pc, #448]	; (8006c84 <UART_SetConfig+0x344>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d143      	bne.n	8006b4e <UART_SetConfig+0x20e>
 8006ac6:	4b72      	ldr	r3, [pc, #456]	; (8006c90 <UART_SetConfig+0x350>)
 8006ac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006aca:	23c0      	movs	r3, #192	; 0xc0
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	4013      	ands	r3, r2
 8006ad0:	22c0      	movs	r2, #192	; 0xc0
 8006ad2:	0112      	lsls	r2, r2, #4
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d02a      	beq.n	8006b2e <UART_SetConfig+0x1ee>
 8006ad8:	22c0      	movs	r2, #192	; 0xc0
 8006ada:	0112      	lsls	r2, r2, #4
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d82e      	bhi.n	8006b3e <UART_SetConfig+0x1fe>
 8006ae0:	2280      	movs	r2, #128	; 0x80
 8006ae2:	0112      	lsls	r2, r2, #4
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d012      	beq.n	8006b0e <UART_SetConfig+0x1ce>
 8006ae8:	2280      	movs	r2, #128	; 0x80
 8006aea:	0112      	lsls	r2, r2, #4
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d826      	bhi.n	8006b3e <UART_SetConfig+0x1fe>
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d004      	beq.n	8006afe <UART_SetConfig+0x1be>
 8006af4:	2280      	movs	r2, #128	; 0x80
 8006af6:	00d2      	lsls	r2, r2, #3
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d010      	beq.n	8006b1e <UART_SetConfig+0x1de>
 8006afc:	e01f      	b.n	8006b3e <UART_SetConfig+0x1fe>
 8006afe:	231b      	movs	r3, #27
 8006b00:	2218      	movs	r2, #24
 8006b02:	4694      	mov	ip, r2
 8006b04:	44bc      	add	ip, r7
 8006b06:	4463      	add	r3, ip
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	e026      	b.n	8006b5c <UART_SetConfig+0x21c>
 8006b0e:	231b      	movs	r3, #27
 8006b10:	2218      	movs	r2, #24
 8006b12:	4694      	mov	ip, r2
 8006b14:	44bc      	add	ip, r7
 8006b16:	4463      	add	r3, ip
 8006b18:	2202      	movs	r2, #2
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	e01e      	b.n	8006b5c <UART_SetConfig+0x21c>
 8006b1e:	231b      	movs	r3, #27
 8006b20:	2218      	movs	r2, #24
 8006b22:	4694      	mov	ip, r2
 8006b24:	44bc      	add	ip, r7
 8006b26:	4463      	add	r3, ip
 8006b28:	2204      	movs	r2, #4
 8006b2a:	701a      	strb	r2, [r3, #0]
 8006b2c:	e016      	b.n	8006b5c <UART_SetConfig+0x21c>
 8006b2e:	231b      	movs	r3, #27
 8006b30:	2218      	movs	r2, #24
 8006b32:	4694      	mov	ip, r2
 8006b34:	44bc      	add	ip, r7
 8006b36:	4463      	add	r3, ip
 8006b38:	2208      	movs	r2, #8
 8006b3a:	701a      	strb	r2, [r3, #0]
 8006b3c:	e00e      	b.n	8006b5c <UART_SetConfig+0x21c>
 8006b3e:	231b      	movs	r3, #27
 8006b40:	2218      	movs	r2, #24
 8006b42:	4694      	mov	ip, r2
 8006b44:	44bc      	add	ip, r7
 8006b46:	4463      	add	r3, ip
 8006b48:	2210      	movs	r2, #16
 8006b4a:	701a      	strb	r2, [r3, #0]
 8006b4c:	e006      	b.n	8006b5c <UART_SetConfig+0x21c>
 8006b4e:	231b      	movs	r3, #27
 8006b50:	2218      	movs	r2, #24
 8006b52:	4694      	mov	ip, r2
 8006b54:	44bc      	add	ip, r7
 8006b56:	4463      	add	r3, ip
 8006b58:	2210      	movs	r2, #16
 8006b5a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a48      	ldr	r2, [pc, #288]	; (8006c84 <UART_SetConfig+0x344>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d000      	beq.n	8006b68 <UART_SetConfig+0x228>
 8006b66:	e09b      	b.n	8006ca0 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b68:	231b      	movs	r3, #27
 8006b6a:	2218      	movs	r2, #24
 8006b6c:	4694      	mov	ip, r2
 8006b6e:	44bc      	add	ip, r7
 8006b70:	4463      	add	r3, ip
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d01d      	beq.n	8006bb4 <UART_SetConfig+0x274>
 8006b78:	dc20      	bgt.n	8006bbc <UART_SetConfig+0x27c>
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	d015      	beq.n	8006baa <UART_SetConfig+0x26a>
 8006b7e:	dc1d      	bgt.n	8006bbc <UART_SetConfig+0x27c>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d002      	beq.n	8006b8a <UART_SetConfig+0x24a>
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d005      	beq.n	8006b94 <UART_SetConfig+0x254>
 8006b88:	e018      	b.n	8006bbc <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b8a:	f7ff f88b 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 8006b8e:	0003      	movs	r3, r0
 8006b90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b92:	e01d      	b.n	8006bd0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b94:	4b3e      	ldr	r3, [pc, #248]	; (8006c90 <UART_SetConfig+0x350>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2210      	movs	r2, #16
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	d002      	beq.n	8006ba4 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006b9e:	4b3e      	ldr	r3, [pc, #248]	; (8006c98 <UART_SetConfig+0x358>)
 8006ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ba2:	e015      	b.n	8006bd0 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8006ba4:	4b3d      	ldr	r3, [pc, #244]	; (8006c9c <UART_SetConfig+0x35c>)
 8006ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ba8:	e012      	b.n	8006bd0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006baa:	f7fe ffcb 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 8006bae:	0003      	movs	r3, r0
 8006bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bb2:	e00d      	b.n	8006bd0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bb4:	2380      	movs	r3, #128	; 0x80
 8006bb6:	021b      	lsls	r3, r3, #8
 8006bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bba:	e009      	b.n	8006bd0 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006bc0:	231a      	movs	r3, #26
 8006bc2:	2218      	movs	r2, #24
 8006bc4:	4694      	mov	ip, r2
 8006bc6:	44bc      	add	ip, r7
 8006bc8:	4463      	add	r3, ip
 8006bca:	2201      	movs	r2, #1
 8006bcc:	701a      	strb	r2, [r3, #0]
        break;
 8006bce:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d100      	bne.n	8006bd8 <UART_SetConfig+0x298>
 8006bd6:	e139      	b.n	8006e4c <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	0013      	movs	r3, r2
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	189b      	adds	r3, r3, r2
 8006be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d305      	bcc.n	8006bf4 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d907      	bls.n	8006c04 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006bf4:	231a      	movs	r3, #26
 8006bf6:	2218      	movs	r2, #24
 8006bf8:	4694      	mov	ip, r2
 8006bfa:	44bc      	add	ip, r7
 8006bfc:	4463      	add	r3, ip
 8006bfe:	2201      	movs	r2, #1
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	e123      	b.n	8006e4c <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c06:	613b      	str	r3, [r7, #16]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	6939      	ldr	r1, [r7, #16]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	000b      	movs	r3, r1
 8006c12:	0e1b      	lsrs	r3, r3, #24
 8006c14:	0010      	movs	r0, r2
 8006c16:	0205      	lsls	r5, r0, #8
 8006c18:	431d      	orrs	r5, r3
 8006c1a:	000b      	movs	r3, r1
 8006c1c:	021c      	lsls	r4, r3, #8
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	085b      	lsrs	r3, r3, #1
 8006c24:	60bb      	str	r3, [r7, #8]
 8006c26:	2300      	movs	r3, #0
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	68b8      	ldr	r0, [r7, #8]
 8006c2c:	68f9      	ldr	r1, [r7, #12]
 8006c2e:	1900      	adds	r0, r0, r4
 8006c30:	4169      	adcs	r1, r5
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	603b      	str	r3, [r7, #0]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	607b      	str	r3, [r7, #4]
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f7f9 fc32 	bl	80004a8 <__aeabi_uldivmod>
 8006c44:	0002      	movs	r2, r0
 8006c46:	000b      	movs	r3, r1
 8006c48:	0013      	movs	r3, r2
 8006c4a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c4e:	23c0      	movs	r3, #192	; 0xc0
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d309      	bcc.n	8006c6a <UART_SetConfig+0x32a>
 8006c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c58:	2380      	movs	r3, #128	; 0x80
 8006c5a:	035b      	lsls	r3, r3, #13
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d204      	bcs.n	8006c6a <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c66:	60da      	str	r2, [r3, #12]
 8006c68:	e0f0      	b.n	8006e4c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8006c6a:	231a      	movs	r3, #26
 8006c6c:	2218      	movs	r2, #24
 8006c6e:	4694      	mov	ip, r2
 8006c70:	44bc      	add	ip, r7
 8006c72:	4463      	add	r3, ip
 8006c74:	2201      	movs	r2, #1
 8006c76:	701a      	strb	r2, [r3, #0]
 8006c78:	e0e8      	b.n	8006e4c <UART_SetConfig+0x50c>
 8006c7a:	46c0      	nop			; (mov r8, r8)
 8006c7c:	efff69f3 	.word	0xefff69f3
 8006c80:	ffffcfff 	.word	0xffffcfff
 8006c84:	40004800 	.word	0x40004800
 8006c88:	fffff4ff 	.word	0xfffff4ff
 8006c8c:	40013800 	.word	0x40013800
 8006c90:	40021000 	.word	0x40021000
 8006c94:	40004400 	.word	0x40004400
 8006c98:	003d0900 	.word	0x003d0900
 8006c9c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	69da      	ldr	r2, [r3, #28]
 8006ca4:	2380      	movs	r3, #128	; 0x80
 8006ca6:	021b      	lsls	r3, r3, #8
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d000      	beq.n	8006cae <UART_SetConfig+0x36e>
 8006cac:	e074      	b.n	8006d98 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006cae:	231b      	movs	r3, #27
 8006cb0:	2218      	movs	r2, #24
 8006cb2:	4694      	mov	ip, r2
 8006cb4:	44bc      	add	ip, r7
 8006cb6:	4463      	add	r3, ip
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d822      	bhi.n	8006d04 <UART_SetConfig+0x3c4>
 8006cbe:	009a      	lsls	r2, r3, #2
 8006cc0:	4b6a      	ldr	r3, [pc, #424]	; (8006e6c <UART_SetConfig+0x52c>)
 8006cc2:	18d3      	adds	r3, r2, r3
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cc8:	f7fe ffec 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 8006ccc:	0003      	movs	r3, r0
 8006cce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cd0:	e022      	b.n	8006d18 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cd2:	f7fe fffd 	bl	8005cd0 <HAL_RCC_GetPCLK2Freq>
 8006cd6:	0003      	movs	r3, r0
 8006cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cda:	e01d      	b.n	8006d18 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cdc:	4b64      	ldr	r3, [pc, #400]	; (8006e70 <UART_SetConfig+0x530>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2210      	movs	r2, #16
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	d002      	beq.n	8006cec <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006ce6:	4b63      	ldr	r3, [pc, #396]	; (8006e74 <UART_SetConfig+0x534>)
 8006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cea:	e015      	b.n	8006d18 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8006cec:	4b62      	ldr	r3, [pc, #392]	; (8006e78 <UART_SetConfig+0x538>)
 8006cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cf0:	e012      	b.n	8006d18 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf2:	f7fe ff27 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 8006cf6:	0003      	movs	r3, r0
 8006cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cfa:	e00d      	b.n	8006d18 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfc:	2380      	movs	r3, #128	; 0x80
 8006cfe:	021b      	lsls	r3, r3, #8
 8006d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d02:	e009      	b.n	8006d18 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006d08:	231a      	movs	r3, #26
 8006d0a:	2218      	movs	r2, #24
 8006d0c:	4694      	mov	ip, r2
 8006d0e:	44bc      	add	ip, r7
 8006d10:	4463      	add	r3, ip
 8006d12:	2201      	movs	r2, #1
 8006d14:	701a      	strb	r2, [r3, #0]
        break;
 8006d16:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d100      	bne.n	8006d20 <UART_SetConfig+0x3e0>
 8006d1e:	e095      	b.n	8006e4c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	005a      	lsls	r2, r3, #1
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	085b      	lsrs	r3, r3, #1
 8006d2a:	18d2      	adds	r2, r2, r3
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	0019      	movs	r1, r3
 8006d32:	0010      	movs	r0, r2
 8006d34:	f7f9 fa04 	bl	8000140 <__udivsi3>
 8006d38:	0003      	movs	r3, r0
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d40:	2b0f      	cmp	r3, #15
 8006d42:	d921      	bls.n	8006d88 <UART_SetConfig+0x448>
 8006d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d46:	2380      	movs	r3, #128	; 0x80
 8006d48:	025b      	lsls	r3, r3, #9
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d21c      	bcs.n	8006d88 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	200e      	movs	r0, #14
 8006d54:	2418      	movs	r4, #24
 8006d56:	193b      	adds	r3, r7, r4
 8006d58:	181b      	adds	r3, r3, r0
 8006d5a:	210f      	movs	r1, #15
 8006d5c:	438a      	bics	r2, r1
 8006d5e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	085b      	lsrs	r3, r3, #1
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2207      	movs	r2, #7
 8006d68:	4013      	ands	r3, r2
 8006d6a:	b299      	uxth	r1, r3
 8006d6c:	193b      	adds	r3, r7, r4
 8006d6e:	181b      	adds	r3, r3, r0
 8006d70:	193a      	adds	r2, r7, r4
 8006d72:	1812      	adds	r2, r2, r0
 8006d74:	8812      	ldrh	r2, [r2, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	193a      	adds	r2, r7, r4
 8006d80:	1812      	adds	r2, r2, r0
 8006d82:	8812      	ldrh	r2, [r2, #0]
 8006d84:	60da      	str	r2, [r3, #12]
 8006d86:	e061      	b.n	8006e4c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d88:	231a      	movs	r3, #26
 8006d8a:	2218      	movs	r2, #24
 8006d8c:	4694      	mov	ip, r2
 8006d8e:	44bc      	add	ip, r7
 8006d90:	4463      	add	r3, ip
 8006d92:	2201      	movs	r2, #1
 8006d94:	701a      	strb	r2, [r3, #0]
 8006d96:	e059      	b.n	8006e4c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d98:	231b      	movs	r3, #27
 8006d9a:	2218      	movs	r2, #24
 8006d9c:	4694      	mov	ip, r2
 8006d9e:	44bc      	add	ip, r7
 8006da0:	4463      	add	r3, ip
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b08      	cmp	r3, #8
 8006da6:	d822      	bhi.n	8006dee <UART_SetConfig+0x4ae>
 8006da8:	009a      	lsls	r2, r3, #2
 8006daa:	4b34      	ldr	r3, [pc, #208]	; (8006e7c <UART_SetConfig+0x53c>)
 8006dac:	18d3      	adds	r3, r2, r3
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db2:	f7fe ff77 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 8006db6:	0003      	movs	r3, r0
 8006db8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dba:	e022      	b.n	8006e02 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dbc:	f7fe ff88 	bl	8005cd0 <HAL_RCC_GetPCLK2Freq>
 8006dc0:	0003      	movs	r3, r0
 8006dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dc4:	e01d      	b.n	8006e02 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dc6:	4b2a      	ldr	r3, [pc, #168]	; (8006e70 <UART_SetConfig+0x530>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2210      	movs	r2, #16
 8006dcc:	4013      	ands	r3, r2
 8006dce:	d002      	beq.n	8006dd6 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006dd0:	4b28      	ldr	r3, [pc, #160]	; (8006e74 <UART_SetConfig+0x534>)
 8006dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006dd4:	e015      	b.n	8006e02 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006dd6:	4b28      	ldr	r3, [pc, #160]	; (8006e78 <UART_SetConfig+0x538>)
 8006dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dda:	e012      	b.n	8006e02 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ddc:	f7fe feb2 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 8006de0:	0003      	movs	r3, r0
 8006de2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006de4:	e00d      	b.n	8006e02 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006de6:	2380      	movs	r3, #128	; 0x80
 8006de8:	021b      	lsls	r3, r3, #8
 8006dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dec:	e009      	b.n	8006e02 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006df2:	231a      	movs	r3, #26
 8006df4:	2218      	movs	r2, #24
 8006df6:	4694      	mov	ip, r2
 8006df8:	44bc      	add	ip, r7
 8006dfa:	4463      	add	r3, ip
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	701a      	strb	r2, [r3, #0]
        break;
 8006e00:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d021      	beq.n	8006e4c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	085a      	lsrs	r2, r3, #1
 8006e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e10:	18d2      	adds	r2, r2, r3
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	0019      	movs	r1, r3
 8006e18:	0010      	movs	r0, r2
 8006e1a:	f7f9 f991 	bl	8000140 <__udivsi3>
 8006e1e:	0003      	movs	r3, r0
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	2b0f      	cmp	r3, #15
 8006e28:	d909      	bls.n	8006e3e <UART_SetConfig+0x4fe>
 8006e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e2c:	2380      	movs	r3, #128	; 0x80
 8006e2e:	025b      	lsls	r3, r3, #9
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d204      	bcs.n	8006e3e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e3a:	60da      	str	r2, [r3, #12]
 8006e3c:	e006      	b.n	8006e4c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e3e:	231a      	movs	r3, #26
 8006e40:	2218      	movs	r2, #24
 8006e42:	4694      	mov	ip, r2
 8006e44:	44bc      	add	ip, r7
 8006e46:	4463      	add	r3, ip
 8006e48:	2201      	movs	r2, #1
 8006e4a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	2200      	movs	r2, #0
 8006e56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e58:	231a      	movs	r3, #26
 8006e5a:	2218      	movs	r2, #24
 8006e5c:	4694      	mov	ip, r2
 8006e5e:	44bc      	add	ip, r7
 8006e60:	4463      	add	r3, ip
 8006e62:	781b      	ldrb	r3, [r3, #0]
}
 8006e64:	0018      	movs	r0, r3
 8006e66:	46bd      	mov	sp, r7
 8006e68:	b00e      	add	sp, #56	; 0x38
 8006e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8006e6c:	0800a74c 	.word	0x0800a74c
 8006e70:	40021000 	.word	0x40021000
 8006e74:	003d0900 	.word	0x003d0900
 8006e78:	00f42400 	.word	0x00f42400
 8006e7c:	0800a770 	.word	0x0800a770

08006e80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	4013      	ands	r3, r2
 8006e90:	d00b      	beq.n	8006eaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	4a4a      	ldr	r2, [pc, #296]	; (8006fc4 <UART_AdvFeatureConfig+0x144>)
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	0019      	movs	r1, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	2202      	movs	r2, #2
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	d00b      	beq.n	8006ecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	4a43      	ldr	r2, [pc, #268]	; (8006fc8 <UART_AdvFeatureConfig+0x148>)
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	0019      	movs	r1, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	2204      	movs	r2, #4
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	d00b      	beq.n	8006eee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	4a3b      	ldr	r2, [pc, #236]	; (8006fcc <UART_AdvFeatureConfig+0x14c>)
 8006ede:	4013      	ands	r3, r2
 8006ee0:	0019      	movs	r1, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	2208      	movs	r2, #8
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	d00b      	beq.n	8006f10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	4a34      	ldr	r2, [pc, #208]	; (8006fd0 <UART_AdvFeatureConfig+0x150>)
 8006f00:	4013      	ands	r3, r2
 8006f02:	0019      	movs	r1, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	2210      	movs	r2, #16
 8006f16:	4013      	ands	r3, r2
 8006f18:	d00b      	beq.n	8006f32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	4a2c      	ldr	r2, [pc, #176]	; (8006fd4 <UART_AdvFeatureConfig+0x154>)
 8006f22:	4013      	ands	r3, r2
 8006f24:	0019      	movs	r1, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	2220      	movs	r2, #32
 8006f38:	4013      	ands	r3, r2
 8006f3a:	d00b      	beq.n	8006f54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	4a25      	ldr	r2, [pc, #148]	; (8006fd8 <UART_AdvFeatureConfig+0x158>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	0019      	movs	r1, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	2240      	movs	r2, #64	; 0x40
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	d01d      	beq.n	8006f9a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	4a1d      	ldr	r2, [pc, #116]	; (8006fdc <UART_AdvFeatureConfig+0x15c>)
 8006f66:	4013      	ands	r3, r2
 8006f68:	0019      	movs	r1, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f7a:	2380      	movs	r3, #128	; 0x80
 8006f7c:	035b      	lsls	r3, r3, #13
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d10b      	bne.n	8006f9a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <UART_AdvFeatureConfig+0x160>)
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	0019      	movs	r1, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	2280      	movs	r2, #128	; 0x80
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	d00b      	beq.n	8006fbc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	4a0e      	ldr	r2, [pc, #56]	; (8006fe4 <UART_AdvFeatureConfig+0x164>)
 8006fac:	4013      	ands	r3, r2
 8006fae:	0019      	movs	r1, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	605a      	str	r2, [r3, #4]
  }
}
 8006fbc:	46c0      	nop			; (mov r8, r8)
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	b002      	add	sp, #8
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	fffdffff 	.word	0xfffdffff
 8006fc8:	fffeffff 	.word	0xfffeffff
 8006fcc:	fffbffff 	.word	0xfffbffff
 8006fd0:	ffff7fff 	.word	0xffff7fff
 8006fd4:	ffffefff 	.word	0xffffefff
 8006fd8:	ffffdfff 	.word	0xffffdfff
 8006fdc:	ffefffff 	.word	0xffefffff
 8006fe0:	ff9fffff 	.word	0xff9fffff
 8006fe4:	fff7ffff 	.word	0xfff7ffff

08006fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2280      	movs	r2, #128	; 0x80
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ff8:	f7fd fafa 	bl	80045f0 <HAL_GetTick>
 8006ffc:	0003      	movs	r3, r0
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2208      	movs	r2, #8
 8007008:	4013      	ands	r3, r2
 800700a:	2b08      	cmp	r3, #8
 800700c:	d10c      	bne.n	8007028 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2280      	movs	r2, #128	; 0x80
 8007012:	0391      	lsls	r1, r2, #14
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4a17      	ldr	r2, [pc, #92]	; (8007074 <UART_CheckIdleState+0x8c>)
 8007018:	9200      	str	r2, [sp, #0]
 800701a:	2200      	movs	r2, #0
 800701c:	f000 f82c 	bl	8007078 <UART_WaitOnFlagUntilTimeout>
 8007020:	1e03      	subs	r3, r0, #0
 8007022:	d001      	beq.n	8007028 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e021      	b.n	800706c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2204      	movs	r2, #4
 8007030:	4013      	ands	r3, r2
 8007032:	2b04      	cmp	r3, #4
 8007034:	d10c      	bne.n	8007050 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2280      	movs	r2, #128	; 0x80
 800703a:	03d1      	lsls	r1, r2, #15
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4a0d      	ldr	r2, [pc, #52]	; (8007074 <UART_CheckIdleState+0x8c>)
 8007040:	9200      	str	r2, [sp, #0]
 8007042:	2200      	movs	r2, #0
 8007044:	f000 f818 	bl	8007078 <UART_WaitOnFlagUntilTimeout>
 8007048:	1e03      	subs	r3, r0, #0
 800704a:	d001      	beq.n	8007050 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e00d      	b.n	800706c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2274      	movs	r2, #116	; 0x74
 8007066:	2100      	movs	r1, #0
 8007068:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	0018      	movs	r0, r3
 800706e:	46bd      	mov	sp, r7
 8007070:	b004      	add	sp, #16
 8007072:	bd80      	pop	{r7, pc}
 8007074:	01ffffff 	.word	0x01ffffff

08007078 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b094      	sub	sp, #80	; 0x50
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	603b      	str	r3, [r7, #0]
 8007084:	1dfb      	adds	r3, r7, #7
 8007086:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007088:	e0a3      	b.n	80071d2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800708a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800708c:	3301      	adds	r3, #1
 800708e:	d100      	bne.n	8007092 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007090:	e09f      	b.n	80071d2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007092:	f7fd faad 	bl	80045f0 <HAL_GetTick>
 8007096:	0002      	movs	r2, r0
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800709e:	429a      	cmp	r2, r3
 80070a0:	d302      	bcc.n	80070a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80070a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d13d      	bne.n	8007124 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070a8:	f3ef 8310 	mrs	r3, PRIMASK
 80070ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070b0:	647b      	str	r3, [r7, #68]	; 0x44
 80070b2:	2301      	movs	r3, #1
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	f383 8810 	msr	PRIMASK, r3
}
 80070bc:	46c0      	nop			; (mov r8, r8)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	494c      	ldr	r1, [pc, #304]	; (80071fc <UART_WaitOnFlagUntilTimeout+0x184>)
 80070ca:	400a      	ands	r2, r1
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070d0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	f383 8810 	msr	PRIMASK, r3
}
 80070d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070da:	f3ef 8310 	mrs	r3, PRIMASK
 80070de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80070e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e2:	643b      	str	r3, [r7, #64]	; 0x40
 80070e4:	2301      	movs	r3, #1
 80070e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ea:	f383 8810 	msr	PRIMASK, r3
}
 80070ee:	46c0      	nop			; (mov r8, r8)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2101      	movs	r1, #1
 80070fc:	438a      	bics	r2, r1
 80070fe:	609a      	str	r2, [r3, #8]
 8007100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007106:	f383 8810 	msr	PRIMASK, r3
}
 800710a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2220      	movs	r2, #32
 8007110:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2220      	movs	r2, #32
 8007116:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2274      	movs	r2, #116	; 0x74
 800711c:	2100      	movs	r1, #0
 800711e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e067      	b.n	80071f4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2204      	movs	r2, #4
 800712c:	4013      	ands	r3, r2
 800712e:	d050      	beq.n	80071d2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	69da      	ldr	r2, [r3, #28]
 8007136:	2380      	movs	r3, #128	; 0x80
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	401a      	ands	r2, r3
 800713c:	2380      	movs	r3, #128	; 0x80
 800713e:	011b      	lsls	r3, r3, #4
 8007140:	429a      	cmp	r2, r3
 8007142:	d146      	bne.n	80071d2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2280      	movs	r2, #128	; 0x80
 800714a:	0112      	lsls	r2, r2, #4
 800714c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800714e:	f3ef 8310 	mrs	r3, PRIMASK
 8007152:	613b      	str	r3, [r7, #16]
  return(result);
 8007154:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007158:	2301      	movs	r3, #1
 800715a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f383 8810 	msr	PRIMASK, r3
}
 8007162:	46c0      	nop			; (mov r8, r8)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4923      	ldr	r1, [pc, #140]	; (80071fc <UART_WaitOnFlagUntilTimeout+0x184>)
 8007170:	400a      	ands	r2, r1
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007176:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	f383 8810 	msr	PRIMASK, r3
}
 800717e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007180:	f3ef 8310 	mrs	r3, PRIMASK
 8007184:	61fb      	str	r3, [r7, #28]
  return(result);
 8007186:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007188:	64bb      	str	r3, [r7, #72]	; 0x48
 800718a:	2301      	movs	r3, #1
 800718c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	f383 8810 	msr	PRIMASK, r3
}
 8007194:	46c0      	nop			; (mov r8, r8)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2101      	movs	r1, #1
 80071a2:	438a      	bics	r2, r1
 80071a4:	609a      	str	r2, [r3, #8]
 80071a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	f383 8810 	msr	PRIMASK, r3
}
 80071b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2220      	movs	r2, #32
 80071b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2220      	movs	r2, #32
 80071bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2280      	movs	r2, #128	; 0x80
 80071c2:	2120      	movs	r1, #32
 80071c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2274      	movs	r2, #116	; 0x74
 80071ca:	2100      	movs	r1, #0
 80071cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e010      	b.n	80071f4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	4013      	ands	r3, r2
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	425a      	negs	r2, r3
 80071e2:	4153      	adcs	r3, r2
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	001a      	movs	r2, r3
 80071e8:	1dfb      	adds	r3, r7, #7
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d100      	bne.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80071f0:	e74b      	b.n	800708a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	0018      	movs	r0, r3
 80071f6:	46bd      	mov	sp, r7
 80071f8:	b014      	add	sp, #80	; 0x50
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	fffffe5f 	.word	0xfffffe5f

08007200 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e017      	b.n	8007242 <HAL_WWDG_Init+0x42>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	0018      	movs	r0, r3
 8007216:	f000 f818 	bl	800724a <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2180      	movs	r1, #128	; 0x80
 8007224:	430a      	orrs	r2, r1
 8007226:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	431a      	orrs	r2, r3
 8007232:	0011      	movs	r1, r2
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	0018      	movs	r0, r3
 8007244:	46bd      	mov	sp, r7
 8007246:	b002      	add	sp, #8
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_WWDG_MspInit>:
  *         to avoid multiple initialize when HAL_WWDG_Init function is called
  *         again to change parameters.
  * @retval None
  */
__weak void HAL_WWDG_MspInit(WWDG_HandleTypeDef *hwwdg)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_MspInit could be implemented in the user file
   */
}
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	46bd      	mov	sp, r7
 8007256:	b002      	add	sp, #8
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <__errno>:
 800725c:	4b01      	ldr	r3, [pc, #4]	; (8007264 <__errno+0x8>)
 800725e:	6818      	ldr	r0, [r3, #0]
 8007260:	4770      	bx	lr
 8007262:	46c0      	nop			; (mov r8, r8)
 8007264:	2000008c 	.word	0x2000008c

08007268 <__libc_init_array>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	2600      	movs	r6, #0
 800726c:	4d0c      	ldr	r5, [pc, #48]	; (80072a0 <__libc_init_array+0x38>)
 800726e:	4c0d      	ldr	r4, [pc, #52]	; (80072a4 <__libc_init_array+0x3c>)
 8007270:	1b64      	subs	r4, r4, r5
 8007272:	10a4      	asrs	r4, r4, #2
 8007274:	42a6      	cmp	r6, r4
 8007276:	d109      	bne.n	800728c <__libc_init_array+0x24>
 8007278:	2600      	movs	r6, #0
 800727a:	f002 fe3d 	bl	8009ef8 <_init>
 800727e:	4d0a      	ldr	r5, [pc, #40]	; (80072a8 <__libc_init_array+0x40>)
 8007280:	4c0a      	ldr	r4, [pc, #40]	; (80072ac <__libc_init_array+0x44>)
 8007282:	1b64      	subs	r4, r4, r5
 8007284:	10a4      	asrs	r4, r4, #2
 8007286:	42a6      	cmp	r6, r4
 8007288:	d105      	bne.n	8007296 <__libc_init_array+0x2e>
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	00b3      	lsls	r3, r6, #2
 800728e:	58eb      	ldr	r3, [r5, r3]
 8007290:	4798      	blx	r3
 8007292:	3601      	adds	r6, #1
 8007294:	e7ee      	b.n	8007274 <__libc_init_array+0xc>
 8007296:	00b3      	lsls	r3, r6, #2
 8007298:	58eb      	ldr	r3, [r5, r3]
 800729a:	4798      	blx	r3
 800729c:	3601      	adds	r6, #1
 800729e:	e7f2      	b.n	8007286 <__libc_init_array+0x1e>
 80072a0:	0800ab7c 	.word	0x0800ab7c
 80072a4:	0800ab7c 	.word	0x0800ab7c
 80072a8:	0800ab7c 	.word	0x0800ab7c
 80072ac:	0800ab80 	.word	0x0800ab80

080072b0 <memset>:
 80072b0:	0003      	movs	r3, r0
 80072b2:	1882      	adds	r2, r0, r2
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d100      	bne.n	80072ba <memset+0xa>
 80072b8:	4770      	bx	lr
 80072ba:	7019      	strb	r1, [r3, #0]
 80072bc:	3301      	adds	r3, #1
 80072be:	e7f9      	b.n	80072b4 <memset+0x4>

080072c0 <__cvt>:
 80072c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072c2:	001e      	movs	r6, r3
 80072c4:	2300      	movs	r3, #0
 80072c6:	0014      	movs	r4, r2
 80072c8:	b08b      	sub	sp, #44	; 0x2c
 80072ca:	429e      	cmp	r6, r3
 80072cc:	da04      	bge.n	80072d8 <__cvt+0x18>
 80072ce:	2180      	movs	r1, #128	; 0x80
 80072d0:	0609      	lsls	r1, r1, #24
 80072d2:	1873      	adds	r3, r6, r1
 80072d4:	001e      	movs	r6, r3
 80072d6:	232d      	movs	r3, #45	; 0x2d
 80072d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80072dc:	7013      	strb	r3, [r2, #0]
 80072de:	2320      	movs	r3, #32
 80072e0:	2203      	movs	r2, #3
 80072e2:	439f      	bics	r7, r3
 80072e4:	2f46      	cmp	r7, #70	; 0x46
 80072e6:	d007      	beq.n	80072f8 <__cvt+0x38>
 80072e8:	003b      	movs	r3, r7
 80072ea:	3b45      	subs	r3, #69	; 0x45
 80072ec:	4259      	negs	r1, r3
 80072ee:	414b      	adcs	r3, r1
 80072f0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80072f2:	3a01      	subs	r2, #1
 80072f4:	18cb      	adds	r3, r1, r3
 80072f6:	9310      	str	r3, [sp, #64]	; 0x40
 80072f8:	ab09      	add	r3, sp, #36	; 0x24
 80072fa:	9304      	str	r3, [sp, #16]
 80072fc:	ab08      	add	r3, sp, #32
 80072fe:	9303      	str	r3, [sp, #12]
 8007300:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007302:	9200      	str	r2, [sp, #0]
 8007304:	9302      	str	r3, [sp, #8]
 8007306:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007308:	0022      	movs	r2, r4
 800730a:	9301      	str	r3, [sp, #4]
 800730c:	0033      	movs	r3, r6
 800730e:	f000 fe41 	bl	8007f94 <_dtoa_r>
 8007312:	0005      	movs	r5, r0
 8007314:	2f47      	cmp	r7, #71	; 0x47
 8007316:	d102      	bne.n	800731e <__cvt+0x5e>
 8007318:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800731a:	07db      	lsls	r3, r3, #31
 800731c:	d528      	bpl.n	8007370 <__cvt+0xb0>
 800731e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007320:	18eb      	adds	r3, r5, r3
 8007322:	9307      	str	r3, [sp, #28]
 8007324:	2f46      	cmp	r7, #70	; 0x46
 8007326:	d114      	bne.n	8007352 <__cvt+0x92>
 8007328:	782b      	ldrb	r3, [r5, #0]
 800732a:	2b30      	cmp	r3, #48	; 0x30
 800732c:	d10c      	bne.n	8007348 <__cvt+0x88>
 800732e:	2200      	movs	r2, #0
 8007330:	2300      	movs	r3, #0
 8007332:	0020      	movs	r0, r4
 8007334:	0031      	movs	r1, r6
 8007336:	f7f9 f889 	bl	800044c <__aeabi_dcmpeq>
 800733a:	2800      	cmp	r0, #0
 800733c:	d104      	bne.n	8007348 <__cvt+0x88>
 800733e:	2301      	movs	r3, #1
 8007340:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007342:	1a9b      	subs	r3, r3, r2
 8007344:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800734a:	9a07      	ldr	r2, [sp, #28]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	18d3      	adds	r3, r2, r3
 8007350:	9307      	str	r3, [sp, #28]
 8007352:	2200      	movs	r2, #0
 8007354:	2300      	movs	r3, #0
 8007356:	0020      	movs	r0, r4
 8007358:	0031      	movs	r1, r6
 800735a:	f7f9 f877 	bl	800044c <__aeabi_dcmpeq>
 800735e:	2800      	cmp	r0, #0
 8007360:	d001      	beq.n	8007366 <__cvt+0xa6>
 8007362:	9b07      	ldr	r3, [sp, #28]
 8007364:	9309      	str	r3, [sp, #36]	; 0x24
 8007366:	2230      	movs	r2, #48	; 0x30
 8007368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800736a:	9907      	ldr	r1, [sp, #28]
 800736c:	428b      	cmp	r3, r1
 800736e:	d306      	bcc.n	800737e <__cvt+0xbe>
 8007370:	0028      	movs	r0, r5
 8007372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007374:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007376:	1b5b      	subs	r3, r3, r5
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	b00b      	add	sp, #44	; 0x2c
 800737c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800737e:	1c59      	adds	r1, r3, #1
 8007380:	9109      	str	r1, [sp, #36]	; 0x24
 8007382:	701a      	strb	r2, [r3, #0]
 8007384:	e7f0      	b.n	8007368 <__cvt+0xa8>

08007386 <__exponent>:
 8007386:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007388:	1c83      	adds	r3, r0, #2
 800738a:	b087      	sub	sp, #28
 800738c:	9303      	str	r3, [sp, #12]
 800738e:	0005      	movs	r5, r0
 8007390:	000c      	movs	r4, r1
 8007392:	232b      	movs	r3, #43	; 0x2b
 8007394:	7002      	strb	r2, [r0, #0]
 8007396:	2900      	cmp	r1, #0
 8007398:	da01      	bge.n	800739e <__exponent+0x18>
 800739a:	424c      	negs	r4, r1
 800739c:	3302      	adds	r3, #2
 800739e:	706b      	strb	r3, [r5, #1]
 80073a0:	2c09      	cmp	r4, #9
 80073a2:	dd31      	ble.n	8007408 <__exponent+0x82>
 80073a4:	270a      	movs	r7, #10
 80073a6:	ab04      	add	r3, sp, #16
 80073a8:	1dde      	adds	r6, r3, #7
 80073aa:	0020      	movs	r0, r4
 80073ac:	0039      	movs	r1, r7
 80073ae:	9601      	str	r6, [sp, #4]
 80073b0:	f7f9 f836 	bl	8000420 <__aeabi_idivmod>
 80073b4:	3e01      	subs	r6, #1
 80073b6:	3130      	adds	r1, #48	; 0x30
 80073b8:	0020      	movs	r0, r4
 80073ba:	7031      	strb	r1, [r6, #0]
 80073bc:	0039      	movs	r1, r7
 80073be:	9402      	str	r4, [sp, #8]
 80073c0:	f7f8 ff48 	bl	8000254 <__divsi3>
 80073c4:	9b02      	ldr	r3, [sp, #8]
 80073c6:	0004      	movs	r4, r0
 80073c8:	2b63      	cmp	r3, #99	; 0x63
 80073ca:	dcee      	bgt.n	80073aa <__exponent+0x24>
 80073cc:	9b01      	ldr	r3, [sp, #4]
 80073ce:	3430      	adds	r4, #48	; 0x30
 80073d0:	1e9a      	subs	r2, r3, #2
 80073d2:	0013      	movs	r3, r2
 80073d4:	9903      	ldr	r1, [sp, #12]
 80073d6:	7014      	strb	r4, [r2, #0]
 80073d8:	a804      	add	r0, sp, #16
 80073da:	3007      	adds	r0, #7
 80073dc:	4298      	cmp	r0, r3
 80073de:	d80e      	bhi.n	80073fe <__exponent+0x78>
 80073e0:	ab04      	add	r3, sp, #16
 80073e2:	3307      	adds	r3, #7
 80073e4:	2000      	movs	r0, #0
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d804      	bhi.n	80073f4 <__exponent+0x6e>
 80073ea:	ab04      	add	r3, sp, #16
 80073ec:	3009      	adds	r0, #9
 80073ee:	18c0      	adds	r0, r0, r3
 80073f0:	9b01      	ldr	r3, [sp, #4]
 80073f2:	1ac0      	subs	r0, r0, r3
 80073f4:	9b03      	ldr	r3, [sp, #12]
 80073f6:	1818      	adds	r0, r3, r0
 80073f8:	1b40      	subs	r0, r0, r5
 80073fa:	b007      	add	sp, #28
 80073fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fe:	7818      	ldrb	r0, [r3, #0]
 8007400:	3301      	adds	r3, #1
 8007402:	7008      	strb	r0, [r1, #0]
 8007404:	3101      	adds	r1, #1
 8007406:	e7e7      	b.n	80073d8 <__exponent+0x52>
 8007408:	2330      	movs	r3, #48	; 0x30
 800740a:	18e4      	adds	r4, r4, r3
 800740c:	70ab      	strb	r3, [r5, #2]
 800740e:	1d28      	adds	r0, r5, #4
 8007410:	70ec      	strb	r4, [r5, #3]
 8007412:	e7f1      	b.n	80073f8 <__exponent+0x72>

08007414 <_printf_float>:
 8007414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007416:	b095      	sub	sp, #84	; 0x54
 8007418:	000c      	movs	r4, r1
 800741a:	9208      	str	r2, [sp, #32]
 800741c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800741e:	9309      	str	r3, [sp, #36]	; 0x24
 8007420:	0007      	movs	r7, r0
 8007422:	f001 fda3 	bl	8008f6c <_localeconv_r>
 8007426:	6803      	ldr	r3, [r0, #0]
 8007428:	0018      	movs	r0, r3
 800742a:	930b      	str	r3, [sp, #44]	; 0x2c
 800742c:	f7f8 fe6c 	bl	8000108 <strlen>
 8007430:	2300      	movs	r3, #0
 8007432:	9312      	str	r3, [sp, #72]	; 0x48
 8007434:	7e23      	ldrb	r3, [r4, #24]
 8007436:	2207      	movs	r2, #7
 8007438:	001e      	movs	r6, r3
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	900d      	str	r0, [sp, #52]	; 0x34
 800743e:	930c      	str	r3, [sp, #48]	; 0x30
 8007440:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007442:	682b      	ldr	r3, [r5, #0]
 8007444:	05c9      	lsls	r1, r1, #23
 8007446:	d547      	bpl.n	80074d8 <_printf_float+0xc4>
 8007448:	189b      	adds	r3, r3, r2
 800744a:	4393      	bics	r3, r2
 800744c:	001a      	movs	r2, r3
 800744e:	3208      	adds	r2, #8
 8007450:	602a      	str	r2, [r5, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	64a2      	str	r2, [r4, #72]	; 0x48
 8007458:	64e3      	str	r3, [r4, #76]	; 0x4c
 800745a:	2201      	movs	r2, #1
 800745c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800745e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007460:	930a      	str	r3, [sp, #40]	; 0x28
 8007462:	006b      	lsls	r3, r5, #1
 8007464:	085b      	lsrs	r3, r3, #1
 8007466:	930e      	str	r3, [sp, #56]	; 0x38
 8007468:	980a      	ldr	r0, [sp, #40]	; 0x28
 800746a:	4ba8      	ldr	r3, [pc, #672]	; (800770c <_printf_float+0x2f8>)
 800746c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800746e:	4252      	negs	r2, r2
 8007470:	f7fa fe9c 	bl	80021ac <__aeabi_dcmpun>
 8007474:	2800      	cmp	r0, #0
 8007476:	d131      	bne.n	80074dc <_printf_float+0xc8>
 8007478:	2201      	movs	r2, #1
 800747a:	4ba4      	ldr	r3, [pc, #656]	; (800770c <_printf_float+0x2f8>)
 800747c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800747e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007480:	4252      	negs	r2, r2
 8007482:	f7f8 fff3 	bl	800046c <__aeabi_dcmple>
 8007486:	2800      	cmp	r0, #0
 8007488:	d128      	bne.n	80074dc <_printf_float+0xc8>
 800748a:	2200      	movs	r2, #0
 800748c:	2300      	movs	r3, #0
 800748e:	0029      	movs	r1, r5
 8007490:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007492:	f7f8 ffe1 	bl	8000458 <__aeabi_dcmplt>
 8007496:	2800      	cmp	r0, #0
 8007498:	d003      	beq.n	80074a2 <_printf_float+0x8e>
 800749a:	0023      	movs	r3, r4
 800749c:	222d      	movs	r2, #45	; 0x2d
 800749e:	3343      	adds	r3, #67	; 0x43
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	4d9b      	ldr	r5, [pc, #620]	; (8007710 <_printf_float+0x2fc>)
 80074a4:	2e47      	cmp	r6, #71	; 0x47
 80074a6:	d900      	bls.n	80074aa <_printf_float+0x96>
 80074a8:	4d9a      	ldr	r5, [pc, #616]	; (8007714 <_printf_float+0x300>)
 80074aa:	2303      	movs	r3, #3
 80074ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074ae:	6123      	str	r3, [r4, #16]
 80074b0:	3301      	adds	r3, #1
 80074b2:	439a      	bics	r2, r3
 80074b4:	2300      	movs	r3, #0
 80074b6:	6022      	str	r2, [r4, #0]
 80074b8:	930a      	str	r3, [sp, #40]	; 0x28
 80074ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074bc:	0021      	movs	r1, r4
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	0038      	movs	r0, r7
 80074c2:	9b08      	ldr	r3, [sp, #32]
 80074c4:	aa13      	add	r2, sp, #76	; 0x4c
 80074c6:	f000 f9f3 	bl	80078b0 <_printf_common>
 80074ca:	1c43      	adds	r3, r0, #1
 80074cc:	d000      	beq.n	80074d0 <_printf_float+0xbc>
 80074ce:	e09e      	b.n	800760e <_printf_float+0x1fa>
 80074d0:	2001      	movs	r0, #1
 80074d2:	4240      	negs	r0, r0
 80074d4:	b015      	add	sp, #84	; 0x54
 80074d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074d8:	3307      	adds	r3, #7
 80074da:	e7b6      	b.n	800744a <_printf_float+0x36>
 80074dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074de:	002b      	movs	r3, r5
 80074e0:	0010      	movs	r0, r2
 80074e2:	0029      	movs	r1, r5
 80074e4:	f7fa fe62 	bl	80021ac <__aeabi_dcmpun>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d00a      	beq.n	8007502 <_printf_float+0xee>
 80074ec:	2d00      	cmp	r5, #0
 80074ee:	da03      	bge.n	80074f8 <_printf_float+0xe4>
 80074f0:	0023      	movs	r3, r4
 80074f2:	222d      	movs	r2, #45	; 0x2d
 80074f4:	3343      	adds	r3, #67	; 0x43
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	4d87      	ldr	r5, [pc, #540]	; (8007718 <_printf_float+0x304>)
 80074fa:	2e47      	cmp	r6, #71	; 0x47
 80074fc:	d9d5      	bls.n	80074aa <_printf_float+0x96>
 80074fe:	4d87      	ldr	r5, [pc, #540]	; (800771c <_printf_float+0x308>)
 8007500:	e7d3      	b.n	80074aa <_printf_float+0x96>
 8007502:	2220      	movs	r2, #32
 8007504:	0031      	movs	r1, r6
 8007506:	6863      	ldr	r3, [r4, #4]
 8007508:	4391      	bics	r1, r2
 800750a:	910e      	str	r1, [sp, #56]	; 0x38
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	d147      	bne.n	80075a0 <_printf_float+0x18c>
 8007510:	3307      	adds	r3, #7
 8007512:	6063      	str	r3, [r4, #4]
 8007514:	2380      	movs	r3, #128	; 0x80
 8007516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	4313      	orrs	r3, r2
 800751c:	2200      	movs	r2, #0
 800751e:	9206      	str	r2, [sp, #24]
 8007520:	aa12      	add	r2, sp, #72	; 0x48
 8007522:	9205      	str	r2, [sp, #20]
 8007524:	aa11      	add	r2, sp, #68	; 0x44
 8007526:	9203      	str	r2, [sp, #12]
 8007528:	2223      	movs	r2, #35	; 0x23
 800752a:	a908      	add	r1, sp, #32
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	9301      	str	r3, [sp, #4]
 8007530:	6863      	ldr	r3, [r4, #4]
 8007532:	1852      	adds	r2, r2, r1
 8007534:	9202      	str	r2, [sp, #8]
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	0038      	movs	r0, r7
 800753a:	002b      	movs	r3, r5
 800753c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800753e:	9604      	str	r6, [sp, #16]
 8007540:	f7ff febe 	bl	80072c0 <__cvt>
 8007544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007546:	0005      	movs	r5, r0
 8007548:	9911      	ldr	r1, [sp, #68]	; 0x44
 800754a:	2b47      	cmp	r3, #71	; 0x47
 800754c:	d108      	bne.n	8007560 <_printf_float+0x14c>
 800754e:	1ccb      	adds	r3, r1, #3
 8007550:	db02      	blt.n	8007558 <_printf_float+0x144>
 8007552:	6863      	ldr	r3, [r4, #4]
 8007554:	4299      	cmp	r1, r3
 8007556:	dd46      	ble.n	80075e6 <_printf_float+0x1d2>
 8007558:	0033      	movs	r3, r6
 800755a:	3b02      	subs	r3, #2
 800755c:	b2db      	uxtb	r3, r3
 800755e:	001e      	movs	r6, r3
 8007560:	2e65      	cmp	r6, #101	; 0x65
 8007562:	d824      	bhi.n	80075ae <_printf_float+0x19a>
 8007564:	0020      	movs	r0, r4
 8007566:	0032      	movs	r2, r6
 8007568:	3901      	subs	r1, #1
 800756a:	3050      	adds	r0, #80	; 0x50
 800756c:	9111      	str	r1, [sp, #68]	; 0x44
 800756e:	f7ff ff0a 	bl	8007386 <__exponent>
 8007572:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007574:	900a      	str	r0, [sp, #40]	; 0x28
 8007576:	1813      	adds	r3, r2, r0
 8007578:	6123      	str	r3, [r4, #16]
 800757a:	2a01      	cmp	r2, #1
 800757c:	dc02      	bgt.n	8007584 <_printf_float+0x170>
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	07d2      	lsls	r2, r2, #31
 8007582:	d501      	bpl.n	8007588 <_printf_float+0x174>
 8007584:	3301      	adds	r3, #1
 8007586:	6123      	str	r3, [r4, #16]
 8007588:	2323      	movs	r3, #35	; 0x23
 800758a:	aa08      	add	r2, sp, #32
 800758c:	189b      	adds	r3, r3, r2
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d100      	bne.n	8007596 <_printf_float+0x182>
 8007594:	e791      	b.n	80074ba <_printf_float+0xa6>
 8007596:	0023      	movs	r3, r4
 8007598:	222d      	movs	r2, #45	; 0x2d
 800759a:	3343      	adds	r3, #67	; 0x43
 800759c:	701a      	strb	r2, [r3, #0]
 800759e:	e78c      	b.n	80074ba <_printf_float+0xa6>
 80075a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075a2:	2a47      	cmp	r2, #71	; 0x47
 80075a4:	d1b6      	bne.n	8007514 <_printf_float+0x100>
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1b4      	bne.n	8007514 <_printf_float+0x100>
 80075aa:	3301      	adds	r3, #1
 80075ac:	e7b1      	b.n	8007512 <_printf_float+0xfe>
 80075ae:	2e66      	cmp	r6, #102	; 0x66
 80075b0:	d11b      	bne.n	80075ea <_printf_float+0x1d6>
 80075b2:	6863      	ldr	r3, [r4, #4]
 80075b4:	2900      	cmp	r1, #0
 80075b6:	dd0d      	ble.n	80075d4 <_printf_float+0x1c0>
 80075b8:	6121      	str	r1, [r4, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d102      	bne.n	80075c4 <_printf_float+0x1b0>
 80075be:	6822      	ldr	r2, [r4, #0]
 80075c0:	07d2      	lsls	r2, r2, #31
 80075c2:	d502      	bpl.n	80075ca <_printf_float+0x1b6>
 80075c4:	3301      	adds	r3, #1
 80075c6:	1859      	adds	r1, r3, r1
 80075c8:	6121      	str	r1, [r4, #16]
 80075ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80075ce:	2300      	movs	r3, #0
 80075d0:	930a      	str	r3, [sp, #40]	; 0x28
 80075d2:	e7d9      	b.n	8007588 <_printf_float+0x174>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d103      	bne.n	80075e0 <_printf_float+0x1cc>
 80075d8:	2201      	movs	r2, #1
 80075da:	6821      	ldr	r1, [r4, #0]
 80075dc:	4211      	tst	r1, r2
 80075de:	d000      	beq.n	80075e2 <_printf_float+0x1ce>
 80075e0:	1c9a      	adds	r2, r3, #2
 80075e2:	6122      	str	r2, [r4, #16]
 80075e4:	e7f1      	b.n	80075ca <_printf_float+0x1b6>
 80075e6:	2367      	movs	r3, #103	; 0x67
 80075e8:	001e      	movs	r6, r3
 80075ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075ee:	4293      	cmp	r3, r2
 80075f0:	db06      	blt.n	8007600 <_printf_float+0x1ec>
 80075f2:	6822      	ldr	r2, [r4, #0]
 80075f4:	6123      	str	r3, [r4, #16]
 80075f6:	07d2      	lsls	r2, r2, #31
 80075f8:	d5e7      	bpl.n	80075ca <_printf_float+0x1b6>
 80075fa:	3301      	adds	r3, #1
 80075fc:	6123      	str	r3, [r4, #16]
 80075fe:	e7e4      	b.n	80075ca <_printf_float+0x1b6>
 8007600:	2101      	movs	r1, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	dc01      	bgt.n	800760a <_printf_float+0x1f6>
 8007606:	1849      	adds	r1, r1, r1
 8007608:	1ac9      	subs	r1, r1, r3
 800760a:	1852      	adds	r2, r2, r1
 800760c:	e7e9      	b.n	80075e2 <_printf_float+0x1ce>
 800760e:	6822      	ldr	r2, [r4, #0]
 8007610:	0553      	lsls	r3, r2, #21
 8007612:	d408      	bmi.n	8007626 <_printf_float+0x212>
 8007614:	6923      	ldr	r3, [r4, #16]
 8007616:	002a      	movs	r2, r5
 8007618:	0038      	movs	r0, r7
 800761a:	9908      	ldr	r1, [sp, #32]
 800761c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800761e:	47a8      	blx	r5
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d129      	bne.n	8007678 <_printf_float+0x264>
 8007624:	e754      	b.n	80074d0 <_printf_float+0xbc>
 8007626:	2e65      	cmp	r6, #101	; 0x65
 8007628:	d800      	bhi.n	800762c <_printf_float+0x218>
 800762a:	e0ec      	b.n	8007806 <_printf_float+0x3f2>
 800762c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800762e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007630:	2200      	movs	r2, #0
 8007632:	2300      	movs	r3, #0
 8007634:	f7f8 ff0a 	bl	800044c <__aeabi_dcmpeq>
 8007638:	2800      	cmp	r0, #0
 800763a:	d034      	beq.n	80076a6 <_printf_float+0x292>
 800763c:	2301      	movs	r3, #1
 800763e:	0038      	movs	r0, r7
 8007640:	4a37      	ldr	r2, [pc, #220]	; (8007720 <_printf_float+0x30c>)
 8007642:	9908      	ldr	r1, [sp, #32]
 8007644:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007646:	47a8      	blx	r5
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d100      	bne.n	800764e <_printf_float+0x23a>
 800764c:	e740      	b.n	80074d0 <_printf_float+0xbc>
 800764e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007650:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007652:	4293      	cmp	r3, r2
 8007654:	db02      	blt.n	800765c <_printf_float+0x248>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	07db      	lsls	r3, r3, #31
 800765a:	d50d      	bpl.n	8007678 <_printf_float+0x264>
 800765c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800765e:	0038      	movs	r0, r7
 8007660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007662:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007664:	9908      	ldr	r1, [sp, #32]
 8007666:	47a8      	blx	r5
 8007668:	2500      	movs	r5, #0
 800766a:	1c43      	adds	r3, r0, #1
 800766c:	d100      	bne.n	8007670 <_printf_float+0x25c>
 800766e:	e72f      	b.n	80074d0 <_printf_float+0xbc>
 8007670:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007672:	3b01      	subs	r3, #1
 8007674:	42ab      	cmp	r3, r5
 8007676:	dc0a      	bgt.n	800768e <_printf_float+0x27a>
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	079b      	lsls	r3, r3, #30
 800767c:	d500      	bpl.n	8007680 <_printf_float+0x26c>
 800767e:	e114      	b.n	80078aa <_printf_float+0x496>
 8007680:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007682:	68e0      	ldr	r0, [r4, #12]
 8007684:	4298      	cmp	r0, r3
 8007686:	db00      	blt.n	800768a <_printf_float+0x276>
 8007688:	e724      	b.n	80074d4 <_printf_float+0xc0>
 800768a:	0018      	movs	r0, r3
 800768c:	e722      	b.n	80074d4 <_printf_float+0xc0>
 800768e:	0022      	movs	r2, r4
 8007690:	2301      	movs	r3, #1
 8007692:	0038      	movs	r0, r7
 8007694:	9908      	ldr	r1, [sp, #32]
 8007696:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007698:	321a      	adds	r2, #26
 800769a:	47b0      	blx	r6
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d100      	bne.n	80076a2 <_printf_float+0x28e>
 80076a0:	e716      	b.n	80074d0 <_printf_float+0xbc>
 80076a2:	3501      	adds	r5, #1
 80076a4:	e7e4      	b.n	8007670 <_printf_float+0x25c>
 80076a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	dc3b      	bgt.n	8007724 <_printf_float+0x310>
 80076ac:	2301      	movs	r3, #1
 80076ae:	0038      	movs	r0, r7
 80076b0:	4a1b      	ldr	r2, [pc, #108]	; (8007720 <_printf_float+0x30c>)
 80076b2:	9908      	ldr	r1, [sp, #32]
 80076b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80076b6:	47b0      	blx	r6
 80076b8:	1c43      	adds	r3, r0, #1
 80076ba:	d100      	bne.n	80076be <_printf_float+0x2aa>
 80076bc:	e708      	b.n	80074d0 <_printf_float+0xbc>
 80076be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076c2:	4313      	orrs	r3, r2
 80076c4:	d102      	bne.n	80076cc <_printf_float+0x2b8>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	07db      	lsls	r3, r3, #31
 80076ca:	d5d5      	bpl.n	8007678 <_printf_float+0x264>
 80076cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ce:	0038      	movs	r0, r7
 80076d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076d2:	9908      	ldr	r1, [sp, #32]
 80076d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80076d6:	47b0      	blx	r6
 80076d8:	1c43      	adds	r3, r0, #1
 80076da:	d100      	bne.n	80076de <_printf_float+0x2ca>
 80076dc:	e6f8      	b.n	80074d0 <_printf_float+0xbc>
 80076de:	2300      	movs	r3, #0
 80076e0:	930a      	str	r3, [sp, #40]	; 0x28
 80076e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076e6:	425b      	negs	r3, r3
 80076e8:	4293      	cmp	r3, r2
 80076ea:	dc01      	bgt.n	80076f0 <_printf_float+0x2dc>
 80076ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076ee:	e792      	b.n	8007616 <_printf_float+0x202>
 80076f0:	0022      	movs	r2, r4
 80076f2:	2301      	movs	r3, #1
 80076f4:	0038      	movs	r0, r7
 80076f6:	9908      	ldr	r1, [sp, #32]
 80076f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80076fa:	321a      	adds	r2, #26
 80076fc:	47b0      	blx	r6
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	d100      	bne.n	8007704 <_printf_float+0x2f0>
 8007702:	e6e5      	b.n	80074d0 <_printf_float+0xbc>
 8007704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007706:	3301      	adds	r3, #1
 8007708:	e7ea      	b.n	80076e0 <_printf_float+0x2cc>
 800770a:	46c0      	nop			; (mov r8, r8)
 800770c:	7fefffff 	.word	0x7fefffff
 8007710:	0800a798 	.word	0x0800a798
 8007714:	0800a79c 	.word	0x0800a79c
 8007718:	0800a7a0 	.word	0x0800a7a0
 800771c:	0800a7a4 	.word	0x0800a7a4
 8007720:	0800a7a8 	.word	0x0800a7a8
 8007724:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007726:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007728:	920a      	str	r2, [sp, #40]	; 0x28
 800772a:	429a      	cmp	r2, r3
 800772c:	dd00      	ble.n	8007730 <_printf_float+0x31c>
 800772e:	930a      	str	r3, [sp, #40]	; 0x28
 8007730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007732:	2b00      	cmp	r3, #0
 8007734:	dc3d      	bgt.n	80077b2 <_printf_float+0x39e>
 8007736:	2300      	movs	r3, #0
 8007738:	930e      	str	r3, [sp, #56]	; 0x38
 800773a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800773c:	43db      	mvns	r3, r3
 800773e:	17db      	asrs	r3, r3, #31
 8007740:	930f      	str	r3, [sp, #60]	; 0x3c
 8007742:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007744:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007746:	930c      	str	r3, [sp, #48]	; 0x30
 8007748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800774a:	4013      	ands	r3, r2
 800774c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007752:	4293      	cmp	r3, r2
 8007754:	dc36      	bgt.n	80077c4 <_printf_float+0x3b0>
 8007756:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007758:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800775a:	4293      	cmp	r3, r2
 800775c:	db40      	blt.n	80077e0 <_printf_float+0x3cc>
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	07db      	lsls	r3, r3, #31
 8007762:	d43d      	bmi.n	80077e0 <_printf_float+0x3cc>
 8007764:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007768:	9911      	ldr	r1, [sp, #68]	; 0x44
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	1a52      	subs	r2, r2, r1
 800776e:	920a      	str	r2, [sp, #40]	; 0x28
 8007770:	429a      	cmp	r2, r3
 8007772:	dd00      	ble.n	8007776 <_printf_float+0x362>
 8007774:	930a      	str	r3, [sp, #40]	; 0x28
 8007776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007778:	2b00      	cmp	r3, #0
 800777a:	dc3a      	bgt.n	80077f2 <_printf_float+0x3de>
 800777c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800777e:	2500      	movs	r5, #0
 8007780:	43db      	mvns	r3, r3
 8007782:	17db      	asrs	r3, r3, #31
 8007784:	930b      	str	r3, [sp, #44]	; 0x2c
 8007786:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007788:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800778a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800778c:	1a9b      	subs	r3, r3, r2
 800778e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007790:	400a      	ands	r2, r1
 8007792:	1a9b      	subs	r3, r3, r2
 8007794:	42ab      	cmp	r3, r5
 8007796:	dc00      	bgt.n	800779a <_printf_float+0x386>
 8007798:	e76e      	b.n	8007678 <_printf_float+0x264>
 800779a:	0022      	movs	r2, r4
 800779c:	2301      	movs	r3, #1
 800779e:	0038      	movs	r0, r7
 80077a0:	9908      	ldr	r1, [sp, #32]
 80077a2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077a4:	321a      	adds	r2, #26
 80077a6:	47b0      	blx	r6
 80077a8:	1c43      	adds	r3, r0, #1
 80077aa:	d100      	bne.n	80077ae <_printf_float+0x39a>
 80077ac:	e690      	b.n	80074d0 <_printf_float+0xbc>
 80077ae:	3501      	adds	r5, #1
 80077b0:	e7e9      	b.n	8007786 <_printf_float+0x372>
 80077b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b4:	002a      	movs	r2, r5
 80077b6:	0038      	movs	r0, r7
 80077b8:	9908      	ldr	r1, [sp, #32]
 80077ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077bc:	47b0      	blx	r6
 80077be:	1c43      	adds	r3, r0, #1
 80077c0:	d1b9      	bne.n	8007736 <_printf_float+0x322>
 80077c2:	e685      	b.n	80074d0 <_printf_float+0xbc>
 80077c4:	0022      	movs	r2, r4
 80077c6:	2301      	movs	r3, #1
 80077c8:	0038      	movs	r0, r7
 80077ca:	9908      	ldr	r1, [sp, #32]
 80077cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077ce:	321a      	adds	r2, #26
 80077d0:	47b0      	blx	r6
 80077d2:	1c43      	adds	r3, r0, #1
 80077d4:	d100      	bne.n	80077d8 <_printf_float+0x3c4>
 80077d6:	e67b      	b.n	80074d0 <_printf_float+0xbc>
 80077d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077da:	3301      	adds	r3, #1
 80077dc:	930e      	str	r3, [sp, #56]	; 0x38
 80077de:	e7b0      	b.n	8007742 <_printf_float+0x32e>
 80077e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077e2:	0038      	movs	r0, r7
 80077e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077e6:	9908      	ldr	r1, [sp, #32]
 80077e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077ea:	47b0      	blx	r6
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d1b9      	bne.n	8007764 <_printf_float+0x350>
 80077f0:	e66e      	b.n	80074d0 <_printf_float+0xbc>
 80077f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077f4:	0038      	movs	r0, r7
 80077f6:	18ea      	adds	r2, r5, r3
 80077f8:	9908      	ldr	r1, [sp, #32]
 80077fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80077fe:	47a8      	blx	r5
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	d1bb      	bne.n	800777c <_printf_float+0x368>
 8007804:	e664      	b.n	80074d0 <_printf_float+0xbc>
 8007806:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007808:	2b01      	cmp	r3, #1
 800780a:	dc02      	bgt.n	8007812 <_printf_float+0x3fe>
 800780c:	2301      	movs	r3, #1
 800780e:	421a      	tst	r2, r3
 8007810:	d038      	beq.n	8007884 <_printf_float+0x470>
 8007812:	2301      	movs	r3, #1
 8007814:	002a      	movs	r2, r5
 8007816:	0038      	movs	r0, r7
 8007818:	9908      	ldr	r1, [sp, #32]
 800781a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800781c:	47b0      	blx	r6
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	d100      	bne.n	8007824 <_printf_float+0x410>
 8007822:	e655      	b.n	80074d0 <_printf_float+0xbc>
 8007824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007826:	0038      	movs	r0, r7
 8007828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800782a:	9908      	ldr	r1, [sp, #32]
 800782c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800782e:	47b0      	blx	r6
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d100      	bne.n	8007836 <_printf_float+0x422>
 8007834:	e64c      	b.n	80074d0 <_printf_float+0xbc>
 8007836:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007838:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800783a:	2200      	movs	r2, #0
 800783c:	2300      	movs	r3, #0
 800783e:	f7f8 fe05 	bl	800044c <__aeabi_dcmpeq>
 8007842:	2800      	cmp	r0, #0
 8007844:	d11c      	bne.n	8007880 <_printf_float+0x46c>
 8007846:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007848:	1c6a      	adds	r2, r5, #1
 800784a:	3b01      	subs	r3, #1
 800784c:	0038      	movs	r0, r7
 800784e:	9908      	ldr	r1, [sp, #32]
 8007850:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007852:	47a8      	blx	r5
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	d10f      	bne.n	8007878 <_printf_float+0x464>
 8007858:	e63a      	b.n	80074d0 <_printf_float+0xbc>
 800785a:	0022      	movs	r2, r4
 800785c:	2301      	movs	r3, #1
 800785e:	0038      	movs	r0, r7
 8007860:	9908      	ldr	r1, [sp, #32]
 8007862:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007864:	321a      	adds	r2, #26
 8007866:	47b0      	blx	r6
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d100      	bne.n	800786e <_printf_float+0x45a>
 800786c:	e630      	b.n	80074d0 <_printf_float+0xbc>
 800786e:	3501      	adds	r5, #1
 8007870:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007872:	3b01      	subs	r3, #1
 8007874:	42ab      	cmp	r3, r5
 8007876:	dcf0      	bgt.n	800785a <_printf_float+0x446>
 8007878:	0022      	movs	r2, r4
 800787a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800787c:	3250      	adds	r2, #80	; 0x50
 800787e:	e6cb      	b.n	8007618 <_printf_float+0x204>
 8007880:	2500      	movs	r5, #0
 8007882:	e7f5      	b.n	8007870 <_printf_float+0x45c>
 8007884:	002a      	movs	r2, r5
 8007886:	e7e1      	b.n	800784c <_printf_float+0x438>
 8007888:	0022      	movs	r2, r4
 800788a:	2301      	movs	r3, #1
 800788c:	0038      	movs	r0, r7
 800788e:	9908      	ldr	r1, [sp, #32]
 8007890:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007892:	3219      	adds	r2, #25
 8007894:	47b0      	blx	r6
 8007896:	1c43      	adds	r3, r0, #1
 8007898:	d100      	bne.n	800789c <_printf_float+0x488>
 800789a:	e619      	b.n	80074d0 <_printf_float+0xbc>
 800789c:	3501      	adds	r5, #1
 800789e:	68e3      	ldr	r3, [r4, #12]
 80078a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078a2:	1a9b      	subs	r3, r3, r2
 80078a4:	42ab      	cmp	r3, r5
 80078a6:	dcef      	bgt.n	8007888 <_printf_float+0x474>
 80078a8:	e6ea      	b.n	8007680 <_printf_float+0x26c>
 80078aa:	2500      	movs	r5, #0
 80078ac:	e7f7      	b.n	800789e <_printf_float+0x48a>
 80078ae:	46c0      	nop			; (mov r8, r8)

080078b0 <_printf_common>:
 80078b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078b2:	0015      	movs	r5, r2
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	688a      	ldr	r2, [r1, #8]
 80078b8:	690b      	ldr	r3, [r1, #16]
 80078ba:	000c      	movs	r4, r1
 80078bc:	9000      	str	r0, [sp, #0]
 80078be:	4293      	cmp	r3, r2
 80078c0:	da00      	bge.n	80078c4 <_printf_common+0x14>
 80078c2:	0013      	movs	r3, r2
 80078c4:	0022      	movs	r2, r4
 80078c6:	602b      	str	r3, [r5, #0]
 80078c8:	3243      	adds	r2, #67	; 0x43
 80078ca:	7812      	ldrb	r2, [r2, #0]
 80078cc:	2a00      	cmp	r2, #0
 80078ce:	d001      	beq.n	80078d4 <_printf_common+0x24>
 80078d0:	3301      	adds	r3, #1
 80078d2:	602b      	str	r3, [r5, #0]
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	069b      	lsls	r3, r3, #26
 80078d8:	d502      	bpl.n	80078e0 <_printf_common+0x30>
 80078da:	682b      	ldr	r3, [r5, #0]
 80078dc:	3302      	adds	r3, #2
 80078de:	602b      	str	r3, [r5, #0]
 80078e0:	6822      	ldr	r2, [r4, #0]
 80078e2:	2306      	movs	r3, #6
 80078e4:	0017      	movs	r7, r2
 80078e6:	401f      	ands	r7, r3
 80078e8:	421a      	tst	r2, r3
 80078ea:	d027      	beq.n	800793c <_printf_common+0x8c>
 80078ec:	0023      	movs	r3, r4
 80078ee:	3343      	adds	r3, #67	; 0x43
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	1e5a      	subs	r2, r3, #1
 80078f4:	4193      	sbcs	r3, r2
 80078f6:	6822      	ldr	r2, [r4, #0]
 80078f8:	0692      	lsls	r2, r2, #26
 80078fa:	d430      	bmi.n	800795e <_printf_common+0xae>
 80078fc:	0022      	movs	r2, r4
 80078fe:	9901      	ldr	r1, [sp, #4]
 8007900:	9800      	ldr	r0, [sp, #0]
 8007902:	9e08      	ldr	r6, [sp, #32]
 8007904:	3243      	adds	r2, #67	; 0x43
 8007906:	47b0      	blx	r6
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	d025      	beq.n	8007958 <_printf_common+0xa8>
 800790c:	2306      	movs	r3, #6
 800790e:	6820      	ldr	r0, [r4, #0]
 8007910:	682a      	ldr	r2, [r5, #0]
 8007912:	68e1      	ldr	r1, [r4, #12]
 8007914:	2500      	movs	r5, #0
 8007916:	4003      	ands	r3, r0
 8007918:	2b04      	cmp	r3, #4
 800791a:	d103      	bne.n	8007924 <_printf_common+0x74>
 800791c:	1a8d      	subs	r5, r1, r2
 800791e:	43eb      	mvns	r3, r5
 8007920:	17db      	asrs	r3, r3, #31
 8007922:	401d      	ands	r5, r3
 8007924:	68a3      	ldr	r3, [r4, #8]
 8007926:	6922      	ldr	r2, [r4, #16]
 8007928:	4293      	cmp	r3, r2
 800792a:	dd01      	ble.n	8007930 <_printf_common+0x80>
 800792c:	1a9b      	subs	r3, r3, r2
 800792e:	18ed      	adds	r5, r5, r3
 8007930:	2700      	movs	r7, #0
 8007932:	42bd      	cmp	r5, r7
 8007934:	d120      	bne.n	8007978 <_printf_common+0xc8>
 8007936:	2000      	movs	r0, #0
 8007938:	e010      	b.n	800795c <_printf_common+0xac>
 800793a:	3701      	adds	r7, #1
 800793c:	68e3      	ldr	r3, [r4, #12]
 800793e:	682a      	ldr	r2, [r5, #0]
 8007940:	1a9b      	subs	r3, r3, r2
 8007942:	42bb      	cmp	r3, r7
 8007944:	ddd2      	ble.n	80078ec <_printf_common+0x3c>
 8007946:	0022      	movs	r2, r4
 8007948:	2301      	movs	r3, #1
 800794a:	9901      	ldr	r1, [sp, #4]
 800794c:	9800      	ldr	r0, [sp, #0]
 800794e:	9e08      	ldr	r6, [sp, #32]
 8007950:	3219      	adds	r2, #25
 8007952:	47b0      	blx	r6
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d1f0      	bne.n	800793a <_printf_common+0x8a>
 8007958:	2001      	movs	r0, #1
 800795a:	4240      	negs	r0, r0
 800795c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800795e:	2030      	movs	r0, #48	; 0x30
 8007960:	18e1      	adds	r1, r4, r3
 8007962:	3143      	adds	r1, #67	; 0x43
 8007964:	7008      	strb	r0, [r1, #0]
 8007966:	0021      	movs	r1, r4
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	3145      	adds	r1, #69	; 0x45
 800796c:	7809      	ldrb	r1, [r1, #0]
 800796e:	18a2      	adds	r2, r4, r2
 8007970:	3243      	adds	r2, #67	; 0x43
 8007972:	3302      	adds	r3, #2
 8007974:	7011      	strb	r1, [r2, #0]
 8007976:	e7c1      	b.n	80078fc <_printf_common+0x4c>
 8007978:	0022      	movs	r2, r4
 800797a:	2301      	movs	r3, #1
 800797c:	9901      	ldr	r1, [sp, #4]
 800797e:	9800      	ldr	r0, [sp, #0]
 8007980:	9e08      	ldr	r6, [sp, #32]
 8007982:	321a      	adds	r2, #26
 8007984:	47b0      	blx	r6
 8007986:	1c43      	adds	r3, r0, #1
 8007988:	d0e6      	beq.n	8007958 <_printf_common+0xa8>
 800798a:	3701      	adds	r7, #1
 800798c:	e7d1      	b.n	8007932 <_printf_common+0x82>
	...

08007990 <_printf_i>:
 8007990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007992:	b08b      	sub	sp, #44	; 0x2c
 8007994:	9206      	str	r2, [sp, #24]
 8007996:	000a      	movs	r2, r1
 8007998:	3243      	adds	r2, #67	; 0x43
 800799a:	9307      	str	r3, [sp, #28]
 800799c:	9005      	str	r0, [sp, #20]
 800799e:	9204      	str	r2, [sp, #16]
 80079a0:	7e0a      	ldrb	r2, [r1, #24]
 80079a2:	000c      	movs	r4, r1
 80079a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079a6:	2a78      	cmp	r2, #120	; 0x78
 80079a8:	d806      	bhi.n	80079b8 <_printf_i+0x28>
 80079aa:	2a62      	cmp	r2, #98	; 0x62
 80079ac:	d808      	bhi.n	80079c0 <_printf_i+0x30>
 80079ae:	2a00      	cmp	r2, #0
 80079b0:	d100      	bne.n	80079b4 <_printf_i+0x24>
 80079b2:	e0c0      	b.n	8007b36 <_printf_i+0x1a6>
 80079b4:	2a58      	cmp	r2, #88	; 0x58
 80079b6:	d052      	beq.n	8007a5e <_printf_i+0xce>
 80079b8:	0026      	movs	r6, r4
 80079ba:	3642      	adds	r6, #66	; 0x42
 80079bc:	7032      	strb	r2, [r6, #0]
 80079be:	e022      	b.n	8007a06 <_printf_i+0x76>
 80079c0:	0010      	movs	r0, r2
 80079c2:	3863      	subs	r0, #99	; 0x63
 80079c4:	2815      	cmp	r0, #21
 80079c6:	d8f7      	bhi.n	80079b8 <_printf_i+0x28>
 80079c8:	f7f8 fbb0 	bl	800012c <__gnu_thumb1_case_shi>
 80079cc:	001f0016 	.word	0x001f0016
 80079d0:	fff6fff6 	.word	0xfff6fff6
 80079d4:	fff6fff6 	.word	0xfff6fff6
 80079d8:	fff6001f 	.word	0xfff6001f
 80079dc:	fff6fff6 	.word	0xfff6fff6
 80079e0:	00a8fff6 	.word	0x00a8fff6
 80079e4:	009a0036 	.word	0x009a0036
 80079e8:	fff6fff6 	.word	0xfff6fff6
 80079ec:	fff600b9 	.word	0xfff600b9
 80079f0:	fff60036 	.word	0xfff60036
 80079f4:	009efff6 	.word	0x009efff6
 80079f8:	0026      	movs	r6, r4
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	3642      	adds	r6, #66	; 0x42
 80079fe:	1d11      	adds	r1, r2, #4
 8007a00:	6019      	str	r1, [r3, #0]
 8007a02:	6813      	ldr	r3, [r2, #0]
 8007a04:	7033      	strb	r3, [r6, #0]
 8007a06:	2301      	movs	r3, #1
 8007a08:	e0a7      	b.n	8007b5a <_printf_i+0x1ca>
 8007a0a:	6808      	ldr	r0, [r1, #0]
 8007a0c:	6819      	ldr	r1, [r3, #0]
 8007a0e:	1d0a      	adds	r2, r1, #4
 8007a10:	0605      	lsls	r5, r0, #24
 8007a12:	d50b      	bpl.n	8007a2c <_printf_i+0x9c>
 8007a14:	680d      	ldr	r5, [r1, #0]
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	2d00      	cmp	r5, #0
 8007a1a:	da03      	bge.n	8007a24 <_printf_i+0x94>
 8007a1c:	232d      	movs	r3, #45	; 0x2d
 8007a1e:	9a04      	ldr	r2, [sp, #16]
 8007a20:	426d      	negs	r5, r5
 8007a22:	7013      	strb	r3, [r2, #0]
 8007a24:	4b61      	ldr	r3, [pc, #388]	; (8007bac <_printf_i+0x21c>)
 8007a26:	270a      	movs	r7, #10
 8007a28:	9303      	str	r3, [sp, #12]
 8007a2a:	e032      	b.n	8007a92 <_printf_i+0x102>
 8007a2c:	680d      	ldr	r5, [r1, #0]
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	0641      	lsls	r1, r0, #25
 8007a32:	d5f1      	bpl.n	8007a18 <_printf_i+0x88>
 8007a34:	b22d      	sxth	r5, r5
 8007a36:	e7ef      	b.n	8007a18 <_printf_i+0x88>
 8007a38:	680d      	ldr	r5, [r1, #0]
 8007a3a:	6819      	ldr	r1, [r3, #0]
 8007a3c:	1d08      	adds	r0, r1, #4
 8007a3e:	6018      	str	r0, [r3, #0]
 8007a40:	062e      	lsls	r6, r5, #24
 8007a42:	d501      	bpl.n	8007a48 <_printf_i+0xb8>
 8007a44:	680d      	ldr	r5, [r1, #0]
 8007a46:	e003      	b.n	8007a50 <_printf_i+0xc0>
 8007a48:	066d      	lsls	r5, r5, #25
 8007a4a:	d5fb      	bpl.n	8007a44 <_printf_i+0xb4>
 8007a4c:	680d      	ldr	r5, [r1, #0]
 8007a4e:	b2ad      	uxth	r5, r5
 8007a50:	4b56      	ldr	r3, [pc, #344]	; (8007bac <_printf_i+0x21c>)
 8007a52:	270a      	movs	r7, #10
 8007a54:	9303      	str	r3, [sp, #12]
 8007a56:	2a6f      	cmp	r2, #111	; 0x6f
 8007a58:	d117      	bne.n	8007a8a <_printf_i+0xfa>
 8007a5a:	2708      	movs	r7, #8
 8007a5c:	e015      	b.n	8007a8a <_printf_i+0xfa>
 8007a5e:	3145      	adds	r1, #69	; 0x45
 8007a60:	700a      	strb	r2, [r1, #0]
 8007a62:	4a52      	ldr	r2, [pc, #328]	; (8007bac <_printf_i+0x21c>)
 8007a64:	9203      	str	r2, [sp, #12]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	6821      	ldr	r1, [r4, #0]
 8007a6a:	ca20      	ldmia	r2!, {r5}
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	0608      	lsls	r0, r1, #24
 8007a70:	d550      	bpl.n	8007b14 <_printf_i+0x184>
 8007a72:	07cb      	lsls	r3, r1, #31
 8007a74:	d502      	bpl.n	8007a7c <_printf_i+0xec>
 8007a76:	2320      	movs	r3, #32
 8007a78:	4319      	orrs	r1, r3
 8007a7a:	6021      	str	r1, [r4, #0]
 8007a7c:	2710      	movs	r7, #16
 8007a7e:	2d00      	cmp	r5, #0
 8007a80:	d103      	bne.n	8007a8a <_printf_i+0xfa>
 8007a82:	2320      	movs	r3, #32
 8007a84:	6822      	ldr	r2, [r4, #0]
 8007a86:	439a      	bics	r2, r3
 8007a88:	6022      	str	r2, [r4, #0]
 8007a8a:	0023      	movs	r3, r4
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	3343      	adds	r3, #67	; 0x43
 8007a90:	701a      	strb	r2, [r3, #0]
 8007a92:	6863      	ldr	r3, [r4, #4]
 8007a94:	60a3      	str	r3, [r4, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	db03      	blt.n	8007aa2 <_printf_i+0x112>
 8007a9a:	2204      	movs	r2, #4
 8007a9c:	6821      	ldr	r1, [r4, #0]
 8007a9e:	4391      	bics	r1, r2
 8007aa0:	6021      	str	r1, [r4, #0]
 8007aa2:	2d00      	cmp	r5, #0
 8007aa4:	d102      	bne.n	8007aac <_printf_i+0x11c>
 8007aa6:	9e04      	ldr	r6, [sp, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00c      	beq.n	8007ac6 <_printf_i+0x136>
 8007aac:	9e04      	ldr	r6, [sp, #16]
 8007aae:	0028      	movs	r0, r5
 8007ab0:	0039      	movs	r1, r7
 8007ab2:	f7f8 fbcb 	bl	800024c <__aeabi_uidivmod>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	3e01      	subs	r6, #1
 8007aba:	5c5b      	ldrb	r3, [r3, r1]
 8007abc:	7033      	strb	r3, [r6, #0]
 8007abe:	002b      	movs	r3, r5
 8007ac0:	0005      	movs	r5, r0
 8007ac2:	429f      	cmp	r7, r3
 8007ac4:	d9f3      	bls.n	8007aae <_printf_i+0x11e>
 8007ac6:	2f08      	cmp	r7, #8
 8007ac8:	d109      	bne.n	8007ade <_printf_i+0x14e>
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	07db      	lsls	r3, r3, #31
 8007ace:	d506      	bpl.n	8007ade <_printf_i+0x14e>
 8007ad0:	6863      	ldr	r3, [r4, #4]
 8007ad2:	6922      	ldr	r2, [r4, #16]
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	dc02      	bgt.n	8007ade <_printf_i+0x14e>
 8007ad8:	2330      	movs	r3, #48	; 0x30
 8007ada:	3e01      	subs	r6, #1
 8007adc:	7033      	strb	r3, [r6, #0]
 8007ade:	9b04      	ldr	r3, [sp, #16]
 8007ae0:	1b9b      	subs	r3, r3, r6
 8007ae2:	6123      	str	r3, [r4, #16]
 8007ae4:	9b07      	ldr	r3, [sp, #28]
 8007ae6:	0021      	movs	r1, r4
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	9805      	ldr	r0, [sp, #20]
 8007aec:	9b06      	ldr	r3, [sp, #24]
 8007aee:	aa09      	add	r2, sp, #36	; 0x24
 8007af0:	f7ff fede 	bl	80078b0 <_printf_common>
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d135      	bne.n	8007b64 <_printf_i+0x1d4>
 8007af8:	2001      	movs	r0, #1
 8007afa:	4240      	negs	r0, r0
 8007afc:	b00b      	add	sp, #44	; 0x2c
 8007afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b00:	2220      	movs	r2, #32
 8007b02:	6809      	ldr	r1, [r1, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	6022      	str	r2, [r4, #0]
 8007b08:	0022      	movs	r2, r4
 8007b0a:	2178      	movs	r1, #120	; 0x78
 8007b0c:	3245      	adds	r2, #69	; 0x45
 8007b0e:	7011      	strb	r1, [r2, #0]
 8007b10:	4a27      	ldr	r2, [pc, #156]	; (8007bb0 <_printf_i+0x220>)
 8007b12:	e7a7      	b.n	8007a64 <_printf_i+0xd4>
 8007b14:	0648      	lsls	r0, r1, #25
 8007b16:	d5ac      	bpl.n	8007a72 <_printf_i+0xe2>
 8007b18:	b2ad      	uxth	r5, r5
 8007b1a:	e7aa      	b.n	8007a72 <_printf_i+0xe2>
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	680d      	ldr	r5, [r1, #0]
 8007b20:	1d10      	adds	r0, r2, #4
 8007b22:	6949      	ldr	r1, [r1, #20]
 8007b24:	6018      	str	r0, [r3, #0]
 8007b26:	6813      	ldr	r3, [r2, #0]
 8007b28:	062e      	lsls	r6, r5, #24
 8007b2a:	d501      	bpl.n	8007b30 <_printf_i+0x1a0>
 8007b2c:	6019      	str	r1, [r3, #0]
 8007b2e:	e002      	b.n	8007b36 <_printf_i+0x1a6>
 8007b30:	066d      	lsls	r5, r5, #25
 8007b32:	d5fb      	bpl.n	8007b2c <_printf_i+0x19c>
 8007b34:	8019      	strh	r1, [r3, #0]
 8007b36:	2300      	movs	r3, #0
 8007b38:	9e04      	ldr	r6, [sp, #16]
 8007b3a:	6123      	str	r3, [r4, #16]
 8007b3c:	e7d2      	b.n	8007ae4 <_printf_i+0x154>
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	1d11      	adds	r1, r2, #4
 8007b42:	6019      	str	r1, [r3, #0]
 8007b44:	6816      	ldr	r6, [r2, #0]
 8007b46:	2100      	movs	r1, #0
 8007b48:	0030      	movs	r0, r6
 8007b4a:	6862      	ldr	r2, [r4, #4]
 8007b4c:	f001 fa8c 	bl	8009068 <memchr>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d001      	beq.n	8007b58 <_printf_i+0x1c8>
 8007b54:	1b80      	subs	r0, r0, r6
 8007b56:	6060      	str	r0, [r4, #4]
 8007b58:	6863      	ldr	r3, [r4, #4]
 8007b5a:	6123      	str	r3, [r4, #16]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	9a04      	ldr	r2, [sp, #16]
 8007b60:	7013      	strb	r3, [r2, #0]
 8007b62:	e7bf      	b.n	8007ae4 <_printf_i+0x154>
 8007b64:	6923      	ldr	r3, [r4, #16]
 8007b66:	0032      	movs	r2, r6
 8007b68:	9906      	ldr	r1, [sp, #24]
 8007b6a:	9805      	ldr	r0, [sp, #20]
 8007b6c:	9d07      	ldr	r5, [sp, #28]
 8007b6e:	47a8      	blx	r5
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d0c1      	beq.n	8007af8 <_printf_i+0x168>
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	079b      	lsls	r3, r3, #30
 8007b78:	d415      	bmi.n	8007ba6 <_printf_i+0x216>
 8007b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7c:	68e0      	ldr	r0, [r4, #12]
 8007b7e:	4298      	cmp	r0, r3
 8007b80:	dabc      	bge.n	8007afc <_printf_i+0x16c>
 8007b82:	0018      	movs	r0, r3
 8007b84:	e7ba      	b.n	8007afc <_printf_i+0x16c>
 8007b86:	0022      	movs	r2, r4
 8007b88:	2301      	movs	r3, #1
 8007b8a:	9906      	ldr	r1, [sp, #24]
 8007b8c:	9805      	ldr	r0, [sp, #20]
 8007b8e:	9e07      	ldr	r6, [sp, #28]
 8007b90:	3219      	adds	r2, #25
 8007b92:	47b0      	blx	r6
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	d0af      	beq.n	8007af8 <_printf_i+0x168>
 8007b98:	3501      	adds	r5, #1
 8007b9a:	68e3      	ldr	r3, [r4, #12]
 8007b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b9e:	1a9b      	subs	r3, r3, r2
 8007ba0:	42ab      	cmp	r3, r5
 8007ba2:	dcf0      	bgt.n	8007b86 <_printf_i+0x1f6>
 8007ba4:	e7e9      	b.n	8007b7a <_printf_i+0x1ea>
 8007ba6:	2500      	movs	r5, #0
 8007ba8:	e7f7      	b.n	8007b9a <_printf_i+0x20a>
 8007baa:	46c0      	nop			; (mov r8, r8)
 8007bac:	0800a7aa 	.word	0x0800a7aa
 8007bb0:	0800a7bb 	.word	0x0800a7bb

08007bb4 <iprintf>:
 8007bb4:	b40f      	push	{r0, r1, r2, r3}
 8007bb6:	4b0b      	ldr	r3, [pc, #44]	; (8007be4 <iprintf+0x30>)
 8007bb8:	b513      	push	{r0, r1, r4, lr}
 8007bba:	681c      	ldr	r4, [r3, #0]
 8007bbc:	2c00      	cmp	r4, #0
 8007bbe:	d005      	beq.n	8007bcc <iprintf+0x18>
 8007bc0:	69a3      	ldr	r3, [r4, #24]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d102      	bne.n	8007bcc <iprintf+0x18>
 8007bc6:	0020      	movs	r0, r4
 8007bc8:	f001 f930 	bl	8008e2c <__sinit>
 8007bcc:	ab05      	add	r3, sp, #20
 8007bce:	0020      	movs	r0, r4
 8007bd0:	9a04      	ldr	r2, [sp, #16]
 8007bd2:	68a1      	ldr	r1, [r4, #8]
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	f001 fed7 	bl	8009988 <_vfiprintf_r>
 8007bda:	bc16      	pop	{r1, r2, r4}
 8007bdc:	bc08      	pop	{r3}
 8007bde:	b004      	add	sp, #16
 8007be0:	4718      	bx	r3
 8007be2:	46c0      	nop			; (mov r8, r8)
 8007be4:	2000008c 	.word	0x2000008c

08007be8 <_puts_r>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	0005      	movs	r5, r0
 8007bec:	000e      	movs	r6, r1
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d004      	beq.n	8007bfc <_puts_r+0x14>
 8007bf2:	6983      	ldr	r3, [r0, #24]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <_puts_r+0x14>
 8007bf8:	f001 f918 	bl	8008e2c <__sinit>
 8007bfc:	69ab      	ldr	r3, [r5, #24]
 8007bfe:	68ac      	ldr	r4, [r5, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d102      	bne.n	8007c0a <_puts_r+0x22>
 8007c04:	0028      	movs	r0, r5
 8007c06:	f001 f911 	bl	8008e2c <__sinit>
 8007c0a:	4b2d      	ldr	r3, [pc, #180]	; (8007cc0 <_puts_r+0xd8>)
 8007c0c:	429c      	cmp	r4, r3
 8007c0e:	d122      	bne.n	8007c56 <_puts_r+0x6e>
 8007c10:	686c      	ldr	r4, [r5, #4]
 8007c12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c14:	07db      	lsls	r3, r3, #31
 8007c16:	d405      	bmi.n	8007c24 <_puts_r+0x3c>
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	059b      	lsls	r3, r3, #22
 8007c1c:	d402      	bmi.n	8007c24 <_puts_r+0x3c>
 8007c1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c20:	f001 f9a9 	bl	8008f76 <__retarget_lock_acquire_recursive>
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	071b      	lsls	r3, r3, #28
 8007c28:	d502      	bpl.n	8007c30 <_puts_r+0x48>
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d129      	bne.n	8007c84 <_puts_r+0x9c>
 8007c30:	0021      	movs	r1, r4
 8007c32:	0028      	movs	r0, r5
 8007c34:	f000 f8aa 	bl	8007d8c <__swsetup_r>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d023      	beq.n	8007c84 <_puts_r+0x9c>
 8007c3c:	2501      	movs	r5, #1
 8007c3e:	426d      	negs	r5, r5
 8007c40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c42:	07db      	lsls	r3, r3, #31
 8007c44:	d405      	bmi.n	8007c52 <_puts_r+0x6a>
 8007c46:	89a3      	ldrh	r3, [r4, #12]
 8007c48:	059b      	lsls	r3, r3, #22
 8007c4a:	d402      	bmi.n	8007c52 <_puts_r+0x6a>
 8007c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c4e:	f001 f993 	bl	8008f78 <__retarget_lock_release_recursive>
 8007c52:	0028      	movs	r0, r5
 8007c54:	bd70      	pop	{r4, r5, r6, pc}
 8007c56:	4b1b      	ldr	r3, [pc, #108]	; (8007cc4 <_puts_r+0xdc>)
 8007c58:	429c      	cmp	r4, r3
 8007c5a:	d101      	bne.n	8007c60 <_puts_r+0x78>
 8007c5c:	68ac      	ldr	r4, [r5, #8]
 8007c5e:	e7d8      	b.n	8007c12 <_puts_r+0x2a>
 8007c60:	4b19      	ldr	r3, [pc, #100]	; (8007cc8 <_puts_r+0xe0>)
 8007c62:	429c      	cmp	r4, r3
 8007c64:	d1d5      	bne.n	8007c12 <_puts_r+0x2a>
 8007c66:	68ec      	ldr	r4, [r5, #12]
 8007c68:	e7d3      	b.n	8007c12 <_puts_r+0x2a>
 8007c6a:	3601      	adds	r6, #1
 8007c6c:	60a3      	str	r3, [r4, #8]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	da04      	bge.n	8007c7c <_puts_r+0x94>
 8007c72:	69a2      	ldr	r2, [r4, #24]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	dc16      	bgt.n	8007ca6 <_puts_r+0xbe>
 8007c78:	290a      	cmp	r1, #10
 8007c7a:	d014      	beq.n	8007ca6 <_puts_r+0xbe>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	6022      	str	r2, [r4, #0]
 8007c82:	7019      	strb	r1, [r3, #0]
 8007c84:	68a3      	ldr	r3, [r4, #8]
 8007c86:	7831      	ldrb	r1, [r6, #0]
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	2900      	cmp	r1, #0
 8007c8c:	d1ed      	bne.n	8007c6a <_puts_r+0x82>
 8007c8e:	60a3      	str	r3, [r4, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	da0f      	bge.n	8007cb4 <_puts_r+0xcc>
 8007c94:	0028      	movs	r0, r5
 8007c96:	0022      	movs	r2, r4
 8007c98:	310a      	adds	r1, #10
 8007c9a:	f000 f821 	bl	8007ce0 <__swbuf_r>
 8007c9e:	250a      	movs	r5, #10
 8007ca0:	1c43      	adds	r3, r0, #1
 8007ca2:	d1cd      	bne.n	8007c40 <_puts_r+0x58>
 8007ca4:	e7ca      	b.n	8007c3c <_puts_r+0x54>
 8007ca6:	0022      	movs	r2, r4
 8007ca8:	0028      	movs	r0, r5
 8007caa:	f000 f819 	bl	8007ce0 <__swbuf_r>
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	d1e8      	bne.n	8007c84 <_puts_r+0x9c>
 8007cb2:	e7c3      	b.n	8007c3c <_puts_r+0x54>
 8007cb4:	250a      	movs	r5, #10
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	1c5a      	adds	r2, r3, #1
 8007cba:	6022      	str	r2, [r4, #0]
 8007cbc:	701d      	strb	r5, [r3, #0]
 8007cbe:	e7bf      	b.n	8007c40 <_puts_r+0x58>
 8007cc0:	0800a880 	.word	0x0800a880
 8007cc4:	0800a8a0 	.word	0x0800a8a0
 8007cc8:	0800a860 	.word	0x0800a860

08007ccc <puts>:
 8007ccc:	b510      	push	{r4, lr}
 8007cce:	4b03      	ldr	r3, [pc, #12]	; (8007cdc <puts+0x10>)
 8007cd0:	0001      	movs	r1, r0
 8007cd2:	6818      	ldr	r0, [r3, #0]
 8007cd4:	f7ff ff88 	bl	8007be8 <_puts_r>
 8007cd8:	bd10      	pop	{r4, pc}
 8007cda:	46c0      	nop			; (mov r8, r8)
 8007cdc:	2000008c 	.word	0x2000008c

08007ce0 <__swbuf_r>:
 8007ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce2:	0005      	movs	r5, r0
 8007ce4:	000e      	movs	r6, r1
 8007ce6:	0014      	movs	r4, r2
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d004      	beq.n	8007cf6 <__swbuf_r+0x16>
 8007cec:	6983      	ldr	r3, [r0, #24]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <__swbuf_r+0x16>
 8007cf2:	f001 f89b 	bl	8008e2c <__sinit>
 8007cf6:	4b22      	ldr	r3, [pc, #136]	; (8007d80 <__swbuf_r+0xa0>)
 8007cf8:	429c      	cmp	r4, r3
 8007cfa:	d12e      	bne.n	8007d5a <__swbuf_r+0x7a>
 8007cfc:	686c      	ldr	r4, [r5, #4]
 8007cfe:	69a3      	ldr	r3, [r4, #24]
 8007d00:	60a3      	str	r3, [r4, #8]
 8007d02:	89a3      	ldrh	r3, [r4, #12]
 8007d04:	071b      	lsls	r3, r3, #28
 8007d06:	d532      	bpl.n	8007d6e <__swbuf_r+0x8e>
 8007d08:	6923      	ldr	r3, [r4, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d02f      	beq.n	8007d6e <__swbuf_r+0x8e>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	6922      	ldr	r2, [r4, #16]
 8007d12:	b2f7      	uxtb	r7, r6
 8007d14:	1a98      	subs	r0, r3, r2
 8007d16:	6963      	ldr	r3, [r4, #20]
 8007d18:	b2f6      	uxtb	r6, r6
 8007d1a:	4283      	cmp	r3, r0
 8007d1c:	dc05      	bgt.n	8007d2a <__swbuf_r+0x4a>
 8007d1e:	0021      	movs	r1, r4
 8007d20:	0028      	movs	r0, r5
 8007d22:	f000 ffe1 	bl	8008ce8 <_fflush_r>
 8007d26:	2800      	cmp	r0, #0
 8007d28:	d127      	bne.n	8007d7a <__swbuf_r+0x9a>
 8007d2a:	68a3      	ldr	r3, [r4, #8]
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	60a3      	str	r3, [r4, #8]
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	6022      	str	r2, [r4, #0]
 8007d38:	701f      	strb	r7, [r3, #0]
 8007d3a:	6963      	ldr	r3, [r4, #20]
 8007d3c:	4283      	cmp	r3, r0
 8007d3e:	d004      	beq.n	8007d4a <__swbuf_r+0x6a>
 8007d40:	89a3      	ldrh	r3, [r4, #12]
 8007d42:	07db      	lsls	r3, r3, #31
 8007d44:	d507      	bpl.n	8007d56 <__swbuf_r+0x76>
 8007d46:	2e0a      	cmp	r6, #10
 8007d48:	d105      	bne.n	8007d56 <__swbuf_r+0x76>
 8007d4a:	0021      	movs	r1, r4
 8007d4c:	0028      	movs	r0, r5
 8007d4e:	f000 ffcb 	bl	8008ce8 <_fflush_r>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	d111      	bne.n	8007d7a <__swbuf_r+0x9a>
 8007d56:	0030      	movs	r0, r6
 8007d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d5a:	4b0a      	ldr	r3, [pc, #40]	; (8007d84 <__swbuf_r+0xa4>)
 8007d5c:	429c      	cmp	r4, r3
 8007d5e:	d101      	bne.n	8007d64 <__swbuf_r+0x84>
 8007d60:	68ac      	ldr	r4, [r5, #8]
 8007d62:	e7cc      	b.n	8007cfe <__swbuf_r+0x1e>
 8007d64:	4b08      	ldr	r3, [pc, #32]	; (8007d88 <__swbuf_r+0xa8>)
 8007d66:	429c      	cmp	r4, r3
 8007d68:	d1c9      	bne.n	8007cfe <__swbuf_r+0x1e>
 8007d6a:	68ec      	ldr	r4, [r5, #12]
 8007d6c:	e7c7      	b.n	8007cfe <__swbuf_r+0x1e>
 8007d6e:	0021      	movs	r1, r4
 8007d70:	0028      	movs	r0, r5
 8007d72:	f000 f80b 	bl	8007d8c <__swsetup_r>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d0c9      	beq.n	8007d0e <__swbuf_r+0x2e>
 8007d7a:	2601      	movs	r6, #1
 8007d7c:	4276      	negs	r6, r6
 8007d7e:	e7ea      	b.n	8007d56 <__swbuf_r+0x76>
 8007d80:	0800a880 	.word	0x0800a880
 8007d84:	0800a8a0 	.word	0x0800a8a0
 8007d88:	0800a860 	.word	0x0800a860

08007d8c <__swsetup_r>:
 8007d8c:	4b37      	ldr	r3, [pc, #220]	; (8007e6c <__swsetup_r+0xe0>)
 8007d8e:	b570      	push	{r4, r5, r6, lr}
 8007d90:	681d      	ldr	r5, [r3, #0]
 8007d92:	0006      	movs	r6, r0
 8007d94:	000c      	movs	r4, r1
 8007d96:	2d00      	cmp	r5, #0
 8007d98:	d005      	beq.n	8007da6 <__swsetup_r+0x1a>
 8007d9a:	69ab      	ldr	r3, [r5, #24]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d102      	bne.n	8007da6 <__swsetup_r+0x1a>
 8007da0:	0028      	movs	r0, r5
 8007da2:	f001 f843 	bl	8008e2c <__sinit>
 8007da6:	4b32      	ldr	r3, [pc, #200]	; (8007e70 <__swsetup_r+0xe4>)
 8007da8:	429c      	cmp	r4, r3
 8007daa:	d10f      	bne.n	8007dcc <__swsetup_r+0x40>
 8007dac:	686c      	ldr	r4, [r5, #4]
 8007dae:	230c      	movs	r3, #12
 8007db0:	5ee2      	ldrsh	r2, [r4, r3]
 8007db2:	b293      	uxth	r3, r2
 8007db4:	0711      	lsls	r1, r2, #28
 8007db6:	d42d      	bmi.n	8007e14 <__swsetup_r+0x88>
 8007db8:	06d9      	lsls	r1, r3, #27
 8007dba:	d411      	bmi.n	8007de0 <__swsetup_r+0x54>
 8007dbc:	2309      	movs	r3, #9
 8007dbe:	2001      	movs	r0, #1
 8007dc0:	6033      	str	r3, [r6, #0]
 8007dc2:	3337      	adds	r3, #55	; 0x37
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	81a3      	strh	r3, [r4, #12]
 8007dc8:	4240      	negs	r0, r0
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
 8007dcc:	4b29      	ldr	r3, [pc, #164]	; (8007e74 <__swsetup_r+0xe8>)
 8007dce:	429c      	cmp	r4, r3
 8007dd0:	d101      	bne.n	8007dd6 <__swsetup_r+0x4a>
 8007dd2:	68ac      	ldr	r4, [r5, #8]
 8007dd4:	e7eb      	b.n	8007dae <__swsetup_r+0x22>
 8007dd6:	4b28      	ldr	r3, [pc, #160]	; (8007e78 <__swsetup_r+0xec>)
 8007dd8:	429c      	cmp	r4, r3
 8007dda:	d1e8      	bne.n	8007dae <__swsetup_r+0x22>
 8007ddc:	68ec      	ldr	r4, [r5, #12]
 8007dde:	e7e6      	b.n	8007dae <__swsetup_r+0x22>
 8007de0:	075b      	lsls	r3, r3, #29
 8007de2:	d513      	bpl.n	8007e0c <__swsetup_r+0x80>
 8007de4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007de6:	2900      	cmp	r1, #0
 8007de8:	d008      	beq.n	8007dfc <__swsetup_r+0x70>
 8007dea:	0023      	movs	r3, r4
 8007dec:	3344      	adds	r3, #68	; 0x44
 8007dee:	4299      	cmp	r1, r3
 8007df0:	d002      	beq.n	8007df8 <__swsetup_r+0x6c>
 8007df2:	0030      	movs	r0, r6
 8007df4:	f001 fcf8 	bl	80097e8 <_free_r>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	6363      	str	r3, [r4, #52]	; 0x34
 8007dfc:	2224      	movs	r2, #36	; 0x24
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	4393      	bics	r3, r2
 8007e02:	81a3      	strh	r3, [r4, #12]
 8007e04:	2300      	movs	r3, #0
 8007e06:	6063      	str	r3, [r4, #4]
 8007e08:	6923      	ldr	r3, [r4, #16]
 8007e0a:	6023      	str	r3, [r4, #0]
 8007e0c:	2308      	movs	r3, #8
 8007e0e:	89a2      	ldrh	r2, [r4, #12]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	81a3      	strh	r3, [r4, #12]
 8007e14:	6923      	ldr	r3, [r4, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10b      	bne.n	8007e32 <__swsetup_r+0xa6>
 8007e1a:	21a0      	movs	r1, #160	; 0xa0
 8007e1c:	2280      	movs	r2, #128	; 0x80
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	0089      	lsls	r1, r1, #2
 8007e22:	0092      	lsls	r2, r2, #2
 8007e24:	400b      	ands	r3, r1
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d003      	beq.n	8007e32 <__swsetup_r+0xa6>
 8007e2a:	0021      	movs	r1, r4
 8007e2c:	0030      	movs	r0, r6
 8007e2e:	f001 f8cd 	bl	8008fcc <__smakebuf_r>
 8007e32:	220c      	movs	r2, #12
 8007e34:	5ea3      	ldrsh	r3, [r4, r2]
 8007e36:	2001      	movs	r0, #1
 8007e38:	001a      	movs	r2, r3
 8007e3a:	b299      	uxth	r1, r3
 8007e3c:	4002      	ands	r2, r0
 8007e3e:	4203      	tst	r3, r0
 8007e40:	d00f      	beq.n	8007e62 <__swsetup_r+0xd6>
 8007e42:	2200      	movs	r2, #0
 8007e44:	60a2      	str	r2, [r4, #8]
 8007e46:	6962      	ldr	r2, [r4, #20]
 8007e48:	4252      	negs	r2, r2
 8007e4a:	61a2      	str	r2, [r4, #24]
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	6922      	ldr	r2, [r4, #16]
 8007e50:	4282      	cmp	r2, r0
 8007e52:	d1ba      	bne.n	8007dca <__swsetup_r+0x3e>
 8007e54:	060a      	lsls	r2, r1, #24
 8007e56:	d5b8      	bpl.n	8007dca <__swsetup_r+0x3e>
 8007e58:	2240      	movs	r2, #64	; 0x40
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	3801      	subs	r0, #1
 8007e60:	e7b3      	b.n	8007dca <__swsetup_r+0x3e>
 8007e62:	0788      	lsls	r0, r1, #30
 8007e64:	d400      	bmi.n	8007e68 <__swsetup_r+0xdc>
 8007e66:	6962      	ldr	r2, [r4, #20]
 8007e68:	60a2      	str	r2, [r4, #8]
 8007e6a:	e7ef      	b.n	8007e4c <__swsetup_r+0xc0>
 8007e6c:	2000008c 	.word	0x2000008c
 8007e70:	0800a880 	.word	0x0800a880
 8007e74:	0800a8a0 	.word	0x0800a8a0
 8007e78:	0800a860 	.word	0x0800a860

08007e7c <quorem>:
 8007e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e7e:	0006      	movs	r6, r0
 8007e80:	690d      	ldr	r5, [r1, #16]
 8007e82:	6933      	ldr	r3, [r6, #16]
 8007e84:	b087      	sub	sp, #28
 8007e86:	2000      	movs	r0, #0
 8007e88:	9102      	str	r1, [sp, #8]
 8007e8a:	42ab      	cmp	r3, r5
 8007e8c:	db6b      	blt.n	8007f66 <quorem+0xea>
 8007e8e:	000b      	movs	r3, r1
 8007e90:	3d01      	subs	r5, #1
 8007e92:	00ac      	lsls	r4, r5, #2
 8007e94:	3314      	adds	r3, #20
 8007e96:	9305      	str	r3, [sp, #20]
 8007e98:	191b      	adds	r3, r3, r4
 8007e9a:	9303      	str	r3, [sp, #12]
 8007e9c:	0033      	movs	r3, r6
 8007e9e:	3314      	adds	r3, #20
 8007ea0:	9301      	str	r3, [sp, #4]
 8007ea2:	191c      	adds	r4, r3, r4
 8007ea4:	9b03      	ldr	r3, [sp, #12]
 8007ea6:	6827      	ldr	r7, [r4, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	0038      	movs	r0, r7
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	0019      	movs	r1, r3
 8007eb2:	9304      	str	r3, [sp, #16]
 8007eb4:	f7f8 f944 	bl	8000140 <__udivsi3>
 8007eb8:	9b04      	ldr	r3, [sp, #16]
 8007eba:	9000      	str	r0, [sp, #0]
 8007ebc:	429f      	cmp	r7, r3
 8007ebe:	d329      	bcc.n	8007f14 <quorem+0x98>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	469c      	mov	ip, r3
 8007ec4:	9801      	ldr	r0, [sp, #4]
 8007ec6:	9f05      	ldr	r7, [sp, #20]
 8007ec8:	9304      	str	r3, [sp, #16]
 8007eca:	cf08      	ldmia	r7!, {r3}
 8007ecc:	9a00      	ldr	r2, [sp, #0]
 8007ece:	b299      	uxth	r1, r3
 8007ed0:	4351      	muls	r1, r2
 8007ed2:	0c1b      	lsrs	r3, r3, #16
 8007ed4:	4353      	muls	r3, r2
 8007ed6:	4461      	add	r1, ip
 8007ed8:	0c0a      	lsrs	r2, r1, #16
 8007eda:	189b      	adds	r3, r3, r2
 8007edc:	0c1a      	lsrs	r2, r3, #16
 8007ede:	9305      	str	r3, [sp, #20]
 8007ee0:	6803      	ldr	r3, [r0, #0]
 8007ee2:	4694      	mov	ip, r2
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	9b04      	ldr	r3, [sp, #16]
 8007ee8:	b289      	uxth	r1, r1
 8007eea:	18d2      	adds	r2, r2, r3
 8007eec:	6803      	ldr	r3, [r0, #0]
 8007eee:	1a52      	subs	r2, r2, r1
 8007ef0:	0c19      	lsrs	r1, r3, #16
 8007ef2:	466b      	mov	r3, sp
 8007ef4:	8a9b      	ldrh	r3, [r3, #20]
 8007ef6:	1acb      	subs	r3, r1, r3
 8007ef8:	1411      	asrs	r1, r2, #16
 8007efa:	185b      	adds	r3, r3, r1
 8007efc:	1419      	asrs	r1, r3, #16
 8007efe:	b292      	uxth	r2, r2
 8007f00:	041b      	lsls	r3, r3, #16
 8007f02:	431a      	orrs	r2, r3
 8007f04:	9b03      	ldr	r3, [sp, #12]
 8007f06:	9104      	str	r1, [sp, #16]
 8007f08:	c004      	stmia	r0!, {r2}
 8007f0a:	42bb      	cmp	r3, r7
 8007f0c:	d2dd      	bcs.n	8007eca <quorem+0x4e>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d02e      	beq.n	8007f72 <quorem+0xf6>
 8007f14:	0030      	movs	r0, r6
 8007f16:	9902      	ldr	r1, [sp, #8]
 8007f18:	f001 fb40 	bl	800959c <__mcmp>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	db21      	blt.n	8007f64 <quorem+0xe8>
 8007f20:	0030      	movs	r0, r6
 8007f22:	2400      	movs	r4, #0
 8007f24:	9b00      	ldr	r3, [sp, #0]
 8007f26:	9902      	ldr	r1, [sp, #8]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	3014      	adds	r0, #20
 8007f2e:	3114      	adds	r1, #20
 8007f30:	6802      	ldr	r2, [r0, #0]
 8007f32:	c908      	ldmia	r1!, {r3}
 8007f34:	b292      	uxth	r2, r2
 8007f36:	1914      	adds	r4, r2, r4
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	1aa2      	subs	r2, r4, r2
 8007f3c:	6804      	ldr	r4, [r0, #0]
 8007f3e:	0c1b      	lsrs	r3, r3, #16
 8007f40:	0c24      	lsrs	r4, r4, #16
 8007f42:	1ae3      	subs	r3, r4, r3
 8007f44:	1414      	asrs	r4, r2, #16
 8007f46:	191b      	adds	r3, r3, r4
 8007f48:	141c      	asrs	r4, r3, #16
 8007f4a:	b292      	uxth	r2, r2
 8007f4c:	041b      	lsls	r3, r3, #16
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	c008      	stmia	r0!, {r3}
 8007f52:	9b03      	ldr	r3, [sp, #12]
 8007f54:	428b      	cmp	r3, r1
 8007f56:	d2eb      	bcs.n	8007f30 <quorem+0xb4>
 8007f58:	9a01      	ldr	r2, [sp, #4]
 8007f5a:	00ab      	lsls	r3, r5, #2
 8007f5c:	18d3      	adds	r3, r2, r3
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	2a00      	cmp	r2, #0
 8007f62:	d010      	beq.n	8007f86 <quorem+0x10a>
 8007f64:	9800      	ldr	r0, [sp, #0]
 8007f66:	b007      	add	sp, #28
 8007f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d104      	bne.n	8007f7a <quorem+0xfe>
 8007f70:	3d01      	subs	r5, #1
 8007f72:	9b01      	ldr	r3, [sp, #4]
 8007f74:	3c04      	subs	r4, #4
 8007f76:	42a3      	cmp	r3, r4
 8007f78:	d3f7      	bcc.n	8007f6a <quorem+0xee>
 8007f7a:	6135      	str	r5, [r6, #16]
 8007f7c:	e7ca      	b.n	8007f14 <quorem+0x98>
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	2a00      	cmp	r2, #0
 8007f82:	d104      	bne.n	8007f8e <quorem+0x112>
 8007f84:	3d01      	subs	r5, #1
 8007f86:	9a01      	ldr	r2, [sp, #4]
 8007f88:	3b04      	subs	r3, #4
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d3f7      	bcc.n	8007f7e <quorem+0x102>
 8007f8e:	6135      	str	r5, [r6, #16]
 8007f90:	e7e8      	b.n	8007f64 <quorem+0xe8>
	...

08007f94 <_dtoa_r>:
 8007f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f96:	b09d      	sub	sp, #116	; 0x74
 8007f98:	9202      	str	r2, [sp, #8]
 8007f9a:	9303      	str	r3, [sp, #12]
 8007f9c:	9b02      	ldr	r3, [sp, #8]
 8007f9e:	9c03      	ldr	r4, [sp, #12]
 8007fa0:	930a      	str	r3, [sp, #40]	; 0x28
 8007fa2:	940b      	str	r4, [sp, #44]	; 0x2c
 8007fa4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007fa6:	0007      	movs	r7, r0
 8007fa8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007faa:	2c00      	cmp	r4, #0
 8007fac:	d10e      	bne.n	8007fcc <_dtoa_r+0x38>
 8007fae:	2010      	movs	r0, #16
 8007fb0:	f001 f850 	bl	8009054 <malloc>
 8007fb4:	1e02      	subs	r2, r0, #0
 8007fb6:	6278      	str	r0, [r7, #36]	; 0x24
 8007fb8:	d104      	bne.n	8007fc4 <_dtoa_r+0x30>
 8007fba:	21ea      	movs	r1, #234	; 0xea
 8007fbc:	4bc0      	ldr	r3, [pc, #768]	; (80082c0 <_dtoa_r+0x32c>)
 8007fbe:	48c1      	ldr	r0, [pc, #772]	; (80082c4 <_dtoa_r+0x330>)
 8007fc0:	f001 fe8e 	bl	8009ce0 <__assert_func>
 8007fc4:	6044      	str	r4, [r0, #4]
 8007fc6:	6084      	str	r4, [r0, #8]
 8007fc8:	6004      	str	r4, [r0, #0]
 8007fca:	60c4      	str	r4, [r0, #12]
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	6819      	ldr	r1, [r3, #0]
 8007fd0:	2900      	cmp	r1, #0
 8007fd2:	d00a      	beq.n	8007fea <_dtoa_r+0x56>
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	4093      	lsls	r3, r2
 8007fda:	604a      	str	r2, [r1, #4]
 8007fdc:	608b      	str	r3, [r1, #8]
 8007fde:	0038      	movs	r0, r7
 8007fe0:	f001 f89a 	bl	8009118 <_Bfree>
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	9b03      	ldr	r3, [sp, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	da21      	bge.n	8008034 <_dtoa_r+0xa0>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	602b      	str	r3, [r5, #0]
 8007ff4:	9b03      	ldr	r3, [sp, #12]
 8007ff6:	005b      	lsls	r3, r3, #1
 8007ff8:	085b      	lsrs	r3, r3, #1
 8007ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ffc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007ffe:	4bb2      	ldr	r3, [pc, #712]	; (80082c8 <_dtoa_r+0x334>)
 8008000:	002a      	movs	r2, r5
 8008002:	9318      	str	r3, [sp, #96]	; 0x60
 8008004:	401a      	ands	r2, r3
 8008006:	429a      	cmp	r2, r3
 8008008:	d117      	bne.n	800803a <_dtoa_r+0xa6>
 800800a:	4bb0      	ldr	r3, [pc, #704]	; (80082cc <_dtoa_r+0x338>)
 800800c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800800e:	0328      	lsls	r0, r5, #12
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	9b02      	ldr	r3, [sp, #8]
 8008014:	0b00      	lsrs	r0, r0, #12
 8008016:	4318      	orrs	r0, r3
 8008018:	d101      	bne.n	800801e <_dtoa_r+0x8a>
 800801a:	f000 fdc3 	bl	8008ba4 <_dtoa_r+0xc10>
 800801e:	48ac      	ldr	r0, [pc, #688]	; (80082d0 <_dtoa_r+0x33c>)
 8008020:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008022:	9005      	str	r0, [sp, #20]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <_dtoa_r+0x9a>
 8008028:	4baa      	ldr	r3, [pc, #680]	; (80082d4 <_dtoa_r+0x340>)
 800802a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	9805      	ldr	r0, [sp, #20]
 8008030:	b01d      	add	sp, #116	; 0x74
 8008032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008034:	2300      	movs	r3, #0
 8008036:	602b      	str	r3, [r5, #0]
 8008038:	e7e0      	b.n	8007ffc <_dtoa_r+0x68>
 800803a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800803c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800803e:	9312      	str	r3, [sp, #72]	; 0x48
 8008040:	9413      	str	r4, [sp, #76]	; 0x4c
 8008042:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008044:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008046:	2200      	movs	r2, #0
 8008048:	2300      	movs	r3, #0
 800804a:	f7f8 f9ff 	bl	800044c <__aeabi_dcmpeq>
 800804e:	1e04      	subs	r4, r0, #0
 8008050:	d00b      	beq.n	800806a <_dtoa_r+0xd6>
 8008052:	2301      	movs	r3, #1
 8008054:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	4b9f      	ldr	r3, [pc, #636]	; (80082d8 <_dtoa_r+0x344>)
 800805a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800805c:	9305      	str	r3, [sp, #20]
 800805e:	2a00      	cmp	r2, #0
 8008060:	d0e5      	beq.n	800802e <_dtoa_r+0x9a>
 8008062:	4a9e      	ldr	r2, [pc, #632]	; (80082dc <_dtoa_r+0x348>)
 8008064:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008066:	600a      	str	r2, [r1, #0]
 8008068:	e7e1      	b.n	800802e <_dtoa_r+0x9a>
 800806a:	ab1a      	add	r3, sp, #104	; 0x68
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	0038      	movs	r0, r7
 8008074:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008076:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008078:	f001 fb44 	bl	8009704 <__d2b>
 800807c:	006e      	lsls	r6, r5, #1
 800807e:	9004      	str	r0, [sp, #16]
 8008080:	0d76      	lsrs	r6, r6, #21
 8008082:	d100      	bne.n	8008086 <_dtoa_r+0xf2>
 8008084:	e07c      	b.n	8008180 <_dtoa_r+0x1ec>
 8008086:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008088:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800808a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800808c:	4a94      	ldr	r2, [pc, #592]	; (80082e0 <_dtoa_r+0x34c>)
 800808e:	031b      	lsls	r3, r3, #12
 8008090:	0b1b      	lsrs	r3, r3, #12
 8008092:	431a      	orrs	r2, r3
 8008094:	0011      	movs	r1, r2
 8008096:	4b93      	ldr	r3, [pc, #588]	; (80082e4 <_dtoa_r+0x350>)
 8008098:	9416      	str	r4, [sp, #88]	; 0x58
 800809a:	18f6      	adds	r6, r6, r3
 800809c:	2200      	movs	r2, #0
 800809e:	4b92      	ldr	r3, [pc, #584]	; (80082e8 <_dtoa_r+0x354>)
 80080a0:	f7f9 fcf2 	bl	8001a88 <__aeabi_dsub>
 80080a4:	4a91      	ldr	r2, [pc, #580]	; (80082ec <_dtoa_r+0x358>)
 80080a6:	4b92      	ldr	r3, [pc, #584]	; (80082f0 <_dtoa_r+0x35c>)
 80080a8:	f7f9 fa82 	bl	80015b0 <__aeabi_dmul>
 80080ac:	4a91      	ldr	r2, [pc, #580]	; (80082f4 <_dtoa_r+0x360>)
 80080ae:	4b92      	ldr	r3, [pc, #584]	; (80082f8 <_dtoa_r+0x364>)
 80080b0:	f7f8 fb0e 	bl	80006d0 <__aeabi_dadd>
 80080b4:	0004      	movs	r4, r0
 80080b6:	0030      	movs	r0, r6
 80080b8:	000d      	movs	r5, r1
 80080ba:	f7fa f8cb 	bl	8002254 <__aeabi_i2d>
 80080be:	4a8f      	ldr	r2, [pc, #572]	; (80082fc <_dtoa_r+0x368>)
 80080c0:	4b8f      	ldr	r3, [pc, #572]	; (8008300 <_dtoa_r+0x36c>)
 80080c2:	f7f9 fa75 	bl	80015b0 <__aeabi_dmul>
 80080c6:	0002      	movs	r2, r0
 80080c8:	000b      	movs	r3, r1
 80080ca:	0020      	movs	r0, r4
 80080cc:	0029      	movs	r1, r5
 80080ce:	f7f8 faff 	bl	80006d0 <__aeabi_dadd>
 80080d2:	0004      	movs	r4, r0
 80080d4:	000d      	movs	r5, r1
 80080d6:	f7fa f887 	bl	80021e8 <__aeabi_d2iz>
 80080da:	2200      	movs	r2, #0
 80080dc:	9002      	str	r0, [sp, #8]
 80080de:	2300      	movs	r3, #0
 80080e0:	0020      	movs	r0, r4
 80080e2:	0029      	movs	r1, r5
 80080e4:	f7f8 f9b8 	bl	8000458 <__aeabi_dcmplt>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d00b      	beq.n	8008104 <_dtoa_r+0x170>
 80080ec:	9802      	ldr	r0, [sp, #8]
 80080ee:	f7fa f8b1 	bl	8002254 <__aeabi_i2d>
 80080f2:	002b      	movs	r3, r5
 80080f4:	0022      	movs	r2, r4
 80080f6:	f7f8 f9a9 	bl	800044c <__aeabi_dcmpeq>
 80080fa:	4243      	negs	r3, r0
 80080fc:	4158      	adcs	r0, r3
 80080fe:	9b02      	ldr	r3, [sp, #8]
 8008100:	1a1b      	subs	r3, r3, r0
 8008102:	9302      	str	r3, [sp, #8]
 8008104:	2301      	movs	r3, #1
 8008106:	9315      	str	r3, [sp, #84]	; 0x54
 8008108:	9b02      	ldr	r3, [sp, #8]
 800810a:	2b16      	cmp	r3, #22
 800810c:	d80f      	bhi.n	800812e <_dtoa_r+0x19a>
 800810e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008110:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008112:	00da      	lsls	r2, r3, #3
 8008114:	4b7b      	ldr	r3, [pc, #492]	; (8008304 <_dtoa_r+0x370>)
 8008116:	189b      	adds	r3, r3, r2
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f7f8 f99c 	bl	8000458 <__aeabi_dcmplt>
 8008120:	2800      	cmp	r0, #0
 8008122:	d049      	beq.n	80081b8 <_dtoa_r+0x224>
 8008124:	9b02      	ldr	r3, [sp, #8]
 8008126:	3b01      	subs	r3, #1
 8008128:	9302      	str	r3, [sp, #8]
 800812a:	2300      	movs	r3, #0
 800812c:	9315      	str	r3, [sp, #84]	; 0x54
 800812e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008130:	1b9e      	subs	r6, r3, r6
 8008132:	2300      	movs	r3, #0
 8008134:	9308      	str	r3, [sp, #32]
 8008136:	0033      	movs	r3, r6
 8008138:	3b01      	subs	r3, #1
 800813a:	930d      	str	r3, [sp, #52]	; 0x34
 800813c:	d504      	bpl.n	8008148 <_dtoa_r+0x1b4>
 800813e:	2301      	movs	r3, #1
 8008140:	1b9b      	subs	r3, r3, r6
 8008142:	9308      	str	r3, [sp, #32]
 8008144:	2300      	movs	r3, #0
 8008146:	930d      	str	r3, [sp, #52]	; 0x34
 8008148:	9b02      	ldr	r3, [sp, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	db36      	blt.n	80081bc <_dtoa_r+0x228>
 800814e:	9a02      	ldr	r2, [sp, #8]
 8008150:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008152:	4694      	mov	ip, r2
 8008154:	4463      	add	r3, ip
 8008156:	930d      	str	r3, [sp, #52]	; 0x34
 8008158:	2300      	movs	r3, #0
 800815a:	9214      	str	r2, [sp, #80]	; 0x50
 800815c:	930e      	str	r3, [sp, #56]	; 0x38
 800815e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008160:	2401      	movs	r4, #1
 8008162:	2b09      	cmp	r3, #9
 8008164:	d862      	bhi.n	800822c <_dtoa_r+0x298>
 8008166:	2b05      	cmp	r3, #5
 8008168:	dd02      	ble.n	8008170 <_dtoa_r+0x1dc>
 800816a:	2400      	movs	r4, #0
 800816c:	3b04      	subs	r3, #4
 800816e:	9322      	str	r3, [sp, #136]	; 0x88
 8008170:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008172:	1e98      	subs	r0, r3, #2
 8008174:	2803      	cmp	r0, #3
 8008176:	d862      	bhi.n	800823e <_dtoa_r+0x2aa>
 8008178:	f7f7 ffce 	bl	8000118 <__gnu_thumb1_case_uqi>
 800817c:	56343629 	.word	0x56343629
 8008180:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008182:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008184:	189e      	adds	r6, r3, r2
 8008186:	4b60      	ldr	r3, [pc, #384]	; (8008308 <_dtoa_r+0x374>)
 8008188:	18f2      	adds	r2, r6, r3
 800818a:	2a20      	cmp	r2, #32
 800818c:	dd0f      	ble.n	80081ae <_dtoa_r+0x21a>
 800818e:	2340      	movs	r3, #64	; 0x40
 8008190:	1a9b      	subs	r3, r3, r2
 8008192:	409d      	lsls	r5, r3
 8008194:	4b5d      	ldr	r3, [pc, #372]	; (800830c <_dtoa_r+0x378>)
 8008196:	9802      	ldr	r0, [sp, #8]
 8008198:	18f3      	adds	r3, r6, r3
 800819a:	40d8      	lsrs	r0, r3
 800819c:	4328      	orrs	r0, r5
 800819e:	f7fa f889 	bl	80022b4 <__aeabi_ui2d>
 80081a2:	2301      	movs	r3, #1
 80081a4:	4c5a      	ldr	r4, [pc, #360]	; (8008310 <_dtoa_r+0x37c>)
 80081a6:	3e01      	subs	r6, #1
 80081a8:	1909      	adds	r1, r1, r4
 80081aa:	9316      	str	r3, [sp, #88]	; 0x58
 80081ac:	e776      	b.n	800809c <_dtoa_r+0x108>
 80081ae:	2320      	movs	r3, #32
 80081b0:	9802      	ldr	r0, [sp, #8]
 80081b2:	1a9b      	subs	r3, r3, r2
 80081b4:	4098      	lsls	r0, r3
 80081b6:	e7f2      	b.n	800819e <_dtoa_r+0x20a>
 80081b8:	9015      	str	r0, [sp, #84]	; 0x54
 80081ba:	e7b8      	b.n	800812e <_dtoa_r+0x19a>
 80081bc:	9b08      	ldr	r3, [sp, #32]
 80081be:	9a02      	ldr	r2, [sp, #8]
 80081c0:	1a9b      	subs	r3, r3, r2
 80081c2:	9308      	str	r3, [sp, #32]
 80081c4:	4253      	negs	r3, r2
 80081c6:	930e      	str	r3, [sp, #56]	; 0x38
 80081c8:	2300      	movs	r3, #0
 80081ca:	9314      	str	r3, [sp, #80]	; 0x50
 80081cc:	e7c7      	b.n	800815e <_dtoa_r+0x1ca>
 80081ce:	2300      	movs	r3, #0
 80081d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80081d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	dc36      	bgt.n	8008246 <_dtoa_r+0x2b2>
 80081d8:	2301      	movs	r3, #1
 80081da:	001a      	movs	r2, r3
 80081dc:	930c      	str	r3, [sp, #48]	; 0x30
 80081de:	9306      	str	r3, [sp, #24]
 80081e0:	9223      	str	r2, [sp, #140]	; 0x8c
 80081e2:	e00d      	b.n	8008200 <_dtoa_r+0x26c>
 80081e4:	2301      	movs	r3, #1
 80081e6:	e7f3      	b.n	80081d0 <_dtoa_r+0x23c>
 80081e8:	2300      	movs	r3, #0
 80081ea:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80081ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80081ee:	4694      	mov	ip, r2
 80081f0:	9b02      	ldr	r3, [sp, #8]
 80081f2:	4463      	add	r3, ip
 80081f4:	930c      	str	r3, [sp, #48]	; 0x30
 80081f6:	3301      	adds	r3, #1
 80081f8:	9306      	str	r3, [sp, #24]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	dc00      	bgt.n	8008200 <_dtoa_r+0x26c>
 80081fe:	2301      	movs	r3, #1
 8008200:	2200      	movs	r2, #0
 8008202:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008204:	6042      	str	r2, [r0, #4]
 8008206:	3204      	adds	r2, #4
 8008208:	0015      	movs	r5, r2
 800820a:	3514      	adds	r5, #20
 800820c:	6841      	ldr	r1, [r0, #4]
 800820e:	429d      	cmp	r5, r3
 8008210:	d91d      	bls.n	800824e <_dtoa_r+0x2ba>
 8008212:	0038      	movs	r0, r7
 8008214:	f000 ff3c 	bl	8009090 <_Balloc>
 8008218:	9005      	str	r0, [sp, #20]
 800821a:	2800      	cmp	r0, #0
 800821c:	d11b      	bne.n	8008256 <_dtoa_r+0x2c2>
 800821e:	21d5      	movs	r1, #213	; 0xd5
 8008220:	0002      	movs	r2, r0
 8008222:	4b3c      	ldr	r3, [pc, #240]	; (8008314 <_dtoa_r+0x380>)
 8008224:	0049      	lsls	r1, r1, #1
 8008226:	e6ca      	b.n	8007fbe <_dtoa_r+0x2a>
 8008228:	2301      	movs	r3, #1
 800822a:	e7de      	b.n	80081ea <_dtoa_r+0x256>
 800822c:	2300      	movs	r3, #0
 800822e:	940f      	str	r4, [sp, #60]	; 0x3c
 8008230:	9322      	str	r3, [sp, #136]	; 0x88
 8008232:	3b01      	subs	r3, #1
 8008234:	930c      	str	r3, [sp, #48]	; 0x30
 8008236:	9306      	str	r3, [sp, #24]
 8008238:	2200      	movs	r2, #0
 800823a:	3313      	adds	r3, #19
 800823c:	e7d0      	b.n	80081e0 <_dtoa_r+0x24c>
 800823e:	2301      	movs	r3, #1
 8008240:	930f      	str	r3, [sp, #60]	; 0x3c
 8008242:	3b02      	subs	r3, #2
 8008244:	e7f6      	b.n	8008234 <_dtoa_r+0x2a0>
 8008246:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008248:	930c      	str	r3, [sp, #48]	; 0x30
 800824a:	9306      	str	r3, [sp, #24]
 800824c:	e7d8      	b.n	8008200 <_dtoa_r+0x26c>
 800824e:	3101      	adds	r1, #1
 8008250:	6041      	str	r1, [r0, #4]
 8008252:	0052      	lsls	r2, r2, #1
 8008254:	e7d8      	b.n	8008208 <_dtoa_r+0x274>
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	9a05      	ldr	r2, [sp, #20]
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	9b06      	ldr	r3, [sp, #24]
 800825e:	2b0e      	cmp	r3, #14
 8008260:	d900      	bls.n	8008264 <_dtoa_r+0x2d0>
 8008262:	e0eb      	b.n	800843c <_dtoa_r+0x4a8>
 8008264:	2c00      	cmp	r4, #0
 8008266:	d100      	bne.n	800826a <_dtoa_r+0x2d6>
 8008268:	e0e8      	b.n	800843c <_dtoa_r+0x4a8>
 800826a:	9b02      	ldr	r3, [sp, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	dd68      	ble.n	8008342 <_dtoa_r+0x3ae>
 8008270:	001a      	movs	r2, r3
 8008272:	210f      	movs	r1, #15
 8008274:	4b23      	ldr	r3, [pc, #140]	; (8008304 <_dtoa_r+0x370>)
 8008276:	400a      	ands	r2, r1
 8008278:	00d2      	lsls	r2, r2, #3
 800827a:	189b      	adds	r3, r3, r2
 800827c:	681d      	ldr	r5, [r3, #0]
 800827e:	685e      	ldr	r6, [r3, #4]
 8008280:	9b02      	ldr	r3, [sp, #8]
 8008282:	111c      	asrs	r4, r3, #4
 8008284:	2302      	movs	r3, #2
 8008286:	9310      	str	r3, [sp, #64]	; 0x40
 8008288:	9b02      	ldr	r3, [sp, #8]
 800828a:	05db      	lsls	r3, r3, #23
 800828c:	d50b      	bpl.n	80082a6 <_dtoa_r+0x312>
 800828e:	4b22      	ldr	r3, [pc, #136]	; (8008318 <_dtoa_r+0x384>)
 8008290:	400c      	ands	r4, r1
 8008292:	6a1a      	ldr	r2, [r3, #32]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008298:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800829a:	f7f8 fd83 	bl	8000da4 <__aeabi_ddiv>
 800829e:	2303      	movs	r3, #3
 80082a0:	900a      	str	r0, [sp, #40]	; 0x28
 80082a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80082a4:	9310      	str	r3, [sp, #64]	; 0x40
 80082a6:	4b1c      	ldr	r3, [pc, #112]	; (8008318 <_dtoa_r+0x384>)
 80082a8:	9307      	str	r3, [sp, #28]
 80082aa:	2c00      	cmp	r4, #0
 80082ac:	d136      	bne.n	800831c <_dtoa_r+0x388>
 80082ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80082b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082b2:	002a      	movs	r2, r5
 80082b4:	0033      	movs	r3, r6
 80082b6:	f7f8 fd75 	bl	8000da4 <__aeabi_ddiv>
 80082ba:	900a      	str	r0, [sp, #40]	; 0x28
 80082bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80082be:	e05c      	b.n	800837a <_dtoa_r+0x3e6>
 80082c0:	0800a7d9 	.word	0x0800a7d9
 80082c4:	0800a7f0 	.word	0x0800a7f0
 80082c8:	7ff00000 	.word	0x7ff00000
 80082cc:	0000270f 	.word	0x0000270f
 80082d0:	0800a7d5 	.word	0x0800a7d5
 80082d4:	0800a7d8 	.word	0x0800a7d8
 80082d8:	0800a7a8 	.word	0x0800a7a8
 80082dc:	0800a7a9 	.word	0x0800a7a9
 80082e0:	3ff00000 	.word	0x3ff00000
 80082e4:	fffffc01 	.word	0xfffffc01
 80082e8:	3ff80000 	.word	0x3ff80000
 80082ec:	636f4361 	.word	0x636f4361
 80082f0:	3fd287a7 	.word	0x3fd287a7
 80082f4:	8b60c8b3 	.word	0x8b60c8b3
 80082f8:	3fc68a28 	.word	0x3fc68a28
 80082fc:	509f79fb 	.word	0x509f79fb
 8008300:	3fd34413 	.word	0x3fd34413
 8008304:	0800a948 	.word	0x0800a948
 8008308:	00000432 	.word	0x00000432
 800830c:	00000412 	.word	0x00000412
 8008310:	fe100000 	.word	0xfe100000
 8008314:	0800a84f 	.word	0x0800a84f
 8008318:	0800a920 	.word	0x0800a920
 800831c:	2301      	movs	r3, #1
 800831e:	421c      	tst	r4, r3
 8008320:	d00b      	beq.n	800833a <_dtoa_r+0x3a6>
 8008322:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008324:	0028      	movs	r0, r5
 8008326:	3301      	adds	r3, #1
 8008328:	9310      	str	r3, [sp, #64]	; 0x40
 800832a:	9b07      	ldr	r3, [sp, #28]
 800832c:	0031      	movs	r1, r6
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f7f9 f93d 	bl	80015b0 <__aeabi_dmul>
 8008336:	0005      	movs	r5, r0
 8008338:	000e      	movs	r6, r1
 800833a:	9b07      	ldr	r3, [sp, #28]
 800833c:	1064      	asrs	r4, r4, #1
 800833e:	3308      	adds	r3, #8
 8008340:	e7b2      	b.n	80082a8 <_dtoa_r+0x314>
 8008342:	2302      	movs	r3, #2
 8008344:	9310      	str	r3, [sp, #64]	; 0x40
 8008346:	9b02      	ldr	r3, [sp, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d016      	beq.n	800837a <_dtoa_r+0x3e6>
 800834c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800834e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008350:	425c      	negs	r4, r3
 8008352:	230f      	movs	r3, #15
 8008354:	4ab5      	ldr	r2, [pc, #724]	; (800862c <_dtoa_r+0x698>)
 8008356:	4023      	ands	r3, r4
 8008358:	00db      	lsls	r3, r3, #3
 800835a:	18d3      	adds	r3, r2, r3
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f7f9 f926 	bl	80015b0 <__aeabi_dmul>
 8008364:	2601      	movs	r6, #1
 8008366:	2300      	movs	r3, #0
 8008368:	900a      	str	r0, [sp, #40]	; 0x28
 800836a:	910b      	str	r1, [sp, #44]	; 0x2c
 800836c:	4db0      	ldr	r5, [pc, #704]	; (8008630 <_dtoa_r+0x69c>)
 800836e:	1124      	asrs	r4, r4, #4
 8008370:	2c00      	cmp	r4, #0
 8008372:	d000      	beq.n	8008376 <_dtoa_r+0x3e2>
 8008374:	e094      	b.n	80084a0 <_dtoa_r+0x50c>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d19f      	bne.n	80082ba <_dtoa_r+0x326>
 800837a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800837c:	2b00      	cmp	r3, #0
 800837e:	d100      	bne.n	8008382 <_dtoa_r+0x3ee>
 8008380:	e09b      	b.n	80084ba <_dtoa_r+0x526>
 8008382:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008384:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008386:	2200      	movs	r2, #0
 8008388:	0020      	movs	r0, r4
 800838a:	0029      	movs	r1, r5
 800838c:	4ba9      	ldr	r3, [pc, #676]	; (8008634 <_dtoa_r+0x6a0>)
 800838e:	f7f8 f863 	bl	8000458 <__aeabi_dcmplt>
 8008392:	2800      	cmp	r0, #0
 8008394:	d100      	bne.n	8008398 <_dtoa_r+0x404>
 8008396:	e090      	b.n	80084ba <_dtoa_r+0x526>
 8008398:	9b06      	ldr	r3, [sp, #24]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d100      	bne.n	80083a0 <_dtoa_r+0x40c>
 800839e:	e08c      	b.n	80084ba <_dtoa_r+0x526>
 80083a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	dd46      	ble.n	8008434 <_dtoa_r+0x4a0>
 80083a6:	9b02      	ldr	r3, [sp, #8]
 80083a8:	2200      	movs	r2, #0
 80083aa:	0020      	movs	r0, r4
 80083ac:	0029      	movs	r1, r5
 80083ae:	1e5e      	subs	r6, r3, #1
 80083b0:	4ba1      	ldr	r3, [pc, #644]	; (8008638 <_dtoa_r+0x6a4>)
 80083b2:	f7f9 f8fd 	bl	80015b0 <__aeabi_dmul>
 80083b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083b8:	900a      	str	r0, [sp, #40]	; 0x28
 80083ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80083bc:	3301      	adds	r3, #1
 80083be:	9310      	str	r3, [sp, #64]	; 0x40
 80083c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083c2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80083c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80083c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80083c8:	9307      	str	r3, [sp, #28]
 80083ca:	f7f9 ff43 	bl	8002254 <__aeabi_i2d>
 80083ce:	0022      	movs	r2, r4
 80083d0:	002b      	movs	r3, r5
 80083d2:	f7f9 f8ed 	bl	80015b0 <__aeabi_dmul>
 80083d6:	2200      	movs	r2, #0
 80083d8:	4b98      	ldr	r3, [pc, #608]	; (800863c <_dtoa_r+0x6a8>)
 80083da:	f7f8 f979 	bl	80006d0 <__aeabi_dadd>
 80083de:	9010      	str	r0, [sp, #64]	; 0x40
 80083e0:	9111      	str	r1, [sp, #68]	; 0x44
 80083e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083e6:	920a      	str	r2, [sp, #40]	; 0x28
 80083e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80083ea:	4a95      	ldr	r2, [pc, #596]	; (8008640 <_dtoa_r+0x6ac>)
 80083ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083ee:	4694      	mov	ip, r2
 80083f0:	4463      	add	r3, ip
 80083f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80083f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80083f6:	9b07      	ldr	r3, [sp, #28]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d161      	bne.n	80084c0 <_dtoa_r+0x52c>
 80083fc:	2200      	movs	r2, #0
 80083fe:	0020      	movs	r0, r4
 8008400:	0029      	movs	r1, r5
 8008402:	4b90      	ldr	r3, [pc, #576]	; (8008644 <_dtoa_r+0x6b0>)
 8008404:	f7f9 fb40 	bl	8001a88 <__aeabi_dsub>
 8008408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800840a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800840c:	0004      	movs	r4, r0
 800840e:	000d      	movs	r5, r1
 8008410:	f7f8 f836 	bl	8000480 <__aeabi_dcmpgt>
 8008414:	2800      	cmp	r0, #0
 8008416:	d000      	beq.n	800841a <_dtoa_r+0x486>
 8008418:	e2b5      	b.n	8008986 <_dtoa_r+0x9f2>
 800841a:	488b      	ldr	r0, [pc, #556]	; (8008648 <_dtoa_r+0x6b4>)
 800841c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800841e:	4684      	mov	ip, r0
 8008420:	4461      	add	r1, ip
 8008422:	000b      	movs	r3, r1
 8008424:	0020      	movs	r0, r4
 8008426:	0029      	movs	r1, r5
 8008428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800842a:	f7f8 f815 	bl	8000458 <__aeabi_dcmplt>
 800842e:	2800      	cmp	r0, #0
 8008430:	d000      	beq.n	8008434 <_dtoa_r+0x4a0>
 8008432:	e2a5      	b.n	8008980 <_dtoa_r+0x9ec>
 8008434:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008436:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008438:	930a      	str	r3, [sp, #40]	; 0x28
 800843a:	940b      	str	r4, [sp, #44]	; 0x2c
 800843c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800843e:	2b00      	cmp	r3, #0
 8008440:	da00      	bge.n	8008444 <_dtoa_r+0x4b0>
 8008442:	e171      	b.n	8008728 <_dtoa_r+0x794>
 8008444:	9a02      	ldr	r2, [sp, #8]
 8008446:	2a0e      	cmp	r2, #14
 8008448:	dd00      	ble.n	800844c <_dtoa_r+0x4b8>
 800844a:	e16d      	b.n	8008728 <_dtoa_r+0x794>
 800844c:	4b77      	ldr	r3, [pc, #476]	; (800862c <_dtoa_r+0x698>)
 800844e:	00d2      	lsls	r2, r2, #3
 8008450:	189b      	adds	r3, r3, r2
 8008452:	685c      	ldr	r4, [r3, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	9308      	str	r3, [sp, #32]
 8008458:	9409      	str	r4, [sp, #36]	; 0x24
 800845a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800845c:	2b00      	cmp	r3, #0
 800845e:	db00      	blt.n	8008462 <_dtoa_r+0x4ce>
 8008460:	e0f6      	b.n	8008650 <_dtoa_r+0x6bc>
 8008462:	9b06      	ldr	r3, [sp, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	dd00      	ble.n	800846a <_dtoa_r+0x4d6>
 8008468:	e0f2      	b.n	8008650 <_dtoa_r+0x6bc>
 800846a:	d000      	beq.n	800846e <_dtoa_r+0x4da>
 800846c:	e288      	b.n	8008980 <_dtoa_r+0x9ec>
 800846e:	9808      	ldr	r0, [sp, #32]
 8008470:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008472:	2200      	movs	r2, #0
 8008474:	4b73      	ldr	r3, [pc, #460]	; (8008644 <_dtoa_r+0x6b0>)
 8008476:	f7f9 f89b 	bl	80015b0 <__aeabi_dmul>
 800847a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800847c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800847e:	f7f8 f809 	bl	8000494 <__aeabi_dcmpge>
 8008482:	9e06      	ldr	r6, [sp, #24]
 8008484:	0035      	movs	r5, r6
 8008486:	2800      	cmp	r0, #0
 8008488:	d000      	beq.n	800848c <_dtoa_r+0x4f8>
 800848a:	e25f      	b.n	800894c <_dtoa_r+0x9b8>
 800848c:	9b05      	ldr	r3, [sp, #20]
 800848e:	9a05      	ldr	r2, [sp, #20]
 8008490:	3301      	adds	r3, #1
 8008492:	9307      	str	r3, [sp, #28]
 8008494:	2331      	movs	r3, #49	; 0x31
 8008496:	7013      	strb	r3, [r2, #0]
 8008498:	9b02      	ldr	r3, [sp, #8]
 800849a:	3301      	adds	r3, #1
 800849c:	9302      	str	r3, [sp, #8]
 800849e:	e25a      	b.n	8008956 <_dtoa_r+0x9c2>
 80084a0:	4234      	tst	r4, r6
 80084a2:	d007      	beq.n	80084b4 <_dtoa_r+0x520>
 80084a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084a6:	3301      	adds	r3, #1
 80084a8:	9310      	str	r3, [sp, #64]	; 0x40
 80084aa:	682a      	ldr	r2, [r5, #0]
 80084ac:	686b      	ldr	r3, [r5, #4]
 80084ae:	f7f9 f87f 	bl	80015b0 <__aeabi_dmul>
 80084b2:	0033      	movs	r3, r6
 80084b4:	1064      	asrs	r4, r4, #1
 80084b6:	3508      	adds	r5, #8
 80084b8:	e75a      	b.n	8008370 <_dtoa_r+0x3dc>
 80084ba:	9e02      	ldr	r6, [sp, #8]
 80084bc:	9b06      	ldr	r3, [sp, #24]
 80084be:	e780      	b.n	80083c2 <_dtoa_r+0x42e>
 80084c0:	9b07      	ldr	r3, [sp, #28]
 80084c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80084c4:	1e5a      	subs	r2, r3, #1
 80084c6:	4b59      	ldr	r3, [pc, #356]	; (800862c <_dtoa_r+0x698>)
 80084c8:	00d2      	lsls	r2, r2, #3
 80084ca:	189b      	adds	r3, r3, r2
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	2900      	cmp	r1, #0
 80084d2:	d051      	beq.n	8008578 <_dtoa_r+0x5e4>
 80084d4:	2000      	movs	r0, #0
 80084d6:	495d      	ldr	r1, [pc, #372]	; (800864c <_dtoa_r+0x6b8>)
 80084d8:	f7f8 fc64 	bl	8000da4 <__aeabi_ddiv>
 80084dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084e0:	f7f9 fad2 	bl	8001a88 <__aeabi_dsub>
 80084e4:	9a05      	ldr	r2, [sp, #20]
 80084e6:	9b05      	ldr	r3, [sp, #20]
 80084e8:	4694      	mov	ip, r2
 80084ea:	9310      	str	r3, [sp, #64]	; 0x40
 80084ec:	9b07      	ldr	r3, [sp, #28]
 80084ee:	900a      	str	r0, [sp, #40]	; 0x28
 80084f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80084f2:	4463      	add	r3, ip
 80084f4:	9319      	str	r3, [sp, #100]	; 0x64
 80084f6:	0029      	movs	r1, r5
 80084f8:	0020      	movs	r0, r4
 80084fa:	f7f9 fe75 	bl	80021e8 <__aeabi_d2iz>
 80084fe:	9017      	str	r0, [sp, #92]	; 0x5c
 8008500:	f7f9 fea8 	bl	8002254 <__aeabi_i2d>
 8008504:	0002      	movs	r2, r0
 8008506:	000b      	movs	r3, r1
 8008508:	0020      	movs	r0, r4
 800850a:	0029      	movs	r1, r5
 800850c:	f7f9 fabc 	bl	8001a88 <__aeabi_dsub>
 8008510:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008512:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008514:	3301      	adds	r3, #1
 8008516:	9307      	str	r3, [sp, #28]
 8008518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800851a:	0004      	movs	r4, r0
 800851c:	3330      	adds	r3, #48	; 0x30
 800851e:	7013      	strb	r3, [r2, #0]
 8008520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008524:	000d      	movs	r5, r1
 8008526:	f7f7 ff97 	bl	8000458 <__aeabi_dcmplt>
 800852a:	2800      	cmp	r0, #0
 800852c:	d175      	bne.n	800861a <_dtoa_r+0x686>
 800852e:	0022      	movs	r2, r4
 8008530:	002b      	movs	r3, r5
 8008532:	2000      	movs	r0, #0
 8008534:	493f      	ldr	r1, [pc, #252]	; (8008634 <_dtoa_r+0x6a0>)
 8008536:	f7f9 faa7 	bl	8001a88 <__aeabi_dsub>
 800853a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800853c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800853e:	f7f7 ff8b 	bl	8000458 <__aeabi_dcmplt>
 8008542:	2800      	cmp	r0, #0
 8008544:	d000      	beq.n	8008548 <_dtoa_r+0x5b4>
 8008546:	e0d1      	b.n	80086ec <_dtoa_r+0x758>
 8008548:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800854a:	9a07      	ldr	r2, [sp, #28]
 800854c:	4293      	cmp	r3, r2
 800854e:	d100      	bne.n	8008552 <_dtoa_r+0x5be>
 8008550:	e770      	b.n	8008434 <_dtoa_r+0x4a0>
 8008552:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008554:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008556:	2200      	movs	r2, #0
 8008558:	4b37      	ldr	r3, [pc, #220]	; (8008638 <_dtoa_r+0x6a4>)
 800855a:	f7f9 f829 	bl	80015b0 <__aeabi_dmul>
 800855e:	4b36      	ldr	r3, [pc, #216]	; (8008638 <_dtoa_r+0x6a4>)
 8008560:	900a      	str	r0, [sp, #40]	; 0x28
 8008562:	910b      	str	r1, [sp, #44]	; 0x2c
 8008564:	2200      	movs	r2, #0
 8008566:	0020      	movs	r0, r4
 8008568:	0029      	movs	r1, r5
 800856a:	f7f9 f821 	bl	80015b0 <__aeabi_dmul>
 800856e:	9b07      	ldr	r3, [sp, #28]
 8008570:	0004      	movs	r4, r0
 8008572:	000d      	movs	r5, r1
 8008574:	9310      	str	r3, [sp, #64]	; 0x40
 8008576:	e7be      	b.n	80084f6 <_dtoa_r+0x562>
 8008578:	980a      	ldr	r0, [sp, #40]	; 0x28
 800857a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800857c:	f7f9 f818 	bl	80015b0 <__aeabi_dmul>
 8008580:	9a05      	ldr	r2, [sp, #20]
 8008582:	9b05      	ldr	r3, [sp, #20]
 8008584:	4694      	mov	ip, r2
 8008586:	930a      	str	r3, [sp, #40]	; 0x28
 8008588:	9b07      	ldr	r3, [sp, #28]
 800858a:	9010      	str	r0, [sp, #64]	; 0x40
 800858c:	9111      	str	r1, [sp, #68]	; 0x44
 800858e:	4463      	add	r3, ip
 8008590:	9319      	str	r3, [sp, #100]	; 0x64
 8008592:	0029      	movs	r1, r5
 8008594:	0020      	movs	r0, r4
 8008596:	f7f9 fe27 	bl	80021e8 <__aeabi_d2iz>
 800859a:	9017      	str	r0, [sp, #92]	; 0x5c
 800859c:	f7f9 fe5a 	bl	8002254 <__aeabi_i2d>
 80085a0:	0002      	movs	r2, r0
 80085a2:	000b      	movs	r3, r1
 80085a4:	0020      	movs	r0, r4
 80085a6:	0029      	movs	r1, r5
 80085a8:	f7f9 fa6e 	bl	8001a88 <__aeabi_dsub>
 80085ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085b0:	3330      	adds	r3, #48	; 0x30
 80085b2:	7013      	strb	r3, [r2, #0]
 80085b4:	0013      	movs	r3, r2
 80085b6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80085b8:	3301      	adds	r3, #1
 80085ba:	0004      	movs	r4, r0
 80085bc:	000d      	movs	r5, r1
 80085be:	930a      	str	r3, [sp, #40]	; 0x28
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d12c      	bne.n	800861e <_dtoa_r+0x68a>
 80085c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80085c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80085c8:	9a05      	ldr	r2, [sp, #20]
 80085ca:	9b07      	ldr	r3, [sp, #28]
 80085cc:	4694      	mov	ip, r2
 80085ce:	4463      	add	r3, ip
 80085d0:	2200      	movs	r2, #0
 80085d2:	9307      	str	r3, [sp, #28]
 80085d4:	4b1d      	ldr	r3, [pc, #116]	; (800864c <_dtoa_r+0x6b8>)
 80085d6:	f7f8 f87b 	bl	80006d0 <__aeabi_dadd>
 80085da:	0002      	movs	r2, r0
 80085dc:	000b      	movs	r3, r1
 80085de:	0020      	movs	r0, r4
 80085e0:	0029      	movs	r1, r5
 80085e2:	f7f7 ff4d 	bl	8000480 <__aeabi_dcmpgt>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d000      	beq.n	80085ec <_dtoa_r+0x658>
 80085ea:	e07f      	b.n	80086ec <_dtoa_r+0x758>
 80085ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80085ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085f0:	2000      	movs	r0, #0
 80085f2:	4916      	ldr	r1, [pc, #88]	; (800864c <_dtoa_r+0x6b8>)
 80085f4:	f7f9 fa48 	bl	8001a88 <__aeabi_dsub>
 80085f8:	0002      	movs	r2, r0
 80085fa:	000b      	movs	r3, r1
 80085fc:	0020      	movs	r0, r4
 80085fe:	0029      	movs	r1, r5
 8008600:	f7f7 ff2a 	bl	8000458 <__aeabi_dcmplt>
 8008604:	2800      	cmp	r0, #0
 8008606:	d100      	bne.n	800860a <_dtoa_r+0x676>
 8008608:	e714      	b.n	8008434 <_dtoa_r+0x4a0>
 800860a:	9b07      	ldr	r3, [sp, #28]
 800860c:	001a      	movs	r2, r3
 800860e:	3a01      	subs	r2, #1
 8008610:	9207      	str	r2, [sp, #28]
 8008612:	7812      	ldrb	r2, [r2, #0]
 8008614:	2a30      	cmp	r2, #48	; 0x30
 8008616:	d0f8      	beq.n	800860a <_dtoa_r+0x676>
 8008618:	9307      	str	r3, [sp, #28]
 800861a:	9602      	str	r6, [sp, #8]
 800861c:	e054      	b.n	80086c8 <_dtoa_r+0x734>
 800861e:	2200      	movs	r2, #0
 8008620:	4b05      	ldr	r3, [pc, #20]	; (8008638 <_dtoa_r+0x6a4>)
 8008622:	f7f8 ffc5 	bl	80015b0 <__aeabi_dmul>
 8008626:	0004      	movs	r4, r0
 8008628:	000d      	movs	r5, r1
 800862a:	e7b2      	b.n	8008592 <_dtoa_r+0x5fe>
 800862c:	0800a948 	.word	0x0800a948
 8008630:	0800a920 	.word	0x0800a920
 8008634:	3ff00000 	.word	0x3ff00000
 8008638:	40240000 	.word	0x40240000
 800863c:	401c0000 	.word	0x401c0000
 8008640:	fcc00000 	.word	0xfcc00000
 8008644:	40140000 	.word	0x40140000
 8008648:	7cc00000 	.word	0x7cc00000
 800864c:	3fe00000 	.word	0x3fe00000
 8008650:	9b06      	ldr	r3, [sp, #24]
 8008652:	9e05      	ldr	r6, [sp, #20]
 8008654:	3b01      	subs	r3, #1
 8008656:	199b      	adds	r3, r3, r6
 8008658:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800865a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800865c:	930a      	str	r3, [sp, #40]	; 0x28
 800865e:	9a08      	ldr	r2, [sp, #32]
 8008660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008662:	0020      	movs	r0, r4
 8008664:	0029      	movs	r1, r5
 8008666:	f7f8 fb9d 	bl	8000da4 <__aeabi_ddiv>
 800866a:	f7f9 fdbd 	bl	80021e8 <__aeabi_d2iz>
 800866e:	9006      	str	r0, [sp, #24]
 8008670:	f7f9 fdf0 	bl	8002254 <__aeabi_i2d>
 8008674:	9a08      	ldr	r2, [sp, #32]
 8008676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008678:	f7f8 ff9a 	bl	80015b0 <__aeabi_dmul>
 800867c:	0002      	movs	r2, r0
 800867e:	000b      	movs	r3, r1
 8008680:	0020      	movs	r0, r4
 8008682:	0029      	movs	r1, r5
 8008684:	f7f9 fa00 	bl	8001a88 <__aeabi_dsub>
 8008688:	0033      	movs	r3, r6
 800868a:	9a06      	ldr	r2, [sp, #24]
 800868c:	3601      	adds	r6, #1
 800868e:	3230      	adds	r2, #48	; 0x30
 8008690:	701a      	strb	r2, [r3, #0]
 8008692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008694:	9607      	str	r6, [sp, #28]
 8008696:	429a      	cmp	r2, r3
 8008698:	d139      	bne.n	800870e <_dtoa_r+0x77a>
 800869a:	0002      	movs	r2, r0
 800869c:	000b      	movs	r3, r1
 800869e:	f7f8 f817 	bl	80006d0 <__aeabi_dadd>
 80086a2:	9a08      	ldr	r2, [sp, #32]
 80086a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086a6:	0004      	movs	r4, r0
 80086a8:	000d      	movs	r5, r1
 80086aa:	f7f7 fee9 	bl	8000480 <__aeabi_dcmpgt>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d11b      	bne.n	80086ea <_dtoa_r+0x756>
 80086b2:	9a08      	ldr	r2, [sp, #32]
 80086b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b6:	0020      	movs	r0, r4
 80086b8:	0029      	movs	r1, r5
 80086ba:	f7f7 fec7 	bl	800044c <__aeabi_dcmpeq>
 80086be:	2800      	cmp	r0, #0
 80086c0:	d002      	beq.n	80086c8 <_dtoa_r+0x734>
 80086c2:	9b06      	ldr	r3, [sp, #24]
 80086c4:	07db      	lsls	r3, r3, #31
 80086c6:	d410      	bmi.n	80086ea <_dtoa_r+0x756>
 80086c8:	0038      	movs	r0, r7
 80086ca:	9904      	ldr	r1, [sp, #16]
 80086cc:	f000 fd24 	bl	8009118 <_Bfree>
 80086d0:	2300      	movs	r3, #0
 80086d2:	9a07      	ldr	r2, [sp, #28]
 80086d4:	9802      	ldr	r0, [sp, #8]
 80086d6:	7013      	strb	r3, [r2, #0]
 80086d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80086da:	3001      	adds	r0, #1
 80086dc:	6018      	str	r0, [r3, #0]
 80086de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d100      	bne.n	80086e6 <_dtoa_r+0x752>
 80086e4:	e4a3      	b.n	800802e <_dtoa_r+0x9a>
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	e4a1      	b.n	800802e <_dtoa_r+0x9a>
 80086ea:	9e02      	ldr	r6, [sp, #8]
 80086ec:	9b07      	ldr	r3, [sp, #28]
 80086ee:	9307      	str	r3, [sp, #28]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	781a      	ldrb	r2, [r3, #0]
 80086f4:	2a39      	cmp	r2, #57	; 0x39
 80086f6:	d106      	bne.n	8008706 <_dtoa_r+0x772>
 80086f8:	9a05      	ldr	r2, [sp, #20]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d1f7      	bne.n	80086ee <_dtoa_r+0x75a>
 80086fe:	2230      	movs	r2, #48	; 0x30
 8008700:	9905      	ldr	r1, [sp, #20]
 8008702:	3601      	adds	r6, #1
 8008704:	700a      	strb	r2, [r1, #0]
 8008706:	781a      	ldrb	r2, [r3, #0]
 8008708:	3201      	adds	r2, #1
 800870a:	701a      	strb	r2, [r3, #0]
 800870c:	e785      	b.n	800861a <_dtoa_r+0x686>
 800870e:	2200      	movs	r2, #0
 8008710:	4bad      	ldr	r3, [pc, #692]	; (80089c8 <_dtoa_r+0xa34>)
 8008712:	f7f8 ff4d 	bl	80015b0 <__aeabi_dmul>
 8008716:	2200      	movs	r2, #0
 8008718:	2300      	movs	r3, #0
 800871a:	0004      	movs	r4, r0
 800871c:	000d      	movs	r5, r1
 800871e:	f7f7 fe95 	bl	800044c <__aeabi_dcmpeq>
 8008722:	2800      	cmp	r0, #0
 8008724:	d09b      	beq.n	800865e <_dtoa_r+0x6ca>
 8008726:	e7cf      	b.n	80086c8 <_dtoa_r+0x734>
 8008728:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800872a:	2a00      	cmp	r2, #0
 800872c:	d100      	bne.n	8008730 <_dtoa_r+0x79c>
 800872e:	e082      	b.n	8008836 <_dtoa_r+0x8a2>
 8008730:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008732:	2a01      	cmp	r2, #1
 8008734:	dc66      	bgt.n	8008804 <_dtoa_r+0x870>
 8008736:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008738:	2a00      	cmp	r2, #0
 800873a:	d05f      	beq.n	80087fc <_dtoa_r+0x868>
 800873c:	4aa3      	ldr	r2, [pc, #652]	; (80089cc <_dtoa_r+0xa38>)
 800873e:	189b      	adds	r3, r3, r2
 8008740:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008742:	9c08      	ldr	r4, [sp, #32]
 8008744:	9a08      	ldr	r2, [sp, #32]
 8008746:	2101      	movs	r1, #1
 8008748:	18d2      	adds	r2, r2, r3
 800874a:	9208      	str	r2, [sp, #32]
 800874c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800874e:	0038      	movs	r0, r7
 8008750:	18d3      	adds	r3, r2, r3
 8008752:	930d      	str	r3, [sp, #52]	; 0x34
 8008754:	f000 fd90 	bl	8009278 <__i2b>
 8008758:	0005      	movs	r5, r0
 800875a:	2c00      	cmp	r4, #0
 800875c:	dd0e      	ble.n	800877c <_dtoa_r+0x7e8>
 800875e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008760:	2b00      	cmp	r3, #0
 8008762:	dd0b      	ble.n	800877c <_dtoa_r+0x7e8>
 8008764:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008766:	0023      	movs	r3, r4
 8008768:	4294      	cmp	r4, r2
 800876a:	dd00      	ble.n	800876e <_dtoa_r+0x7da>
 800876c:	0013      	movs	r3, r2
 800876e:	9a08      	ldr	r2, [sp, #32]
 8008770:	1ae4      	subs	r4, r4, r3
 8008772:	1ad2      	subs	r2, r2, r3
 8008774:	9208      	str	r2, [sp, #32]
 8008776:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	930d      	str	r3, [sp, #52]	; 0x34
 800877c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800877e:	2b00      	cmp	r3, #0
 8008780:	d01f      	beq.n	80087c2 <_dtoa_r+0x82e>
 8008782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008784:	2b00      	cmp	r3, #0
 8008786:	d05a      	beq.n	800883e <_dtoa_r+0x8aa>
 8008788:	2e00      	cmp	r6, #0
 800878a:	dd11      	ble.n	80087b0 <_dtoa_r+0x81c>
 800878c:	0029      	movs	r1, r5
 800878e:	0032      	movs	r2, r6
 8008790:	0038      	movs	r0, r7
 8008792:	f000 fe37 	bl	8009404 <__pow5mult>
 8008796:	9a04      	ldr	r2, [sp, #16]
 8008798:	0001      	movs	r1, r0
 800879a:	0005      	movs	r5, r0
 800879c:	0038      	movs	r0, r7
 800879e:	f000 fd81 	bl	80092a4 <__multiply>
 80087a2:	9904      	ldr	r1, [sp, #16]
 80087a4:	9007      	str	r0, [sp, #28]
 80087a6:	0038      	movs	r0, r7
 80087a8:	f000 fcb6 	bl	8009118 <_Bfree>
 80087ac:	9b07      	ldr	r3, [sp, #28]
 80087ae:	9304      	str	r3, [sp, #16]
 80087b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087b2:	1b9a      	subs	r2, r3, r6
 80087b4:	42b3      	cmp	r3, r6
 80087b6:	d004      	beq.n	80087c2 <_dtoa_r+0x82e>
 80087b8:	0038      	movs	r0, r7
 80087ba:	9904      	ldr	r1, [sp, #16]
 80087bc:	f000 fe22 	bl	8009404 <__pow5mult>
 80087c0:	9004      	str	r0, [sp, #16]
 80087c2:	2101      	movs	r1, #1
 80087c4:	0038      	movs	r0, r7
 80087c6:	f000 fd57 	bl	8009278 <__i2b>
 80087ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087cc:	0006      	movs	r6, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	dd37      	ble.n	8008842 <_dtoa_r+0x8ae>
 80087d2:	001a      	movs	r2, r3
 80087d4:	0001      	movs	r1, r0
 80087d6:	0038      	movs	r0, r7
 80087d8:	f000 fe14 	bl	8009404 <__pow5mult>
 80087dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087de:	0006      	movs	r6, r0
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	dd33      	ble.n	800884c <_dtoa_r+0x8b8>
 80087e4:	2300      	movs	r3, #0
 80087e6:	9307      	str	r3, [sp, #28]
 80087e8:	6933      	ldr	r3, [r6, #16]
 80087ea:	3303      	adds	r3, #3
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	18f3      	adds	r3, r6, r3
 80087f0:	6858      	ldr	r0, [r3, #4]
 80087f2:	f000 fcf9 	bl	80091e8 <__hi0bits>
 80087f6:	2320      	movs	r3, #32
 80087f8:	1a18      	subs	r0, r3, r0
 80087fa:	e03f      	b.n	800887c <_dtoa_r+0x8e8>
 80087fc:	2336      	movs	r3, #54	; 0x36
 80087fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008800:	1a9b      	subs	r3, r3, r2
 8008802:	e79d      	b.n	8008740 <_dtoa_r+0x7ac>
 8008804:	9b06      	ldr	r3, [sp, #24]
 8008806:	1e5e      	subs	r6, r3, #1
 8008808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800880a:	42b3      	cmp	r3, r6
 800880c:	db08      	blt.n	8008820 <_dtoa_r+0x88c>
 800880e:	1b9e      	subs	r6, r3, r6
 8008810:	9b06      	ldr	r3, [sp, #24]
 8008812:	2b00      	cmp	r3, #0
 8008814:	da0c      	bge.n	8008830 <_dtoa_r+0x89c>
 8008816:	9b08      	ldr	r3, [sp, #32]
 8008818:	9a06      	ldr	r2, [sp, #24]
 800881a:	1a9c      	subs	r4, r3, r2
 800881c:	2300      	movs	r3, #0
 800881e:	e791      	b.n	8008744 <_dtoa_r+0x7b0>
 8008820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008822:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008824:	1af3      	subs	r3, r6, r3
 8008826:	18d3      	adds	r3, r2, r3
 8008828:	960e      	str	r6, [sp, #56]	; 0x38
 800882a:	9314      	str	r3, [sp, #80]	; 0x50
 800882c:	2600      	movs	r6, #0
 800882e:	e7ef      	b.n	8008810 <_dtoa_r+0x87c>
 8008830:	9c08      	ldr	r4, [sp, #32]
 8008832:	9b06      	ldr	r3, [sp, #24]
 8008834:	e786      	b.n	8008744 <_dtoa_r+0x7b0>
 8008836:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008838:	9c08      	ldr	r4, [sp, #32]
 800883a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800883c:	e78d      	b.n	800875a <_dtoa_r+0x7c6>
 800883e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008840:	e7ba      	b.n	80087b8 <_dtoa_r+0x824>
 8008842:	2300      	movs	r3, #0
 8008844:	9307      	str	r3, [sp, #28]
 8008846:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008848:	2b01      	cmp	r3, #1
 800884a:	dc13      	bgt.n	8008874 <_dtoa_r+0x8e0>
 800884c:	2300      	movs	r3, #0
 800884e:	9307      	str	r3, [sp, #28]
 8008850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10e      	bne.n	8008874 <_dtoa_r+0x8e0>
 8008856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008858:	031b      	lsls	r3, r3, #12
 800885a:	d10b      	bne.n	8008874 <_dtoa_r+0x8e0>
 800885c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800885e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008860:	4213      	tst	r3, r2
 8008862:	d007      	beq.n	8008874 <_dtoa_r+0x8e0>
 8008864:	9b08      	ldr	r3, [sp, #32]
 8008866:	3301      	adds	r3, #1
 8008868:	9308      	str	r3, [sp, #32]
 800886a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800886c:	3301      	adds	r3, #1
 800886e:	930d      	str	r3, [sp, #52]	; 0x34
 8008870:	2301      	movs	r3, #1
 8008872:	9307      	str	r3, [sp, #28]
 8008874:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008876:	2001      	movs	r0, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1b5      	bne.n	80087e8 <_dtoa_r+0x854>
 800887c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800887e:	221f      	movs	r2, #31
 8008880:	1818      	adds	r0, r3, r0
 8008882:	0003      	movs	r3, r0
 8008884:	4013      	ands	r3, r2
 8008886:	4210      	tst	r0, r2
 8008888:	d046      	beq.n	8008918 <_dtoa_r+0x984>
 800888a:	3201      	adds	r2, #1
 800888c:	1ad2      	subs	r2, r2, r3
 800888e:	2a04      	cmp	r2, #4
 8008890:	dd3f      	ble.n	8008912 <_dtoa_r+0x97e>
 8008892:	221c      	movs	r2, #28
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	9a08      	ldr	r2, [sp, #32]
 8008898:	18e4      	adds	r4, r4, r3
 800889a:	18d2      	adds	r2, r2, r3
 800889c:	9208      	str	r2, [sp, #32]
 800889e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088a0:	18d3      	adds	r3, r2, r3
 80088a2:	930d      	str	r3, [sp, #52]	; 0x34
 80088a4:	9b08      	ldr	r3, [sp, #32]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	dd05      	ble.n	80088b6 <_dtoa_r+0x922>
 80088aa:	001a      	movs	r2, r3
 80088ac:	0038      	movs	r0, r7
 80088ae:	9904      	ldr	r1, [sp, #16]
 80088b0:	f000 fe04 	bl	80094bc <__lshift>
 80088b4:	9004      	str	r0, [sp, #16]
 80088b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	dd05      	ble.n	80088c8 <_dtoa_r+0x934>
 80088bc:	0031      	movs	r1, r6
 80088be:	001a      	movs	r2, r3
 80088c0:	0038      	movs	r0, r7
 80088c2:	f000 fdfb 	bl	80094bc <__lshift>
 80088c6:	0006      	movs	r6, r0
 80088c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d026      	beq.n	800891c <_dtoa_r+0x988>
 80088ce:	0031      	movs	r1, r6
 80088d0:	9804      	ldr	r0, [sp, #16]
 80088d2:	f000 fe63 	bl	800959c <__mcmp>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	da20      	bge.n	800891c <_dtoa_r+0x988>
 80088da:	9b02      	ldr	r3, [sp, #8]
 80088dc:	220a      	movs	r2, #10
 80088de:	3b01      	subs	r3, #1
 80088e0:	9302      	str	r3, [sp, #8]
 80088e2:	0038      	movs	r0, r7
 80088e4:	2300      	movs	r3, #0
 80088e6:	9904      	ldr	r1, [sp, #16]
 80088e8:	f000 fc3a 	bl	8009160 <__multadd>
 80088ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088ee:	9004      	str	r0, [sp, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d100      	bne.n	80088f6 <_dtoa_r+0x962>
 80088f4:	e160      	b.n	8008bb8 <_dtoa_r+0xc24>
 80088f6:	2300      	movs	r3, #0
 80088f8:	0029      	movs	r1, r5
 80088fa:	220a      	movs	r2, #10
 80088fc:	0038      	movs	r0, r7
 80088fe:	f000 fc2f 	bl	8009160 <__multadd>
 8008902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008904:	0005      	movs	r5, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	dc47      	bgt.n	800899a <_dtoa_r+0xa06>
 800890a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800890c:	2b02      	cmp	r3, #2
 800890e:	dc0d      	bgt.n	800892c <_dtoa_r+0x998>
 8008910:	e043      	b.n	800899a <_dtoa_r+0xa06>
 8008912:	2a04      	cmp	r2, #4
 8008914:	d0c6      	beq.n	80088a4 <_dtoa_r+0x910>
 8008916:	0013      	movs	r3, r2
 8008918:	331c      	adds	r3, #28
 800891a:	e7bc      	b.n	8008896 <_dtoa_r+0x902>
 800891c:	9b06      	ldr	r3, [sp, #24]
 800891e:	2b00      	cmp	r3, #0
 8008920:	dc35      	bgt.n	800898e <_dtoa_r+0x9fa>
 8008922:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008924:	2b02      	cmp	r3, #2
 8008926:	dd32      	ble.n	800898e <_dtoa_r+0x9fa>
 8008928:	9b06      	ldr	r3, [sp, #24]
 800892a:	930c      	str	r3, [sp, #48]	; 0x30
 800892c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10c      	bne.n	800894c <_dtoa_r+0x9b8>
 8008932:	0031      	movs	r1, r6
 8008934:	2205      	movs	r2, #5
 8008936:	0038      	movs	r0, r7
 8008938:	f000 fc12 	bl	8009160 <__multadd>
 800893c:	0006      	movs	r6, r0
 800893e:	0001      	movs	r1, r0
 8008940:	9804      	ldr	r0, [sp, #16]
 8008942:	f000 fe2b 	bl	800959c <__mcmp>
 8008946:	2800      	cmp	r0, #0
 8008948:	dd00      	ble.n	800894c <_dtoa_r+0x9b8>
 800894a:	e59f      	b.n	800848c <_dtoa_r+0x4f8>
 800894c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800894e:	43db      	mvns	r3, r3
 8008950:	9302      	str	r3, [sp, #8]
 8008952:	9b05      	ldr	r3, [sp, #20]
 8008954:	9307      	str	r3, [sp, #28]
 8008956:	2400      	movs	r4, #0
 8008958:	0031      	movs	r1, r6
 800895a:	0038      	movs	r0, r7
 800895c:	f000 fbdc 	bl	8009118 <_Bfree>
 8008960:	2d00      	cmp	r5, #0
 8008962:	d100      	bne.n	8008966 <_dtoa_r+0x9d2>
 8008964:	e6b0      	b.n	80086c8 <_dtoa_r+0x734>
 8008966:	2c00      	cmp	r4, #0
 8008968:	d005      	beq.n	8008976 <_dtoa_r+0x9e2>
 800896a:	42ac      	cmp	r4, r5
 800896c:	d003      	beq.n	8008976 <_dtoa_r+0x9e2>
 800896e:	0021      	movs	r1, r4
 8008970:	0038      	movs	r0, r7
 8008972:	f000 fbd1 	bl	8009118 <_Bfree>
 8008976:	0029      	movs	r1, r5
 8008978:	0038      	movs	r0, r7
 800897a:	f000 fbcd 	bl	8009118 <_Bfree>
 800897e:	e6a3      	b.n	80086c8 <_dtoa_r+0x734>
 8008980:	2600      	movs	r6, #0
 8008982:	0035      	movs	r5, r6
 8008984:	e7e2      	b.n	800894c <_dtoa_r+0x9b8>
 8008986:	9602      	str	r6, [sp, #8]
 8008988:	9e07      	ldr	r6, [sp, #28]
 800898a:	0035      	movs	r5, r6
 800898c:	e57e      	b.n	800848c <_dtoa_r+0x4f8>
 800898e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008990:	2b00      	cmp	r3, #0
 8008992:	d100      	bne.n	8008996 <_dtoa_r+0xa02>
 8008994:	e0c8      	b.n	8008b28 <_dtoa_r+0xb94>
 8008996:	9b06      	ldr	r3, [sp, #24]
 8008998:	930c      	str	r3, [sp, #48]	; 0x30
 800899a:	2c00      	cmp	r4, #0
 800899c:	dd05      	ble.n	80089aa <_dtoa_r+0xa16>
 800899e:	0029      	movs	r1, r5
 80089a0:	0022      	movs	r2, r4
 80089a2:	0038      	movs	r0, r7
 80089a4:	f000 fd8a 	bl	80094bc <__lshift>
 80089a8:	0005      	movs	r5, r0
 80089aa:	9b07      	ldr	r3, [sp, #28]
 80089ac:	0028      	movs	r0, r5
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d01f      	beq.n	80089f2 <_dtoa_r+0xa5e>
 80089b2:	0038      	movs	r0, r7
 80089b4:	6869      	ldr	r1, [r5, #4]
 80089b6:	f000 fb6b 	bl	8009090 <_Balloc>
 80089ba:	1e04      	subs	r4, r0, #0
 80089bc:	d10c      	bne.n	80089d8 <_dtoa_r+0xa44>
 80089be:	0002      	movs	r2, r0
 80089c0:	4b03      	ldr	r3, [pc, #12]	; (80089d0 <_dtoa_r+0xa3c>)
 80089c2:	4904      	ldr	r1, [pc, #16]	; (80089d4 <_dtoa_r+0xa40>)
 80089c4:	f7ff fafb 	bl	8007fbe <_dtoa_r+0x2a>
 80089c8:	40240000 	.word	0x40240000
 80089cc:	00000433 	.word	0x00000433
 80089d0:	0800a84f 	.word	0x0800a84f
 80089d4:	000002ea 	.word	0x000002ea
 80089d8:	0029      	movs	r1, r5
 80089da:	692b      	ldr	r3, [r5, #16]
 80089dc:	310c      	adds	r1, #12
 80089de:	1c9a      	adds	r2, r3, #2
 80089e0:	0092      	lsls	r2, r2, #2
 80089e2:	300c      	adds	r0, #12
 80089e4:	f000 fb4b 	bl	800907e <memcpy>
 80089e8:	2201      	movs	r2, #1
 80089ea:	0021      	movs	r1, r4
 80089ec:	0038      	movs	r0, r7
 80089ee:	f000 fd65 	bl	80094bc <__lshift>
 80089f2:	002c      	movs	r4, r5
 80089f4:	0005      	movs	r5, r0
 80089f6:	9b05      	ldr	r3, [sp, #20]
 80089f8:	9308      	str	r3, [sp, #32]
 80089fa:	0031      	movs	r1, r6
 80089fc:	9804      	ldr	r0, [sp, #16]
 80089fe:	f7ff fa3d 	bl	8007e7c <quorem>
 8008a02:	0003      	movs	r3, r0
 8008a04:	0021      	movs	r1, r4
 8008a06:	3330      	adds	r3, #48	; 0x30
 8008a08:	900e      	str	r0, [sp, #56]	; 0x38
 8008a0a:	9804      	ldr	r0, [sp, #16]
 8008a0c:	9306      	str	r3, [sp, #24]
 8008a0e:	f000 fdc5 	bl	800959c <__mcmp>
 8008a12:	002a      	movs	r2, r5
 8008a14:	900f      	str	r0, [sp, #60]	; 0x3c
 8008a16:	0031      	movs	r1, r6
 8008a18:	0038      	movs	r0, r7
 8008a1a:	f000 fddb 	bl	80095d4 <__mdiff>
 8008a1e:	68c3      	ldr	r3, [r0, #12]
 8008a20:	9007      	str	r0, [sp, #28]
 8008a22:	9310      	str	r3, [sp, #64]	; 0x40
 8008a24:	2301      	movs	r3, #1
 8008a26:	930d      	str	r3, [sp, #52]	; 0x34
 8008a28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d104      	bne.n	8008a38 <_dtoa_r+0xaa4>
 8008a2e:	0001      	movs	r1, r0
 8008a30:	9804      	ldr	r0, [sp, #16]
 8008a32:	f000 fdb3 	bl	800959c <__mcmp>
 8008a36:	900d      	str	r0, [sp, #52]	; 0x34
 8008a38:	0038      	movs	r0, r7
 8008a3a:	9907      	ldr	r1, [sp, #28]
 8008a3c:	f000 fb6c 	bl	8009118 <_Bfree>
 8008a40:	2301      	movs	r3, #1
 8008a42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008a44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a46:	4018      	ands	r0, r3
 8008a48:	9b08      	ldr	r3, [sp, #32]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	9307      	str	r3, [sp, #28]
 8008a4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a50:	4313      	orrs	r3, r2
 8008a52:	4303      	orrs	r3, r0
 8008a54:	d10c      	bne.n	8008a70 <_dtoa_r+0xadc>
 8008a56:	9b06      	ldr	r3, [sp, #24]
 8008a58:	2b39      	cmp	r3, #57	; 0x39
 8008a5a:	d025      	beq.n	8008aa8 <_dtoa_r+0xb14>
 8008a5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	dd02      	ble.n	8008a68 <_dtoa_r+0xad4>
 8008a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a64:	3331      	adds	r3, #49	; 0x31
 8008a66:	9306      	str	r3, [sp, #24]
 8008a68:	9b08      	ldr	r3, [sp, #32]
 8008a6a:	9a06      	ldr	r2, [sp, #24]
 8008a6c:	701a      	strb	r2, [r3, #0]
 8008a6e:	e773      	b.n	8008958 <_dtoa_r+0x9c4>
 8008a70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	db03      	blt.n	8008a7e <_dtoa_r+0xaea>
 8008a76:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	4303      	orrs	r3, r0
 8008a7c:	d11f      	bne.n	8008abe <_dtoa_r+0xb2a>
 8008a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	ddf1      	ble.n	8008a68 <_dtoa_r+0xad4>
 8008a84:	9904      	ldr	r1, [sp, #16]
 8008a86:	2201      	movs	r2, #1
 8008a88:	0038      	movs	r0, r7
 8008a8a:	f000 fd17 	bl	80094bc <__lshift>
 8008a8e:	0031      	movs	r1, r6
 8008a90:	9004      	str	r0, [sp, #16]
 8008a92:	f000 fd83 	bl	800959c <__mcmp>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	dc03      	bgt.n	8008aa2 <_dtoa_r+0xb0e>
 8008a9a:	d1e5      	bne.n	8008a68 <_dtoa_r+0xad4>
 8008a9c:	9b06      	ldr	r3, [sp, #24]
 8008a9e:	07db      	lsls	r3, r3, #31
 8008aa0:	d5e2      	bpl.n	8008a68 <_dtoa_r+0xad4>
 8008aa2:	9b06      	ldr	r3, [sp, #24]
 8008aa4:	2b39      	cmp	r3, #57	; 0x39
 8008aa6:	d1dc      	bne.n	8008a62 <_dtoa_r+0xace>
 8008aa8:	2339      	movs	r3, #57	; 0x39
 8008aaa:	9a08      	ldr	r2, [sp, #32]
 8008aac:	7013      	strb	r3, [r2, #0]
 8008aae:	9b07      	ldr	r3, [sp, #28]
 8008ab0:	9307      	str	r3, [sp, #28]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	781a      	ldrb	r2, [r3, #0]
 8008ab6:	2a39      	cmp	r2, #57	; 0x39
 8008ab8:	d06c      	beq.n	8008b94 <_dtoa_r+0xc00>
 8008aba:	3201      	adds	r2, #1
 8008abc:	e7d6      	b.n	8008a6c <_dtoa_r+0xad8>
 8008abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	dd07      	ble.n	8008ad4 <_dtoa_r+0xb40>
 8008ac4:	9b06      	ldr	r3, [sp, #24]
 8008ac6:	2b39      	cmp	r3, #57	; 0x39
 8008ac8:	d0ee      	beq.n	8008aa8 <_dtoa_r+0xb14>
 8008aca:	9b06      	ldr	r3, [sp, #24]
 8008acc:	9a08      	ldr	r2, [sp, #32]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	7013      	strb	r3, [r2, #0]
 8008ad2:	e741      	b.n	8008958 <_dtoa_r+0x9c4>
 8008ad4:	9b08      	ldr	r3, [sp, #32]
 8008ad6:	9a06      	ldr	r2, [sp, #24]
 8008ad8:	701a      	strb	r2, [r3, #0]
 8008ada:	2301      	movs	r3, #1
 8008adc:	9a05      	ldr	r2, [sp, #20]
 8008ade:	1a9b      	subs	r3, r3, r2
 8008ae0:	9a08      	ldr	r2, [sp, #32]
 8008ae2:	189b      	adds	r3, r3, r2
 8008ae4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d03e      	beq.n	8008b68 <_dtoa_r+0xbd4>
 8008aea:	2300      	movs	r3, #0
 8008aec:	220a      	movs	r2, #10
 8008aee:	9904      	ldr	r1, [sp, #16]
 8008af0:	0038      	movs	r0, r7
 8008af2:	f000 fb35 	bl	8009160 <__multadd>
 8008af6:	2300      	movs	r3, #0
 8008af8:	9004      	str	r0, [sp, #16]
 8008afa:	220a      	movs	r2, #10
 8008afc:	0021      	movs	r1, r4
 8008afe:	0038      	movs	r0, r7
 8008b00:	42ac      	cmp	r4, r5
 8008b02:	d106      	bne.n	8008b12 <_dtoa_r+0xb7e>
 8008b04:	f000 fb2c 	bl	8009160 <__multadd>
 8008b08:	0004      	movs	r4, r0
 8008b0a:	0005      	movs	r5, r0
 8008b0c:	9b07      	ldr	r3, [sp, #28]
 8008b0e:	9308      	str	r3, [sp, #32]
 8008b10:	e773      	b.n	80089fa <_dtoa_r+0xa66>
 8008b12:	f000 fb25 	bl	8009160 <__multadd>
 8008b16:	0029      	movs	r1, r5
 8008b18:	0004      	movs	r4, r0
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	220a      	movs	r2, #10
 8008b1e:	0038      	movs	r0, r7
 8008b20:	f000 fb1e 	bl	8009160 <__multadd>
 8008b24:	0005      	movs	r5, r0
 8008b26:	e7f1      	b.n	8008b0c <_dtoa_r+0xb78>
 8008b28:	9b06      	ldr	r3, [sp, #24]
 8008b2a:	930c      	str	r3, [sp, #48]	; 0x30
 8008b2c:	2400      	movs	r4, #0
 8008b2e:	0031      	movs	r1, r6
 8008b30:	9804      	ldr	r0, [sp, #16]
 8008b32:	f7ff f9a3 	bl	8007e7c <quorem>
 8008b36:	9b05      	ldr	r3, [sp, #20]
 8008b38:	3030      	adds	r0, #48	; 0x30
 8008b3a:	5518      	strb	r0, [r3, r4]
 8008b3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b3e:	3401      	adds	r4, #1
 8008b40:	9006      	str	r0, [sp, #24]
 8008b42:	42a3      	cmp	r3, r4
 8008b44:	dd07      	ble.n	8008b56 <_dtoa_r+0xbc2>
 8008b46:	2300      	movs	r3, #0
 8008b48:	220a      	movs	r2, #10
 8008b4a:	0038      	movs	r0, r7
 8008b4c:	9904      	ldr	r1, [sp, #16]
 8008b4e:	f000 fb07 	bl	8009160 <__multadd>
 8008b52:	9004      	str	r0, [sp, #16]
 8008b54:	e7eb      	b.n	8008b2e <_dtoa_r+0xb9a>
 8008b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b58:	2001      	movs	r0, #1
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	dd00      	ble.n	8008b60 <_dtoa_r+0xbcc>
 8008b5e:	0018      	movs	r0, r3
 8008b60:	2400      	movs	r4, #0
 8008b62:	9b05      	ldr	r3, [sp, #20]
 8008b64:	181b      	adds	r3, r3, r0
 8008b66:	9307      	str	r3, [sp, #28]
 8008b68:	9904      	ldr	r1, [sp, #16]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	0038      	movs	r0, r7
 8008b6e:	f000 fca5 	bl	80094bc <__lshift>
 8008b72:	0031      	movs	r1, r6
 8008b74:	9004      	str	r0, [sp, #16]
 8008b76:	f000 fd11 	bl	800959c <__mcmp>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	dc97      	bgt.n	8008aae <_dtoa_r+0xb1a>
 8008b7e:	d102      	bne.n	8008b86 <_dtoa_r+0xbf2>
 8008b80:	9b06      	ldr	r3, [sp, #24]
 8008b82:	07db      	lsls	r3, r3, #31
 8008b84:	d493      	bmi.n	8008aae <_dtoa_r+0xb1a>
 8008b86:	9b07      	ldr	r3, [sp, #28]
 8008b88:	9307      	str	r3, [sp, #28]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	781a      	ldrb	r2, [r3, #0]
 8008b8e:	2a30      	cmp	r2, #48	; 0x30
 8008b90:	d0fa      	beq.n	8008b88 <_dtoa_r+0xbf4>
 8008b92:	e6e1      	b.n	8008958 <_dtoa_r+0x9c4>
 8008b94:	9a05      	ldr	r2, [sp, #20]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d18a      	bne.n	8008ab0 <_dtoa_r+0xb1c>
 8008b9a:	9b02      	ldr	r3, [sp, #8]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	9302      	str	r3, [sp, #8]
 8008ba0:	2331      	movs	r3, #49	; 0x31
 8008ba2:	e795      	b.n	8008ad0 <_dtoa_r+0xb3c>
 8008ba4:	4b08      	ldr	r3, [pc, #32]	; (8008bc8 <_dtoa_r+0xc34>)
 8008ba6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008ba8:	9305      	str	r3, [sp, #20]
 8008baa:	4b08      	ldr	r3, [pc, #32]	; (8008bcc <_dtoa_r+0xc38>)
 8008bac:	2a00      	cmp	r2, #0
 8008bae:	d001      	beq.n	8008bb4 <_dtoa_r+0xc20>
 8008bb0:	f7ff fa3b 	bl	800802a <_dtoa_r+0x96>
 8008bb4:	f7ff fa3b 	bl	800802e <_dtoa_r+0x9a>
 8008bb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	dcb6      	bgt.n	8008b2c <_dtoa_r+0xb98>
 8008bbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	dd00      	ble.n	8008bc6 <_dtoa_r+0xc32>
 8008bc4:	e6b2      	b.n	800892c <_dtoa_r+0x998>
 8008bc6:	e7b1      	b.n	8008b2c <_dtoa_r+0xb98>
 8008bc8:	0800a7cc 	.word	0x0800a7cc
 8008bcc:	0800a7d4 	.word	0x0800a7d4

08008bd0 <__sflush_r>:
 8008bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bd2:	898b      	ldrh	r3, [r1, #12]
 8008bd4:	0005      	movs	r5, r0
 8008bd6:	000c      	movs	r4, r1
 8008bd8:	071a      	lsls	r2, r3, #28
 8008bda:	d45f      	bmi.n	8008c9c <__sflush_r+0xcc>
 8008bdc:	684a      	ldr	r2, [r1, #4]
 8008bde:	2a00      	cmp	r2, #0
 8008be0:	dc04      	bgt.n	8008bec <__sflush_r+0x1c>
 8008be2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008be4:	2a00      	cmp	r2, #0
 8008be6:	dc01      	bgt.n	8008bec <__sflush_r+0x1c>
 8008be8:	2000      	movs	r0, #0
 8008bea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008bee:	2f00      	cmp	r7, #0
 8008bf0:	d0fa      	beq.n	8008be8 <__sflush_r+0x18>
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	2180      	movs	r1, #128	; 0x80
 8008bf6:	682e      	ldr	r6, [r5, #0]
 8008bf8:	602a      	str	r2, [r5, #0]
 8008bfa:	001a      	movs	r2, r3
 8008bfc:	0149      	lsls	r1, r1, #5
 8008bfe:	400a      	ands	r2, r1
 8008c00:	420b      	tst	r3, r1
 8008c02:	d034      	beq.n	8008c6e <__sflush_r+0x9e>
 8008c04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	075b      	lsls	r3, r3, #29
 8008c0a:	d506      	bpl.n	8008c1a <__sflush_r+0x4a>
 8008c0c:	6863      	ldr	r3, [r4, #4]
 8008c0e:	1ac0      	subs	r0, r0, r3
 8008c10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <__sflush_r+0x4a>
 8008c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c18:	1ac0      	subs	r0, r0, r3
 8008c1a:	0002      	movs	r2, r0
 8008c1c:	6a21      	ldr	r1, [r4, #32]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	0028      	movs	r0, r5
 8008c22:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008c24:	47b8      	blx	r7
 8008c26:	89a1      	ldrh	r1, [r4, #12]
 8008c28:	1c43      	adds	r3, r0, #1
 8008c2a:	d106      	bne.n	8008c3a <__sflush_r+0x6a>
 8008c2c:	682b      	ldr	r3, [r5, #0]
 8008c2e:	2b1d      	cmp	r3, #29
 8008c30:	d831      	bhi.n	8008c96 <__sflush_r+0xc6>
 8008c32:	4a2c      	ldr	r2, [pc, #176]	; (8008ce4 <__sflush_r+0x114>)
 8008c34:	40da      	lsrs	r2, r3
 8008c36:	07d3      	lsls	r3, r2, #31
 8008c38:	d52d      	bpl.n	8008c96 <__sflush_r+0xc6>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	6063      	str	r3, [r4, #4]
 8008c3e:	6923      	ldr	r3, [r4, #16]
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	04cb      	lsls	r3, r1, #19
 8008c44:	d505      	bpl.n	8008c52 <__sflush_r+0x82>
 8008c46:	1c43      	adds	r3, r0, #1
 8008c48:	d102      	bne.n	8008c50 <__sflush_r+0x80>
 8008c4a:	682b      	ldr	r3, [r5, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d100      	bne.n	8008c52 <__sflush_r+0x82>
 8008c50:	6560      	str	r0, [r4, #84]	; 0x54
 8008c52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c54:	602e      	str	r6, [r5, #0]
 8008c56:	2900      	cmp	r1, #0
 8008c58:	d0c6      	beq.n	8008be8 <__sflush_r+0x18>
 8008c5a:	0023      	movs	r3, r4
 8008c5c:	3344      	adds	r3, #68	; 0x44
 8008c5e:	4299      	cmp	r1, r3
 8008c60:	d002      	beq.n	8008c68 <__sflush_r+0x98>
 8008c62:	0028      	movs	r0, r5
 8008c64:	f000 fdc0 	bl	80097e8 <_free_r>
 8008c68:	2000      	movs	r0, #0
 8008c6a:	6360      	str	r0, [r4, #52]	; 0x34
 8008c6c:	e7bd      	b.n	8008bea <__sflush_r+0x1a>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	0028      	movs	r0, r5
 8008c72:	6a21      	ldr	r1, [r4, #32]
 8008c74:	47b8      	blx	r7
 8008c76:	1c43      	adds	r3, r0, #1
 8008c78:	d1c5      	bne.n	8008c06 <__sflush_r+0x36>
 8008c7a:	682b      	ldr	r3, [r5, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d0c2      	beq.n	8008c06 <__sflush_r+0x36>
 8008c80:	2b1d      	cmp	r3, #29
 8008c82:	d001      	beq.n	8008c88 <__sflush_r+0xb8>
 8008c84:	2b16      	cmp	r3, #22
 8008c86:	d101      	bne.n	8008c8c <__sflush_r+0xbc>
 8008c88:	602e      	str	r6, [r5, #0]
 8008c8a:	e7ad      	b.n	8008be8 <__sflush_r+0x18>
 8008c8c:	2340      	movs	r3, #64	; 0x40
 8008c8e:	89a2      	ldrh	r2, [r4, #12]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	81a3      	strh	r3, [r4, #12]
 8008c94:	e7a9      	b.n	8008bea <__sflush_r+0x1a>
 8008c96:	2340      	movs	r3, #64	; 0x40
 8008c98:	430b      	orrs	r3, r1
 8008c9a:	e7fa      	b.n	8008c92 <__sflush_r+0xc2>
 8008c9c:	690f      	ldr	r7, [r1, #16]
 8008c9e:	2f00      	cmp	r7, #0
 8008ca0:	d0a2      	beq.n	8008be8 <__sflush_r+0x18>
 8008ca2:	680a      	ldr	r2, [r1, #0]
 8008ca4:	600f      	str	r7, [r1, #0]
 8008ca6:	1bd2      	subs	r2, r2, r7
 8008ca8:	9201      	str	r2, [sp, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	079b      	lsls	r3, r3, #30
 8008cae:	d100      	bne.n	8008cb2 <__sflush_r+0xe2>
 8008cb0:	694a      	ldr	r2, [r1, #20]
 8008cb2:	60a2      	str	r2, [r4, #8]
 8008cb4:	9b01      	ldr	r3, [sp, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	dc00      	bgt.n	8008cbc <__sflush_r+0xec>
 8008cba:	e795      	b.n	8008be8 <__sflush_r+0x18>
 8008cbc:	003a      	movs	r2, r7
 8008cbe:	0028      	movs	r0, r5
 8008cc0:	9b01      	ldr	r3, [sp, #4]
 8008cc2:	6a21      	ldr	r1, [r4, #32]
 8008cc4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008cc6:	47b0      	blx	r6
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	dc06      	bgt.n	8008cda <__sflush_r+0x10a>
 8008ccc:	2340      	movs	r3, #64	; 0x40
 8008cce:	2001      	movs	r0, #1
 8008cd0:	89a2      	ldrh	r2, [r4, #12]
 8008cd2:	4240      	negs	r0, r0
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	81a3      	strh	r3, [r4, #12]
 8008cd8:	e787      	b.n	8008bea <__sflush_r+0x1a>
 8008cda:	9b01      	ldr	r3, [sp, #4]
 8008cdc:	183f      	adds	r7, r7, r0
 8008cde:	1a1b      	subs	r3, r3, r0
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	e7e7      	b.n	8008cb4 <__sflush_r+0xe4>
 8008ce4:	20400001 	.word	0x20400001

08008ce8 <_fflush_r>:
 8008ce8:	690b      	ldr	r3, [r1, #16]
 8008cea:	b570      	push	{r4, r5, r6, lr}
 8008cec:	0005      	movs	r5, r0
 8008cee:	000c      	movs	r4, r1
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d102      	bne.n	8008cfa <_fflush_r+0x12>
 8008cf4:	2500      	movs	r5, #0
 8008cf6:	0028      	movs	r0, r5
 8008cf8:	bd70      	pop	{r4, r5, r6, pc}
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d004      	beq.n	8008d08 <_fflush_r+0x20>
 8008cfe:	6983      	ldr	r3, [r0, #24]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <_fflush_r+0x20>
 8008d04:	f000 f892 	bl	8008e2c <__sinit>
 8008d08:	4b14      	ldr	r3, [pc, #80]	; (8008d5c <_fflush_r+0x74>)
 8008d0a:	429c      	cmp	r4, r3
 8008d0c:	d11b      	bne.n	8008d46 <_fflush_r+0x5e>
 8008d0e:	686c      	ldr	r4, [r5, #4]
 8008d10:	220c      	movs	r2, #12
 8008d12:	5ea3      	ldrsh	r3, [r4, r2]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d0ed      	beq.n	8008cf4 <_fflush_r+0xc>
 8008d18:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d1a:	07d2      	lsls	r2, r2, #31
 8008d1c:	d404      	bmi.n	8008d28 <_fflush_r+0x40>
 8008d1e:	059b      	lsls	r3, r3, #22
 8008d20:	d402      	bmi.n	8008d28 <_fflush_r+0x40>
 8008d22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d24:	f000 f927 	bl	8008f76 <__retarget_lock_acquire_recursive>
 8008d28:	0028      	movs	r0, r5
 8008d2a:	0021      	movs	r1, r4
 8008d2c:	f7ff ff50 	bl	8008bd0 <__sflush_r>
 8008d30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d32:	0005      	movs	r5, r0
 8008d34:	07db      	lsls	r3, r3, #31
 8008d36:	d4de      	bmi.n	8008cf6 <_fflush_r+0xe>
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	059b      	lsls	r3, r3, #22
 8008d3c:	d4db      	bmi.n	8008cf6 <_fflush_r+0xe>
 8008d3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d40:	f000 f91a 	bl	8008f78 <__retarget_lock_release_recursive>
 8008d44:	e7d7      	b.n	8008cf6 <_fflush_r+0xe>
 8008d46:	4b06      	ldr	r3, [pc, #24]	; (8008d60 <_fflush_r+0x78>)
 8008d48:	429c      	cmp	r4, r3
 8008d4a:	d101      	bne.n	8008d50 <_fflush_r+0x68>
 8008d4c:	68ac      	ldr	r4, [r5, #8]
 8008d4e:	e7df      	b.n	8008d10 <_fflush_r+0x28>
 8008d50:	4b04      	ldr	r3, [pc, #16]	; (8008d64 <_fflush_r+0x7c>)
 8008d52:	429c      	cmp	r4, r3
 8008d54:	d1dc      	bne.n	8008d10 <_fflush_r+0x28>
 8008d56:	68ec      	ldr	r4, [r5, #12]
 8008d58:	e7da      	b.n	8008d10 <_fflush_r+0x28>
 8008d5a:	46c0      	nop			; (mov r8, r8)
 8008d5c:	0800a880 	.word	0x0800a880
 8008d60:	0800a8a0 	.word	0x0800a8a0
 8008d64:	0800a860 	.word	0x0800a860

08008d68 <std>:
 8008d68:	2300      	movs	r3, #0
 8008d6a:	b510      	push	{r4, lr}
 8008d6c:	0004      	movs	r4, r0
 8008d6e:	6003      	str	r3, [r0, #0]
 8008d70:	6043      	str	r3, [r0, #4]
 8008d72:	6083      	str	r3, [r0, #8]
 8008d74:	8181      	strh	r1, [r0, #12]
 8008d76:	6643      	str	r3, [r0, #100]	; 0x64
 8008d78:	0019      	movs	r1, r3
 8008d7a:	81c2      	strh	r2, [r0, #14]
 8008d7c:	6103      	str	r3, [r0, #16]
 8008d7e:	6143      	str	r3, [r0, #20]
 8008d80:	6183      	str	r3, [r0, #24]
 8008d82:	2208      	movs	r2, #8
 8008d84:	305c      	adds	r0, #92	; 0x5c
 8008d86:	f7fe fa93 	bl	80072b0 <memset>
 8008d8a:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <std+0x38>)
 8008d8c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d8e:	4b05      	ldr	r3, [pc, #20]	; (8008da4 <std+0x3c>)
 8008d90:	6224      	str	r4, [r4, #32]
 8008d92:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d94:	4b04      	ldr	r3, [pc, #16]	; (8008da8 <std+0x40>)
 8008d96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d98:	4b04      	ldr	r3, [pc, #16]	; (8008dac <std+0x44>)
 8008d9a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	46c0      	nop			; (mov r8, r8)
 8008da0:	08009c21 	.word	0x08009c21
 8008da4:	08009c49 	.word	0x08009c49
 8008da8:	08009c81 	.word	0x08009c81
 8008dac:	08009cad 	.word	0x08009cad

08008db0 <_cleanup_r>:
 8008db0:	b510      	push	{r4, lr}
 8008db2:	4902      	ldr	r1, [pc, #8]	; (8008dbc <_cleanup_r+0xc>)
 8008db4:	f000 f8ba 	bl	8008f2c <_fwalk_reent>
 8008db8:	bd10      	pop	{r4, pc}
 8008dba:	46c0      	nop			; (mov r8, r8)
 8008dbc:	08008ce9 	.word	0x08008ce9

08008dc0 <__sfmoreglue>:
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	2568      	movs	r5, #104	; 0x68
 8008dc4:	1e4a      	subs	r2, r1, #1
 8008dc6:	4355      	muls	r5, r2
 8008dc8:	000e      	movs	r6, r1
 8008dca:	0029      	movs	r1, r5
 8008dcc:	3174      	adds	r1, #116	; 0x74
 8008dce:	f000 fd55 	bl	800987c <_malloc_r>
 8008dd2:	1e04      	subs	r4, r0, #0
 8008dd4:	d008      	beq.n	8008de8 <__sfmoreglue+0x28>
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	002a      	movs	r2, r5
 8008dda:	6001      	str	r1, [r0, #0]
 8008ddc:	6046      	str	r6, [r0, #4]
 8008dde:	300c      	adds	r0, #12
 8008de0:	60a0      	str	r0, [r4, #8]
 8008de2:	3268      	adds	r2, #104	; 0x68
 8008de4:	f7fe fa64 	bl	80072b0 <memset>
 8008de8:	0020      	movs	r0, r4
 8008dea:	bd70      	pop	{r4, r5, r6, pc}

08008dec <__sfp_lock_acquire>:
 8008dec:	b510      	push	{r4, lr}
 8008dee:	4802      	ldr	r0, [pc, #8]	; (8008df8 <__sfp_lock_acquire+0xc>)
 8008df0:	f000 f8c1 	bl	8008f76 <__retarget_lock_acquire_recursive>
 8008df4:	bd10      	pop	{r4, pc}
 8008df6:	46c0      	nop			; (mov r8, r8)
 8008df8:	200003ac 	.word	0x200003ac

08008dfc <__sfp_lock_release>:
 8008dfc:	b510      	push	{r4, lr}
 8008dfe:	4802      	ldr	r0, [pc, #8]	; (8008e08 <__sfp_lock_release+0xc>)
 8008e00:	f000 f8ba 	bl	8008f78 <__retarget_lock_release_recursive>
 8008e04:	bd10      	pop	{r4, pc}
 8008e06:	46c0      	nop			; (mov r8, r8)
 8008e08:	200003ac 	.word	0x200003ac

08008e0c <__sinit_lock_acquire>:
 8008e0c:	b510      	push	{r4, lr}
 8008e0e:	4802      	ldr	r0, [pc, #8]	; (8008e18 <__sinit_lock_acquire+0xc>)
 8008e10:	f000 f8b1 	bl	8008f76 <__retarget_lock_acquire_recursive>
 8008e14:	bd10      	pop	{r4, pc}
 8008e16:	46c0      	nop			; (mov r8, r8)
 8008e18:	200003a7 	.word	0x200003a7

08008e1c <__sinit_lock_release>:
 8008e1c:	b510      	push	{r4, lr}
 8008e1e:	4802      	ldr	r0, [pc, #8]	; (8008e28 <__sinit_lock_release+0xc>)
 8008e20:	f000 f8aa 	bl	8008f78 <__retarget_lock_release_recursive>
 8008e24:	bd10      	pop	{r4, pc}
 8008e26:	46c0      	nop			; (mov r8, r8)
 8008e28:	200003a7 	.word	0x200003a7

08008e2c <__sinit>:
 8008e2c:	b513      	push	{r0, r1, r4, lr}
 8008e2e:	0004      	movs	r4, r0
 8008e30:	f7ff ffec 	bl	8008e0c <__sinit_lock_acquire>
 8008e34:	69a3      	ldr	r3, [r4, #24]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <__sinit+0x14>
 8008e3a:	f7ff ffef 	bl	8008e1c <__sinit_lock_release>
 8008e3e:	bd13      	pop	{r0, r1, r4, pc}
 8008e40:	64a3      	str	r3, [r4, #72]	; 0x48
 8008e42:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008e44:	6523      	str	r3, [r4, #80]	; 0x50
 8008e46:	4b13      	ldr	r3, [pc, #76]	; (8008e94 <__sinit+0x68>)
 8008e48:	4a13      	ldr	r2, [pc, #76]	; (8008e98 <__sinit+0x6c>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e4e:	9301      	str	r3, [sp, #4]
 8008e50:	42a3      	cmp	r3, r4
 8008e52:	d101      	bne.n	8008e58 <__sinit+0x2c>
 8008e54:	2301      	movs	r3, #1
 8008e56:	61a3      	str	r3, [r4, #24]
 8008e58:	0020      	movs	r0, r4
 8008e5a:	f000 f81f 	bl	8008e9c <__sfp>
 8008e5e:	6060      	str	r0, [r4, #4]
 8008e60:	0020      	movs	r0, r4
 8008e62:	f000 f81b 	bl	8008e9c <__sfp>
 8008e66:	60a0      	str	r0, [r4, #8]
 8008e68:	0020      	movs	r0, r4
 8008e6a:	f000 f817 	bl	8008e9c <__sfp>
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2104      	movs	r1, #4
 8008e72:	60e0      	str	r0, [r4, #12]
 8008e74:	6860      	ldr	r0, [r4, #4]
 8008e76:	f7ff ff77 	bl	8008d68 <std>
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	2109      	movs	r1, #9
 8008e7e:	68a0      	ldr	r0, [r4, #8]
 8008e80:	f7ff ff72 	bl	8008d68 <std>
 8008e84:	2202      	movs	r2, #2
 8008e86:	2112      	movs	r1, #18
 8008e88:	68e0      	ldr	r0, [r4, #12]
 8008e8a:	f7ff ff6d 	bl	8008d68 <std>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	61a3      	str	r3, [r4, #24]
 8008e92:	e7d2      	b.n	8008e3a <__sinit+0xe>
 8008e94:	0800a794 	.word	0x0800a794
 8008e98:	08008db1 	.word	0x08008db1

08008e9c <__sfp>:
 8008e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9e:	0007      	movs	r7, r0
 8008ea0:	f7ff ffa4 	bl	8008dec <__sfp_lock_acquire>
 8008ea4:	4b1f      	ldr	r3, [pc, #124]	; (8008f24 <__sfp+0x88>)
 8008ea6:	681e      	ldr	r6, [r3, #0]
 8008ea8:	69b3      	ldr	r3, [r6, #24]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d102      	bne.n	8008eb4 <__sfp+0x18>
 8008eae:	0030      	movs	r0, r6
 8008eb0:	f7ff ffbc 	bl	8008e2c <__sinit>
 8008eb4:	3648      	adds	r6, #72	; 0x48
 8008eb6:	68b4      	ldr	r4, [r6, #8]
 8008eb8:	6873      	ldr	r3, [r6, #4]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	d504      	bpl.n	8008ec8 <__sfp+0x2c>
 8008ebe:	6833      	ldr	r3, [r6, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d022      	beq.n	8008f0a <__sfp+0x6e>
 8008ec4:	6836      	ldr	r6, [r6, #0]
 8008ec6:	e7f6      	b.n	8008eb6 <__sfp+0x1a>
 8008ec8:	220c      	movs	r2, #12
 8008eca:	5ea5      	ldrsh	r5, [r4, r2]
 8008ecc:	2d00      	cmp	r5, #0
 8008ece:	d11a      	bne.n	8008f06 <__sfp+0x6a>
 8008ed0:	0020      	movs	r0, r4
 8008ed2:	4b15      	ldr	r3, [pc, #84]	; (8008f28 <__sfp+0x8c>)
 8008ed4:	3058      	adds	r0, #88	; 0x58
 8008ed6:	60e3      	str	r3, [r4, #12]
 8008ed8:	6665      	str	r5, [r4, #100]	; 0x64
 8008eda:	f000 f84b 	bl	8008f74 <__retarget_lock_init_recursive>
 8008ede:	f7ff ff8d 	bl	8008dfc <__sfp_lock_release>
 8008ee2:	0020      	movs	r0, r4
 8008ee4:	2208      	movs	r2, #8
 8008ee6:	0029      	movs	r1, r5
 8008ee8:	6025      	str	r5, [r4, #0]
 8008eea:	60a5      	str	r5, [r4, #8]
 8008eec:	6065      	str	r5, [r4, #4]
 8008eee:	6125      	str	r5, [r4, #16]
 8008ef0:	6165      	str	r5, [r4, #20]
 8008ef2:	61a5      	str	r5, [r4, #24]
 8008ef4:	305c      	adds	r0, #92	; 0x5c
 8008ef6:	f7fe f9db 	bl	80072b0 <memset>
 8008efa:	6365      	str	r5, [r4, #52]	; 0x34
 8008efc:	63a5      	str	r5, [r4, #56]	; 0x38
 8008efe:	64a5      	str	r5, [r4, #72]	; 0x48
 8008f00:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008f02:	0020      	movs	r0, r4
 8008f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f06:	3468      	adds	r4, #104	; 0x68
 8008f08:	e7d7      	b.n	8008eba <__sfp+0x1e>
 8008f0a:	2104      	movs	r1, #4
 8008f0c:	0038      	movs	r0, r7
 8008f0e:	f7ff ff57 	bl	8008dc0 <__sfmoreglue>
 8008f12:	1e04      	subs	r4, r0, #0
 8008f14:	6030      	str	r0, [r6, #0]
 8008f16:	d1d5      	bne.n	8008ec4 <__sfp+0x28>
 8008f18:	f7ff ff70 	bl	8008dfc <__sfp_lock_release>
 8008f1c:	230c      	movs	r3, #12
 8008f1e:	603b      	str	r3, [r7, #0]
 8008f20:	e7ef      	b.n	8008f02 <__sfp+0x66>
 8008f22:	46c0      	nop			; (mov r8, r8)
 8008f24:	0800a794 	.word	0x0800a794
 8008f28:	ffff0001 	.word	0xffff0001

08008f2c <_fwalk_reent>:
 8008f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f2e:	0004      	movs	r4, r0
 8008f30:	0006      	movs	r6, r0
 8008f32:	2700      	movs	r7, #0
 8008f34:	9101      	str	r1, [sp, #4]
 8008f36:	3448      	adds	r4, #72	; 0x48
 8008f38:	6863      	ldr	r3, [r4, #4]
 8008f3a:	68a5      	ldr	r5, [r4, #8]
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	9b00      	ldr	r3, [sp, #0]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	d504      	bpl.n	8008f50 <_fwalk_reent+0x24>
 8008f46:	6824      	ldr	r4, [r4, #0]
 8008f48:	2c00      	cmp	r4, #0
 8008f4a:	d1f5      	bne.n	8008f38 <_fwalk_reent+0xc>
 8008f4c:	0038      	movs	r0, r7
 8008f4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f50:	89ab      	ldrh	r3, [r5, #12]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d908      	bls.n	8008f68 <_fwalk_reent+0x3c>
 8008f56:	220e      	movs	r2, #14
 8008f58:	5eab      	ldrsh	r3, [r5, r2]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	d004      	beq.n	8008f68 <_fwalk_reent+0x3c>
 8008f5e:	0029      	movs	r1, r5
 8008f60:	0030      	movs	r0, r6
 8008f62:	9b01      	ldr	r3, [sp, #4]
 8008f64:	4798      	blx	r3
 8008f66:	4307      	orrs	r7, r0
 8008f68:	3568      	adds	r5, #104	; 0x68
 8008f6a:	e7e8      	b.n	8008f3e <_fwalk_reent+0x12>

08008f6c <_localeconv_r>:
 8008f6c:	4800      	ldr	r0, [pc, #0]	; (8008f70 <_localeconv_r+0x4>)
 8008f6e:	4770      	bx	lr
 8008f70:	200001e0 	.word	0x200001e0

08008f74 <__retarget_lock_init_recursive>:
 8008f74:	4770      	bx	lr

08008f76 <__retarget_lock_acquire_recursive>:
 8008f76:	4770      	bx	lr

08008f78 <__retarget_lock_release_recursive>:
 8008f78:	4770      	bx	lr
	...

08008f7c <__swhatbuf_r>:
 8008f7c:	b570      	push	{r4, r5, r6, lr}
 8008f7e:	000e      	movs	r6, r1
 8008f80:	001d      	movs	r5, r3
 8008f82:	230e      	movs	r3, #14
 8008f84:	5ec9      	ldrsh	r1, [r1, r3]
 8008f86:	0014      	movs	r4, r2
 8008f88:	b096      	sub	sp, #88	; 0x58
 8008f8a:	2900      	cmp	r1, #0
 8008f8c:	da07      	bge.n	8008f9e <__swhatbuf_r+0x22>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	602b      	str	r3, [r5, #0]
 8008f92:	89b3      	ldrh	r3, [r6, #12]
 8008f94:	061b      	lsls	r3, r3, #24
 8008f96:	d411      	bmi.n	8008fbc <__swhatbuf_r+0x40>
 8008f98:	2380      	movs	r3, #128	; 0x80
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	e00f      	b.n	8008fbe <__swhatbuf_r+0x42>
 8008f9e:	466a      	mov	r2, sp
 8008fa0:	f000 fede 	bl	8009d60 <_fstat_r>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	dbf2      	blt.n	8008f8e <__swhatbuf_r+0x12>
 8008fa8:	23f0      	movs	r3, #240	; 0xf0
 8008faa:	9901      	ldr	r1, [sp, #4]
 8008fac:	021b      	lsls	r3, r3, #8
 8008fae:	4019      	ands	r1, r3
 8008fb0:	4b05      	ldr	r3, [pc, #20]	; (8008fc8 <__swhatbuf_r+0x4c>)
 8008fb2:	18c9      	adds	r1, r1, r3
 8008fb4:	424b      	negs	r3, r1
 8008fb6:	4159      	adcs	r1, r3
 8008fb8:	6029      	str	r1, [r5, #0]
 8008fba:	e7ed      	b.n	8008f98 <__swhatbuf_r+0x1c>
 8008fbc:	2340      	movs	r3, #64	; 0x40
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	b016      	add	sp, #88	; 0x58
 8008fc4:	bd70      	pop	{r4, r5, r6, pc}
 8008fc6:	46c0      	nop			; (mov r8, r8)
 8008fc8:	ffffe000 	.word	0xffffe000

08008fcc <__smakebuf_r>:
 8008fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fce:	2602      	movs	r6, #2
 8008fd0:	898b      	ldrh	r3, [r1, #12]
 8008fd2:	0005      	movs	r5, r0
 8008fd4:	000c      	movs	r4, r1
 8008fd6:	4233      	tst	r3, r6
 8008fd8:	d006      	beq.n	8008fe8 <__smakebuf_r+0x1c>
 8008fda:	0023      	movs	r3, r4
 8008fdc:	3347      	adds	r3, #71	; 0x47
 8008fde:	6023      	str	r3, [r4, #0]
 8008fe0:	6123      	str	r3, [r4, #16]
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	6163      	str	r3, [r4, #20]
 8008fe6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008fe8:	466a      	mov	r2, sp
 8008fea:	ab01      	add	r3, sp, #4
 8008fec:	f7ff ffc6 	bl	8008f7c <__swhatbuf_r>
 8008ff0:	9900      	ldr	r1, [sp, #0]
 8008ff2:	0007      	movs	r7, r0
 8008ff4:	0028      	movs	r0, r5
 8008ff6:	f000 fc41 	bl	800987c <_malloc_r>
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	d108      	bne.n	8009010 <__smakebuf_r+0x44>
 8008ffe:	220c      	movs	r2, #12
 8009000:	5ea3      	ldrsh	r3, [r4, r2]
 8009002:	059a      	lsls	r2, r3, #22
 8009004:	d4ef      	bmi.n	8008fe6 <__smakebuf_r+0x1a>
 8009006:	2203      	movs	r2, #3
 8009008:	4393      	bics	r3, r2
 800900a:	431e      	orrs	r6, r3
 800900c:	81a6      	strh	r6, [r4, #12]
 800900e:	e7e4      	b.n	8008fda <__smakebuf_r+0xe>
 8009010:	4b0f      	ldr	r3, [pc, #60]	; (8009050 <__smakebuf_r+0x84>)
 8009012:	62ab      	str	r3, [r5, #40]	; 0x28
 8009014:	2380      	movs	r3, #128	; 0x80
 8009016:	89a2      	ldrh	r2, [r4, #12]
 8009018:	6020      	str	r0, [r4, #0]
 800901a:	4313      	orrs	r3, r2
 800901c:	81a3      	strh	r3, [r4, #12]
 800901e:	9b00      	ldr	r3, [sp, #0]
 8009020:	6120      	str	r0, [r4, #16]
 8009022:	6163      	str	r3, [r4, #20]
 8009024:	9b01      	ldr	r3, [sp, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00d      	beq.n	8009046 <__smakebuf_r+0x7a>
 800902a:	0028      	movs	r0, r5
 800902c:	230e      	movs	r3, #14
 800902e:	5ee1      	ldrsh	r1, [r4, r3]
 8009030:	f000 fea8 	bl	8009d84 <_isatty_r>
 8009034:	2800      	cmp	r0, #0
 8009036:	d006      	beq.n	8009046 <__smakebuf_r+0x7a>
 8009038:	2203      	movs	r2, #3
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	4393      	bics	r3, r2
 800903e:	001a      	movs	r2, r3
 8009040:	2301      	movs	r3, #1
 8009042:	4313      	orrs	r3, r2
 8009044:	81a3      	strh	r3, [r4, #12]
 8009046:	89a0      	ldrh	r0, [r4, #12]
 8009048:	4307      	orrs	r7, r0
 800904a:	81a7      	strh	r7, [r4, #12]
 800904c:	e7cb      	b.n	8008fe6 <__smakebuf_r+0x1a>
 800904e:	46c0      	nop			; (mov r8, r8)
 8009050:	08008db1 	.word	0x08008db1

08009054 <malloc>:
 8009054:	b510      	push	{r4, lr}
 8009056:	4b03      	ldr	r3, [pc, #12]	; (8009064 <malloc+0x10>)
 8009058:	0001      	movs	r1, r0
 800905a:	6818      	ldr	r0, [r3, #0]
 800905c:	f000 fc0e 	bl	800987c <_malloc_r>
 8009060:	bd10      	pop	{r4, pc}
 8009062:	46c0      	nop			; (mov r8, r8)
 8009064:	2000008c 	.word	0x2000008c

08009068 <memchr>:
 8009068:	b2c9      	uxtb	r1, r1
 800906a:	1882      	adds	r2, r0, r2
 800906c:	4290      	cmp	r0, r2
 800906e:	d101      	bne.n	8009074 <memchr+0xc>
 8009070:	2000      	movs	r0, #0
 8009072:	4770      	bx	lr
 8009074:	7803      	ldrb	r3, [r0, #0]
 8009076:	428b      	cmp	r3, r1
 8009078:	d0fb      	beq.n	8009072 <memchr+0xa>
 800907a:	3001      	adds	r0, #1
 800907c:	e7f6      	b.n	800906c <memchr+0x4>

0800907e <memcpy>:
 800907e:	2300      	movs	r3, #0
 8009080:	b510      	push	{r4, lr}
 8009082:	429a      	cmp	r2, r3
 8009084:	d100      	bne.n	8009088 <memcpy+0xa>
 8009086:	bd10      	pop	{r4, pc}
 8009088:	5ccc      	ldrb	r4, [r1, r3]
 800908a:	54c4      	strb	r4, [r0, r3]
 800908c:	3301      	adds	r3, #1
 800908e:	e7f8      	b.n	8009082 <memcpy+0x4>

08009090 <_Balloc>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009094:	0006      	movs	r6, r0
 8009096:	000c      	movs	r4, r1
 8009098:	2d00      	cmp	r5, #0
 800909a:	d10e      	bne.n	80090ba <_Balloc+0x2a>
 800909c:	2010      	movs	r0, #16
 800909e:	f7ff ffd9 	bl	8009054 <malloc>
 80090a2:	1e02      	subs	r2, r0, #0
 80090a4:	6270      	str	r0, [r6, #36]	; 0x24
 80090a6:	d104      	bne.n	80090b2 <_Balloc+0x22>
 80090a8:	2166      	movs	r1, #102	; 0x66
 80090aa:	4b19      	ldr	r3, [pc, #100]	; (8009110 <_Balloc+0x80>)
 80090ac:	4819      	ldr	r0, [pc, #100]	; (8009114 <_Balloc+0x84>)
 80090ae:	f000 fe17 	bl	8009ce0 <__assert_func>
 80090b2:	6045      	str	r5, [r0, #4]
 80090b4:	6085      	str	r5, [r0, #8]
 80090b6:	6005      	str	r5, [r0, #0]
 80090b8:	60c5      	str	r5, [r0, #12]
 80090ba:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80090bc:	68eb      	ldr	r3, [r5, #12]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d013      	beq.n	80090ea <_Balloc+0x5a>
 80090c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80090c4:	00a2      	lsls	r2, r4, #2
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	189b      	adds	r3, r3, r2
 80090ca:	6818      	ldr	r0, [r3, #0]
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d118      	bne.n	8009102 <_Balloc+0x72>
 80090d0:	2101      	movs	r1, #1
 80090d2:	000d      	movs	r5, r1
 80090d4:	40a5      	lsls	r5, r4
 80090d6:	1d6a      	adds	r2, r5, #5
 80090d8:	0030      	movs	r0, r6
 80090da:	0092      	lsls	r2, r2, #2
 80090dc:	f000 fb76 	bl	80097cc <_calloc_r>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d00c      	beq.n	80090fe <_Balloc+0x6e>
 80090e4:	6044      	str	r4, [r0, #4]
 80090e6:	6085      	str	r5, [r0, #8]
 80090e8:	e00d      	b.n	8009106 <_Balloc+0x76>
 80090ea:	2221      	movs	r2, #33	; 0x21
 80090ec:	2104      	movs	r1, #4
 80090ee:	0030      	movs	r0, r6
 80090f0:	f000 fb6c 	bl	80097cc <_calloc_r>
 80090f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80090f6:	60e8      	str	r0, [r5, #12]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1e1      	bne.n	80090c2 <_Balloc+0x32>
 80090fe:	2000      	movs	r0, #0
 8009100:	bd70      	pop	{r4, r5, r6, pc}
 8009102:	6802      	ldr	r2, [r0, #0]
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	2300      	movs	r3, #0
 8009108:	6103      	str	r3, [r0, #16]
 800910a:	60c3      	str	r3, [r0, #12]
 800910c:	e7f8      	b.n	8009100 <_Balloc+0x70>
 800910e:	46c0      	nop			; (mov r8, r8)
 8009110:	0800a7d9 	.word	0x0800a7d9
 8009114:	0800a8c0 	.word	0x0800a8c0

08009118 <_Bfree>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800911c:	0005      	movs	r5, r0
 800911e:	000c      	movs	r4, r1
 8009120:	2e00      	cmp	r6, #0
 8009122:	d10e      	bne.n	8009142 <_Bfree+0x2a>
 8009124:	2010      	movs	r0, #16
 8009126:	f7ff ff95 	bl	8009054 <malloc>
 800912a:	1e02      	subs	r2, r0, #0
 800912c:	6268      	str	r0, [r5, #36]	; 0x24
 800912e:	d104      	bne.n	800913a <_Bfree+0x22>
 8009130:	218a      	movs	r1, #138	; 0x8a
 8009132:	4b09      	ldr	r3, [pc, #36]	; (8009158 <_Bfree+0x40>)
 8009134:	4809      	ldr	r0, [pc, #36]	; (800915c <_Bfree+0x44>)
 8009136:	f000 fdd3 	bl	8009ce0 <__assert_func>
 800913a:	6046      	str	r6, [r0, #4]
 800913c:	6086      	str	r6, [r0, #8]
 800913e:	6006      	str	r6, [r0, #0]
 8009140:	60c6      	str	r6, [r0, #12]
 8009142:	2c00      	cmp	r4, #0
 8009144:	d007      	beq.n	8009156 <_Bfree+0x3e>
 8009146:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009148:	6862      	ldr	r2, [r4, #4]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	0092      	lsls	r2, r2, #2
 800914e:	189b      	adds	r3, r3, r2
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	6022      	str	r2, [r4, #0]
 8009154:	601c      	str	r4, [r3, #0]
 8009156:	bd70      	pop	{r4, r5, r6, pc}
 8009158:	0800a7d9 	.word	0x0800a7d9
 800915c:	0800a8c0 	.word	0x0800a8c0

08009160 <__multadd>:
 8009160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009162:	000e      	movs	r6, r1
 8009164:	9001      	str	r0, [sp, #4]
 8009166:	000c      	movs	r4, r1
 8009168:	001d      	movs	r5, r3
 800916a:	2000      	movs	r0, #0
 800916c:	690f      	ldr	r7, [r1, #16]
 800916e:	3614      	adds	r6, #20
 8009170:	6833      	ldr	r3, [r6, #0]
 8009172:	3001      	adds	r0, #1
 8009174:	b299      	uxth	r1, r3
 8009176:	4351      	muls	r1, r2
 8009178:	0c1b      	lsrs	r3, r3, #16
 800917a:	4353      	muls	r3, r2
 800917c:	1949      	adds	r1, r1, r5
 800917e:	0c0d      	lsrs	r5, r1, #16
 8009180:	195b      	adds	r3, r3, r5
 8009182:	0c1d      	lsrs	r5, r3, #16
 8009184:	b289      	uxth	r1, r1
 8009186:	041b      	lsls	r3, r3, #16
 8009188:	185b      	adds	r3, r3, r1
 800918a:	c608      	stmia	r6!, {r3}
 800918c:	4287      	cmp	r7, r0
 800918e:	dcef      	bgt.n	8009170 <__multadd+0x10>
 8009190:	2d00      	cmp	r5, #0
 8009192:	d022      	beq.n	80091da <__multadd+0x7a>
 8009194:	68a3      	ldr	r3, [r4, #8]
 8009196:	42bb      	cmp	r3, r7
 8009198:	dc19      	bgt.n	80091ce <__multadd+0x6e>
 800919a:	6863      	ldr	r3, [r4, #4]
 800919c:	9801      	ldr	r0, [sp, #4]
 800919e:	1c59      	adds	r1, r3, #1
 80091a0:	f7ff ff76 	bl	8009090 <_Balloc>
 80091a4:	1e06      	subs	r6, r0, #0
 80091a6:	d105      	bne.n	80091b4 <__multadd+0x54>
 80091a8:	0002      	movs	r2, r0
 80091aa:	21b5      	movs	r1, #181	; 0xb5
 80091ac:	4b0c      	ldr	r3, [pc, #48]	; (80091e0 <__multadd+0x80>)
 80091ae:	480d      	ldr	r0, [pc, #52]	; (80091e4 <__multadd+0x84>)
 80091b0:	f000 fd96 	bl	8009ce0 <__assert_func>
 80091b4:	0021      	movs	r1, r4
 80091b6:	6923      	ldr	r3, [r4, #16]
 80091b8:	310c      	adds	r1, #12
 80091ba:	1c9a      	adds	r2, r3, #2
 80091bc:	0092      	lsls	r2, r2, #2
 80091be:	300c      	adds	r0, #12
 80091c0:	f7ff ff5d 	bl	800907e <memcpy>
 80091c4:	0021      	movs	r1, r4
 80091c6:	9801      	ldr	r0, [sp, #4]
 80091c8:	f7ff ffa6 	bl	8009118 <_Bfree>
 80091cc:	0034      	movs	r4, r6
 80091ce:	1d3b      	adds	r3, r7, #4
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	18e3      	adds	r3, r4, r3
 80091d4:	605d      	str	r5, [r3, #4]
 80091d6:	1c7b      	adds	r3, r7, #1
 80091d8:	6123      	str	r3, [r4, #16]
 80091da:	0020      	movs	r0, r4
 80091dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091de:	46c0      	nop			; (mov r8, r8)
 80091e0:	0800a84f 	.word	0x0800a84f
 80091e4:	0800a8c0 	.word	0x0800a8c0

080091e8 <__hi0bits>:
 80091e8:	0003      	movs	r3, r0
 80091ea:	0c02      	lsrs	r2, r0, #16
 80091ec:	2000      	movs	r0, #0
 80091ee:	4282      	cmp	r2, r0
 80091f0:	d101      	bne.n	80091f6 <__hi0bits+0xe>
 80091f2:	041b      	lsls	r3, r3, #16
 80091f4:	3010      	adds	r0, #16
 80091f6:	0e1a      	lsrs	r2, r3, #24
 80091f8:	d101      	bne.n	80091fe <__hi0bits+0x16>
 80091fa:	3008      	adds	r0, #8
 80091fc:	021b      	lsls	r3, r3, #8
 80091fe:	0f1a      	lsrs	r2, r3, #28
 8009200:	d101      	bne.n	8009206 <__hi0bits+0x1e>
 8009202:	3004      	adds	r0, #4
 8009204:	011b      	lsls	r3, r3, #4
 8009206:	0f9a      	lsrs	r2, r3, #30
 8009208:	d101      	bne.n	800920e <__hi0bits+0x26>
 800920a:	3002      	adds	r0, #2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	2b00      	cmp	r3, #0
 8009210:	db03      	blt.n	800921a <__hi0bits+0x32>
 8009212:	3001      	adds	r0, #1
 8009214:	005b      	lsls	r3, r3, #1
 8009216:	d400      	bmi.n	800921a <__hi0bits+0x32>
 8009218:	2020      	movs	r0, #32
 800921a:	4770      	bx	lr

0800921c <__lo0bits>:
 800921c:	6803      	ldr	r3, [r0, #0]
 800921e:	0002      	movs	r2, r0
 8009220:	2107      	movs	r1, #7
 8009222:	0018      	movs	r0, r3
 8009224:	4008      	ands	r0, r1
 8009226:	420b      	tst	r3, r1
 8009228:	d00d      	beq.n	8009246 <__lo0bits+0x2a>
 800922a:	3906      	subs	r1, #6
 800922c:	2000      	movs	r0, #0
 800922e:	420b      	tst	r3, r1
 8009230:	d105      	bne.n	800923e <__lo0bits+0x22>
 8009232:	3002      	adds	r0, #2
 8009234:	4203      	tst	r3, r0
 8009236:	d003      	beq.n	8009240 <__lo0bits+0x24>
 8009238:	40cb      	lsrs	r3, r1
 800923a:	0008      	movs	r0, r1
 800923c:	6013      	str	r3, [r2, #0]
 800923e:	4770      	bx	lr
 8009240:	089b      	lsrs	r3, r3, #2
 8009242:	6013      	str	r3, [r2, #0]
 8009244:	e7fb      	b.n	800923e <__lo0bits+0x22>
 8009246:	b299      	uxth	r1, r3
 8009248:	2900      	cmp	r1, #0
 800924a:	d101      	bne.n	8009250 <__lo0bits+0x34>
 800924c:	2010      	movs	r0, #16
 800924e:	0c1b      	lsrs	r3, r3, #16
 8009250:	b2d9      	uxtb	r1, r3
 8009252:	2900      	cmp	r1, #0
 8009254:	d101      	bne.n	800925a <__lo0bits+0x3e>
 8009256:	3008      	adds	r0, #8
 8009258:	0a1b      	lsrs	r3, r3, #8
 800925a:	0719      	lsls	r1, r3, #28
 800925c:	d101      	bne.n	8009262 <__lo0bits+0x46>
 800925e:	3004      	adds	r0, #4
 8009260:	091b      	lsrs	r3, r3, #4
 8009262:	0799      	lsls	r1, r3, #30
 8009264:	d101      	bne.n	800926a <__lo0bits+0x4e>
 8009266:	3002      	adds	r0, #2
 8009268:	089b      	lsrs	r3, r3, #2
 800926a:	07d9      	lsls	r1, r3, #31
 800926c:	d4e9      	bmi.n	8009242 <__lo0bits+0x26>
 800926e:	3001      	adds	r0, #1
 8009270:	085b      	lsrs	r3, r3, #1
 8009272:	d1e6      	bne.n	8009242 <__lo0bits+0x26>
 8009274:	2020      	movs	r0, #32
 8009276:	e7e2      	b.n	800923e <__lo0bits+0x22>

08009278 <__i2b>:
 8009278:	b510      	push	{r4, lr}
 800927a:	000c      	movs	r4, r1
 800927c:	2101      	movs	r1, #1
 800927e:	f7ff ff07 	bl	8009090 <_Balloc>
 8009282:	2800      	cmp	r0, #0
 8009284:	d106      	bne.n	8009294 <__i2b+0x1c>
 8009286:	21a0      	movs	r1, #160	; 0xa0
 8009288:	0002      	movs	r2, r0
 800928a:	4b04      	ldr	r3, [pc, #16]	; (800929c <__i2b+0x24>)
 800928c:	4804      	ldr	r0, [pc, #16]	; (80092a0 <__i2b+0x28>)
 800928e:	0049      	lsls	r1, r1, #1
 8009290:	f000 fd26 	bl	8009ce0 <__assert_func>
 8009294:	2301      	movs	r3, #1
 8009296:	6144      	str	r4, [r0, #20]
 8009298:	6103      	str	r3, [r0, #16]
 800929a:	bd10      	pop	{r4, pc}
 800929c:	0800a84f 	.word	0x0800a84f
 80092a0:	0800a8c0 	.word	0x0800a8c0

080092a4 <__multiply>:
 80092a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092a6:	690b      	ldr	r3, [r1, #16]
 80092a8:	0014      	movs	r4, r2
 80092aa:	6912      	ldr	r2, [r2, #16]
 80092ac:	000d      	movs	r5, r1
 80092ae:	b089      	sub	sp, #36	; 0x24
 80092b0:	4293      	cmp	r3, r2
 80092b2:	da01      	bge.n	80092b8 <__multiply+0x14>
 80092b4:	0025      	movs	r5, r4
 80092b6:	000c      	movs	r4, r1
 80092b8:	692f      	ldr	r7, [r5, #16]
 80092ba:	6926      	ldr	r6, [r4, #16]
 80092bc:	6869      	ldr	r1, [r5, #4]
 80092be:	19bb      	adds	r3, r7, r6
 80092c0:	9302      	str	r3, [sp, #8]
 80092c2:	68ab      	ldr	r3, [r5, #8]
 80092c4:	19ba      	adds	r2, r7, r6
 80092c6:	4293      	cmp	r3, r2
 80092c8:	da00      	bge.n	80092cc <__multiply+0x28>
 80092ca:	3101      	adds	r1, #1
 80092cc:	f7ff fee0 	bl	8009090 <_Balloc>
 80092d0:	9001      	str	r0, [sp, #4]
 80092d2:	2800      	cmp	r0, #0
 80092d4:	d106      	bne.n	80092e4 <__multiply+0x40>
 80092d6:	215e      	movs	r1, #94	; 0x5e
 80092d8:	0002      	movs	r2, r0
 80092da:	4b48      	ldr	r3, [pc, #288]	; (80093fc <__multiply+0x158>)
 80092dc:	4848      	ldr	r0, [pc, #288]	; (8009400 <__multiply+0x15c>)
 80092de:	31ff      	adds	r1, #255	; 0xff
 80092e0:	f000 fcfe 	bl	8009ce0 <__assert_func>
 80092e4:	9b01      	ldr	r3, [sp, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	3314      	adds	r3, #20
 80092ea:	469c      	mov	ip, r3
 80092ec:	19bb      	adds	r3, r7, r6
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4463      	add	r3, ip
 80092f2:	9303      	str	r3, [sp, #12]
 80092f4:	4663      	mov	r3, ip
 80092f6:	9903      	ldr	r1, [sp, #12]
 80092f8:	428b      	cmp	r3, r1
 80092fa:	d32c      	bcc.n	8009356 <__multiply+0xb2>
 80092fc:	002b      	movs	r3, r5
 80092fe:	0022      	movs	r2, r4
 8009300:	3314      	adds	r3, #20
 8009302:	00bf      	lsls	r7, r7, #2
 8009304:	3214      	adds	r2, #20
 8009306:	9306      	str	r3, [sp, #24]
 8009308:	00b6      	lsls	r6, r6, #2
 800930a:	19db      	adds	r3, r3, r7
 800930c:	9304      	str	r3, [sp, #16]
 800930e:	1993      	adds	r3, r2, r6
 8009310:	9307      	str	r3, [sp, #28]
 8009312:	2304      	movs	r3, #4
 8009314:	9305      	str	r3, [sp, #20]
 8009316:	002b      	movs	r3, r5
 8009318:	9904      	ldr	r1, [sp, #16]
 800931a:	3315      	adds	r3, #21
 800931c:	9200      	str	r2, [sp, #0]
 800931e:	4299      	cmp	r1, r3
 8009320:	d305      	bcc.n	800932e <__multiply+0x8a>
 8009322:	1b4b      	subs	r3, r1, r5
 8009324:	3b15      	subs	r3, #21
 8009326:	089b      	lsrs	r3, r3, #2
 8009328:	3301      	adds	r3, #1
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	9305      	str	r3, [sp, #20]
 800932e:	9b07      	ldr	r3, [sp, #28]
 8009330:	9a00      	ldr	r2, [sp, #0]
 8009332:	429a      	cmp	r2, r3
 8009334:	d311      	bcc.n	800935a <__multiply+0xb6>
 8009336:	9b02      	ldr	r3, [sp, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	dd06      	ble.n	800934a <__multiply+0xa6>
 800933c:	9b03      	ldr	r3, [sp, #12]
 800933e:	3b04      	subs	r3, #4
 8009340:	9303      	str	r3, [sp, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d054      	beq.n	80093f4 <__multiply+0x150>
 800934a:	9b01      	ldr	r3, [sp, #4]
 800934c:	9a02      	ldr	r2, [sp, #8]
 800934e:	0018      	movs	r0, r3
 8009350:	611a      	str	r2, [r3, #16]
 8009352:	b009      	add	sp, #36	; 0x24
 8009354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009356:	c304      	stmia	r3!, {r2}
 8009358:	e7cd      	b.n	80092f6 <__multiply+0x52>
 800935a:	9b00      	ldr	r3, [sp, #0]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	b298      	uxth	r0, r3
 8009360:	2800      	cmp	r0, #0
 8009362:	d01c      	beq.n	800939e <__multiply+0xfa>
 8009364:	4667      	mov	r7, ip
 8009366:	2400      	movs	r4, #0
 8009368:	9e06      	ldr	r6, [sp, #24]
 800936a:	ce02      	ldmia	r6!, {r1}
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	b28b      	uxth	r3, r1
 8009370:	4343      	muls	r3, r0
 8009372:	0c09      	lsrs	r1, r1, #16
 8009374:	4341      	muls	r1, r0
 8009376:	b292      	uxth	r2, r2
 8009378:	189b      	adds	r3, r3, r2
 800937a:	191b      	adds	r3, r3, r4
 800937c:	000c      	movs	r4, r1
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	0c11      	lsrs	r1, r2, #16
 8009382:	1861      	adds	r1, r4, r1
 8009384:	0c1c      	lsrs	r4, r3, #16
 8009386:	1909      	adds	r1, r1, r4
 8009388:	0c0c      	lsrs	r4, r1, #16
 800938a:	b29b      	uxth	r3, r3
 800938c:	0409      	lsls	r1, r1, #16
 800938e:	430b      	orrs	r3, r1
 8009390:	c708      	stmia	r7!, {r3}
 8009392:	9b04      	ldr	r3, [sp, #16]
 8009394:	42b3      	cmp	r3, r6
 8009396:	d8e8      	bhi.n	800936a <__multiply+0xc6>
 8009398:	4663      	mov	r3, ip
 800939a:	9a05      	ldr	r2, [sp, #20]
 800939c:	509c      	str	r4, [r3, r2]
 800939e:	9b00      	ldr	r3, [sp, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	0c1e      	lsrs	r6, r3, #16
 80093a4:	d020      	beq.n	80093e8 <__multiply+0x144>
 80093a6:	4663      	mov	r3, ip
 80093a8:	002c      	movs	r4, r5
 80093aa:	4660      	mov	r0, ip
 80093ac:	2700      	movs	r7, #0
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3414      	adds	r4, #20
 80093b2:	6822      	ldr	r2, [r4, #0]
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	b291      	uxth	r1, r2
 80093b8:	4371      	muls	r1, r6
 80093ba:	6802      	ldr	r2, [r0, #0]
 80093bc:	0c12      	lsrs	r2, r2, #16
 80093be:	1889      	adds	r1, r1, r2
 80093c0:	19cf      	adds	r7, r1, r7
 80093c2:	0439      	lsls	r1, r7, #16
 80093c4:	430b      	orrs	r3, r1
 80093c6:	6003      	str	r3, [r0, #0]
 80093c8:	cc02      	ldmia	r4!, {r1}
 80093ca:	6843      	ldr	r3, [r0, #4]
 80093cc:	0c09      	lsrs	r1, r1, #16
 80093ce:	4371      	muls	r1, r6
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	0c3f      	lsrs	r7, r7, #16
 80093d4:	18cb      	adds	r3, r1, r3
 80093d6:	9a04      	ldr	r2, [sp, #16]
 80093d8:	19db      	adds	r3, r3, r7
 80093da:	0c1f      	lsrs	r7, r3, #16
 80093dc:	3004      	adds	r0, #4
 80093de:	42a2      	cmp	r2, r4
 80093e0:	d8e7      	bhi.n	80093b2 <__multiply+0x10e>
 80093e2:	4662      	mov	r2, ip
 80093e4:	9905      	ldr	r1, [sp, #20]
 80093e6:	5053      	str	r3, [r2, r1]
 80093e8:	9b00      	ldr	r3, [sp, #0]
 80093ea:	3304      	adds	r3, #4
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	2304      	movs	r3, #4
 80093f0:	449c      	add	ip, r3
 80093f2:	e79c      	b.n	800932e <__multiply+0x8a>
 80093f4:	9b02      	ldr	r3, [sp, #8]
 80093f6:	3b01      	subs	r3, #1
 80093f8:	9302      	str	r3, [sp, #8]
 80093fa:	e79c      	b.n	8009336 <__multiply+0x92>
 80093fc:	0800a84f 	.word	0x0800a84f
 8009400:	0800a8c0 	.word	0x0800a8c0

08009404 <__pow5mult>:
 8009404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009406:	2303      	movs	r3, #3
 8009408:	0015      	movs	r5, r2
 800940a:	0007      	movs	r7, r0
 800940c:	000e      	movs	r6, r1
 800940e:	401a      	ands	r2, r3
 8009410:	421d      	tst	r5, r3
 8009412:	d008      	beq.n	8009426 <__pow5mult+0x22>
 8009414:	4925      	ldr	r1, [pc, #148]	; (80094ac <__pow5mult+0xa8>)
 8009416:	3a01      	subs	r2, #1
 8009418:	0092      	lsls	r2, r2, #2
 800941a:	5852      	ldr	r2, [r2, r1]
 800941c:	2300      	movs	r3, #0
 800941e:	0031      	movs	r1, r6
 8009420:	f7ff fe9e 	bl	8009160 <__multadd>
 8009424:	0006      	movs	r6, r0
 8009426:	10ad      	asrs	r5, r5, #2
 8009428:	d03d      	beq.n	80094a6 <__pow5mult+0xa2>
 800942a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800942c:	2c00      	cmp	r4, #0
 800942e:	d10f      	bne.n	8009450 <__pow5mult+0x4c>
 8009430:	2010      	movs	r0, #16
 8009432:	f7ff fe0f 	bl	8009054 <malloc>
 8009436:	1e02      	subs	r2, r0, #0
 8009438:	6278      	str	r0, [r7, #36]	; 0x24
 800943a:	d105      	bne.n	8009448 <__pow5mult+0x44>
 800943c:	21d7      	movs	r1, #215	; 0xd7
 800943e:	4b1c      	ldr	r3, [pc, #112]	; (80094b0 <__pow5mult+0xac>)
 8009440:	481c      	ldr	r0, [pc, #112]	; (80094b4 <__pow5mult+0xb0>)
 8009442:	0049      	lsls	r1, r1, #1
 8009444:	f000 fc4c 	bl	8009ce0 <__assert_func>
 8009448:	6044      	str	r4, [r0, #4]
 800944a:	6084      	str	r4, [r0, #8]
 800944c:	6004      	str	r4, [r0, #0]
 800944e:	60c4      	str	r4, [r0, #12]
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	689c      	ldr	r4, [r3, #8]
 8009454:	9301      	str	r3, [sp, #4]
 8009456:	2c00      	cmp	r4, #0
 8009458:	d108      	bne.n	800946c <__pow5mult+0x68>
 800945a:	0038      	movs	r0, r7
 800945c:	4916      	ldr	r1, [pc, #88]	; (80094b8 <__pow5mult+0xb4>)
 800945e:	f7ff ff0b 	bl	8009278 <__i2b>
 8009462:	9b01      	ldr	r3, [sp, #4]
 8009464:	0004      	movs	r4, r0
 8009466:	6098      	str	r0, [r3, #8]
 8009468:	2300      	movs	r3, #0
 800946a:	6003      	str	r3, [r0, #0]
 800946c:	2301      	movs	r3, #1
 800946e:	421d      	tst	r5, r3
 8009470:	d00a      	beq.n	8009488 <__pow5mult+0x84>
 8009472:	0031      	movs	r1, r6
 8009474:	0022      	movs	r2, r4
 8009476:	0038      	movs	r0, r7
 8009478:	f7ff ff14 	bl	80092a4 <__multiply>
 800947c:	0031      	movs	r1, r6
 800947e:	9001      	str	r0, [sp, #4]
 8009480:	0038      	movs	r0, r7
 8009482:	f7ff fe49 	bl	8009118 <_Bfree>
 8009486:	9e01      	ldr	r6, [sp, #4]
 8009488:	106d      	asrs	r5, r5, #1
 800948a:	d00c      	beq.n	80094a6 <__pow5mult+0xa2>
 800948c:	6820      	ldr	r0, [r4, #0]
 800948e:	2800      	cmp	r0, #0
 8009490:	d107      	bne.n	80094a2 <__pow5mult+0x9e>
 8009492:	0022      	movs	r2, r4
 8009494:	0021      	movs	r1, r4
 8009496:	0038      	movs	r0, r7
 8009498:	f7ff ff04 	bl	80092a4 <__multiply>
 800949c:	2300      	movs	r3, #0
 800949e:	6020      	str	r0, [r4, #0]
 80094a0:	6003      	str	r3, [r0, #0]
 80094a2:	0004      	movs	r4, r0
 80094a4:	e7e2      	b.n	800946c <__pow5mult+0x68>
 80094a6:	0030      	movs	r0, r6
 80094a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80094aa:	46c0      	nop			; (mov r8, r8)
 80094ac:	0800aa10 	.word	0x0800aa10
 80094b0:	0800a7d9 	.word	0x0800a7d9
 80094b4:	0800a8c0 	.word	0x0800a8c0
 80094b8:	00000271 	.word	0x00000271

080094bc <__lshift>:
 80094bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094be:	000c      	movs	r4, r1
 80094c0:	0017      	movs	r7, r2
 80094c2:	6923      	ldr	r3, [r4, #16]
 80094c4:	1155      	asrs	r5, r2, #5
 80094c6:	b087      	sub	sp, #28
 80094c8:	18eb      	adds	r3, r5, r3
 80094ca:	9302      	str	r3, [sp, #8]
 80094cc:	3301      	adds	r3, #1
 80094ce:	9301      	str	r3, [sp, #4]
 80094d0:	6849      	ldr	r1, [r1, #4]
 80094d2:	68a3      	ldr	r3, [r4, #8]
 80094d4:	9004      	str	r0, [sp, #16]
 80094d6:	9a01      	ldr	r2, [sp, #4]
 80094d8:	4293      	cmp	r3, r2
 80094da:	db11      	blt.n	8009500 <__lshift+0x44>
 80094dc:	9804      	ldr	r0, [sp, #16]
 80094de:	f7ff fdd7 	bl	8009090 <_Balloc>
 80094e2:	0002      	movs	r2, r0
 80094e4:	2300      	movs	r3, #0
 80094e6:	3214      	adds	r2, #20
 80094e8:	0006      	movs	r6, r0
 80094ea:	0011      	movs	r1, r2
 80094ec:	9203      	str	r2, [sp, #12]
 80094ee:	4298      	cmp	r0, r3
 80094f0:	d10d      	bne.n	800950e <__lshift+0x52>
 80094f2:	21da      	movs	r1, #218	; 0xda
 80094f4:	0002      	movs	r2, r0
 80094f6:	4b27      	ldr	r3, [pc, #156]	; (8009594 <__lshift+0xd8>)
 80094f8:	4827      	ldr	r0, [pc, #156]	; (8009598 <__lshift+0xdc>)
 80094fa:	31ff      	adds	r1, #255	; 0xff
 80094fc:	f000 fbf0 	bl	8009ce0 <__assert_func>
 8009500:	3101      	adds	r1, #1
 8009502:	005b      	lsls	r3, r3, #1
 8009504:	e7e7      	b.n	80094d6 <__lshift+0x1a>
 8009506:	2200      	movs	r2, #0
 8009508:	0098      	lsls	r0, r3, #2
 800950a:	500a      	str	r2, [r1, r0]
 800950c:	3301      	adds	r3, #1
 800950e:	42ab      	cmp	r3, r5
 8009510:	dbf9      	blt.n	8009506 <__lshift+0x4a>
 8009512:	43eb      	mvns	r3, r5
 8009514:	17db      	asrs	r3, r3, #31
 8009516:	401d      	ands	r5, r3
 8009518:	9b03      	ldr	r3, [sp, #12]
 800951a:	00ad      	lsls	r5, r5, #2
 800951c:	211f      	movs	r1, #31
 800951e:	0038      	movs	r0, r7
 8009520:	195d      	adds	r5, r3, r5
 8009522:	0023      	movs	r3, r4
 8009524:	6922      	ldr	r2, [r4, #16]
 8009526:	3314      	adds	r3, #20
 8009528:	0092      	lsls	r2, r2, #2
 800952a:	4008      	ands	r0, r1
 800952c:	4684      	mov	ip, r0
 800952e:	189a      	adds	r2, r3, r2
 8009530:	420f      	tst	r7, r1
 8009532:	d02a      	beq.n	800958a <__lshift+0xce>
 8009534:	3101      	adds	r1, #1
 8009536:	1a09      	subs	r1, r1, r0
 8009538:	9105      	str	r1, [sp, #20]
 800953a:	2100      	movs	r1, #0
 800953c:	9503      	str	r5, [sp, #12]
 800953e:	4667      	mov	r7, ip
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	40b8      	lsls	r0, r7
 8009544:	4301      	orrs	r1, r0
 8009546:	9803      	ldr	r0, [sp, #12]
 8009548:	c002      	stmia	r0!, {r1}
 800954a:	cb02      	ldmia	r3!, {r1}
 800954c:	9003      	str	r0, [sp, #12]
 800954e:	9805      	ldr	r0, [sp, #20]
 8009550:	40c1      	lsrs	r1, r0
 8009552:	429a      	cmp	r2, r3
 8009554:	d8f3      	bhi.n	800953e <__lshift+0x82>
 8009556:	0020      	movs	r0, r4
 8009558:	3015      	adds	r0, #21
 800955a:	2304      	movs	r3, #4
 800955c:	4282      	cmp	r2, r0
 800955e:	d304      	bcc.n	800956a <__lshift+0xae>
 8009560:	1b13      	subs	r3, r2, r4
 8009562:	3b15      	subs	r3, #21
 8009564:	089b      	lsrs	r3, r3, #2
 8009566:	3301      	adds	r3, #1
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	50e9      	str	r1, [r5, r3]
 800956c:	2900      	cmp	r1, #0
 800956e:	d002      	beq.n	8009576 <__lshift+0xba>
 8009570:	9b02      	ldr	r3, [sp, #8]
 8009572:	3302      	adds	r3, #2
 8009574:	9301      	str	r3, [sp, #4]
 8009576:	9b01      	ldr	r3, [sp, #4]
 8009578:	9804      	ldr	r0, [sp, #16]
 800957a:	3b01      	subs	r3, #1
 800957c:	0021      	movs	r1, r4
 800957e:	6133      	str	r3, [r6, #16]
 8009580:	f7ff fdca 	bl	8009118 <_Bfree>
 8009584:	0030      	movs	r0, r6
 8009586:	b007      	add	sp, #28
 8009588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800958a:	cb02      	ldmia	r3!, {r1}
 800958c:	c502      	stmia	r5!, {r1}
 800958e:	429a      	cmp	r2, r3
 8009590:	d8fb      	bhi.n	800958a <__lshift+0xce>
 8009592:	e7f0      	b.n	8009576 <__lshift+0xba>
 8009594:	0800a84f 	.word	0x0800a84f
 8009598:	0800a8c0 	.word	0x0800a8c0

0800959c <__mcmp>:
 800959c:	6902      	ldr	r2, [r0, #16]
 800959e:	690b      	ldr	r3, [r1, #16]
 80095a0:	b530      	push	{r4, r5, lr}
 80095a2:	0004      	movs	r4, r0
 80095a4:	1ad0      	subs	r0, r2, r3
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d10d      	bne.n	80095c6 <__mcmp+0x2a>
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	3414      	adds	r4, #20
 80095ae:	3114      	adds	r1, #20
 80095b0:	18e2      	adds	r2, r4, r3
 80095b2:	18c9      	adds	r1, r1, r3
 80095b4:	3a04      	subs	r2, #4
 80095b6:	3904      	subs	r1, #4
 80095b8:	6815      	ldr	r5, [r2, #0]
 80095ba:	680b      	ldr	r3, [r1, #0]
 80095bc:	429d      	cmp	r5, r3
 80095be:	d003      	beq.n	80095c8 <__mcmp+0x2c>
 80095c0:	2001      	movs	r0, #1
 80095c2:	429d      	cmp	r5, r3
 80095c4:	d303      	bcc.n	80095ce <__mcmp+0x32>
 80095c6:	bd30      	pop	{r4, r5, pc}
 80095c8:	4294      	cmp	r4, r2
 80095ca:	d3f3      	bcc.n	80095b4 <__mcmp+0x18>
 80095cc:	e7fb      	b.n	80095c6 <__mcmp+0x2a>
 80095ce:	4240      	negs	r0, r0
 80095d0:	e7f9      	b.n	80095c6 <__mcmp+0x2a>
	...

080095d4 <__mdiff>:
 80095d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095d6:	000e      	movs	r6, r1
 80095d8:	0007      	movs	r7, r0
 80095da:	0011      	movs	r1, r2
 80095dc:	0030      	movs	r0, r6
 80095de:	b087      	sub	sp, #28
 80095e0:	0014      	movs	r4, r2
 80095e2:	f7ff ffdb 	bl	800959c <__mcmp>
 80095e6:	1e05      	subs	r5, r0, #0
 80095e8:	d110      	bne.n	800960c <__mdiff+0x38>
 80095ea:	0001      	movs	r1, r0
 80095ec:	0038      	movs	r0, r7
 80095ee:	f7ff fd4f 	bl	8009090 <_Balloc>
 80095f2:	1e02      	subs	r2, r0, #0
 80095f4:	d104      	bne.n	8009600 <__mdiff+0x2c>
 80095f6:	4b40      	ldr	r3, [pc, #256]	; (80096f8 <__mdiff+0x124>)
 80095f8:	4940      	ldr	r1, [pc, #256]	; (80096fc <__mdiff+0x128>)
 80095fa:	4841      	ldr	r0, [pc, #260]	; (8009700 <__mdiff+0x12c>)
 80095fc:	f000 fb70 	bl	8009ce0 <__assert_func>
 8009600:	2301      	movs	r3, #1
 8009602:	6145      	str	r5, [r0, #20]
 8009604:	6103      	str	r3, [r0, #16]
 8009606:	0010      	movs	r0, r2
 8009608:	b007      	add	sp, #28
 800960a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800960c:	2301      	movs	r3, #1
 800960e:	9301      	str	r3, [sp, #4]
 8009610:	2800      	cmp	r0, #0
 8009612:	db04      	blt.n	800961e <__mdiff+0x4a>
 8009614:	0023      	movs	r3, r4
 8009616:	0034      	movs	r4, r6
 8009618:	001e      	movs	r6, r3
 800961a:	2300      	movs	r3, #0
 800961c:	9301      	str	r3, [sp, #4]
 800961e:	0038      	movs	r0, r7
 8009620:	6861      	ldr	r1, [r4, #4]
 8009622:	f7ff fd35 	bl	8009090 <_Balloc>
 8009626:	1e02      	subs	r2, r0, #0
 8009628:	d103      	bne.n	8009632 <__mdiff+0x5e>
 800962a:	2190      	movs	r1, #144	; 0x90
 800962c:	4b32      	ldr	r3, [pc, #200]	; (80096f8 <__mdiff+0x124>)
 800962e:	0089      	lsls	r1, r1, #2
 8009630:	e7e3      	b.n	80095fa <__mdiff+0x26>
 8009632:	9b01      	ldr	r3, [sp, #4]
 8009634:	2700      	movs	r7, #0
 8009636:	60c3      	str	r3, [r0, #12]
 8009638:	6920      	ldr	r0, [r4, #16]
 800963a:	3414      	adds	r4, #20
 800963c:	9401      	str	r4, [sp, #4]
 800963e:	9b01      	ldr	r3, [sp, #4]
 8009640:	0084      	lsls	r4, r0, #2
 8009642:	191b      	adds	r3, r3, r4
 8009644:	0034      	movs	r4, r6
 8009646:	9302      	str	r3, [sp, #8]
 8009648:	6933      	ldr	r3, [r6, #16]
 800964a:	3414      	adds	r4, #20
 800964c:	0099      	lsls	r1, r3, #2
 800964e:	1863      	adds	r3, r4, r1
 8009650:	9303      	str	r3, [sp, #12]
 8009652:	0013      	movs	r3, r2
 8009654:	3314      	adds	r3, #20
 8009656:	469c      	mov	ip, r3
 8009658:	9305      	str	r3, [sp, #20]
 800965a:	9b01      	ldr	r3, [sp, #4]
 800965c:	9304      	str	r3, [sp, #16]
 800965e:	9b04      	ldr	r3, [sp, #16]
 8009660:	cc02      	ldmia	r4!, {r1}
 8009662:	cb20      	ldmia	r3!, {r5}
 8009664:	9304      	str	r3, [sp, #16]
 8009666:	b2ab      	uxth	r3, r5
 8009668:	19df      	adds	r7, r3, r7
 800966a:	b28b      	uxth	r3, r1
 800966c:	1afb      	subs	r3, r7, r3
 800966e:	0c2d      	lsrs	r5, r5, #16
 8009670:	0c09      	lsrs	r1, r1, #16
 8009672:	1a69      	subs	r1, r5, r1
 8009674:	141d      	asrs	r5, r3, #16
 8009676:	1949      	adds	r1, r1, r5
 8009678:	140f      	asrs	r7, r1, #16
 800967a:	b29b      	uxth	r3, r3
 800967c:	0409      	lsls	r1, r1, #16
 800967e:	430b      	orrs	r3, r1
 8009680:	4661      	mov	r1, ip
 8009682:	c108      	stmia	r1!, {r3}
 8009684:	9b03      	ldr	r3, [sp, #12]
 8009686:	468c      	mov	ip, r1
 8009688:	42a3      	cmp	r3, r4
 800968a:	d8e8      	bhi.n	800965e <__mdiff+0x8a>
 800968c:	0031      	movs	r1, r6
 800968e:	9c03      	ldr	r4, [sp, #12]
 8009690:	3115      	adds	r1, #21
 8009692:	2304      	movs	r3, #4
 8009694:	428c      	cmp	r4, r1
 8009696:	d304      	bcc.n	80096a2 <__mdiff+0xce>
 8009698:	1ba3      	subs	r3, r4, r6
 800969a:	3b15      	subs	r3, #21
 800969c:	089b      	lsrs	r3, r3, #2
 800969e:	3301      	adds	r3, #1
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	9901      	ldr	r1, [sp, #4]
 80096a4:	18cc      	adds	r4, r1, r3
 80096a6:	9905      	ldr	r1, [sp, #20]
 80096a8:	0026      	movs	r6, r4
 80096aa:	18cb      	adds	r3, r1, r3
 80096ac:	469c      	mov	ip, r3
 80096ae:	9902      	ldr	r1, [sp, #8]
 80096b0:	428e      	cmp	r6, r1
 80096b2:	d310      	bcc.n	80096d6 <__mdiff+0x102>
 80096b4:	9e02      	ldr	r6, [sp, #8]
 80096b6:	1ee5      	subs	r5, r4, #3
 80096b8:	2100      	movs	r1, #0
 80096ba:	42ae      	cmp	r6, r5
 80096bc:	d304      	bcc.n	80096c8 <__mdiff+0xf4>
 80096be:	0031      	movs	r1, r6
 80096c0:	3103      	adds	r1, #3
 80096c2:	1b09      	subs	r1, r1, r4
 80096c4:	0889      	lsrs	r1, r1, #2
 80096c6:	0089      	lsls	r1, r1, #2
 80096c8:	185b      	adds	r3, r3, r1
 80096ca:	3b04      	subs	r3, #4
 80096cc:	6819      	ldr	r1, [r3, #0]
 80096ce:	2900      	cmp	r1, #0
 80096d0:	d00f      	beq.n	80096f2 <__mdiff+0x11e>
 80096d2:	6110      	str	r0, [r2, #16]
 80096d4:	e797      	b.n	8009606 <__mdiff+0x32>
 80096d6:	ce02      	ldmia	r6!, {r1}
 80096d8:	b28d      	uxth	r5, r1
 80096da:	19ed      	adds	r5, r5, r7
 80096dc:	0c0f      	lsrs	r7, r1, #16
 80096de:	1429      	asrs	r1, r5, #16
 80096e0:	1879      	adds	r1, r7, r1
 80096e2:	140f      	asrs	r7, r1, #16
 80096e4:	b2ad      	uxth	r5, r5
 80096e6:	0409      	lsls	r1, r1, #16
 80096e8:	430d      	orrs	r5, r1
 80096ea:	4661      	mov	r1, ip
 80096ec:	c120      	stmia	r1!, {r5}
 80096ee:	468c      	mov	ip, r1
 80096f0:	e7dd      	b.n	80096ae <__mdiff+0xda>
 80096f2:	3801      	subs	r0, #1
 80096f4:	e7e9      	b.n	80096ca <__mdiff+0xf6>
 80096f6:	46c0      	nop			; (mov r8, r8)
 80096f8:	0800a84f 	.word	0x0800a84f
 80096fc:	00000232 	.word	0x00000232
 8009700:	0800a8c0 	.word	0x0800a8c0

08009704 <__d2b>:
 8009704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009706:	2101      	movs	r1, #1
 8009708:	0014      	movs	r4, r2
 800970a:	001e      	movs	r6, r3
 800970c:	9f08      	ldr	r7, [sp, #32]
 800970e:	f7ff fcbf 	bl	8009090 <_Balloc>
 8009712:	1e05      	subs	r5, r0, #0
 8009714:	d105      	bne.n	8009722 <__d2b+0x1e>
 8009716:	0002      	movs	r2, r0
 8009718:	4b26      	ldr	r3, [pc, #152]	; (80097b4 <__d2b+0xb0>)
 800971a:	4927      	ldr	r1, [pc, #156]	; (80097b8 <__d2b+0xb4>)
 800971c:	4827      	ldr	r0, [pc, #156]	; (80097bc <__d2b+0xb8>)
 800971e:	f000 fadf 	bl	8009ce0 <__assert_func>
 8009722:	0333      	lsls	r3, r6, #12
 8009724:	0076      	lsls	r6, r6, #1
 8009726:	0b1b      	lsrs	r3, r3, #12
 8009728:	0d76      	lsrs	r6, r6, #21
 800972a:	d124      	bne.n	8009776 <__d2b+0x72>
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	2c00      	cmp	r4, #0
 8009730:	d027      	beq.n	8009782 <__d2b+0x7e>
 8009732:	4668      	mov	r0, sp
 8009734:	9400      	str	r4, [sp, #0]
 8009736:	f7ff fd71 	bl	800921c <__lo0bits>
 800973a:	9c00      	ldr	r4, [sp, #0]
 800973c:	2800      	cmp	r0, #0
 800973e:	d01e      	beq.n	800977e <__d2b+0x7a>
 8009740:	9b01      	ldr	r3, [sp, #4]
 8009742:	2120      	movs	r1, #32
 8009744:	001a      	movs	r2, r3
 8009746:	1a09      	subs	r1, r1, r0
 8009748:	408a      	lsls	r2, r1
 800974a:	40c3      	lsrs	r3, r0
 800974c:	4322      	orrs	r2, r4
 800974e:	616a      	str	r2, [r5, #20]
 8009750:	9301      	str	r3, [sp, #4]
 8009752:	9c01      	ldr	r4, [sp, #4]
 8009754:	61ac      	str	r4, [r5, #24]
 8009756:	1e63      	subs	r3, r4, #1
 8009758:	419c      	sbcs	r4, r3
 800975a:	3401      	adds	r4, #1
 800975c:	612c      	str	r4, [r5, #16]
 800975e:	2e00      	cmp	r6, #0
 8009760:	d018      	beq.n	8009794 <__d2b+0x90>
 8009762:	4b17      	ldr	r3, [pc, #92]	; (80097c0 <__d2b+0xbc>)
 8009764:	18f6      	adds	r6, r6, r3
 8009766:	2335      	movs	r3, #53	; 0x35
 8009768:	1836      	adds	r6, r6, r0
 800976a:	1a18      	subs	r0, r3, r0
 800976c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800976e:	603e      	str	r6, [r7, #0]
 8009770:	6018      	str	r0, [r3, #0]
 8009772:	0028      	movs	r0, r5
 8009774:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009776:	2280      	movs	r2, #128	; 0x80
 8009778:	0352      	lsls	r2, r2, #13
 800977a:	4313      	orrs	r3, r2
 800977c:	e7d6      	b.n	800972c <__d2b+0x28>
 800977e:	616c      	str	r4, [r5, #20]
 8009780:	e7e7      	b.n	8009752 <__d2b+0x4e>
 8009782:	a801      	add	r0, sp, #4
 8009784:	f7ff fd4a 	bl	800921c <__lo0bits>
 8009788:	2401      	movs	r4, #1
 800978a:	9b01      	ldr	r3, [sp, #4]
 800978c:	612c      	str	r4, [r5, #16]
 800978e:	616b      	str	r3, [r5, #20]
 8009790:	3020      	adds	r0, #32
 8009792:	e7e4      	b.n	800975e <__d2b+0x5a>
 8009794:	4b0b      	ldr	r3, [pc, #44]	; (80097c4 <__d2b+0xc0>)
 8009796:	18c0      	adds	r0, r0, r3
 8009798:	4b0b      	ldr	r3, [pc, #44]	; (80097c8 <__d2b+0xc4>)
 800979a:	6038      	str	r0, [r7, #0]
 800979c:	18e3      	adds	r3, r4, r3
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	18eb      	adds	r3, r5, r3
 80097a2:	6958      	ldr	r0, [r3, #20]
 80097a4:	f7ff fd20 	bl	80091e8 <__hi0bits>
 80097a8:	0164      	lsls	r4, r4, #5
 80097aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ac:	1a24      	subs	r4, r4, r0
 80097ae:	601c      	str	r4, [r3, #0]
 80097b0:	e7df      	b.n	8009772 <__d2b+0x6e>
 80097b2:	46c0      	nop			; (mov r8, r8)
 80097b4:	0800a84f 	.word	0x0800a84f
 80097b8:	0000030a 	.word	0x0000030a
 80097bc:	0800a8c0 	.word	0x0800a8c0
 80097c0:	fffffbcd 	.word	0xfffffbcd
 80097c4:	fffffbce 	.word	0xfffffbce
 80097c8:	3fffffff 	.word	0x3fffffff

080097cc <_calloc_r>:
 80097cc:	434a      	muls	r2, r1
 80097ce:	b570      	push	{r4, r5, r6, lr}
 80097d0:	0011      	movs	r1, r2
 80097d2:	0015      	movs	r5, r2
 80097d4:	f000 f852 	bl	800987c <_malloc_r>
 80097d8:	1e04      	subs	r4, r0, #0
 80097da:	d003      	beq.n	80097e4 <_calloc_r+0x18>
 80097dc:	002a      	movs	r2, r5
 80097de:	2100      	movs	r1, #0
 80097e0:	f7fd fd66 	bl	80072b0 <memset>
 80097e4:	0020      	movs	r0, r4
 80097e6:	bd70      	pop	{r4, r5, r6, pc}

080097e8 <_free_r>:
 80097e8:	b570      	push	{r4, r5, r6, lr}
 80097ea:	0005      	movs	r5, r0
 80097ec:	2900      	cmp	r1, #0
 80097ee:	d010      	beq.n	8009812 <_free_r+0x2a>
 80097f0:	1f0c      	subs	r4, r1, #4
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	da00      	bge.n	80097fa <_free_r+0x12>
 80097f8:	18e4      	adds	r4, r4, r3
 80097fa:	0028      	movs	r0, r5
 80097fc:	f000 fafa 	bl	8009df4 <__malloc_lock>
 8009800:	4a1d      	ldr	r2, [pc, #116]	; (8009878 <_free_r+0x90>)
 8009802:	6813      	ldr	r3, [r2, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d105      	bne.n	8009814 <_free_r+0x2c>
 8009808:	6063      	str	r3, [r4, #4]
 800980a:	6014      	str	r4, [r2, #0]
 800980c:	0028      	movs	r0, r5
 800980e:	f000 faf9 	bl	8009e04 <__malloc_unlock>
 8009812:	bd70      	pop	{r4, r5, r6, pc}
 8009814:	42a3      	cmp	r3, r4
 8009816:	d908      	bls.n	800982a <_free_r+0x42>
 8009818:	6821      	ldr	r1, [r4, #0]
 800981a:	1860      	adds	r0, r4, r1
 800981c:	4283      	cmp	r3, r0
 800981e:	d1f3      	bne.n	8009808 <_free_r+0x20>
 8009820:	6818      	ldr	r0, [r3, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	1841      	adds	r1, r0, r1
 8009826:	6021      	str	r1, [r4, #0]
 8009828:	e7ee      	b.n	8009808 <_free_r+0x20>
 800982a:	001a      	movs	r2, r3
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <_free_r+0x4e>
 8009832:	42a3      	cmp	r3, r4
 8009834:	d9f9      	bls.n	800982a <_free_r+0x42>
 8009836:	6811      	ldr	r1, [r2, #0]
 8009838:	1850      	adds	r0, r2, r1
 800983a:	42a0      	cmp	r0, r4
 800983c:	d10b      	bne.n	8009856 <_free_r+0x6e>
 800983e:	6820      	ldr	r0, [r4, #0]
 8009840:	1809      	adds	r1, r1, r0
 8009842:	1850      	adds	r0, r2, r1
 8009844:	6011      	str	r1, [r2, #0]
 8009846:	4283      	cmp	r3, r0
 8009848:	d1e0      	bne.n	800980c <_free_r+0x24>
 800984a:	6818      	ldr	r0, [r3, #0]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	1841      	adds	r1, r0, r1
 8009850:	6011      	str	r1, [r2, #0]
 8009852:	6053      	str	r3, [r2, #4]
 8009854:	e7da      	b.n	800980c <_free_r+0x24>
 8009856:	42a0      	cmp	r0, r4
 8009858:	d902      	bls.n	8009860 <_free_r+0x78>
 800985a:	230c      	movs	r3, #12
 800985c:	602b      	str	r3, [r5, #0]
 800985e:	e7d5      	b.n	800980c <_free_r+0x24>
 8009860:	6821      	ldr	r1, [r4, #0]
 8009862:	1860      	adds	r0, r4, r1
 8009864:	4283      	cmp	r3, r0
 8009866:	d103      	bne.n	8009870 <_free_r+0x88>
 8009868:	6818      	ldr	r0, [r3, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	1841      	adds	r1, r0, r1
 800986e:	6021      	str	r1, [r4, #0]
 8009870:	6063      	str	r3, [r4, #4]
 8009872:	6054      	str	r4, [r2, #4]
 8009874:	e7ca      	b.n	800980c <_free_r+0x24>
 8009876:	46c0      	nop			; (mov r8, r8)
 8009878:	200002c8 	.word	0x200002c8

0800987c <_malloc_r>:
 800987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987e:	2303      	movs	r3, #3
 8009880:	1ccd      	adds	r5, r1, #3
 8009882:	439d      	bics	r5, r3
 8009884:	3508      	adds	r5, #8
 8009886:	0006      	movs	r6, r0
 8009888:	2d0c      	cmp	r5, #12
 800988a:	d21f      	bcs.n	80098cc <_malloc_r+0x50>
 800988c:	250c      	movs	r5, #12
 800988e:	42a9      	cmp	r1, r5
 8009890:	d81e      	bhi.n	80098d0 <_malloc_r+0x54>
 8009892:	0030      	movs	r0, r6
 8009894:	f000 faae 	bl	8009df4 <__malloc_lock>
 8009898:	4925      	ldr	r1, [pc, #148]	; (8009930 <_malloc_r+0xb4>)
 800989a:	680a      	ldr	r2, [r1, #0]
 800989c:	0014      	movs	r4, r2
 800989e:	2c00      	cmp	r4, #0
 80098a0:	d11a      	bne.n	80098d8 <_malloc_r+0x5c>
 80098a2:	4f24      	ldr	r7, [pc, #144]	; (8009934 <_malloc_r+0xb8>)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d104      	bne.n	80098b4 <_malloc_r+0x38>
 80098aa:	0021      	movs	r1, r4
 80098ac:	0030      	movs	r0, r6
 80098ae:	f000 f9a5 	bl	8009bfc <_sbrk_r>
 80098b2:	6038      	str	r0, [r7, #0]
 80098b4:	0029      	movs	r1, r5
 80098b6:	0030      	movs	r0, r6
 80098b8:	f000 f9a0 	bl	8009bfc <_sbrk_r>
 80098bc:	1c43      	adds	r3, r0, #1
 80098be:	d12b      	bne.n	8009918 <_malloc_r+0x9c>
 80098c0:	230c      	movs	r3, #12
 80098c2:	0030      	movs	r0, r6
 80098c4:	6033      	str	r3, [r6, #0]
 80098c6:	f000 fa9d 	bl	8009e04 <__malloc_unlock>
 80098ca:	e003      	b.n	80098d4 <_malloc_r+0x58>
 80098cc:	2d00      	cmp	r5, #0
 80098ce:	dade      	bge.n	800988e <_malloc_r+0x12>
 80098d0:	230c      	movs	r3, #12
 80098d2:	6033      	str	r3, [r6, #0]
 80098d4:	2000      	movs	r0, #0
 80098d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098d8:	6823      	ldr	r3, [r4, #0]
 80098da:	1b5b      	subs	r3, r3, r5
 80098dc:	d419      	bmi.n	8009912 <_malloc_r+0x96>
 80098de:	2b0b      	cmp	r3, #11
 80098e0:	d903      	bls.n	80098ea <_malloc_r+0x6e>
 80098e2:	6023      	str	r3, [r4, #0]
 80098e4:	18e4      	adds	r4, r4, r3
 80098e6:	6025      	str	r5, [r4, #0]
 80098e8:	e003      	b.n	80098f2 <_malloc_r+0x76>
 80098ea:	6863      	ldr	r3, [r4, #4]
 80098ec:	42a2      	cmp	r2, r4
 80098ee:	d10e      	bne.n	800990e <_malloc_r+0x92>
 80098f0:	600b      	str	r3, [r1, #0]
 80098f2:	0030      	movs	r0, r6
 80098f4:	f000 fa86 	bl	8009e04 <__malloc_unlock>
 80098f8:	0020      	movs	r0, r4
 80098fa:	2207      	movs	r2, #7
 80098fc:	300b      	adds	r0, #11
 80098fe:	1d23      	adds	r3, r4, #4
 8009900:	4390      	bics	r0, r2
 8009902:	1ac2      	subs	r2, r0, r3
 8009904:	4298      	cmp	r0, r3
 8009906:	d0e6      	beq.n	80098d6 <_malloc_r+0x5a>
 8009908:	1a1b      	subs	r3, r3, r0
 800990a:	50a3      	str	r3, [r4, r2]
 800990c:	e7e3      	b.n	80098d6 <_malloc_r+0x5a>
 800990e:	6053      	str	r3, [r2, #4]
 8009910:	e7ef      	b.n	80098f2 <_malloc_r+0x76>
 8009912:	0022      	movs	r2, r4
 8009914:	6864      	ldr	r4, [r4, #4]
 8009916:	e7c2      	b.n	800989e <_malloc_r+0x22>
 8009918:	2303      	movs	r3, #3
 800991a:	1cc4      	adds	r4, r0, #3
 800991c:	439c      	bics	r4, r3
 800991e:	42a0      	cmp	r0, r4
 8009920:	d0e1      	beq.n	80098e6 <_malloc_r+0x6a>
 8009922:	1a21      	subs	r1, r4, r0
 8009924:	0030      	movs	r0, r6
 8009926:	f000 f969 	bl	8009bfc <_sbrk_r>
 800992a:	1c43      	adds	r3, r0, #1
 800992c:	d1db      	bne.n	80098e6 <_malloc_r+0x6a>
 800992e:	e7c7      	b.n	80098c0 <_malloc_r+0x44>
 8009930:	200002c8 	.word	0x200002c8
 8009934:	200002cc 	.word	0x200002cc

08009938 <__sfputc_r>:
 8009938:	6893      	ldr	r3, [r2, #8]
 800993a:	b510      	push	{r4, lr}
 800993c:	3b01      	subs	r3, #1
 800993e:	6093      	str	r3, [r2, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	da04      	bge.n	800994e <__sfputc_r+0x16>
 8009944:	6994      	ldr	r4, [r2, #24]
 8009946:	42a3      	cmp	r3, r4
 8009948:	db07      	blt.n	800995a <__sfputc_r+0x22>
 800994a:	290a      	cmp	r1, #10
 800994c:	d005      	beq.n	800995a <__sfputc_r+0x22>
 800994e:	6813      	ldr	r3, [r2, #0]
 8009950:	1c58      	adds	r0, r3, #1
 8009952:	6010      	str	r0, [r2, #0]
 8009954:	7019      	strb	r1, [r3, #0]
 8009956:	0008      	movs	r0, r1
 8009958:	bd10      	pop	{r4, pc}
 800995a:	f7fe f9c1 	bl	8007ce0 <__swbuf_r>
 800995e:	0001      	movs	r1, r0
 8009960:	e7f9      	b.n	8009956 <__sfputc_r+0x1e>

08009962 <__sfputs_r>:
 8009962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009964:	0006      	movs	r6, r0
 8009966:	000f      	movs	r7, r1
 8009968:	0014      	movs	r4, r2
 800996a:	18d5      	adds	r5, r2, r3
 800996c:	42ac      	cmp	r4, r5
 800996e:	d101      	bne.n	8009974 <__sfputs_r+0x12>
 8009970:	2000      	movs	r0, #0
 8009972:	e007      	b.n	8009984 <__sfputs_r+0x22>
 8009974:	7821      	ldrb	r1, [r4, #0]
 8009976:	003a      	movs	r2, r7
 8009978:	0030      	movs	r0, r6
 800997a:	f7ff ffdd 	bl	8009938 <__sfputc_r>
 800997e:	3401      	adds	r4, #1
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d1f3      	bne.n	800996c <__sfputs_r+0xa>
 8009984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009988 <_vfiprintf_r>:
 8009988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800998a:	b0a1      	sub	sp, #132	; 0x84
 800998c:	0006      	movs	r6, r0
 800998e:	000c      	movs	r4, r1
 8009990:	001f      	movs	r7, r3
 8009992:	9203      	str	r2, [sp, #12]
 8009994:	2800      	cmp	r0, #0
 8009996:	d004      	beq.n	80099a2 <_vfiprintf_r+0x1a>
 8009998:	6983      	ldr	r3, [r0, #24]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <_vfiprintf_r+0x1a>
 800999e:	f7ff fa45 	bl	8008e2c <__sinit>
 80099a2:	4b8e      	ldr	r3, [pc, #568]	; (8009bdc <_vfiprintf_r+0x254>)
 80099a4:	429c      	cmp	r4, r3
 80099a6:	d11c      	bne.n	80099e2 <_vfiprintf_r+0x5a>
 80099a8:	6874      	ldr	r4, [r6, #4]
 80099aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099ac:	07db      	lsls	r3, r3, #31
 80099ae:	d405      	bmi.n	80099bc <_vfiprintf_r+0x34>
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	059b      	lsls	r3, r3, #22
 80099b4:	d402      	bmi.n	80099bc <_vfiprintf_r+0x34>
 80099b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099b8:	f7ff fadd 	bl	8008f76 <__retarget_lock_acquire_recursive>
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	071b      	lsls	r3, r3, #28
 80099c0:	d502      	bpl.n	80099c8 <_vfiprintf_r+0x40>
 80099c2:	6923      	ldr	r3, [r4, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d11d      	bne.n	8009a04 <_vfiprintf_r+0x7c>
 80099c8:	0021      	movs	r1, r4
 80099ca:	0030      	movs	r0, r6
 80099cc:	f7fe f9de 	bl	8007d8c <__swsetup_r>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d017      	beq.n	8009a04 <_vfiprintf_r+0x7c>
 80099d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099d6:	07db      	lsls	r3, r3, #31
 80099d8:	d50d      	bpl.n	80099f6 <_vfiprintf_r+0x6e>
 80099da:	2001      	movs	r0, #1
 80099dc:	4240      	negs	r0, r0
 80099de:	b021      	add	sp, #132	; 0x84
 80099e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099e2:	4b7f      	ldr	r3, [pc, #508]	; (8009be0 <_vfiprintf_r+0x258>)
 80099e4:	429c      	cmp	r4, r3
 80099e6:	d101      	bne.n	80099ec <_vfiprintf_r+0x64>
 80099e8:	68b4      	ldr	r4, [r6, #8]
 80099ea:	e7de      	b.n	80099aa <_vfiprintf_r+0x22>
 80099ec:	4b7d      	ldr	r3, [pc, #500]	; (8009be4 <_vfiprintf_r+0x25c>)
 80099ee:	429c      	cmp	r4, r3
 80099f0:	d1db      	bne.n	80099aa <_vfiprintf_r+0x22>
 80099f2:	68f4      	ldr	r4, [r6, #12]
 80099f4:	e7d9      	b.n	80099aa <_vfiprintf_r+0x22>
 80099f6:	89a3      	ldrh	r3, [r4, #12]
 80099f8:	059b      	lsls	r3, r3, #22
 80099fa:	d4ee      	bmi.n	80099da <_vfiprintf_r+0x52>
 80099fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099fe:	f7ff fabb 	bl	8008f78 <__retarget_lock_release_recursive>
 8009a02:	e7ea      	b.n	80099da <_vfiprintf_r+0x52>
 8009a04:	2300      	movs	r3, #0
 8009a06:	ad08      	add	r5, sp, #32
 8009a08:	616b      	str	r3, [r5, #20]
 8009a0a:	3320      	adds	r3, #32
 8009a0c:	766b      	strb	r3, [r5, #25]
 8009a0e:	3310      	adds	r3, #16
 8009a10:	76ab      	strb	r3, [r5, #26]
 8009a12:	9707      	str	r7, [sp, #28]
 8009a14:	9f03      	ldr	r7, [sp, #12]
 8009a16:	783b      	ldrb	r3, [r7, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <_vfiprintf_r+0x98>
 8009a1c:	2b25      	cmp	r3, #37	; 0x25
 8009a1e:	d14e      	bne.n	8009abe <_vfiprintf_r+0x136>
 8009a20:	9b03      	ldr	r3, [sp, #12]
 8009a22:	1afb      	subs	r3, r7, r3
 8009a24:	9305      	str	r3, [sp, #20]
 8009a26:	9b03      	ldr	r3, [sp, #12]
 8009a28:	429f      	cmp	r7, r3
 8009a2a:	d00d      	beq.n	8009a48 <_vfiprintf_r+0xc0>
 8009a2c:	9b05      	ldr	r3, [sp, #20]
 8009a2e:	0021      	movs	r1, r4
 8009a30:	0030      	movs	r0, r6
 8009a32:	9a03      	ldr	r2, [sp, #12]
 8009a34:	f7ff ff95 	bl	8009962 <__sfputs_r>
 8009a38:	1c43      	adds	r3, r0, #1
 8009a3a:	d100      	bne.n	8009a3e <_vfiprintf_r+0xb6>
 8009a3c:	e0b5      	b.n	8009baa <_vfiprintf_r+0x222>
 8009a3e:	696a      	ldr	r2, [r5, #20]
 8009a40:	9b05      	ldr	r3, [sp, #20]
 8009a42:	4694      	mov	ip, r2
 8009a44:	4463      	add	r3, ip
 8009a46:	616b      	str	r3, [r5, #20]
 8009a48:	783b      	ldrb	r3, [r7, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d100      	bne.n	8009a50 <_vfiprintf_r+0xc8>
 8009a4e:	e0ac      	b.n	8009baa <_vfiprintf_r+0x222>
 8009a50:	2201      	movs	r2, #1
 8009a52:	1c7b      	adds	r3, r7, #1
 8009a54:	9303      	str	r3, [sp, #12]
 8009a56:	2300      	movs	r3, #0
 8009a58:	4252      	negs	r2, r2
 8009a5a:	606a      	str	r2, [r5, #4]
 8009a5c:	a904      	add	r1, sp, #16
 8009a5e:	3254      	adds	r2, #84	; 0x54
 8009a60:	1852      	adds	r2, r2, r1
 8009a62:	602b      	str	r3, [r5, #0]
 8009a64:	60eb      	str	r3, [r5, #12]
 8009a66:	60ab      	str	r3, [r5, #8]
 8009a68:	7013      	strb	r3, [r2, #0]
 8009a6a:	65ab      	str	r3, [r5, #88]	; 0x58
 8009a6c:	9b03      	ldr	r3, [sp, #12]
 8009a6e:	2205      	movs	r2, #5
 8009a70:	7819      	ldrb	r1, [r3, #0]
 8009a72:	485d      	ldr	r0, [pc, #372]	; (8009be8 <_vfiprintf_r+0x260>)
 8009a74:	f7ff faf8 	bl	8009068 <memchr>
 8009a78:	9b03      	ldr	r3, [sp, #12]
 8009a7a:	1c5f      	adds	r7, r3, #1
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d120      	bne.n	8009ac2 <_vfiprintf_r+0x13a>
 8009a80:	682a      	ldr	r2, [r5, #0]
 8009a82:	06d3      	lsls	r3, r2, #27
 8009a84:	d504      	bpl.n	8009a90 <_vfiprintf_r+0x108>
 8009a86:	2353      	movs	r3, #83	; 0x53
 8009a88:	a904      	add	r1, sp, #16
 8009a8a:	185b      	adds	r3, r3, r1
 8009a8c:	2120      	movs	r1, #32
 8009a8e:	7019      	strb	r1, [r3, #0]
 8009a90:	0713      	lsls	r3, r2, #28
 8009a92:	d504      	bpl.n	8009a9e <_vfiprintf_r+0x116>
 8009a94:	2353      	movs	r3, #83	; 0x53
 8009a96:	a904      	add	r1, sp, #16
 8009a98:	185b      	adds	r3, r3, r1
 8009a9a:	212b      	movs	r1, #43	; 0x2b
 8009a9c:	7019      	strb	r1, [r3, #0]
 8009a9e:	9b03      	ldr	r3, [sp, #12]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8009aa4:	d016      	beq.n	8009ad4 <_vfiprintf_r+0x14c>
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	68eb      	ldr	r3, [r5, #12]
 8009aaa:	9f03      	ldr	r7, [sp, #12]
 8009aac:	783a      	ldrb	r2, [r7, #0]
 8009aae:	1c78      	adds	r0, r7, #1
 8009ab0:	3a30      	subs	r2, #48	; 0x30
 8009ab2:	4684      	mov	ip, r0
 8009ab4:	2a09      	cmp	r2, #9
 8009ab6:	d94f      	bls.n	8009b58 <_vfiprintf_r+0x1d0>
 8009ab8:	2900      	cmp	r1, #0
 8009aba:	d111      	bne.n	8009ae0 <_vfiprintf_r+0x158>
 8009abc:	e017      	b.n	8009aee <_vfiprintf_r+0x166>
 8009abe:	3701      	adds	r7, #1
 8009ac0:	e7a9      	b.n	8009a16 <_vfiprintf_r+0x8e>
 8009ac2:	4b49      	ldr	r3, [pc, #292]	; (8009be8 <_vfiprintf_r+0x260>)
 8009ac4:	682a      	ldr	r2, [r5, #0]
 8009ac6:	1ac0      	subs	r0, r0, r3
 8009ac8:	2301      	movs	r3, #1
 8009aca:	4083      	lsls	r3, r0
 8009acc:	4313      	orrs	r3, r2
 8009ace:	602b      	str	r3, [r5, #0]
 8009ad0:	9703      	str	r7, [sp, #12]
 8009ad2:	e7cb      	b.n	8009a6c <_vfiprintf_r+0xe4>
 8009ad4:	9b07      	ldr	r3, [sp, #28]
 8009ad6:	1d19      	adds	r1, r3, #4
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	9107      	str	r1, [sp, #28]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	db01      	blt.n	8009ae4 <_vfiprintf_r+0x15c>
 8009ae0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ae2:	e004      	b.n	8009aee <_vfiprintf_r+0x166>
 8009ae4:	425b      	negs	r3, r3
 8009ae6:	60eb      	str	r3, [r5, #12]
 8009ae8:	2302      	movs	r3, #2
 8009aea:	4313      	orrs	r3, r2
 8009aec:	602b      	str	r3, [r5, #0]
 8009aee:	783b      	ldrb	r3, [r7, #0]
 8009af0:	2b2e      	cmp	r3, #46	; 0x2e
 8009af2:	d10a      	bne.n	8009b0a <_vfiprintf_r+0x182>
 8009af4:	787b      	ldrb	r3, [r7, #1]
 8009af6:	2b2a      	cmp	r3, #42	; 0x2a
 8009af8:	d137      	bne.n	8009b6a <_vfiprintf_r+0x1e2>
 8009afa:	9b07      	ldr	r3, [sp, #28]
 8009afc:	3702      	adds	r7, #2
 8009afe:	1d1a      	adds	r2, r3, #4
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	9207      	str	r2, [sp, #28]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	db2d      	blt.n	8009b64 <_vfiprintf_r+0x1dc>
 8009b08:	9309      	str	r3, [sp, #36]	; 0x24
 8009b0a:	2203      	movs	r2, #3
 8009b0c:	7839      	ldrb	r1, [r7, #0]
 8009b0e:	4837      	ldr	r0, [pc, #220]	; (8009bec <_vfiprintf_r+0x264>)
 8009b10:	f7ff faaa 	bl	8009068 <memchr>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d007      	beq.n	8009b28 <_vfiprintf_r+0x1a0>
 8009b18:	4b34      	ldr	r3, [pc, #208]	; (8009bec <_vfiprintf_r+0x264>)
 8009b1a:	682a      	ldr	r2, [r5, #0]
 8009b1c:	1ac0      	subs	r0, r0, r3
 8009b1e:	2340      	movs	r3, #64	; 0x40
 8009b20:	4083      	lsls	r3, r0
 8009b22:	4313      	orrs	r3, r2
 8009b24:	3701      	adds	r7, #1
 8009b26:	602b      	str	r3, [r5, #0]
 8009b28:	7839      	ldrb	r1, [r7, #0]
 8009b2a:	1c7b      	adds	r3, r7, #1
 8009b2c:	2206      	movs	r2, #6
 8009b2e:	4830      	ldr	r0, [pc, #192]	; (8009bf0 <_vfiprintf_r+0x268>)
 8009b30:	9303      	str	r3, [sp, #12]
 8009b32:	7629      	strb	r1, [r5, #24]
 8009b34:	f7ff fa98 	bl	8009068 <memchr>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d045      	beq.n	8009bc8 <_vfiprintf_r+0x240>
 8009b3c:	4b2d      	ldr	r3, [pc, #180]	; (8009bf4 <_vfiprintf_r+0x26c>)
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d127      	bne.n	8009b92 <_vfiprintf_r+0x20a>
 8009b42:	2207      	movs	r2, #7
 8009b44:	9b07      	ldr	r3, [sp, #28]
 8009b46:	3307      	adds	r3, #7
 8009b48:	4393      	bics	r3, r2
 8009b4a:	3308      	adds	r3, #8
 8009b4c:	9307      	str	r3, [sp, #28]
 8009b4e:	696b      	ldr	r3, [r5, #20]
 8009b50:	9a04      	ldr	r2, [sp, #16]
 8009b52:	189b      	adds	r3, r3, r2
 8009b54:	616b      	str	r3, [r5, #20]
 8009b56:	e75d      	b.n	8009a14 <_vfiprintf_r+0x8c>
 8009b58:	210a      	movs	r1, #10
 8009b5a:	434b      	muls	r3, r1
 8009b5c:	4667      	mov	r7, ip
 8009b5e:	189b      	adds	r3, r3, r2
 8009b60:	3909      	subs	r1, #9
 8009b62:	e7a3      	b.n	8009aac <_vfiprintf_r+0x124>
 8009b64:	2301      	movs	r3, #1
 8009b66:	425b      	negs	r3, r3
 8009b68:	e7ce      	b.n	8009b08 <_vfiprintf_r+0x180>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	001a      	movs	r2, r3
 8009b6e:	3701      	adds	r7, #1
 8009b70:	606b      	str	r3, [r5, #4]
 8009b72:	7839      	ldrb	r1, [r7, #0]
 8009b74:	1c78      	adds	r0, r7, #1
 8009b76:	3930      	subs	r1, #48	; 0x30
 8009b78:	4684      	mov	ip, r0
 8009b7a:	2909      	cmp	r1, #9
 8009b7c:	d903      	bls.n	8009b86 <_vfiprintf_r+0x1fe>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0c3      	beq.n	8009b0a <_vfiprintf_r+0x182>
 8009b82:	9209      	str	r2, [sp, #36]	; 0x24
 8009b84:	e7c1      	b.n	8009b0a <_vfiprintf_r+0x182>
 8009b86:	230a      	movs	r3, #10
 8009b88:	435a      	muls	r2, r3
 8009b8a:	4667      	mov	r7, ip
 8009b8c:	1852      	adds	r2, r2, r1
 8009b8e:	3b09      	subs	r3, #9
 8009b90:	e7ef      	b.n	8009b72 <_vfiprintf_r+0x1ea>
 8009b92:	ab07      	add	r3, sp, #28
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	0022      	movs	r2, r4
 8009b98:	0029      	movs	r1, r5
 8009b9a:	0030      	movs	r0, r6
 8009b9c:	4b16      	ldr	r3, [pc, #88]	; (8009bf8 <_vfiprintf_r+0x270>)
 8009b9e:	f7fd fc39 	bl	8007414 <_printf_float>
 8009ba2:	9004      	str	r0, [sp, #16]
 8009ba4:	9b04      	ldr	r3, [sp, #16]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	d1d1      	bne.n	8009b4e <_vfiprintf_r+0x1c6>
 8009baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bac:	07db      	lsls	r3, r3, #31
 8009bae:	d405      	bmi.n	8009bbc <_vfiprintf_r+0x234>
 8009bb0:	89a3      	ldrh	r3, [r4, #12]
 8009bb2:	059b      	lsls	r3, r3, #22
 8009bb4:	d402      	bmi.n	8009bbc <_vfiprintf_r+0x234>
 8009bb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bb8:	f7ff f9de 	bl	8008f78 <__retarget_lock_release_recursive>
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	065b      	lsls	r3, r3, #25
 8009bc0:	d500      	bpl.n	8009bc4 <_vfiprintf_r+0x23c>
 8009bc2:	e70a      	b.n	80099da <_vfiprintf_r+0x52>
 8009bc4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009bc6:	e70a      	b.n	80099de <_vfiprintf_r+0x56>
 8009bc8:	ab07      	add	r3, sp, #28
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	0022      	movs	r2, r4
 8009bce:	0029      	movs	r1, r5
 8009bd0:	0030      	movs	r0, r6
 8009bd2:	4b09      	ldr	r3, [pc, #36]	; (8009bf8 <_vfiprintf_r+0x270>)
 8009bd4:	f7fd fedc 	bl	8007990 <_printf_i>
 8009bd8:	e7e3      	b.n	8009ba2 <_vfiprintf_r+0x21a>
 8009bda:	46c0      	nop			; (mov r8, r8)
 8009bdc:	0800a880 	.word	0x0800a880
 8009be0:	0800a8a0 	.word	0x0800a8a0
 8009be4:	0800a860 	.word	0x0800a860
 8009be8:	0800aa1c 	.word	0x0800aa1c
 8009bec:	0800aa22 	.word	0x0800aa22
 8009bf0:	0800aa26 	.word	0x0800aa26
 8009bf4:	08007415 	.word	0x08007415
 8009bf8:	08009963 	.word	0x08009963

08009bfc <_sbrk_r>:
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	b570      	push	{r4, r5, r6, lr}
 8009c00:	4d06      	ldr	r5, [pc, #24]	; (8009c1c <_sbrk_r+0x20>)
 8009c02:	0004      	movs	r4, r0
 8009c04:	0008      	movs	r0, r1
 8009c06:	602b      	str	r3, [r5, #0]
 8009c08:	f7fa fb42 	bl	8004290 <_sbrk>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	d103      	bne.n	8009c18 <_sbrk_r+0x1c>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d000      	beq.n	8009c18 <_sbrk_r+0x1c>
 8009c16:	6023      	str	r3, [r4, #0]
 8009c18:	bd70      	pop	{r4, r5, r6, pc}
 8009c1a:	46c0      	nop			; (mov r8, r8)
 8009c1c:	200003b0 	.word	0x200003b0

08009c20 <__sread>:
 8009c20:	b570      	push	{r4, r5, r6, lr}
 8009c22:	000c      	movs	r4, r1
 8009c24:	250e      	movs	r5, #14
 8009c26:	5f49      	ldrsh	r1, [r1, r5]
 8009c28:	f000 f8f4 	bl	8009e14 <_read_r>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	db03      	blt.n	8009c38 <__sread+0x18>
 8009c30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009c32:	181b      	adds	r3, r3, r0
 8009c34:	6563      	str	r3, [r4, #84]	; 0x54
 8009c36:	bd70      	pop	{r4, r5, r6, pc}
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	4a02      	ldr	r2, [pc, #8]	; (8009c44 <__sread+0x24>)
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	81a3      	strh	r3, [r4, #12]
 8009c40:	e7f9      	b.n	8009c36 <__sread+0x16>
 8009c42:	46c0      	nop			; (mov r8, r8)
 8009c44:	ffffefff 	.word	0xffffefff

08009c48 <__swrite>:
 8009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4a:	001f      	movs	r7, r3
 8009c4c:	898b      	ldrh	r3, [r1, #12]
 8009c4e:	0005      	movs	r5, r0
 8009c50:	000c      	movs	r4, r1
 8009c52:	0016      	movs	r6, r2
 8009c54:	05db      	lsls	r3, r3, #23
 8009c56:	d505      	bpl.n	8009c64 <__swrite+0x1c>
 8009c58:	230e      	movs	r3, #14
 8009c5a:	5ec9      	ldrsh	r1, [r1, r3]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	2302      	movs	r3, #2
 8009c60:	f000 f8a2 	bl	8009da8 <_lseek_r>
 8009c64:	89a3      	ldrh	r3, [r4, #12]
 8009c66:	4a05      	ldr	r2, [pc, #20]	; (8009c7c <__swrite+0x34>)
 8009c68:	0028      	movs	r0, r5
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	81a3      	strh	r3, [r4, #12]
 8009c6e:	0032      	movs	r2, r6
 8009c70:	230e      	movs	r3, #14
 8009c72:	5ee1      	ldrsh	r1, [r4, r3]
 8009c74:	003b      	movs	r3, r7
 8009c76:	f000 f81f 	bl	8009cb8 <_write_r>
 8009c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c7c:	ffffefff 	.word	0xffffefff

08009c80 <__sseek>:
 8009c80:	b570      	push	{r4, r5, r6, lr}
 8009c82:	000c      	movs	r4, r1
 8009c84:	250e      	movs	r5, #14
 8009c86:	5f49      	ldrsh	r1, [r1, r5]
 8009c88:	f000 f88e 	bl	8009da8 <_lseek_r>
 8009c8c:	89a3      	ldrh	r3, [r4, #12]
 8009c8e:	1c42      	adds	r2, r0, #1
 8009c90:	d103      	bne.n	8009c9a <__sseek+0x1a>
 8009c92:	4a05      	ldr	r2, [pc, #20]	; (8009ca8 <__sseek+0x28>)
 8009c94:	4013      	ands	r3, r2
 8009c96:	81a3      	strh	r3, [r4, #12]
 8009c98:	bd70      	pop	{r4, r5, r6, pc}
 8009c9a:	2280      	movs	r2, #128	; 0x80
 8009c9c:	0152      	lsls	r2, r2, #5
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	81a3      	strh	r3, [r4, #12]
 8009ca2:	6560      	str	r0, [r4, #84]	; 0x54
 8009ca4:	e7f8      	b.n	8009c98 <__sseek+0x18>
 8009ca6:	46c0      	nop			; (mov r8, r8)
 8009ca8:	ffffefff 	.word	0xffffefff

08009cac <__sclose>:
 8009cac:	b510      	push	{r4, lr}
 8009cae:	230e      	movs	r3, #14
 8009cb0:	5ec9      	ldrsh	r1, [r1, r3]
 8009cb2:	f000 f833 	bl	8009d1c <_close_r>
 8009cb6:	bd10      	pop	{r4, pc}

08009cb8 <_write_r>:
 8009cb8:	b570      	push	{r4, r5, r6, lr}
 8009cba:	0004      	movs	r4, r0
 8009cbc:	0008      	movs	r0, r1
 8009cbe:	0011      	movs	r1, r2
 8009cc0:	001a      	movs	r2, r3
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	4d05      	ldr	r5, [pc, #20]	; (8009cdc <_write_r+0x24>)
 8009cc6:	602b      	str	r3, [r5, #0]
 8009cc8:	f7f8 fd30 	bl	800272c <_write>
 8009ccc:	1c43      	adds	r3, r0, #1
 8009cce:	d103      	bne.n	8009cd8 <_write_r+0x20>
 8009cd0:	682b      	ldr	r3, [r5, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d000      	beq.n	8009cd8 <_write_r+0x20>
 8009cd6:	6023      	str	r3, [r4, #0]
 8009cd8:	bd70      	pop	{r4, r5, r6, pc}
 8009cda:	46c0      	nop			; (mov r8, r8)
 8009cdc:	200003b0 	.word	0x200003b0

08009ce0 <__assert_func>:
 8009ce0:	b530      	push	{r4, r5, lr}
 8009ce2:	0014      	movs	r4, r2
 8009ce4:	001a      	movs	r2, r3
 8009ce6:	4b09      	ldr	r3, [pc, #36]	; (8009d0c <__assert_func+0x2c>)
 8009ce8:	0005      	movs	r5, r0
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	b085      	sub	sp, #20
 8009cee:	68d8      	ldr	r0, [r3, #12]
 8009cf0:	4b07      	ldr	r3, [pc, #28]	; (8009d10 <__assert_func+0x30>)
 8009cf2:	2c00      	cmp	r4, #0
 8009cf4:	d101      	bne.n	8009cfa <__assert_func+0x1a>
 8009cf6:	4b07      	ldr	r3, [pc, #28]	; (8009d14 <__assert_func+0x34>)
 8009cf8:	001c      	movs	r4, r3
 8009cfa:	9301      	str	r3, [sp, #4]
 8009cfc:	9100      	str	r1, [sp, #0]
 8009cfe:	002b      	movs	r3, r5
 8009d00:	4905      	ldr	r1, [pc, #20]	; (8009d18 <__assert_func+0x38>)
 8009d02:	9402      	str	r4, [sp, #8]
 8009d04:	f000 f81c 	bl	8009d40 <fiprintf>
 8009d08:	f000 f8a5 	bl	8009e56 <abort>
 8009d0c:	2000008c 	.word	0x2000008c
 8009d10:	0800aa2d 	.word	0x0800aa2d
 8009d14:	0800aa68 	.word	0x0800aa68
 8009d18:	0800aa3a 	.word	0x0800aa3a

08009d1c <_close_r>:
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	b570      	push	{r4, r5, r6, lr}
 8009d20:	4d06      	ldr	r5, [pc, #24]	; (8009d3c <_close_r+0x20>)
 8009d22:	0004      	movs	r4, r0
 8009d24:	0008      	movs	r0, r1
 8009d26:	602b      	str	r3, [r5, #0]
 8009d28:	f7fa fa85 	bl	8004236 <_close>
 8009d2c:	1c43      	adds	r3, r0, #1
 8009d2e:	d103      	bne.n	8009d38 <_close_r+0x1c>
 8009d30:	682b      	ldr	r3, [r5, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d000      	beq.n	8009d38 <_close_r+0x1c>
 8009d36:	6023      	str	r3, [r4, #0]
 8009d38:	bd70      	pop	{r4, r5, r6, pc}
 8009d3a:	46c0      	nop			; (mov r8, r8)
 8009d3c:	200003b0 	.word	0x200003b0

08009d40 <fiprintf>:
 8009d40:	b40e      	push	{r1, r2, r3}
 8009d42:	b503      	push	{r0, r1, lr}
 8009d44:	0001      	movs	r1, r0
 8009d46:	ab03      	add	r3, sp, #12
 8009d48:	4804      	ldr	r0, [pc, #16]	; (8009d5c <fiprintf+0x1c>)
 8009d4a:	cb04      	ldmia	r3!, {r2}
 8009d4c:	6800      	ldr	r0, [r0, #0]
 8009d4e:	9301      	str	r3, [sp, #4]
 8009d50:	f7ff fe1a 	bl	8009988 <_vfiprintf_r>
 8009d54:	b002      	add	sp, #8
 8009d56:	bc08      	pop	{r3}
 8009d58:	b003      	add	sp, #12
 8009d5a:	4718      	bx	r3
 8009d5c:	2000008c 	.word	0x2000008c

08009d60 <_fstat_r>:
 8009d60:	2300      	movs	r3, #0
 8009d62:	b570      	push	{r4, r5, r6, lr}
 8009d64:	4d06      	ldr	r5, [pc, #24]	; (8009d80 <_fstat_r+0x20>)
 8009d66:	0004      	movs	r4, r0
 8009d68:	0008      	movs	r0, r1
 8009d6a:	0011      	movs	r1, r2
 8009d6c:	602b      	str	r3, [r5, #0]
 8009d6e:	f7fa fa6c 	bl	800424a <_fstat>
 8009d72:	1c43      	adds	r3, r0, #1
 8009d74:	d103      	bne.n	8009d7e <_fstat_r+0x1e>
 8009d76:	682b      	ldr	r3, [r5, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d000      	beq.n	8009d7e <_fstat_r+0x1e>
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	bd70      	pop	{r4, r5, r6, pc}
 8009d80:	200003b0 	.word	0x200003b0

08009d84 <_isatty_r>:
 8009d84:	2300      	movs	r3, #0
 8009d86:	b570      	push	{r4, r5, r6, lr}
 8009d88:	4d06      	ldr	r5, [pc, #24]	; (8009da4 <_isatty_r+0x20>)
 8009d8a:	0004      	movs	r4, r0
 8009d8c:	0008      	movs	r0, r1
 8009d8e:	602b      	str	r3, [r5, #0]
 8009d90:	f7fa fa69 	bl	8004266 <_isatty>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d103      	bne.n	8009da0 <_isatty_r+0x1c>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d000      	beq.n	8009da0 <_isatty_r+0x1c>
 8009d9e:	6023      	str	r3, [r4, #0]
 8009da0:	bd70      	pop	{r4, r5, r6, pc}
 8009da2:	46c0      	nop			; (mov r8, r8)
 8009da4:	200003b0 	.word	0x200003b0

08009da8 <_lseek_r>:
 8009da8:	b570      	push	{r4, r5, r6, lr}
 8009daa:	0004      	movs	r4, r0
 8009dac:	0008      	movs	r0, r1
 8009dae:	0011      	movs	r1, r2
 8009db0:	001a      	movs	r2, r3
 8009db2:	2300      	movs	r3, #0
 8009db4:	4d05      	ldr	r5, [pc, #20]	; (8009dcc <_lseek_r+0x24>)
 8009db6:	602b      	str	r3, [r5, #0]
 8009db8:	f7fa fa5e 	bl	8004278 <_lseek>
 8009dbc:	1c43      	adds	r3, r0, #1
 8009dbe:	d103      	bne.n	8009dc8 <_lseek_r+0x20>
 8009dc0:	682b      	ldr	r3, [r5, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d000      	beq.n	8009dc8 <_lseek_r+0x20>
 8009dc6:	6023      	str	r3, [r4, #0]
 8009dc8:	bd70      	pop	{r4, r5, r6, pc}
 8009dca:	46c0      	nop			; (mov r8, r8)
 8009dcc:	200003b0 	.word	0x200003b0

08009dd0 <__ascii_mbtowc>:
 8009dd0:	b082      	sub	sp, #8
 8009dd2:	2900      	cmp	r1, #0
 8009dd4:	d100      	bne.n	8009dd8 <__ascii_mbtowc+0x8>
 8009dd6:	a901      	add	r1, sp, #4
 8009dd8:	1e10      	subs	r0, r2, #0
 8009dda:	d006      	beq.n	8009dea <__ascii_mbtowc+0x1a>
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d006      	beq.n	8009dee <__ascii_mbtowc+0x1e>
 8009de0:	7813      	ldrb	r3, [r2, #0]
 8009de2:	600b      	str	r3, [r1, #0]
 8009de4:	7810      	ldrb	r0, [r2, #0]
 8009de6:	1e43      	subs	r3, r0, #1
 8009de8:	4198      	sbcs	r0, r3
 8009dea:	b002      	add	sp, #8
 8009dec:	4770      	bx	lr
 8009dee:	2002      	movs	r0, #2
 8009df0:	4240      	negs	r0, r0
 8009df2:	e7fa      	b.n	8009dea <__ascii_mbtowc+0x1a>

08009df4 <__malloc_lock>:
 8009df4:	b510      	push	{r4, lr}
 8009df6:	4802      	ldr	r0, [pc, #8]	; (8009e00 <__malloc_lock+0xc>)
 8009df8:	f7ff f8bd 	bl	8008f76 <__retarget_lock_acquire_recursive>
 8009dfc:	bd10      	pop	{r4, pc}
 8009dfe:	46c0      	nop			; (mov r8, r8)
 8009e00:	200003a8 	.word	0x200003a8

08009e04 <__malloc_unlock>:
 8009e04:	b510      	push	{r4, lr}
 8009e06:	4802      	ldr	r0, [pc, #8]	; (8009e10 <__malloc_unlock+0xc>)
 8009e08:	f7ff f8b6 	bl	8008f78 <__retarget_lock_release_recursive>
 8009e0c:	bd10      	pop	{r4, pc}
 8009e0e:	46c0      	nop			; (mov r8, r8)
 8009e10:	200003a8 	.word	0x200003a8

08009e14 <_read_r>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	0004      	movs	r4, r0
 8009e18:	0008      	movs	r0, r1
 8009e1a:	0011      	movs	r1, r2
 8009e1c:	001a      	movs	r2, r3
 8009e1e:	2300      	movs	r3, #0
 8009e20:	4d05      	ldr	r5, [pc, #20]	; (8009e38 <_read_r+0x24>)
 8009e22:	602b      	str	r3, [r5, #0]
 8009e24:	f7fa f9ea 	bl	80041fc <_read>
 8009e28:	1c43      	adds	r3, r0, #1
 8009e2a:	d103      	bne.n	8009e34 <_read_r+0x20>
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d000      	beq.n	8009e34 <_read_r+0x20>
 8009e32:	6023      	str	r3, [r4, #0]
 8009e34:	bd70      	pop	{r4, r5, r6, pc}
 8009e36:	46c0      	nop			; (mov r8, r8)
 8009e38:	200003b0 	.word	0x200003b0

08009e3c <__ascii_wctomb>:
 8009e3c:	0003      	movs	r3, r0
 8009e3e:	1e08      	subs	r0, r1, #0
 8009e40:	d005      	beq.n	8009e4e <__ascii_wctomb+0x12>
 8009e42:	2aff      	cmp	r2, #255	; 0xff
 8009e44:	d904      	bls.n	8009e50 <__ascii_wctomb+0x14>
 8009e46:	228a      	movs	r2, #138	; 0x8a
 8009e48:	2001      	movs	r0, #1
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	4240      	negs	r0, r0
 8009e4e:	4770      	bx	lr
 8009e50:	2001      	movs	r0, #1
 8009e52:	700a      	strb	r2, [r1, #0]
 8009e54:	e7fb      	b.n	8009e4e <__ascii_wctomb+0x12>

08009e56 <abort>:
 8009e56:	2006      	movs	r0, #6
 8009e58:	b510      	push	{r4, lr}
 8009e5a:	f000 f82d 	bl	8009eb8 <raise>
 8009e5e:	2001      	movs	r0, #1
 8009e60:	f7fa f9c0 	bl	80041e4 <_exit>

08009e64 <_raise_r>:
 8009e64:	b570      	push	{r4, r5, r6, lr}
 8009e66:	0004      	movs	r4, r0
 8009e68:	000d      	movs	r5, r1
 8009e6a:	291f      	cmp	r1, #31
 8009e6c:	d904      	bls.n	8009e78 <_raise_r+0x14>
 8009e6e:	2316      	movs	r3, #22
 8009e70:	6003      	str	r3, [r0, #0]
 8009e72:	2001      	movs	r0, #1
 8009e74:	4240      	negs	r0, r0
 8009e76:	bd70      	pop	{r4, r5, r6, pc}
 8009e78:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d004      	beq.n	8009e88 <_raise_r+0x24>
 8009e7e:	008a      	lsls	r2, r1, #2
 8009e80:	189b      	adds	r3, r3, r2
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	2a00      	cmp	r2, #0
 8009e86:	d108      	bne.n	8009e9a <_raise_r+0x36>
 8009e88:	0020      	movs	r0, r4
 8009e8a:	f000 f831 	bl	8009ef0 <_getpid_r>
 8009e8e:	002a      	movs	r2, r5
 8009e90:	0001      	movs	r1, r0
 8009e92:	0020      	movs	r0, r4
 8009e94:	f000 f81a 	bl	8009ecc <_kill_r>
 8009e98:	e7ed      	b.n	8009e76 <_raise_r+0x12>
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	2a01      	cmp	r2, #1
 8009e9e:	d0ea      	beq.n	8009e76 <_raise_r+0x12>
 8009ea0:	1c51      	adds	r1, r2, #1
 8009ea2:	d103      	bne.n	8009eac <_raise_r+0x48>
 8009ea4:	2316      	movs	r3, #22
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	e7e4      	b.n	8009e76 <_raise_r+0x12>
 8009eac:	2400      	movs	r4, #0
 8009eae:	0028      	movs	r0, r5
 8009eb0:	601c      	str	r4, [r3, #0]
 8009eb2:	4790      	blx	r2
 8009eb4:	0020      	movs	r0, r4
 8009eb6:	e7de      	b.n	8009e76 <_raise_r+0x12>

08009eb8 <raise>:
 8009eb8:	b510      	push	{r4, lr}
 8009eba:	4b03      	ldr	r3, [pc, #12]	; (8009ec8 <raise+0x10>)
 8009ebc:	0001      	movs	r1, r0
 8009ebe:	6818      	ldr	r0, [r3, #0]
 8009ec0:	f7ff ffd0 	bl	8009e64 <_raise_r>
 8009ec4:	bd10      	pop	{r4, pc}
 8009ec6:	46c0      	nop			; (mov r8, r8)
 8009ec8:	2000008c 	.word	0x2000008c

08009ecc <_kill_r>:
 8009ecc:	2300      	movs	r3, #0
 8009ece:	b570      	push	{r4, r5, r6, lr}
 8009ed0:	4d06      	ldr	r5, [pc, #24]	; (8009eec <_kill_r+0x20>)
 8009ed2:	0004      	movs	r4, r0
 8009ed4:	0008      	movs	r0, r1
 8009ed6:	0011      	movs	r1, r2
 8009ed8:	602b      	str	r3, [r5, #0]
 8009eda:	f7fa f973 	bl	80041c4 <_kill>
 8009ede:	1c43      	adds	r3, r0, #1
 8009ee0:	d103      	bne.n	8009eea <_kill_r+0x1e>
 8009ee2:	682b      	ldr	r3, [r5, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d000      	beq.n	8009eea <_kill_r+0x1e>
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	bd70      	pop	{r4, r5, r6, pc}
 8009eec:	200003b0 	.word	0x200003b0

08009ef0 <_getpid_r>:
 8009ef0:	b510      	push	{r4, lr}
 8009ef2:	f7fa f961 	bl	80041b8 <_getpid>
 8009ef6:	bd10      	pop	{r4, pc}

08009ef8 <_init>:
 8009ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efa:	46c0      	nop			; (mov r8, r8)
 8009efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009efe:	bc08      	pop	{r3}
 8009f00:	469e      	mov	lr, r3
 8009f02:	4770      	bx	lr

08009f04 <_fini>:
 8009f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f06:	46c0      	nop			; (mov r8, r8)
 8009f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f0a:	bc08      	pop	{r3}
 8009f0c:	469e      	mov	lr, r3
 8009f0e:	4770      	bx	lr
